<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="https://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0' xmlns:georss='http://www.georss.org/georss'><id>tag:blogger.com,1999:blog-5485242750509374114.archive</id><updated>2018-06-03T01:32:00.484+05:30</updated><title type='text'>Ekiras</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/archive'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/archive'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/'/><author><name>Ekansh Rastogi</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><generator version='7.00' uri='https://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-5485242750509374114.layout</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Template: Ekiras</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html&gt;
&lt;html b:version='2' class='v2' expr:dir='data:blog.languageDirection' lang='en' xml:lang='en' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
  &lt;head&gt;
    &lt;meta content='width=device-width, initial-scale=1' name='viewport'/&gt;
    &lt;meta content='width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0' name='viewport'/&gt;
    &lt;b:include data='blog' name='all-head-content'/&gt;
    &lt;link href='//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css' rel='stylesheet'/&gt;
    &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
      &lt;title&gt;
        &lt;data:blog.pageName/&gt;
        |
        &lt;data:blog.title/&gt;
      &lt;/title&gt;
      &lt;b:else/&gt;
      &lt;title&gt;
        &lt;data:blog.pageTitle/&gt;
      &lt;/title&gt;
    &lt;/b:if&gt;
    &lt;link href='http://resources.ekiras.com/css/highlighter.css' rel='stylesheet' type='text/css'/&gt;
    &lt;link href='http://resources.ekiras.com/css/markdown.css' rel='stylesheet' type='text/css'/&gt;
    &lt;link href='http://mathquill.com/mathquill/mathquill.css' rel='stylesheet' type='text/css'/&gt;
    &lt;link href='http://resources.ekiras.com/css/main.css' rel='stylesheet' type='text/css'/&gt;
    &lt;link href='http://alexgorbatchev.com/pub/sh/current/styles/shCore.css' rel='stylesheet' type='text/css'/&gt;
    &lt;link href='http://alexgorbatchev.com/pub/sh/current/styles/shThemeDefault.css' rel='stylesheet' type='text/css'/&gt;
 
   &lt;script src='http://code.jquery.com/jquery-latest.min.js' type='text/javascript'/&gt;
    &lt;script src='http://resources.ekiras.com/js/highlighter.js' type='text/javascript'/&gt;
    &lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js' type='text/javascript'/&gt;
    &lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shCore.js' type='text/javascript'/&gt;
    &lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushCss.js' type='text/javascript'/&gt;
    &lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushJava.js' type='text/javascript'/&gt;
    &lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushJScript.js' type='text/javascript'/&gt;
    &lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushSql.js' type='text/javascript'/&gt;
    &lt;script src='http://alexgorbatchev.com/pub/sh/current/scripts/shBrushXml.js' type='text/javascript'/&gt;


    &lt;link as='script' href='https://assets-cdn.github.com/assets/frameworks-74e2880351ce368d8f0a52f12a7452b422bef6397d5477d8120207ea79f0dfd9.js' rel='preload'/&gt;
    
    &lt;link as='script' href='https://assets-cdn.github.com/assets/github-3d8ac20e46fe8c8b9bfd129a2bd3d1ccc8c1677841bcd7b057328a3e0202ebaf.js' rel='preload'/&gt;


    &lt;script language='javascript'&gt;
      SyntaxHighlighter.config.bloggerMode = true;
      SyntaxHighlighter.config.clipboardSwf = &amp;#39;http://alexgorbatchev.com/pub/sh/current/scripts/clipboard.swf&amp;#39;;
      SyntaxHighlighter.all();
    &lt;/script&gt;
    &lt;b:skin&gt;&lt;![CDATA[
      

    ]]&gt;&lt;/b:skin&gt;
    &lt;b:include data='blog' name='google-analytics'/&gt;
     &lt;script async='true' src='//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js'/&gt;
&lt;script&gt;
  (adsbygoogle = window.adsbygoogle || []).push({
    google_ad_client: &amp;quot;ca-pub-8407117896138636&amp;quot;,
    enable_page_level_ads: true
  });
&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js'/&gt;
    &lt;script src='//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js'/&gt;
    &lt;div class='container-fluid'&gt;
      &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
        &lt;div itemscope='itemscope' itemtype='http://schema.org/Blog' style='display: none;'&gt;
          &lt;meta expr:content='data:blog.title' itemprop='name'/&gt;
          &lt;b:if cond='data:blog.metaDescription'&gt;
            &lt;meta expr:content='data:blog.metaDescription' itemprop='description'/&gt;
          &lt;/b:if&gt;
        &lt;/div&gt;
      &lt;/b:if&gt;
      &lt;!-- HEADER START HERE --&gt;
      &lt;header&gt;
        &lt;div class='row'&gt;
          &lt;div class='header' id='header'&gt;
            &lt;div class='container'&gt;
              &lt;div class='logo-container'&gt;
                &lt;a class='logo slow' href='http://ekiras.blogspot.com'&gt;
                  EkiRas
                &lt;/a&gt;
              &lt;/div&gt;
              &lt;div class='pull-left hidden-xs hidden-sm'&gt;
                &lt;div class='tabs-outer'&gt;
                  &lt;div class='tabs-cap-top cap-top'&gt;
                    &lt;div class='cap-left'/&gt;
                    &lt;div class='cap-right'/&gt;
                  &lt;/div&gt;
                  &lt;div class='fauxborder-left tabs-fauxborder-left'&gt;
                    &lt;div class='fauxborder-right tabs-fauxborder-right'/&gt;
                    &lt;div class='region-inner tabs-inner'&gt;
                      &lt;b:section class='tabs' id='crosscol' maxwidgets='1' showaddelement='yes'&gt;
                        &lt;b:widget id='AdSense1' locked='false' title='' type='AdSense' version='1'&gt;
                          &lt;b:widget-settings&gt;
                            &lt;b:widget-setting name='style.bgcolor'&gt;#ffffff&lt;/b:widget-setting&gt;
                            &lt;b:widget-setting name='style.textcolor'&gt;#000000&lt;/b:widget-setting&gt;
                            &lt;b:widget-setting name='style.layout'&gt;728x90&lt;/b:widget-setting&gt;
                            &lt;b:widget-setting name='style.bordercolor'&gt;#ffffff&lt;/b:widget-setting&gt;
                            &lt;b:widget-setting name='style.urlcolor'&gt;#008000&lt;/b:widget-setting&gt;
                            &lt;b:widget-setting name='style.linkcolor'&gt;#0000ff&lt;/b:widget-setting&gt;
                            &lt;b:widget-setting name='style.unittype'&gt;TextAndImage&lt;/b:widget-setting&gt;
                          &lt;/b:widget-settings&gt;
                          &lt;b:includable id='main'&gt;
                            &lt;div class='widget-content'&gt;
                              &lt;data:adCode/&gt;
                              &lt;b:include name='quickedit'/&gt;
                            &lt;/div&gt;
                          &lt;/b:includable&gt;
                        &lt;/b:widget&gt;
                      &lt;/b:section&gt;
                      &lt;b:section class='tabs' id='crosscol-overflow' showaddelement='no'/&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class='tabs-cap-bottom cap-bottom'&gt;
                    &lt;div class='cap-left'/&gt;
                    &lt;div class='cap-right'/&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/header&gt;
      &lt;div class='row'&gt;
        &lt;!-- NAVIGATION START HERE --&gt;
        &lt;div class='header-nav'&gt;
          &lt;div class='container'&gt;
            &lt;div class='wrapper'&gt;
              &lt;ul class='nav'&gt;
                &lt;li&gt;
                  &lt;a href='http://ekiras.blogspot.in/p/java.html'&gt;
                    Java
                  &lt;/a&gt;
                  &lt;ul class=''&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/java-concepts.html'&gt;
                        Java
                        Concepts
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://www.ekiras.com/p/java-exceptions.html'&gt;
                        Exception
                        Handling
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/java-threads.html'&gt;
                        Threads
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/java-collection-api.html'&gt;
                        Collections
                        API
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/java-reflection-api.html'&gt;
                        Reflection
                        API
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/java-programs.html'&gt;
                        Java
                        Programs
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/java-j2ee.html'&gt;
                        J2EE
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/java-interview-questions.html'&gt;
                        Interview
                        Questions 
                      &lt;/a&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href='http://www.ekiras.com/p/spring-boot.html'&gt;
                    Spring Boot
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href='http://ekiras.blogspot.in/p/databases.html'&gt;
                    Database
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href='http://ekiras.blogspot.in/p/database.html'&gt;
                    Tests
                  &lt;/a&gt;
                  &lt;ul class=''&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/tests-java.html'&gt;
                        Java
                      &lt;/a&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href='#'&gt;
                    Security
                  &lt;/a&gt;
                  &lt;ul class=''&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/spring-security.html'&gt;
                        Spring
                        Security
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/central-authentication-service.html'&gt;
                        CAS
                      &lt;/a&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href='#'&gt;
                    Frameworks
                  &lt;/a&gt;
                  &lt;ul class=''&gt;
                    &lt;li&gt;
                      &lt;a href='http://www.ekiras.com/p/spring.html'&gt;
                        Spring
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://www.ekiras.com/p/hibernate.html'&gt;
                        Hibernate
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://www.ekiras.com/p/grails.html'&gt;
                        Grails
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://www.ekiras.com/p/gradle.html'&gt;
                        Gradle
                      &lt;/a&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href='#'&gt;
                    Aptitude
                  &lt;/a&gt;
                  &lt;ul class=''&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/quantitative-aptitude.html'&gt;
                        Quantitative
                        Aptitude
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/logical-reasoning.html'&gt;
                        Logical
                        Reasoning
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/data-interpretation.html'&gt;
                        Data
                        Interpretation
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/verbal-reasoning.html'&gt;
                        Verbal
                        Ability
                      &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;a href='http://ekiras.blogspot.in/p/reading-comprehension.html'&gt;
                        Reading
                        Comprehension
                      &lt;/a&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;!-- NAVIGATION ENDS HERE --&gt;
      &lt;/div&gt;
      &lt;!-- HEADER ENDS HERE --&gt;
    &lt;/div&gt;
    &lt;!-- BLOG WRAPPER STARTS HERE --&gt;
    &lt;div class='container'&gt;
      &lt;div class='row'&gt;
        &lt;div class='hidden-lg hidden-xs'&gt;
          &lt;script async='async' src='//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js'/&gt;
          &lt;!-- 723x90 --&gt;
          &lt;ins class='adsbygoogle' data-ad-client='ca-pub-8407117896138636' data-ad-slot='4692606103' style='display: inline-block; width: 728px; height: 90px'/&gt;
          &lt;script&gt;
            (adsbygoogle = window.adsbygoogle || []).push({});
          &lt;/script&gt;
        &lt;/div&gt;
        &lt;div class='col-lg-8 col-md-8 col-sm-8 col-xs-12'&gt;
          &lt;div class='hidden-lg hidden-md hidden-ms'&gt;
            &lt;script async='async' src='//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js'/&gt;
            &lt;!-- mobile banner --&gt;
            &lt;ins class='adsbygoogle' data-ad-client='ca-pub-8407117896138636' data-ad-slot='5933836908' style='display:inline-block;width:320px;height:100px'/&gt;
            &lt;script&gt;
              (adsbygoogle = window.adsbygoogle || []).push({});
            &lt;/script&gt;
          &lt;/div&gt;
          &lt;!--  MAIN CONTENT  DIV STARTS HERE --&gt;
          &lt;div class='content' id='content'&gt;
            &lt;b:section class='main' id='main' showaddelement='no'&gt;
              &lt;b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog' version='1'&gt;
                &lt;b:widget-settings&gt;
                  &lt;b:widget-setting name='showDateHeader'&gt;true&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='style.textcolor'&gt;#222222&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showShareButtons'&gt;false&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showCommentLink'&gt;true&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='style.urlcolor'&gt;#666666&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showAuthor'&gt;true&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='style.linkcolor'&gt;#cc6611&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='style.unittype'&gt;TextAndImage&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='style.bgcolor'&gt;#ffffff&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showAuthorProfile'&gt;false&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='style.layout'&gt;300x250&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showLabels'&gt;true&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showLocation'&gt;true&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showTimestamp'&gt;true&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='postsPerAd'&gt;10&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showBacklinks'&gt;false&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='style.bordercolor'&gt;#ffffff&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showInlineAds'&gt;true&lt;/b:widget-setting&gt;
                  &lt;b:widget-setting name='showReactions'&gt;false&lt;/b:widget-setting&gt;
                &lt;/b:widget-settings&gt;
                &lt;b:includable id='main' var='top'&gt;
                  &lt;b:if cond='data:mobile == &amp;quot;false&amp;quot;'&gt;
                    &lt;!-- posts --&gt;
                    &lt;div class='blog-posts hfeed'&gt;
                      &lt;b:include data='top' name='status-message'/&gt;
                      &lt;data:defaultAdStart/&gt;
                      &lt;b:loop values='data:posts' var='post'&gt;
                        &lt;b:if cond='data:post.isDateStart'&gt;
                          &lt;b:if cond='data:post.isFirstPost == &amp;quot;false&amp;quot;'&gt;
                            &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
                          &lt;/b:if&gt;
                        &lt;/b:if&gt;
                        &lt;b:if cond='data:post.isDateStart'&gt;
                          &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
                        &lt;/b:if&gt;
                        &lt;b:if cond='data:post.isDateStart'&gt;
                          &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
                        &lt;/b:if&gt;
                        &lt;div class='post-outer'&gt;
                          &lt;b:include data='post' name='post'/&gt;
                          &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
                            &lt;b:include data='post' name='comment_picker'/&gt;
                          &lt;/b:if&gt;
                          &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
                            &lt;b:include data='post' name='comment_picker'/&gt;
                          &lt;/b:if&gt;
                        &lt;/div&gt;
                        &lt;b:if cond='data:post.includeAd'&gt;
                          &lt;b:if cond='data:post.isFirstPost'&gt;
                            &lt;data:defaultAdEnd/&gt;
                            &lt;b:else/&gt;
                            &lt;data:adEnd/&gt;
                          &lt;/b:if&gt;
                          &lt;div class='inline-ad'&gt;
                            &lt;data:adCode/&gt;
                          &lt;/div&gt;
                          &lt;data:adStart/&gt;
                        &lt;/b:if&gt;
                      &lt;/b:loop&gt;
                      &lt;b:if cond='data:numPosts != 0'&gt;
                        &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
                      &lt;/b:if&gt;
                      &lt;data:adEnd/&gt;
                    &lt;/div&gt;
                    &lt;!-- navigation --&gt;
                    &lt;b:include name='nextprev'/&gt;
                    &lt;!-- feed links --&gt;
                    &lt;b:include name='feedLinks'/&gt;
                    &lt;b:if cond='data:top.showStars'&gt;
                      &lt;script src='//www.google.com/jsapi' type='text/javascript'/&gt;
                      &lt;script type='text/javascript'&gt;
                        google.load(&amp;quot;annotations&amp;quot;, &amp;quot;1&amp;quot;, {&amp;quot;locale&amp;quot;: &amp;quot;&lt;data:top.languageCode/&gt;&amp;quot;});
                        function initialize() {
                          google.annotations.setApplicationId(&lt;data:top.blogspotReviews/&gt;);
                          google.annotations.createAll();
                          google.annotations.fetch();
                        }
                        google.setOnLoadCallback(initialize);
                      &lt;/script&gt;
                    &lt;/b:if&gt;
                    &lt;b:else/&gt;
                    &lt;b:include name='mobile-main'/&gt;
                  &lt;/b:if&gt;
                  &lt;b:if cond='data:top.showDummy'&gt;
                    &lt;data:top.dummyBootstrap/&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
                  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
                    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
                      &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
                    &lt;/a&gt;
                  &lt;/span&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='backlinks' var='post'&gt;
                  &lt;a name='links'/&gt;
                  &lt;h4&gt;
                    &lt;data:post.backlinksLabel/&gt;
                  &lt;/h4&gt;
                  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
                    &lt;dl class='comments-block' id='comments-block'&gt;
                      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
                        &lt;div class='collapsed-backlink backlink-control'&gt;
                          &lt;dt class='comment-title'&gt;
                            &lt;span class='backlink-toggle-zippy'&gt;
                              &amp;#160;
                            &lt;/span&gt;
                            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;
                              &lt;data:backlink.title/&gt;
                            &lt;/a&gt;
                            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
                          &lt;/dt&gt;
                          &lt;dd class='comment-body collapseable'&gt;
                            &lt;data:backlink.snippet/&gt;
                          &lt;/dd&gt;
                          &lt;dd class='comment-footer collapseable'&gt;
                            &lt;span class='comment-author'&gt;
                              &lt;data:post.authorLabel/&gt;
                              &lt;data:backlink.author/&gt;
                            &lt;/span&gt;
                            &lt;span class='comment-timestamp'&gt;
                              &lt;data:post.timestampLabel/&gt;
                              &lt;data:backlink.timestamp/&gt;
                            &lt;/span&gt;
                          &lt;/dd&gt;
                        &lt;/div&gt;
                      &lt;/b:loop&gt;
                    &lt;/dl&gt;
                  &lt;/b:if&gt;
                  &lt;p class='comment-footer'&gt;
                    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;
                      &lt;data:post.createLinkLabel/&gt;
                    &lt;/a&gt;
                  &lt;/p&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='comment-form' var='post'&gt;
                  &lt;div class='comment-form'&gt;
                    &lt;a name='comment-form'/&gt;
                    &lt;b:if cond='data:mobile'&gt;
                      &lt;h4 id='comment-post-message'&gt;
                        &lt;a expr:id='data:widget.instanceId + &amp;quot;_comment-editor-toggle-link&amp;quot;' href='javascript:void(0)'&gt;
                          &lt;data:postCommentMsg/&gt;
                        &lt;/a&gt;
                      &lt;/h4&gt;
                      &lt;p&gt;
                        &lt;data:blogCommentMessage/&gt;
                      &lt;/p&gt;
                      &lt;data:blogTeamBlogMessage/&gt;
                      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
                      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
                      &lt;b:else/&gt;
                      &lt;h4 id='comment-post-message'&gt;
                        &lt;data:postCommentMsg/&gt;
                      &lt;/h4&gt;
                      &lt;p&gt;
                        &lt;data:blogCommentMessage/&gt;
                      &lt;/p&gt;
                      &lt;data:blogTeamBlogMessage/&gt;
                      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
                      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
                    &lt;/b:if&gt;
                    &lt;data:post.friendConnectJs/&gt;
                    &lt;data:post.cmtfpIframe/&gt;
                    &lt;script type='text/javascript'&gt;
                      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
                    &lt;/script&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='commentDeleteIcon' var='comment'&gt;
                  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
                    &lt;b:if cond='data:showCmtPopup'&gt;
                      &lt;div class='goog-toggle-button'&gt;
                        &lt;div class='goog-inline-block comment-action-icon'/&gt;
                      &lt;/div&gt;
                      &lt;b:else/&gt;
                      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
                        &lt;img src='//www.blogger.com/img/icon_delete13.gif'/&gt;
                      &lt;/a&gt;
                    &lt;/b:if&gt;
                  &lt;/span&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='comment_count_picker' var='post'&gt;
                  &lt;b:if cond='data:post.commentSource == 1'&gt;
                    &lt;span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.canonicalUrl'&gt;
                    &lt;/span&gt;
                    &lt;b:else/&gt;
                    &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
                      &lt;data:post.commentLabelFull/&gt;
                      :
                    &lt;/a&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='comment_picker' var='post'&gt;
                  &lt;b:if cond='data:post.commentSource == 1'&gt;
                    &lt;b:include data='post' name='iframe_comments'/&gt;
                    &lt;b:else/&gt;
                    &lt;b:if cond='data:post.showThreadedComments'&gt;
                      &lt;b:include data='post' name='threaded_comments'/&gt;
                      &lt;b:else/&gt;
                      &lt;b:include data='post' name='comments'/&gt;
                    &lt;/b:if&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='comments' var='post'&gt;
                  &lt;div class='comments' id='comments'&gt;
                    &lt;a name='comments'/&gt;
                    &lt;b:if cond='data:post.allowComments'&gt;
                      &lt;h4&gt;
                        &lt;data:post.commentLabelFull/&gt;
                        :
                      &lt;/h4&gt;
                      &lt;b:if cond='data:post.commentPagingRequired'&gt;
                        &lt;span class='paging-control-container'&gt;
                          &lt;b:if cond='data:post.hasOlderLinks'&gt;
                            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
                              &lt;data:post.oldestLinkText/&gt;
                            &lt;/a&gt;
                            &amp;#160;
                            &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
                              &lt;data:post.olderLinkText/&gt;
                            &lt;/a&gt;
                            &amp;#160;
                          &lt;/b:if&gt;
                          &lt;data:post.commentRangeText/&gt;
                          &lt;b:if cond='data:post.hasNewerLinks'&gt;
                            &amp;#160;
                            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
                              &lt;data:post.newerLinkText/&gt;
                            &lt;/a&gt;
                            &amp;#160;
                            &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
                              &lt;data:post.newestLinkText/&gt;
                            &lt;/a&gt;
                          &lt;/b:if&gt;
                        &lt;/span&gt;
                      &lt;/b:if&gt;
                      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
                        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
                          &lt;b:loop values='data:post.comments' var='comment'&gt;
                            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
                              &lt;b:if cond='data:comment.favicon'&gt;
                                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom: -2px;' width='16px'/&gt;
                              &lt;/b:if&gt;
                              &lt;a expr:name='data:comment.anchorName'/&gt;
                              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                                &lt;data:comment.authorAvatarImage/&gt;
                              &lt;/b:if&gt;
                              &lt;b:if cond='data:comment.authorUrl'&gt;
                                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;
                                  &lt;data:comment.author/&gt;
                                &lt;/a&gt;
                                &lt;b:else/&gt;
                                &lt;data:comment.author/&gt;
                              &lt;/b:if&gt;
                              &lt;data:commentPostedByMsg/&gt;
                            &lt;/dt&gt;
                            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
                              &lt;b:if cond='data:comment.isDeleted'&gt;
                                &lt;span class='deleted-comment'&gt;
                                  &lt;data:comment.body/&gt;
                                &lt;/span&gt;
                                &lt;b:else/&gt;
                                &lt;p&gt;
                                  &lt;data:comment.body/&gt;
                                &lt;/p&gt;
                              &lt;/b:if&gt;
                            &lt;/dd&gt;
                            &lt;dd class='comment-footer'&gt;
                              &lt;span class='comment-timestamp'&gt;
                                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                                  &lt;data:comment.timestamp/&gt;
                                &lt;/a&gt;
                                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
                              &lt;/span&gt;
                            &lt;/dd&gt;
                          &lt;/b:loop&gt;
                        &lt;/dl&gt;
                      &lt;/div&gt;
                      &lt;b:if cond='data:post.commentPagingRequired'&gt;
                        &lt;span class='paging-control-container'&gt;
                          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
                            &lt;data:post.oldestLinkText/&gt;
                          &lt;/a&gt;
                          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
                            &lt;data:post.olderLinkText/&gt;
                          &lt;/a&gt;
                          &amp;#160; 
                          &lt;data:post.commentRangeText/&gt;
                          &amp;#160; 
                          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
                            &lt;data:post.newerLinkText/&gt;
                          &lt;/a&gt;
                          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
                            &lt;data:post.newestLinkText/&gt;
                          &lt;/a&gt;
                        &lt;/span&gt;
                      &lt;/b:if&gt;
                      &lt;p class='comment-footer'&gt;
                        &lt;b:if cond='data:post.embedCommentForm'&gt;
                          &lt;b:if cond='data:post.allowNewComments'&gt;
                            &lt;b:include data='post' name='comment-form'/&gt;
                            &lt;b:else/&gt;
                            &lt;data:post.noNewCommentsText/&gt;
                          &lt;/b:if&gt;
                          &lt;b:else/&gt;
                          &lt;b:if cond='data:post.allowComments'&gt;
                            &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
                              &lt;data:postCommentMsg/&gt;
                            &lt;/a&gt;
                          &lt;/b:if&gt;
                        &lt;/b:if&gt;
                      &lt;/p&gt;
                    &lt;/b:if&gt;
                    &lt;b:if cond='data:showCmtPopup'&gt;
                      &lt;div id='comment-popup'&gt;
                        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
                        &lt;/iframe&gt;
                      &lt;/div&gt;
                    &lt;/b:if&gt;
                    &lt;div id='backlinks-container'&gt;
                      &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
                        &lt;b:if cond='data:post.showBacklinks'&gt;
                          &lt;b:include data='post' name='backlinks'/&gt;
                        &lt;/b:if&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='feedLinks'&gt;
                  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                    &lt;!-- Blog feed links --&gt;
                    &lt;b:if cond='data:feedLinks'&gt;
                      &lt;div class='blog-feeds'&gt;
                        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
                      &lt;/div&gt;
                    &lt;/b:if&gt;
                    &lt;b:else/&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='feedLinksBody' var='links'&gt;
                  &lt;div class='feed-links'&gt;
                    &lt;data:feedLinksMsg/&gt;
                    &lt;b:loop values='data:links' var='f'&gt;
                      &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;
                        &lt;data:f.name/&gt;
                        (
                        &lt;data:f.feedType/&gt;
                        )
                      &lt;/a&gt;
                    &lt;/b:loop&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='iframe_comments' var='post'&gt;
                  &lt;b:if cond='data:post.allowIframeComments'&gt;
                    &lt;script expr:src='data:post.iframeCommentSrc' type='text/javascript'/&gt;
                    &lt;div class='cmt_iframe_holder' expr:data-href='data:post.canonicalUrl' expr:data-viewtype='data:post.viewType'/&gt;
                    &lt;b:if cond='data:post.embedCommentForm == &amp;quot;false&amp;quot;'&gt;
                      &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
                        &lt;data:postCommentMsg/&gt;
                      &lt;/a&gt;
                    &lt;/b:if&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='mobile-index-post' var='post'&gt;
                  &lt;div class='mobile-date-outer date-outer'&gt;
                    &lt;b:if cond='data:post.dateHeader'&gt;
                      &lt;div class='date-header'&gt;
                        &lt;span&gt;
                          &lt;data:post.dateHeader/&gt;
                        &lt;/span&gt;
                      &lt;/div&gt;
                    &lt;/b:if&gt;
                    &lt;div class='mobile-post-outer'&gt;
                      &lt;a expr:href='data:post.url'&gt;
                        &lt;h3 class='mobile-index-title entry-title' itemprop='name'&gt;
                          &lt;data:post.title/&gt;
                        &lt;/h3&gt;
                        &lt;div class='mobile-index-arrow'&gt;
                          &amp;amp;rsaquo;
                        &lt;/div&gt;
                        &lt;div class='mobile-index-contents'&gt;
                          &lt;b:if cond='data:post.thumbnailUrl'&gt;
                            &lt;div class='mobile-index-thumbnail'&gt;
                              &lt;div class='Image'&gt;
                                &lt;img expr:src='data:post.thumbnailUrl'/&gt;
                              &lt;/div&gt;
                            &lt;/div&gt;
                          &lt;/b:if&gt;
                          &lt;div class='post-body'&gt;
                            &lt;b:if cond='data:post.snippet'&gt;
                              &lt;data:post.snippet/&gt;
                            &lt;/b:if&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div style='clear: both;'/&gt;
                      &lt;/a&gt;
                      &lt;div class='mobile-index-comment'&gt;
                        &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                          &lt;b:if cond='data:post.allowComments'&gt;
                            &lt;b:if cond='data:post.numComments != 0'&gt;
                              &lt;b:include data='post' name='comment_count_picker'/&gt;
                            &lt;/b:if&gt;
                          &lt;/b:if&gt;
                        &lt;/b:if&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='mobile-main' var='top'&gt;
                  &lt;!-- posts --&gt;
                  &lt;div class='blog-posts hfeed'&gt;
                    &lt;b:include data='top' name='status-message'/&gt;
                    &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
                      &lt;b:loop values='data:posts' var='post'&gt;
                        &lt;b:include data='post' name='mobile-index-post'/&gt;
                      &lt;/b:loop&gt;
                      &lt;b:else/&gt;
                      &lt;b:loop values='data:posts' var='post'&gt;
                        &lt;b:include data='post' name='mobile-post'/&gt;
                      &lt;/b:loop&gt;
                    &lt;/b:if&gt;
                  &lt;/div&gt;
                  &lt;b:include name='mobile-nextprev'/&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='mobile-nextprev'&gt;
                  &lt;div class='clear'/&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='mobile-post' var='post'&gt;
                  &lt;div class='date-outer'&gt;
                    &lt;b:if cond='data:post.dateHeader'&gt;
                      &lt;h2 class='date-header'&gt;
                        &lt;span&gt;
                          &lt;data:post.dateHeader/&gt;
                        &lt;/span&gt;
                      &lt;/h2&gt;
                    &lt;/b:if&gt;
                    &lt;div class='date-posts'&gt;
                      &lt;div class='post-outer'&gt;
                        &lt;div class='post hentry uncustomized-post-template' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
                          &lt;b:if cond='data:post.thumbnailUrl'&gt;
                            &lt;meta expr:content='data:post.thumbnailUrl' itemprop='image_url'/&gt;
                          &lt;/b:if&gt;
                          &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
                          &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;
                          &lt;a expr:name='data:post.id'/&gt;
                          &lt;b:if cond='data:post.title'&gt;
                            &lt;h3 class='post-title entry-title' itemprop='name'&gt;
                              &lt;b:if cond='data:post.link'&gt;
                                &lt;a expr:href='data:post.link'&gt;
                                  &lt;data:post.title/&gt;
                                &lt;/a&gt;
                                &lt;b:else/&gt;
                                &lt;b:if cond='data:post.url'&gt;
                                  &lt;b:if cond='data:blog.url != data:post.url'&gt;
                                    &lt;a expr:href='data:post.url'&gt;
                                      &lt;data:post.title/&gt;
                                    &lt;/a&gt;
                                    &lt;b:else/&gt;
                                    &lt;data:post.title/&gt;
                                  &lt;/b:if&gt;
                                  &lt;b:else/&gt;
                                  &lt;data:post.title/&gt;
                                &lt;/b:if&gt;
                              &lt;/b:if&gt;
                            &lt;/h3&gt;
                          &lt;/b:if&gt;
                          &lt;div class='post-header'&gt;
                            &lt;div class='post-header-line-1'/&gt;
                          &lt;/div&gt;
                          &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='articleBody'&gt;
                            &lt;data:post.body/&gt;
                            &lt;div style='clear: both;'/&gt;
                            &lt;!-- clear for photos floats --&gt;
                          &lt;/div&gt;
                          &lt;div class='post-footer'&gt;
                            &lt;div class='post-footer-line post-footer-line-1'&gt;
                              &lt;span class='post-author vcard'&gt;
                                &lt;b:if cond='data:top.showAuthor'&gt;
                                  &lt;b:if cond='data:post.authorProfileUrl'&gt;
                                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                                      &lt;meta expr:content='data:post.authorProfileUrl' itemprop='url'/&gt;
                                      &lt;a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                                        &lt;span itemprop='name'&gt;
                                          &lt;data:post.author/&gt;
                                        &lt;/span&gt;
                                      &lt;/a&gt;
                                    &lt;/span&gt;
                                    &lt;b:else/&gt;
                                    &lt;span class='fn' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                                      &lt;span itemprop='name'&gt;
                                        &lt;data:post.author/&gt;
                                      &lt;/span&gt;
                                    &lt;/span&gt;
                                  &lt;/b:if&gt;
                                &lt;/b:if&gt;
                              &lt;/span&gt;
                              &lt;span class='post-timestamp'&gt;
                                &lt;b:if cond='data:top.showTimestamp'&gt;
                                  &lt;data:top.timestampLabel/&gt;
                                  &lt;b:if cond='data:post.url'&gt;
                                    &lt;meta expr:content='data:post.canonicalUrl' itemprop='url'/&gt;
                                    &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;
                                      &lt;abbr class='published' expr:title='data:post.timestampISO8601' itemprop='datePublished'&gt;
                                        &lt;data:post.timestamp/&gt;
                                      &lt;/abbr&gt;
                                    &lt;/a&gt;
                                  &lt;/b:if&gt;
                                &lt;/b:if&gt;
                              &lt;/span&gt;
                              &lt;span class='post-comment-link'&gt;
                                &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                                  &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                                    &lt;b:if cond='data:post.allowComments'&gt;
                                      &lt;b:include data='post' name='comment_count_picker'/&gt;
                                    &lt;/b:if&gt;
                                  &lt;/b:if&gt;
                                &lt;/b:if&gt;
                              &lt;/span&gt;
                            &lt;/div&gt;
                            &lt;div class='post-footer-line post-footer-line-2'&gt;
                              &lt;b:if cond='data:top.showMobileShare'&gt;
                                &lt;div class='mobile-link-button goog-inline-block' id='mobile-share-button'&gt;
                                  &lt;a href='javascript:void(0);'&gt;
                                    &lt;data:shareMsg/&gt;
                                  &lt;/a&gt;
                                &lt;/div&gt;
                              &lt;/b:if&gt;
                              &lt;b:if cond='data:top.showDummy'&gt;
                                &lt;div class='goog-inline-block dummy-container'&gt;
                                  &lt;data:post.dummyTag/&gt;
                                &lt;/div&gt;
                              &lt;/b:if&gt;
                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
                          &lt;b:include data='post' name='comment_picker'/&gt;
                        &lt;/b:if&gt;
                        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
                          &lt;b:include data='post' name='comment_picker'/&gt;
                        &lt;/b:if&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='nextprev'&gt;
                  &lt;div class='clear'/&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='post' var='post'&gt;
                  &lt;div class='post hentry uncustomized-post-template' itemprop='blogPost' itemscope='itemscope' itemtype='http://schema.org/BlogPosting'&gt;
                    &lt;b:if cond='data:post.firstImageUrl'&gt;
                      &lt;meta expr:content='data:post.firstImageUrl' itemprop='image_url'/&gt;
                    &lt;/b:if&gt;
                    &lt;!--  POST TITLE STARTS HERE  --&gt;
                    &lt;meta expr:content='data:blog.blogId' itemprop='blogId'/&gt;
                    &lt;meta expr:content='data:post.id' itemprop='postId'/&gt;
                    &lt;a expr:name='data:post.id'/&gt;
                    &lt;b:if cond='data:post.title'&gt;
                      &lt;div class='well well-lg flat title' itemprop='name'&gt;
                        &lt;b:if cond='data:post.link'&gt;
                          &lt;a expr:href='data:post.link'&gt;
                            &lt;data:post.title/&gt;
                          &lt;/a&gt;
                          &lt;b:else/&gt;
                          &lt;b:if cond='data:post.url'&gt;
                            &lt;b:if cond='data:blog.url != data:post.url'&gt;
                              &lt;a expr:href='data:post.url'&gt;
                                &lt;data:post.title/&gt;
                              &lt;/a&gt;
                              &lt;b:else/&gt;
                              &lt;data:post.title/&gt;
                            &lt;/b:if&gt;
                            &lt;b:else/&gt;
                            &lt;data:post.title/&gt;
                          &lt;/b:if&gt;
                        &lt;/b:if&gt;
                      &lt;/div&gt;
                    &lt;/b:if&gt;
                    &lt;!--  POST TITLE ENDS HERE  --&gt;
                    &lt;b:if cond='data:blog.metaDescription == &amp;quot;&amp;quot;'&gt;
                      &lt;!-- Then use the post body as the schema.org description,
for good G+/FB snippeting. --&gt;
                      &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='description articleBody'&gt;
                        &lt;data:post.body/&gt;
                        &lt;div style='clear: both;'/&gt;
                        &lt;!-- clear for photos floats --&gt;
                      &lt;/div&gt;
                      &lt;b:else/&gt;
                      &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id' itemprop='articleBody'&gt;
                        &lt;data:post.body/&gt;
                        &lt;div style='clear: both;'/&gt;
                        &lt;!-- clear for photos floats --&gt;
                      &lt;/div&gt;
                    &lt;/b:if&gt;
                    &lt;b:if cond='data:post.hasJumpLink'&gt;
                      &lt;div class='jump-link'&gt;
                        &lt;a expr:href='data:post.url + &amp;quot;#more&amp;quot;' expr:title='data:post.title'&gt;
                          &lt;data:post.jumpText/&gt;
                        &lt;/a&gt;
                      &lt;/div&gt;
                    &lt;/b:if&gt;
                    &lt;div class='hidden'&gt;
                      &lt;div class='post-footer-line post-footer-line-1'&gt;
                        &lt;span class='post-comment-link'&gt;
                          &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                            &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                              &lt;b:if cond='data:post.allowComments'&gt;
                                &lt;b:include data='post' name='comment_count_picker'/&gt;
                              &lt;/b:if&gt;
                            &lt;/b:if&gt;
                          &lt;/b:if&gt;
                        &lt;/span&gt;
                        &lt;!-- backlinks --&gt;
                        &lt;span class='post-backlinks post-comment-link'&gt;
                          &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                            &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                              &lt;b:if cond='data:post.showBacklinks'&gt;
                                &lt;a class='comment-link' expr:href='data:post.url + &amp;quot;#links&amp;quot;'&gt;
                                  &lt;data:top.backlinkLabel/&gt;
                                &lt;/a&gt;
                              &lt;/b:if&gt;
                            &lt;/b:if&gt;
                          &lt;/b:if&gt;
                        &lt;/span&gt;
                        &lt;span class='post-icons'&gt;
                          &lt;!-- email post links --&gt; 
                          &lt;b:if cond='data:post.emailPostUrl'&gt;
                            &lt;span class='item-action'&gt;
                              &lt;a expr:href='data:post.emailPostUrl' expr:title='data:top.emailPostMsg'&gt;
                                &lt;img alt='' class='icon-action' height='13' src='http://img1.blogblog.com/img/icon18_email.gif' width='18'/&gt;
                              &lt;/a&gt;
                            &lt;/span&gt;
                          &lt;/b:if&gt;
                          &lt;!-- quickedit pencil --&gt; 
                          &lt;b:include data='post' name='postQuickEdit'/&gt;
                        &lt;/span&gt;
                        &lt;!-- share buttons --&gt;
                        &lt;div class='post-share-buttons goog-inline-block'&gt;
                          &lt;b:if cond='data:post.sharePostUrl'&gt;
                            &lt;b:include data='post' name='shareButtons'/&gt;
                          &lt;/b:if&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                      &lt;div class='post-footer-line post-footer-line-2'&gt;
                        &lt;span class='post-labels'&gt;
                          &lt;b:if cond='data:post.labels'&gt;
                            &lt;data:postLabelsLabel/&gt;
                            &lt;b:loop values='data:post.labels' var='label'&gt;
                              &lt;a expr:href='data:label.url' rel='tag'&gt;
                                &lt;data:label.name/&gt;
                              &lt;/a&gt;
                              &lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;
                                ,
                              &lt;/b:if&gt;
                            &lt;/b:loop&gt;
                          &lt;/b:if&gt;
                        &lt;/span&gt;
                      &lt;/div&gt;
                      &lt;b:if cond='data:post.authorAboutMe'&gt;
                        &lt;div class='author-profile' itemprop='author' itemscope='itemscope' itemtype='http://schema.org/Person'&gt;
                          &lt;b:if cond='data:post.authorPhoto.url'&gt;
                            &lt;img expr:src='data:post.authorPhoto.url' itemprop='image' width='50px'/&gt;
                          &lt;/b:if&gt;
                          &lt;div&gt;
                            &lt;a class='g-profile' expr:href='data:post.authorProfileUrl' itemprop='url' rel='author' title='author profile'&gt;
                              &lt;span itemprop='name'&gt;
                                &lt;data:post.author/&gt;
                              &lt;/span&gt;
                            &lt;/a&gt;
                          &lt;/div&gt;
                          &lt;span itemprop='description'&gt;
                            &lt;data:post.authorAboutMe/&gt;
                          &lt;/span&gt;
                        &lt;/div&gt;
                      &lt;/b:if&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='postQuickEdit' var='post'&gt;
                  &lt;b:if cond='data:post.editUrl'&gt;
                    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
                      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
                        &lt;img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
                      &lt;/a&gt;
                    &lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='shareButtons' var='post'&gt;
                  &lt;b:if cond='data:top.showEmailButton'&gt;
                    &lt;a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;
                      &lt;span class='share-button-link-text'&gt;
                        &lt;data:top.emailThisMsg/&gt;
                      &lt;/span&gt;
                    &lt;/a&gt;
                  &lt;/b:if&gt;
                  &lt;b:if cond='data:top.showBlogThisButton'&gt;
                    &lt;a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;
                      &lt;span class='share-button-link-text'&gt;
                        &lt;data:top.blogThisMsg/&gt;
                      &lt;/span&gt;
                    &lt;/a&gt;
                  &lt;/b:if&gt;
                  &lt;b:if cond='data:top.showTwitterButton'&gt;
                    &lt;a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;
                      &lt;span class='share-button-link-text'&gt;
                        &lt;data:top.shareToTwitterMsg/&gt;
                      &lt;/span&gt;
                    &lt;/a&gt;
                  &lt;/b:if&gt;
                  &lt;b:if cond='data:top.showFacebookButton'&gt;
                    &lt;a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;
                      &lt;span class='share-button-link-text'&gt;
                        &lt;data:top.shareToFacebookMsg/&gt;
                      &lt;/span&gt;
                    &lt;/a&gt;
                  &lt;/b:if&gt;
                  &lt;b:if cond='data:top.showOrkutButton'&gt;
                    &lt;a class='goog-inline-block share-button sb-orkut' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=orkut&amp;quot;' expr:title='data:top.shareToOrkutMsg' target='_blank'&gt;
                      &lt;span class='share-button-link-text'&gt;
                        &lt;data:top.shareToOrkutMsg/&gt;
                      &lt;/span&gt;
                    &lt;/a&gt;
                  &lt;/b:if&gt;
                  &lt;b:if cond='data:top.showPinterestButton'&gt;
                    &lt;a class='goog-inline-block share-button sb-pinterest' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=pinterest&amp;quot;' expr:title='data:top.shareToPinterestMsg' target='_blank'&gt;
                      &lt;span class='share-button-link-text'&gt;
                        &lt;data:top.shareToPinterestMsg/&gt;
                      &lt;/span&gt;
                    &lt;/a&gt;
                  &lt;/b:if&gt;
                  &lt;b:if cond='data:top.showDummy'&gt;
                    &lt;div class='goog-inline-block dummy-container'&gt;
                      &lt;data:post.dummyTag/&gt;
                    &lt;/div&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='status-message'&gt;
                  &lt;b:if cond='data:navMessage'&gt;
                    &lt;div class='status-msg-wrap'&gt;
                      &lt;div class='status-msg-body'&gt;
                        &lt;data:navMessage/&gt;
                      &lt;/div&gt;
                      &lt;div class='status-msg-border'&gt;
                        &lt;div class='status-msg-bg'&gt;
                          &lt;div class='status-msg-hidden'&gt;
                            &lt;data:navMessage/&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div style='clear: both;'/&gt;
                  &lt;/b:if&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='threaded-comment-form' var='post'&gt;
                  &lt;div class='comment-form'&gt;
                    &lt;a name='comment-form'/&gt;
                    &lt;b:if cond='data:mobile'&gt;
                      &lt;p&gt;
                        &lt;data:blogCommentMessage/&gt;
                      &lt;/p&gt;
                      &lt;data:blogTeamBlogMessage/&gt;
                      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
                      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
                      &lt;b:else/&gt;
                      &lt;p&gt;
                        &lt;data:blogCommentMessage/&gt;
                      &lt;/p&gt;
                      &lt;data:blogTeamBlogMessage/&gt;
                      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
                      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' frameborder='0' height='410' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
                    &lt;/b:if&gt;
                    &lt;data:post.friendConnectJs/&gt;
                    &lt;data:post.cmtfpIframe/&gt;
                    &lt;script type='text/javascript'&gt;
                      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
                    &lt;/script&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='threaded_comment_js' var='post'&gt;
                  &lt;script async='async' expr:src='data:post.commentSrc' type='text/javascript'/&gt;
                  &lt;script type='text/javascript'&gt;
                    (function() {
                      var items = &lt;data:post.commentJso/&gt;;
                      var msgs = &lt;data:post.commentMsgs/&gt;;
                      var config = &lt;data:post.commentConfig/&gt;;
                      // &lt;![CDATA[
                      var cursor = null;
                      if (items &amp;&amp; items.length &gt; 0) {
                        cursor = parseInt(items[items.length - 1].timestamp) + 1;
                      }
                      var bodyFromEntry = function(entry) {
                        if (entry.gd$extendedProperty) {
                          for (var k in entry.gd$extendedProperty) {
                            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
                              return '
                              &lt;span class="deleted-comment"&gt;
                                ' + entry.content.$t + '
                  &lt;/span&gt;';
                            }
                          }
                        }
                        return entry.content.$t;
                      }
                      var parse = function(data) {
                        cursor = null;
                        var comments = [];
                        if (data &amp;&amp; data.feed &amp;&amp; data.feed.entry) {
                          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
                            var comment = {};
                            // comment ID, parsed out of the original id format
                            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
                            comment.id = id ? id[2] : null;
                            comment.body = bodyFromEntry(entry);
                            comment.timestamp = Date.parse(entry.published.$t) + '';
                            if (entry.author &amp;&amp; entry.author.constructor === Array) {
                              var auth = entry.author[0];
                              if (auth) {
                                comment.author = {
                                  name: (auth.name ? auth.name.$t : undefined),
                                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                                };
                              }
                            }
                            if (entry.link) {
                              if (entry.link[2]) {
                                comment.link = comment.permalink = entry.link[2].href;
                              }
                              if (entry.link[3]) {
                                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                                if (pid &amp;&amp; pid[1]) {
                                  comment.parentId = pid[1];
                                }
                              }
                            }
                            comment.deleteclass = 'item-control blog-admin';
                            if (entry.gd$extendedProperty) {
                              for (var k in entry.gd$extendedProperty) {
                                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                                } else if (entry.gd$extendedProperty[k].name == 'blogger.displayTime') {
                                  comment.displayTime = entry.gd$extendedProperty[k].value;
                                }
                              }
                            }
                            comments.push(comment);
                          }
                        }
                        return comments;
                      };
                      var paginator = function(callback) {
                        if (hasMore()) {
                          var url = config.feed + '?alt=json&amp;v=2&amp;orderby=published&amp;reverse=false&amp;max-results=50';
                          if (cursor) {
                            url += '&amp;published-min=' + new Date(cursor).toISOString();
                          }
                          window.bloggercomments = function(data) {
                            var parsed = parse(data);
                            cursor = parsed.length 
                            &lt; 50 ? null
                            : parseInt(parsed[parsed.length - 1].timestamp) + 1
                            callback(parsed);
                            window.bloggercomments = null;
                          }
                          url += '&amp;callback=bloggercomments';
                          var script = document.createElement('script');
                          script.type = 'text/javascript';
                          script.src = url;
                          document.getElementsByTagName('head')[0].appendChild(script);
                        }
                      };
                      var hasMore = function() {
                        return !!cursor;
                      };
                      var getMeta = function(key, comment) {
                        if ('iswriter' == key) {
                          var matches = !!comment.author
                          &amp;&amp; comment.author.name == config.authorName
                          &amp;&amp; comment.author.profileUrl == config.authorUrl;
                          return matches ? 'true' : '';
                        } else if ('deletelink' == key) {
                          return config.baseUri + '/delete-comment.g?blogID='
                          + config.blogId + '&amp;postID=' + comment.id;
                        } else if ('deleteclass' == key) {
                          return comment.deleteclass;
                        }
                        return '';
                      };
                      var replybox = null;
                      var replyUrlParts = null;
                      var replyParent = undefined;
                      var onReply = function(commentId, domId) {
                        if (replybox == null) {
                          // lazily cache replybox, and adjust to suit this style:
                          replybox = document.getElementById('comment-editor');
                          if (replybox != null) {
                            replybox.height = '250px';
                            replybox.style.display = 'block';
                            replyUrlParts = replybox.src.split('#');
                          }
                        }
                        if (replybox &amp;&amp; (commentId !== replyParent)) {
                          document.getElementById(domId).insertBefore(replybox, null);
                          replybox.src = replyUrlParts[0]
                          + (commentId ? '&amp;parentID=' + commentId : '')
                          + '#' + replyUrlParts[1];
                          replyParent = commentId;
                        }
                      };
                      var hash = (window.location.hash || '#').substring(1);
                      var startThread, targetComment;
                      if (/^comment-form_/.test(hash)) {
                        startThread = hash.substring('comment-form_'.length);
                      } else if (/^c[0-9]+$/.test(hash)) {
                        targetComment = hash.substring(1);
                      }
                      // Configure commenting API:
                      var configJso = {
                        'maxDepth': config.maxThreadDepth
                      };
                      var provider = {
                        'id': config.postId,
                        'data': items,
                        'loadNext': paginator,
                        'hasMore': hasMore,
                        'getMeta': getMeta,
                        'onReply': onReply,
                        'rendered': true,
                        'initComment': targetComment,
                        'initReplyThread': startThread,
                        'config': configJso,
                        'messages': msgs
                      };
                      var render = function() {
                        if (window.goog &amp;&amp; window.goog.comments) {
                          var holder = document.getElementById('comment-holder');
                          window.goog.comments.render(holder, provider);
                        }
                      };
                      // render now, or queue to render when library loads:
                      if (window.goog &amp;&amp; window.goog.comments) {
                        render();
                      } else {
                        window.goog = window.goog || {};
                        window.goog.comments = window.goog.comments || {};
                        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
                        window.goog.comments.loadQueue.push(render);
                      }
                    })();
                    // ]]&gt;
                  &lt;/script&gt;
                &lt;/b:includable&gt;
                &lt;b:includable id='threaded_comments' var='post'&gt;
                  &lt;div class='comments' id='comments'&gt;
                    &lt;a name='comments'/&gt;
                    &lt;h4&gt;
                      &lt;data:post.commentLabelFull/&gt;
                      :
                    &lt;/h4&gt;
                    &lt;div class='comments-content'&gt;
                      &lt;b:if cond='data:post.embedCommentForm'&gt;
                        &lt;b:include data='post' name='threaded_comment_js'/&gt;
                      &lt;/b:if&gt;
                      &lt;div id='comment-holder'&gt;
                        &lt;data:post.commentHtml/&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;p class='comment-footer'&gt;
                      &lt;b:if cond='data:post.allowNewComments'&gt;
                        &lt;b:include data='post' name='threaded-comment-form'/&gt;
                        &lt;b:else/&gt;
                        &lt;data:post.noNewCommentsText/&gt;
                      &lt;/b:if&gt;
                    &lt;/p&gt;
                    &lt;b:if cond='data:showCmtPopup'&gt;
                      &lt;div id='comment-popup'&gt;
                        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
                        &lt;/iframe&gt;
                      &lt;/div&gt;
                    &lt;/b:if&gt;
                    &lt;div id='backlinks-container'&gt;
                      &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
                        &lt;b:if cond='data:post.showBacklinks'&gt;
                          &lt;b:include data='post' name='backlinks'/&gt;
                        &lt;/b:if&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/b:includable&gt;
              &lt;/b:widget&gt;
            &lt;/b:section&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class='col-lg-4 col-md-4 col-sm-4 hidden-xs'&gt;
          &lt;!--  RIGHTBAR DIV STARTS HERE --&gt;
          &lt;div class='rightbar' id='rightbar'&gt;
            &lt;br/&gt;&lt;br/&gt;
            &lt;a href='https://play.google.com/store/apps/details?id=com.skappi.jiq&amp;amp;utm_source=global_co&amp;amp;utm_medium=prtnr&amp;amp;utm_content=Mar2515&amp;amp;utm_campaign=PartBadge&amp;amp;pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'&gt;&lt;img alt='Get it on Google Play' class='img-responsive' src='http://resources.ekiras.com/images/google-play-badge.png' style='margin:-35px;'/&gt;&lt;/a&gt;
            &lt;br/&gt;
            &lt;iframe allowtransparency='true' frameborder='0' scrolling='no' src='//www.facebook.com/plugins/likebox.php?href=https%3A%2F%2Fwww.facebook.com%2Fekiras.blogspot&amp;amp;width=300&amp;amp;height=220&amp;amp;colorscheme=light&amp;amp;show_faces=true&amp;amp;header=true&amp;amp;stream=false&amp;amp;show_border=true&amp;amp;appId=518967704914058' style='border:none; overflow:hidden; width:300px; height:220px;'/&gt;
            &lt;!-- Advertisement 1 --&gt;
            &lt;script async='async' src='//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js'/&gt;
            &lt;!-- ver_300x600 --&gt;
            &lt;ins class='adsbygoogle' data-ad-client='ca-pub-8407117896138636' data-ad-slot='1442931704' style='display:inline-block;width:300px;height:600px'/&gt;
            &lt;script&gt;
              (adsbygoogle = window.adsbygoogle || []).push({});
            &lt;/script&gt;
            &lt;!-- Advertisement 2 --&gt;
            &lt;script async='async' src='//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js'/&gt;
            &lt;!-- ekiras_main_Blog1_300x250_as --&gt;
            &lt;ins class='adsbygoogle' data-ad-client='ca-pub-8407117896138636' data-ad-slot='2459260903' style='display:inline-block;width:300px;height:250px'/&gt;
            &lt;script&gt;
              (adsbygoogle = window.adsbygoogle || []).push({});
            &lt;/script&gt;
            &lt;aside&gt;
              &lt;macro:include id='main-column-right-sections' name='sections'&gt;
                &lt;macro:param default='2' name='num'/&gt;
                &lt;macro:param default='sidebar-right' name='idPrefix'/&gt;
                &lt;macro:param default='sidebar' name='class'/&gt;
                &lt;macro:param default='true' name='includeBottom'/&gt;
              &lt;/macro:include&gt;
            &lt;/aside&gt;
          &lt;/div&gt;
          &lt;!--  RIGHTBAR DIV ENDS HERE --&gt;
        &lt;/div&gt;
        &lt;div class='clearfix'/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- MAIN CONTAINER DIV ENDS HERE --&gt;
    &lt;div class='pre-footer'&gt;
      &lt;div class='container'&gt;
        &lt;div class='col-lg-3 col-md-3 col-sm-4 col-xs-12'&gt;
          &lt;div class='thumbnail flat'&gt;
            &lt;img alt='' src='http://2.bp.blogspot.com/-a4rsQzgvFuQ/VjZ6jONfEhI/AAAAAAAACbU/F8yltrVKqqc/s320/profile.jpg'/&gt;
            &lt;h3&gt;
              &lt;strong&gt;
                Ekansh Rastogi
              &lt;/strong&gt;
            &lt;/h3&gt;
            &lt;p&gt;
              Love coding and exploring new technologies
            &lt;/p&gt;
            &lt;ul class='social-icons social-icons-color'&gt;
              &lt;li&gt;
                &lt;a href='#'&gt;
                  &lt;i class='fa fa-facebook-official'/&gt;
                &lt;/a&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;a href='#'/&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;a class='googleplus' data-original-title='Goole Plus' href='#'/&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;a class='linkedin' data-original-title='Linkedin' href='#'/&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class='col-lg-6 col-md-6 col-sm-8 col-xs-12'&gt;
          &lt;h2&gt;
            Top Technologies in Blog
          &lt;/h2&gt;
          &lt;br/&gt;
          &lt;ul&gt;
            &lt;li&gt;
              Spring Boot
            &lt;/li&gt;
            &lt;li&gt;
              Object Oriented Javascript
            &lt;/li&gt;
            &lt;li&gt;
              Java Reflection Api
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
        &lt;div class='col-lg-3 col-md-3'&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;footer&gt;
      &lt;div class='footer'&gt;
        &lt;div class='container'&gt;
          &lt;div class='row'&gt;
            &lt;!-- BEGIN COPYRIGHT --&gt;
            &lt;div&gt;
              2015 &amp;#169; EkiRas.com. ALL Rights Reserved. 
              &lt;a href='#'&gt;
                Privacy Policy
              &lt;/a&gt;
              | 
              &lt;a href='#'&gt;
                Terms of Service
              &lt;/a&gt;
            &lt;/div&gt;
            &lt;!-- END COPYRIGHT --&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/footer&gt;
    &lt;!-- content --&gt;
    &lt;script type='text/javascript'&gt;
      window.setTimeout(function() {
        document.body.className = document.body.className.replace(&amp;#39;loading&amp;#39;, &amp;#39;&amp;#39;);
                                                                  }, 10);
    &lt;/script&gt;
    &lt;script src='http://resources.ekiras.com/js/tests.js' type='text/javascript'/&gt;
  &lt;/body&gt;
  &lt;macro:includable id='sections' var='col'&gt;
    &lt;macro:if cond='data:col.num == 0'&gt;
      &lt;macro:else/&gt;
      &lt;b:section mexpr:class='data:col.class' mexpr:id='data:col.idPrefix + &amp;quot;-1&amp;quot;' preferred='yes' showaddelement='yes'/&gt;
      &lt;macro:if cond='data:col.num &amp;gt;= 2'&gt;
        &lt;table border='0' cellpadding='0' cellspacing='0' mexpr:class='&amp;quot;section-columns columns-&amp;quot; + data:col.num'&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td class='first columns-cell'&gt;
                &lt;b:section mexpr:class='data:col.class' mexpr:id='data:col.idPrefix + &amp;quot;-2-1&amp;quot;'/&gt;
              &lt;/td&gt;
              &lt;td class='columns-cell'&gt;
                &lt;b:section mexpr:class='data:col.class' mexpr:id='data:col.idPrefix + &amp;quot;-2-2&amp;quot;'/&gt;
              &lt;/td&gt;
              &lt;macro:if cond='data:col.num &amp;gt;= 3'&gt;
                &lt;td class='columns-cell'&gt;
                  &lt;b:section mexpr:class='data:col.class' mexpr:id='data:col.idPrefix + &amp;quot;-2-3&amp;quot;'/&gt;
                &lt;/td&gt;
              &lt;/macro:if&gt;
              &lt;macro:if cond='data:col.num &amp;gt;= 4'&gt;
                &lt;td class='columns-cell'&gt;
                  &lt;b:section mexpr:class='data:col.class' mexpr:id='data:col.idPrefix + &amp;quot;-2-4&amp;quot;'/&gt;
                &lt;/td&gt;
              &lt;/macro:if&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;macro:if cond='data:col.includeBottom'&gt;
          &lt;b:section mexpr:class='data:col.class' mexpr:id='data:col.idPrefix + &amp;quot;-3&amp;quot;' showaddelement='no'/&gt;
        &lt;/macro:if&gt;
      &lt;/macro:if&gt;
    &lt;/macro:if&gt;
  &lt;/macro:includable&gt;
  &lt;b:section-contents id='sidebar-right-1'&gt;
  &lt;b:widget id='FollowByEmail1' locked='false' title='Follow by Email' type='FollowByEmail' version='1'&gt;
    &lt;b:includable id='main'&gt;
        &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
          &lt;h2 class='title'&gt;
            &lt;data:title/&gt;
          &lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;div class='widget-content'&gt;
          &lt;div class='follow-by-email-inner'&gt;
            &lt;form action='http://feedburner.google.com/fb/a/mailverify' expr:onsubmit='&amp;quot;window.open(\&amp;quot;http://feedburner.google.com/fb/a/mailverify?uri=&amp;quot; + data:feedPath + &amp;quot;\&amp;quot;, \&amp;quot;popupwindow\&amp;quot;, \&amp;quot;scrollbars=yes,width=550,height=520\&amp;quot;); return true&amp;quot;' method='post' target='popupwindow'&gt;
              &lt;div class='input-group'&gt;
                &lt;input class='form-control flat' name='email' placeholder='Email address...' type='text'/&gt;
                &lt;span class='input-group-btn'&gt;
                  &lt;input class='btn btn-primary flat' type='submit' value='Go!'/&gt;
                &lt;/span&gt;
              &lt;/div&gt;
              &lt;input expr:value='data:feedPath' name='uri' type='hidden'/&gt;
              &lt;input name='loc' type='hidden' value='en_US'/&gt;
            &lt;/form&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;span class='item-control blog-admin'&gt;
          &lt;b:include name='quickedit'/&gt;
        &lt;/span&gt;
      &lt;/b:includable&gt;
  &lt;/b:widget&gt;
  &lt;b:widget id='HTML3' locked='false' title='Ratings and Recommendations by outbrain' type='HTML' version='1'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='content'&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;(function(){window.OB_platformType=1;window.OB_langJS=&amp;quot;http://widgets.outbrain.com/lang_en.js&amp;quot;;window.OBITm=&amp;quot;1411370920806&amp;quot;;window.OB_recMode=&amp;quot;brn_strip&amp;quot;;var ob=document.createElement(&amp;quot;script&amp;quot;);ob.type=&amp;quot;text/javascript&amp;quot;;ob.async=true;ob.src=&amp;quot;http&amp;quot;+(&amp;quot;https:&amp;quot;===document.location.protocol?&amp;quot;s&amp;quot;:&amp;quot;&amp;quot;)+&amp;quot;://widgets.outbrain.com/outbrainLT.js&amp;quot;;var h=document.getElementsByTagName(&amp;quot;script&amp;quot;)[0];h.parentNode.insertBefore(ob,h);})();&amp;lt;/script&amp;gt; 
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;OBKey&amp;quot; value=&amp;quot;HCcF/mSuZsTtahlH9f/ceA==&amp;quot;/&amp;gt; &amp;lt;script language=&amp;quot;JavaScript&amp;quot;&amp;gt;var OBCTm=&amp;#39;1411370920806&amp;#39;; &amp;lt;/script&amp;gt;&amp;lt;script language=&amp;quot;JavaScript&amp;quot; src=&amp;quot;http://widgets.outbrain.com/claim.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main'&gt;
        &lt;data:content/&gt;
      &lt;/b:includable&gt;
  &lt;/b:widget&gt;
  &lt;b:widget id='HTML2' locked='false' mobile='yes' title='Disqus' type='HTML' version='1'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='content'&gt;&lt;![CDATA[&lt;!-- Disqus Widget --&gt;]]&gt;&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main'&gt;
        &lt;script type='text/javascript'&gt;
          var disqus_shortname = &amp;#39;ekiras&amp;#39;;
          var disqus_blogger_current_url = &amp;quot;&lt;data:blog.canonicalUrl/&gt;&amp;quot;;
          if (!disqus_blogger_current_url.length) {
            disqus_blogger_current_url = &amp;quot;&lt;data:blog.url/&gt;&amp;quot;;
          }
          var disqus_blogger_homepage_url = &amp;quot;&lt;data:blog.homepageUrl/&gt;&amp;quot;;
          var disqus_blogger_canonical_homepage_url = &amp;quot;&lt;data:blog.canonicalHomepageUrl/&gt;&amp;quot;;
        &lt;/script&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;style type='text/css'&gt;
            #comments {
              display: none;
            }
          &lt;/style&gt;
          &lt;script type='text/javascript'&gt;
            (function() {
              var bloggerjs = document.createElement(&amp;#39;script&amp;#39;);
                                                     bloggerjs.type = &amp;#39;text/javascript&amp;#39;;
                                                     bloggerjs.async = true;
                                                     bloggerjs.src = &amp;#39;http://&amp;#39;+disqus_shortname+&amp;#39;.disqus.com/blogger_item.js&amp;#39;;
                                                     (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(bloggerjs);
                                                     })();
          &lt;/script&gt;
        &lt;/b:if&gt;
        &lt;style type='text/css'&gt;
          .post-comment-link {
            visibility: hidden;
          }
        &lt;/style&gt;
        &lt;script type='text/javascript'&gt;
          (function() {
            var bloggerjs = document.createElement(&amp;#39;script&amp;#39;);
                                                   bloggerjs.type = &amp;#39;text/javascript&amp;#39;;
                                                   bloggerjs.async = true;
                                                   bloggerjs.src = &amp;#39;http://&amp;#39;+disqus_shortname+&amp;#39;.disqus.com/blogger_index.js&amp;#39;;
                                                   (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(bloggerjs);
                                                   })();
        &lt;/script&gt;
      &lt;/b:includable&gt;
  &lt;/b:widget&gt;
&lt;/b:section-contents&gt;&lt;b:section-contents id='sidebar-right-2-1'/&gt;&lt;b:section-contents id='sidebar-right-2-2'/&gt;&lt;b:section-contents id='sidebar-right-3'/&gt;&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/template/default'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/template/default'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_PUBLISHING_MODE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of publishing done for this blog.</title><content type='text'>PUBLISH_MODE_BLOGSPOT</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_PUBLISHING_MODE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_ADMIN_PERMISSION</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of administrators' emails for the blog.</title><content type='text'>ekirastogi@gmail.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ADMIN_PERMISSION'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_ADULT_CONTENT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog contains adult content</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ADULT_CONTENT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether alternative JS renderings are allowed</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog's Google Analytics account number</title><content type='text'>UA-56017203-1</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the archive index date format</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>How frequently this blog should be archived</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_AUTHOR_PERMISSION</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of authors' emails who have permission to publish.</title><content type='text'>shivi.ekjam@gmail.com,eki.ekjam@gmail.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_AUTHOR_PERMISSION'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_BACKLINKS_ALLOWED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comment backlinks on the blog</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_BY_POST_ARCHIVING</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to provide an archive page for each post</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_BY_POST_ARCHIVING'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_ACCESS</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Who can comment</title><content type='text'>ANYONE</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_ACCESS'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_CAPTCHA</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to require commenters to complete a Captcha</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_CAPTCHA'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_EMAIL_V2</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of email addresses to which notifications of new comments are sent</title><content type='text'>eki.ekjam@gmail.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_EMAIL_V2'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_EMAIL_V2'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_FEED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_FEED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment form location</title><content type='text'>EMBEDDED_IFRAME</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_MESSAGE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment message</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MESSAGE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_MODERATION</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to enable comment moderation</title><content type='text'>ENABLED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MODERATION'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Number of days after which new comments are subject to moderation</title><content type='text'>14</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_MODERATION_EMAIL_V2</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Email address for receiving notifications of new comments that require moderation</title><content type='text'>ekanshrastogi@outlook.com</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MODERATION_EMAIL_V2'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_MODERATION_EMAIL_V2'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show profile images in comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENTS_ALLOWED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENTS_ALLOWED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comment time stamp format number</title><content type='text'>29</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to convert line breaks into &lt;br /&gt; tags in post editor</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_CUSTOM_ADS_TXT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The custom ads.txt content of the blog served to ads search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ADS_TXT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ADS_TXT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_CUSTOM_ADS_TXT_ENABLED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog serves custom ads.txt content to ads search engines.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ADS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ADS_TXT_ENABLED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_CUSTOM_PAGE_NOT_FOUND</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The content served when the requested post or page is not found.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_CUSTOM_ROBOTS_TXT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The custom robots.txt content of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ROBOTS_TXT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ROBOTS_TXT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog serves custom robots.txt content to search engines.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_DATE_FORMAT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the date header format</title><content type='text'>26</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DATE_FORMAT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default backlinks mode for posts</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default comment mode for posts</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_DESCRIPTION</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>A description of the blog</title><content type='text'>Jave J2EE tutorials, concepts,  programs and frequently asked questions in interviews. MOst important Interview Questions and concepts.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_DESCRIPTION'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_EMAIL_POST_LINKS</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a link for users to email posts</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_EMAIL_POST_LINKS'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_FEED_REDIRECT_URL</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>URL to redirect post feed requests to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_FEED_REDIRECT_URL'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_FLOAT_ALIGNMENT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether float alignment is enabled for the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_LOCALE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Language for this blog</title><content type='text'>en_GB</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_LOCALE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_M2B_WHITELIST_EMAIL</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of email addresses that can post to the blog via email.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_M2B_WHITELIST_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_M2B_WHITELIST_EMAIL'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_MAX_NUM</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maximum number of things to show on the main page"</title><content type='text'>7</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_MAX_NUM'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_MAX_UNIT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Unit of things to show on the main page</title><content type='text'>POSTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_MAX_UNIT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_META_DESCRIPTION</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The meta description of the blog served to search engines.</title><content type='text'>A blog about Java, J2EE  and related technologies for software development and web development.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_META_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_META_DESCRIPTION'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_META_DESCRIPTION_ENABLED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog is served with meta descriptions.</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_META_DESCRIPTION_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_META_DESCRIPTION_ENABLED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_NAME</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The name of the blog</title><content type='text'>Ekiras</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_NAME'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_PER_POST_FEED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for per-post comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_PER_POST_FEED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_POST_FEED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog posts</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_POST_FEED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_POST_FEED_FOOTER</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Footer to append to the end of each entry in the post feed</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_POST_FEED_FOOTER'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_POST_TEMPLATE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The template for blog posts</title><content type='text'>&lt;h2&gt;Points To Remember&lt;/h2&gt;
this is body.
&lt;h2&gt;Heading&lt;/h2&gt;
this is body.
</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_POST_TEMPLATE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_PROMOTED</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog can be promoted on Blogger</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_PROMOTED'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_QUICK_EDITING</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Quick Editing is enabled</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_QUICK_EDITING'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_READ_ACCESS_MODE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The access type for the readers of the blog.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_READ_ACCESS_MODE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_READER_PERMISSION</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of emails for users who have permission to read the blog.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_READER_PERMISSION'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_SEARCHABLE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog should be indexed by search engines</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SEARCHABLE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_SEND_EMAIL_V2</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comma-separated list of emails to send new blog posts to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SEND_EMAIL_V2'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SEND_EMAIL_V2'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_SHOW_TITLE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show the title field</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SHOW_TITLE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_SHOW_URL</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a related link box in the post composer</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SHOW_URL'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_SUBDOMAIN</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The BlogSpot subdomain under which to publish your blog</title><content type='text'>ekiras</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SUBDOMAIN'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_SUBDOMAIN'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_TIME_STAMP_FORMAT</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the time stamp format</title><content type='text'>27</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_TIME_ZONE</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The time zone for this blog</title><content type='text'>Asia/Calcutta</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_TIME_ZONE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.settings.BLOG_USE_LIGHTBOX</id><published>2014-07-10T01:57:52.189+05:30</published><updated>2018-06-03T01:32:00.484+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show images in the Lightbox when clicked</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_USE_LIGHTBOX'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/settings/BLOG_USE_LIGHTBOX'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7099887332560584208</id><published>2017-05-15T14:46:00.003+05:30</published><updated>2018-01-30T16:39:10.838+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GIT'/><title type='text'>Git : Ignore changes to a file that is already tracked in repository</title><content type='html'>&lt;div id='markdownContainer'&gt;  &lt;div&gt;&lt;p&gt;If you are trying to ignore changes to a file that's already tracked in the repository (e.g. a dev.properties file that you would need to change for your local environment but you would never want to check in these changes) than what you want to do is:&lt;/p&gt;&lt;pre class="hljs"&gt;&lt;code&gt;git update-index --assume-unchanged &lt;file&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you wanna start tracking changes again&lt;/p&gt;&lt;pre class="hljs"&gt;&lt;code&gt;git update-index --no-assume-unchanged &lt;file&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href="https://www.kernel.org/pub/software/scm/git/docs/git-update-index.html"&gt;Reference Reading&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div style='display:none;' id='rawMarkdown'&gt;If you are trying to ignore changes to a file that's already tracked in the repository (e.g. a dev.properties file that you would need to change for your local environment but you would never want to check in these changes) than what you want to do is:  ``` git update-index --assume-unchanged &lt;file&gt;``` If you wanna start tracking changes again  ``` git update-index --no-assume-unchanged &lt;file&gt;```  [Reference Reading](https://www.kernel.org/pub/software/scm/git/docs/git-update-index.html)&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7099887332560584208/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/05/ignore-changes-to-a-file-that-is-already-tracked-in-repository.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7099887332560584208'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7099887332560584208'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/05/ignore-changes-to-a-file-that-is-already-tracked-in-repository.html' title='Git : Ignore changes to a file that is already tracked in repository'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1692086635620905888</id><published>2017-04-07T12:52:00.000+05:30</published><updated>2017-04-07T12:52:30.431+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Angular2'/><category scheme='http://www.blogger.com/atom/ns#' term='Angular'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><title type='text'>Angular : How to start angular CLI on custom port</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to start Angular 2 Application on a Custom port other than 4200&lt;/h2&gt;&amp;#10;&lt;p&gt;You can start the angular project using the angular cli using command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;ng serve&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above command will start the project on port &lt;code&gt;4200&lt;/code&gt;. If you want to start the application on a prot different that 4200 then you can start the project using the following command.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;ng serve --port &amp;lt;port-number&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;where &lt;code&gt;&amp;lt;port-number&amp;gt;&lt;/code&gt; can be any valid port that is not in use.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1692086635620905888/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/04/how-to-start-angular-cli-on-custom-port.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1692086635620905888'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1692086635620905888'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/04/how-to-start-angular-cli-on-custom-port.html' title='Angular : How to start angular CLI on custom port'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1748843703540012725</id><published>2017-03-23T18:38:00.003+05:30</published><updated>2017-03-23T18:48:25.909+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><category scheme='http://www.blogger.com/atom/ns#' term='Typescript'/><title type='text'>Angular : How to Inject Nested Service in Component</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to Inject Nested Services in Component&lt;/h2&gt;&amp;#10;&lt;p&gt;Let's create a service &lt;code&gt;url.service.ts&lt;/code&gt; that will will be injected in other services.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&amp;#10;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; { Injectable } from &lt;span class="hljs-string"&gt;'@angular/core'&lt;/span&gt;;&amp;#10;&amp;#10;&lt;span class="hljs-meta"&gt;@Injectable&lt;/span&gt;()&amp;#10;&lt;span class="hljs-keyword"&gt;export&lt;/span&gt; &lt;span class="hljs-keyword"&gt;class&lt;/span&gt; UrlService{&amp;#10;    &lt;span class="hljs-comment"&gt;// business logic&lt;/span&gt;&amp;#10;}&amp;#10;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Now lets create another service &lt;code&gt;http.service.ts&lt;/code&gt;  that will Inject this service.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; { UrlService } from &lt;span class="hljs-string"&gt;'./url.service.ts'&lt;/span&gt;;&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;export&lt;/span&gt; &lt;span class="hljs-keyword"&gt;class&lt;/span&gt; HttpService extends UrlService{&amp;#10;    &lt;span class="hljs-comment"&gt;// business logic&lt;/span&gt;&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Now, we need to inject the &lt;code&gt;HttpService&lt;/code&gt; in some component to make &lt;code&gt;http&lt;/code&gt; calls. So now we can inject the &lt;code&gt;HttpService&lt;/code&gt; in component as shown below.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; { Component ,OnInit } from &lt;span class="hljs-string"&gt;'@angular/core'&lt;/span&gt;;&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; { UrlService } from &lt;span class="hljs-string"&gt;'./url.service.ts'&lt;/span&gt;;&amp;#10;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; { HttpService } from &lt;span class="hljs-string"&gt;'./http.service.ts'&lt;/span&gt;;&amp;#10;&amp;#10;&amp;#10;&lt;span class="hljs-meta"&gt;@Component&lt;/span&gt;({&amp;#10;    selector : &lt;span class="hljs-string"&gt;'some-selector'&lt;/span&gt;,&amp;#10;    templateUrl : &lt;span class="hljs-string"&gt;'some.html'&lt;/span&gt;,&amp;#10;    providers: [HttpService, UrlService]&amp;#10;})&amp;#10;&lt;span class="hljs-keyword"&gt;export&lt;/span&gt; &lt;span class="hljs-keyword"&gt;class&lt;/span&gt; SomeComponent &lt;span class="hljs-keyword"&gt;implements&lt;/span&gt; OnInit{&amp;#10;     &lt;span class="hljs-comment"&gt;// business logic&lt;/span&gt;&amp;#10;    &lt;span class="hljs-keyword"&gt;constructor&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; httpService:HttpService&lt;/span&gt;){&amp;#10;        &lt;span class="hljs-comment"&gt;// do something&lt;/span&gt;&amp;#10;    }&amp;#10;&amp;#10;    ngOnInit(): &lt;span class="hljs-built_in"&gt;void&lt;/span&gt; {&amp;#10;     &amp;#10;    }&amp;#10;    &amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;div class="note"&gt; &lt;b&gt;Note&lt;/b&gt;&lt;br&gt;&lt;p&gt;So, the important point to note here is we have provided both &lt;code&gt;UrlService&lt;/code&gt; and &lt;code&gt;HttpService&lt;/code&gt; in the provides but only the &lt;code&gt;HttpService&lt;/code&gt; in the &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;p&gt;You need to add all the services in the &lt;code&gt;providers&lt;/code&gt; array of the &lt;code&gt;Component&lt;/code&gt; but add only the service you want to the constructor.&lt;/p&gt;&amp;#10;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1748843703540012725/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-inject-nested-service-in-component.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1748843703540012725'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1748843703540012725'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-inject-nested-service-in-component.html' title='Angular : How to Inject Nested Service in Component'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-9041534779839645435</id><published>2017-03-15T17:52:00.000+05:30</published><updated>2017-03-15T17:52:31.855+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><category scheme='http://www.blogger.com/atom/ns#' term='Typescript'/><title type='text'>Angular : Getting started with Angular with Angular CLI, Installation and Hello World Example</title><content type='html'>       &lt;div class="markdown"&gt;&lt;h2&gt;Install and Setup Angular&lt;/h2&gt;&amp;#10;&lt;p&gt;Before we start, lets install the &lt;code&gt;angular cli&lt;/code&gt; with the following command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm install -g @angular/cli&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;&lt;code&gt;Angular CLI&lt;/code&gt; is a tool that can&lt;/p&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;make a new project,&lt;/li&gt;&amp;#10;&lt;li&gt;compile your &lt;code&gt;typescript&lt;/code&gt; files,&lt;/li&gt;&amp;#10;&lt;li&gt;configure your &lt;code&gt;typescript compiler&lt;/code&gt;&lt;/li&gt;&amp;#10;&lt;li&gt;run your code with live preview,&lt;/li&gt;&amp;#10;&lt;li&gt;build and package your project.&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;div class="note"&gt; &lt;b&gt;Note&lt;/b&gt;&lt;br&gt;&lt;p&gt;Make sure you have latest &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; installed, at least &lt;code&gt;node version 6.9.x&lt;/code&gt; and &lt;code&gt;npm version 3.x.x&lt;/code&gt;. To see the versions you can run commands &lt;code&gt;node -v&lt;/code&gt; and &lt;code&gt;npm -v&lt;/code&gt; for node and npm versions respectively.&lt;/p&gt;&amp;#10;&lt;/div&gt;&lt;br&gt;&lt;pre class="warning"&gt; &lt;b&gt;Warning&lt;/b&gt;&lt;br&gt;&lt;p&gt;While installation you might get the following warning&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules/@angular/cli/node_modules/chokidar/node_modules/fsevents):&amp;#10;npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted {&amp;#34;os&amp;#34;:&amp;#34;darwin&amp;#34;,&amp;#34;arch&amp;#34;:&amp;#34;any&amp;#34;} (current: {&amp;#34;os&amp;#34;:&amp;#34;linux&amp;#34;,&amp;#34;arch&amp;#34;:&amp;#34;x64&amp;#34;})&amp;#10;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;You can skip them, since they are optional warnings&lt;/p&gt;&amp;#10;&lt;/pre&gt;&lt;br&gt;&lt;h2&gt;Making First Angular Project&lt;/h2&gt;&amp;#10;&lt;p&gt;To create a new project in angular you can use the &lt;code&gt;angular cli&lt;/code&gt; command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;ng new &amp;lt;project-name&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Let's say we want to create a project &lt;code&gt;hello&lt;/code&gt; then the command will be &lt;code&gt;ng new hello&lt;/code&gt;. This will create a new project inside a folder &lt;code&gt;hello&lt;/code&gt; we specified while creating the project.&lt;/p&gt;&amp;#10;&lt;p&gt;Now go inside the directory. You can do the following now,&lt;/p&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;Run &lt;code&gt;ng serve&lt;/code&gt; for a dev server.&lt;/li&gt;&amp;#10;&lt;li&gt;Run &lt;code&gt;ng generate component component-name&lt;/code&gt; to generate a new component.&lt;/li&gt;&amp;#10;&lt;li&gt;Run &lt;code&gt;ng build&lt;/code&gt; to build the project.&lt;/li&gt;&amp;#10;&lt;li&gt;Run &lt;code&gt;ng test&lt;/code&gt; to execute the unit tests via Karma&lt;/li&gt;&amp;#10;&lt;li&gt;Run &lt;code&gt;ng e2e&lt;/code&gt; to execute the end-to-end tests via Protractor&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;p&gt;Now run the commands to see the app working&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;cd  &amp;lt;project-name&amp;gt;&amp;#10;ng serve&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This will start a local server and start the angular application on this server.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/9041534779839645435/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/getting-started-with-angular-with-angular-cli-installation-and-hello-world-example.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9041534779839645435'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9041534779839645435'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/getting-started-with-angular-with-angular-cli-installation-and-hello-world-example.html' title='Angular : Getting started with Angular with Angular CLI, Installation and Hello World Example'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-499091167476491482</id><published>2017-03-10T14:41:00.000+05:30</published><updated>2017-03-10T14:41:29.729+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='NodeJS'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Node'/><title type='text'>Node : How to uninstall a nodejs global dependency</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Uninstall global node dependency&lt;/h2&gt;&amp;#10;&lt;p&gt;To uninstall a node dependency installed with  &lt;code&gt;-g&lt;/code&gt; command you can use the following command.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm uninstall -g &amp;lt;dependency&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above command will remove that dependency from your system.&lt;/p&gt;&amp;#10;&lt;h2&gt;Uninstall node dependency&lt;/h2&gt;&amp;#10;&lt;p&gt;To remove a dependency from your project you can use the following command.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm uninstall &amp;lt;dependency&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This will remove the dependency and remove its entry from the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/499091167476491482/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-uninstall-a-nodejs-global-dependency.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/499091167476491482'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/499091167476491482'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-uninstall-a-nodejs-global-dependency.html' title='Node : How to uninstall a nodejs global dependency'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8418331458888799435</id><published>2017-03-10T13:54:00.000+05:30</published><updated>2017-03-10T13:54:17.688+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='NodeJS'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Installation'/><category scheme='http://www.blogger.com/atom/ns#' term='Node'/><title type='text'>Node : How to Upgrade NodeJs and Npm and How to install latest NodeJs on Linux, Ubuntu</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&amp;#10;&lt;p&gt;If you are installing node for the first time then, use the &lt;code&gt;NodeSource PPA&lt;/code&gt;  and first choose the version of node you want to install.&lt;/p&gt;&amp;#10;&lt;p&gt;Following are the sources for the node versions&lt;/p&gt;&amp;#10;&lt;h3&gt;for Node.js v4&lt;/h3&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;h3&gt;for Node.js v5&lt;/h3&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;h3&gt;for Node.js v6&lt;/h3&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;h3&gt;for Node.js v7&lt;/h3&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Once this is done, then update your repositories by command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;sudo apt-get update&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Now, finally install NodeJs and Npm using the following command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;sudo apt-get install nodejs&amp;#10;sudo apt-get install npm&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;To check the version of node, try command &lt;code&gt;node -v&lt;/code&gt; and npm version by command &lt;code&gt;npm -v&lt;/code&gt;&lt;/p&gt;&amp;#10;&lt;h2&gt;Upgrading NodeJs and Npm&lt;/h2&gt;&amp;#10;&lt;p&gt;If you already have node and npm install and you want to upgrade the version then you should first run the following command to remove them.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;sudo apt-get purge nodejs npm&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This will remove nodejs and npm, now you can follow the steps mentioned above to install fresh copy of node and npm.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8418331458888799435/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-upgrade-nodejs-and-npm-and-how-to-install-latest-nodejs-on-linux-ubuntu.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8418331458888799435'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8418331458888799435'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-upgrade-nodejs-and-npm-and-how-to-install-latest-nodejs-on-linux-ubuntu.html' title='Node : How to Upgrade NodeJs and Npm and How to install latest NodeJs on Linux, Ubuntu'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3174871171104881799</id><published>2017-03-07T14:49:00.000+05:30</published><updated>2017-03-07T14:49:05.390+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Groovy : What is Identity Operator and  difference between == in Java and Groovy</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;What is Identity &lt;code&gt;==&lt;/code&gt; operator&lt;/h2&gt;&amp;#10;&lt;p&gt;In Java, &lt;code&gt;==&lt;/code&gt; operator is used for checking the reference of objects. In Groovy, it is used to check if the object are equals, i.e it is the implementation of &lt;code&gt;equals()&lt;/code&gt; method in java.&lt;/p&gt;&amp;#10;&lt;p&gt;&lt;code&gt;==&lt;/code&gt; operator in&lt;/p&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;In java, checks the reference of the objects.&lt;/li&gt;&amp;#10;&lt;li&gt;In groovy, &lt;code&gt;==&lt;/code&gt; is equivalent to &lt;code&gt;.equals()&lt;/code&gt; and checks if the two objects are equal&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;p&gt;&lt;code&gt;is&lt;/code&gt; operator&lt;/p&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;In java, does not exist&lt;/li&gt;&amp;#10;&lt;li&gt;In groovy, checks the reference of the objects which is &lt;code&gt;==&lt;/code&gt; in java&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;p&gt;&lt;code&gt;equals()&lt;/code&gt; method&lt;/p&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;In java, checks if the two objects are equal&lt;/li&gt;&amp;#10;&lt;li&gt;In groovy, checks if the two objects are equal&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;p&gt;Let's have a look at the following examples&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;A&lt;/span&gt;{&lt;/span&gt;&amp;#10;  String name;&amp;#10;  &amp;#10;  &lt;span class="hljs-keyword"&gt;boolean&lt;/span&gt; equals(A a){&amp;#10;    &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.name == a.name&amp;#10;  }&amp;#10;  &amp;#10;}&amp;#10;&amp;#10;A a1 = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; A(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekiras'&lt;/span&gt;)&amp;#10;A a2 = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; A(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekiras'&lt;/span&gt;)&amp;#10;&amp;#10;println (a1 == a2) &amp;#10;println (a1.equals(a2)) &amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above output will give the following output.&lt;/p&gt;&amp;#10;&lt;div class="output"&gt; &lt;b&gt;Output&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;true&lt;br&gt;&amp;#10;true&lt;/p&gt;&amp;#10;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3174871171104881799/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-identity-operator-and--difference-between-equals-in-java-and-groovy.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3174871171104881799'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3174871171104881799'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-identity-operator-and--difference-between-equals-in-java-and-groovy.html' title='Groovy : What is Identity Operator and  difference between == in Java and Groovy'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-495794851924503035</id><published>2017-03-07T12:47:00.002+05:30</published><updated>2017-03-07T12:47:54.336+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy Operators'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy'/><title type='text'>Groovy : What is Coercion operator and how to use it</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Point to Remember&lt;/h2&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;Coercion Operator is used for casting&lt;/li&gt;&amp;#10;&lt;li&gt;Custom &lt;code&gt;Coercion&lt;/code&gt; rules can be applied to a class by defining &lt;code&gt;asType&lt;/code&gt; method in a class.&lt;/li&gt;&amp;#10;&lt;li&gt;Syntax of coercion operator is &lt;code&gt;as&lt;/code&gt;&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;h2&gt;What is Coercion Operator&lt;/h2&gt;&amp;#10;&lt;p&gt;Coercion operator is used to do type casting of objects in groovy. It converts objects of one type to another type.&lt;/p&gt;&amp;#10;&lt;p&gt;Lets take a look at the following examples&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; a = &lt;span class="hljs-number"&gt;123&lt;/span&gt;&amp;#10;String s = (String) a&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The the above example, the assignment of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;s&lt;/code&gt; will give a &lt;code&gt;ClassCastException&lt;/code&gt; in java but when you run the same in groovy it will not give an error since Groovy as defined how to typecast integer to string.&lt;/p&gt;&amp;#10;&lt;p&gt;Coercion version of the above example is as follows&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; a = &lt;span class="hljs-number"&gt;123&lt;/span&gt;&amp;#10;String s =  a &lt;span class="hljs-keyword"&gt;as&lt;/span&gt; String&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;h2&gt;How to Define Custom Coercion Rules.&lt;/h2&gt;&amp;#10;&lt;p&gt;Let's take an example where we want to convert an object of class A to class B.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;A&lt;/span&gt;{&lt;/span&gt;&amp;#10;  String name&amp;#10;}&amp;#10;&amp;#10;&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;B&lt;/span&gt;{&lt;/span&gt;&amp;#10;  String name&amp;#10;  String email&amp;#10;  &amp;#10;  &lt;span class="hljs-keyword"&gt;def&lt;/span&gt; asType(Class target){&amp;#10;    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(target == A)&amp;#10;      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; A(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.name)&amp;#10;    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(target == String)&amp;#10;     &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; String(&lt;span class="hljs-string"&gt;&amp;#34;${this.name }  ${this.email}&amp;#34;&lt;/span&gt;)  &amp;#10;  }&amp;#10;}&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; b = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; B(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekansh'&lt;/span&gt;, &lt;span class="hljs-string"&gt;email :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekansh@ekiras.com'&lt;/span&gt;)&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; a = b &lt;span class="hljs-keyword"&gt;as&lt;/span&gt; A&amp;#10;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; s = b &lt;span class="hljs-keyword"&gt;as&lt;/span&gt; String&amp;#10;&amp;#10;println b.dump()&amp;#10;println a.dump()&amp;#10;println s&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;div class="output"&gt; &lt;b&gt;Output&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&amp;lt;B@6040d37b name=ekansh email=ekansh@ekiras.com&amp;gt;&lt;br&gt;&amp;#10;&amp;lt;A@b0fb0cc name=ekansh&amp;gt;&lt;br&gt;&amp;#10;ekansh  ekansh@ekiras.com&lt;/p&gt;&amp;#10;&lt;/div&gt;&lt;br&gt;&lt;p&gt;Here the important thing to note is the &lt;code&gt;asType()&lt;/code&gt; method. In &lt;code&gt;asType&lt;/code&gt; you can return the any object since the return type of the method is &lt;code&gt;def&lt;/code&gt;. You can return object of any class depending upon the type of class it has to be casted to&lt;/p&gt;&amp;#10;&lt;p&gt;When the &lt;code&gt;as A&lt;/code&gt; is called on object of class B, then an object of class A will be returned. When &lt;code&gt;as String&lt;/code&gt; is called on object of class B is called then a String object is returned.&lt;/p&gt;&amp;#10;&lt;/div&gt;      </content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/495794851924503035/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-coercion-operator-and-how-to-use-it.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/495794851924503035'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/495794851924503035'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-coercion-operator-and-how-to-use-it.html' title='Groovy : What is Coercion operator and how to use it'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4173418649155962805</id><published>2017-03-03T17:35:00.000+05:30</published><updated>2017-03-03T17:40:38.172+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Groovy : What is Direct field access operator and how to use it</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="markdown"&gt;&lt;h2&gt;Direct field access operator&lt;/h2&gt;In groovy when we access the property of any object as &lt;code&gt;object.property&lt;/code&gt; then groovy under the hood calls the getter method of the property even if we have not specified it. The default getter and setter methods return the property and set the property respectively.&lt;br /&gt;Let's have a look at the example.&lt;br /&gt;&lt;pre class="hljs"&gt;&lt;code&gt;​&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;User&lt;/span&gt; {&lt;/span&gt;  &lt;br /&gt;  String name&lt;br /&gt;  String email&lt;br /&gt;  &lt;br /&gt;  String getName(){&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;"Name is $name"&lt;/span&gt;&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;User u = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; User(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekiras'&lt;/span&gt; , &lt;span class="hljs-string"&gt;email :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekansh@ekiras.com'&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;println u.name&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;When you execute the above code you will get the output &lt;code&gt;Name is ekiras&lt;/code&gt;.&lt;br /&gt;&lt;div class="note"&gt;&lt;b&gt;Note&lt;/b&gt;&lt;br /&gt;What happens under the hood is &lt;code&gt;u.name will internally call the getter method&lt;/code&gt; of instance variable &lt;code&gt;name&lt;/code&gt;.&lt;br /&gt;Here calling &lt;code&gt;u.getName()' is equivalent to calling u.name&lt;/code&gt;&lt;/div&gt;&lt;br /&gt;Also, all the classes and their instance variables are by default &lt;code&gt;public&lt;/code&gt; in nature. So you can access the instance variable without calling the getter method byb using the &lt;code&gt;Direct Field Access Operator&lt;/code&gt;&lt;br /&gt;Syntax of Direct Field Access operator is as below&lt;br /&gt;&lt;pre class="hljs"&gt;&lt;code&gt;&amp;lt;object&amp;gt;.@&amp;lt;property&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;So we can use this operator as shown below&lt;br /&gt;&lt;pre class="hljs"&gt;&lt;code&gt;​&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;User&lt;/span&gt; {&lt;/span&gt;  &lt;br /&gt;  String name&lt;br /&gt;  String email&lt;br /&gt;  &lt;br /&gt;  String getName(){&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;"Name is $name"&lt;/span&gt;&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;User u = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; User(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekiras'&lt;/span&gt; , &lt;span class="hljs-string"&gt;email :&lt;/span&gt; &lt;span class="hljs-string"&gt;'ekansh@ekiras.com'&lt;/span&gt;)&lt;br /&gt;println u.name  &lt;span class="hljs-comment"&gt;// 1&lt;/span&gt;&lt;br /&gt;println u.&lt;span class="hljs-meta"&gt;@name&lt;/span&gt;  &lt;span class="hljs-comment"&gt;// 2&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;The above code will give the following output&lt;br /&gt;&lt;div class="output"&gt;&lt;b&gt;Output&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Name is ekiras&lt;br /&gt;ekiras&lt;/div&gt;&lt;br /&gt;The  &lt;code&gt;1&lt;/code&gt;st print statement prints &lt;code&gt;Name is ekiras&lt;/code&gt; because it calls the getter method of the property name while &lt;code&gt;2&lt;/code&gt;nd statement calls the property directly.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4173418649155962805/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-direct-field-access-operator-and-how-to-use-it.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4173418649155962805'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4173418649155962805'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-direct-field-access-operator-and-how-to-use-it.html' title='Groovy : What is Direct field access operator and how to use it'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6744847969398165644</id><published>2017-03-03T17:00:00.000+05:30</published><updated>2017-03-03T17:00:07.545+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy Operators'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy'/><title type='text'>Groovy : What is Elvis Operator and difference b/w Elvis and Ternary operator</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Ternary Operator&lt;/h2&gt;&amp;#10;&lt;p&gt;Ternary Operator is the &lt;code&gt;short hand of the if-else block&lt;/code&gt;, where a condition is evaluated to true or false and following statement is executed.&lt;/p&gt;&amp;#10;&lt;p&gt;Syntax of the ternary operator is below&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&amp;lt;&lt;span class="hljs-keyword"&gt;boolean&lt;/span&gt; expression&amp;gt; ? &amp;lt;executed when condition is &lt;span class="hljs-keyword"&gt;true&lt;/span&gt;&amp;gt; : &amp;lt;executed when condition is &lt;span class="hljs-keyword"&gt;false&lt;/span&gt;&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;A typical example of if-else block is shown below where we check if a variable is null or not.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;String s = &lt;span class="hljs-string"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&amp;#10;&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;( s != &lt;span class="hljs-literal"&gt;null&lt;/span&gt; )&amp;#10;  println s&amp;#10;&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &amp;#10;  println &lt;span class="hljs-string"&gt;&amp;#34;not found&amp;#34;&lt;/span&gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;We can replace the above code with the &lt;code&gt;ternary&lt;/code&gt; operator as shown below&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;String s = &lt;span class="hljs-string"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&amp;#10;println s !=&lt;span class="hljs-literal"&gt;null&lt;/span&gt; ? s : &lt;span class="hljs-string"&gt;&amp;#34;not found&amp;#34;&lt;/span&gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Here, the variable &lt;code&gt;s&lt;/code&gt; is assigned a string &lt;code&gt;hello&lt;/code&gt; and condition &lt;code&gt;s!=null&lt;/code&gt; evaluates to true hence the statement after &lt;code&gt;?&lt;/code&gt; is executed which returns &lt;code&gt;s&lt;/code&gt; itself.&lt;/p&gt;&amp;#10;&lt;h2&gt;Elvis Operator&lt;/h2&gt;&amp;#10;&lt;p&gt;Elvis operator is the short hand of the &lt;code&gt;Ternary operator&lt;/code&gt; explained above. In this operator we &lt;code&gt;do not specify the true&lt;/code&gt; condition. The true condition is will evauate to the expression itself.&lt;/p&gt;&amp;#10;&lt;p&gt;Syntax of the &lt;code&gt;elvis&lt;/code&gt; operator is&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&amp;lt;expression&amp;gt; ?: &amp;lt;executed when condition is &lt;span class="hljs-literal"&gt;false&lt;/span&gt;&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Let's see an example&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&amp;#8203;String s = &lt;span class="hljs-string"&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&amp;#10;println s!=&lt;span class="hljs-literal"&gt;null&lt;/span&gt; ?: &lt;span class="hljs-string"&gt;&amp;#34;not found&amp;#34;&lt;/span&gt;  &lt;span class="hljs-comment"&gt;// true&lt;/span&gt;&amp;#10;println s ?: &lt;span class="hljs-string"&gt;&amp;#34;not found&amp;#34;&lt;/span&gt; &lt;span class="hljs-comment"&gt;// hello&lt;/span&gt;&amp;#10;println &lt;span class="hljs-literal"&gt;null&lt;/span&gt; ?: &lt;span class="hljs-string"&gt;&amp;#34;not found&amp;#34;&lt;/span&gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;In the above example,&lt;/p&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;Expression &lt;code&gt;s!=null&lt;/code&gt; evaluates to true, and will print true&lt;/li&gt;&amp;#10;&lt;li&gt;Expression &lt;code&gt;s&lt;/code&gt; in will evaluate to true according to &lt;a href="http://www.ekiras.com/2017/02/what-is-groovy-truth-and-define-custom-groovy-truth.html"&gt;Groovy Truth&lt;/a&gt;, and will return &lt;code&gt;hello&lt;/code&gt;, the value of variable &lt;code&gt;s&lt;/code&gt;&lt;/li&gt;&amp;#10;&lt;li&gt;Expression &lt;code&gt;null&lt;/code&gt; will evaluate to false according to &lt;a href="http://www.ekiras.com/2017/02/what-is-groovy-truth-and-define-custom-groovy-truth.html"&gt;Groovy Truth&lt;/a&gt; and will return &lt;code&gt;not found&lt;/code&gt; string&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6744847969398165644/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-elvis-operator-and-difference-between-elvis-and-ternary-operator.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6744847969398165644'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6744847969398165644'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-elvis-operator-and-difference-between-elvis-and-ternary-operator.html' title='Groovy : What is Elvis Operator and difference b/w Elvis and Ternary operator'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2066327231670096529</id><published>2017-03-03T16:58:00.003+05:30</published><updated>2017-03-03T16:58:48.569+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy Operators'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy'/><title type='text'>Groovy : What is Safe Navigation operator or Null check Operator</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Safe navigation operator&lt;/h2&gt;&amp;#10;&lt;p&gt;The safe navigation Operator is used to avoid null pointer exceptions. Many a times you come across the need to access the value of an object if it is not null.&lt;/p&gt;&amp;#10;&lt;p&gt;Syntax for the Safe Navigation Operator is&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&amp;lt;object&amp;gt;?.&amp;lt;property&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Here the  could be any object and  could be any property of the object.&lt;p&gt;&lt;/p&gt;&amp;#10;&lt;p&gt;Let's have a look at the below example,&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;User&lt;/span&gt; &lt;/span&gt;{&amp;#10;  String name;&amp;#10;}&amp;#10;&amp;#10;User u  = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; User(name : &lt;span class="hljs-string"&gt;&amp;#34;ekiras&amp;#34;&lt;/span&gt;)&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(u != &lt;span class="hljs-keyword"&gt;null&lt;/span&gt;)&amp;#10;  println u.name  &lt;span class="hljs-comment"&gt;// prints ekiras&lt;/span&gt;&amp;#10;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;In the above code we have to write the &lt;code&gt;if&lt;/code&gt; block to check if the user object is null or not. So, with the Safe navigation operator we do not need to write the if-else blocks.&lt;/p&gt;&amp;#10;&lt;p&gt;We can rewrite the above code as shown below&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;User&lt;/span&gt; {&lt;/span&gt;&amp;#10;  String name;&amp;#10;}&amp;#10;&amp;#10;User u  = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; User(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;&amp;#34;ekiras&amp;#34;&lt;/span&gt;)&amp;#10;&amp;#10;println u?.name // prints ekiras&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;/p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2066327231670096529/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-safe-navigation-operator-or-null-check-operator.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2066327231670096529'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2066327231670096529'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/what-is-safe-navigation-operator-or-null-check-operator.html' title='Groovy : What is Safe Navigation operator or Null check Operator'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-493164323488367453</id><published>2017-03-02T19:14:00.001+05:30</published><updated>2017-03-02T19:14:53.242+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to upload the Jar or War file to custom path in local machine</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;Default location for gradle dependencies is &lt;code&gt;~/.gradle&lt;/code&gt; or &lt;code&gt;/home/{user}/.gradle&lt;/code&gt;.&lt;/li&gt;&amp;#10;&lt;li&gt;We can specify the location from where to gradle should find dependencies and where it should upload the created artifacts.&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;h2&gt;How to upload an Artifact to a custom location in file system&lt;/h2&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;buildscript&lt;/span&gt; {&amp;#10;    &lt;span class="hljs-keyword"&gt;repositories&lt;/span&gt; {&amp;#10;        maven {&amp;#10;            url uri(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir/repo&amp;#34;&lt;/span&gt;)&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;group&lt;/span&gt; &lt;span class="hljs-string"&gt;'com.ekiras'&lt;/span&gt;&amp;#10;version &lt;span class="hljs-string"&gt;'1.0-SNAPSHOT'&lt;/span&gt;&amp;#10;&amp;#10;apply plugin: &lt;span class="hljs-string"&gt;'groovy'&lt;/span&gt;&amp;#10;apply plugin: &lt;span class="hljs-string"&gt;'maven'&lt;/span&gt;&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;repositories&lt;/span&gt; {&amp;#10;    mavenCentral()&amp;#10;}&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;dependencies&lt;/span&gt; {&amp;#10;    &lt;span class="hljs-comment"&gt;// dependencies&lt;/span&gt;&amp;#10;}&amp;#10;uploadArchives {&amp;#10;    &lt;span class="hljs-keyword"&gt;repositories&lt;/span&gt; {&amp;#10;        mavenDeployer {&amp;#10;            repository(url: uri(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir/repo&amp;#34;&lt;/span&gt;))&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;In the above example,&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;uploadArchives {&amp;#10;    &lt;span class="hljs-keyword"&gt;repositories&lt;/span&gt; {&amp;#10;        mavenDeployer {&amp;#10;            repository(url: uri(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir/repo&amp;#34;&lt;/span&gt;))&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This tells gradle that it will upload the created artifact (jar or war ) to the directory &lt;code&gt;build/repo&lt;/code&gt;. You can specify any location on your machine where you want gradle to upload the artifact.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;buildscript&lt;/span&gt; {&amp;#10;    &lt;span class="hljs-keyword"&gt;repositories&lt;/span&gt; {&amp;#10;        maven {&amp;#10;            url uri(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir/repo&amp;#34;&lt;/span&gt;)&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above code tells gradle that it should look for the given dependencies in this repository/directory we have specified to resolve the specified dependencies. You can also specify the same in &lt;code&gt;repositories { }&lt;/code&gt; closure.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/493164323488367453/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-upload-the-jar-or-war-file-to-custom-path-in-local-machine.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/493164323488367453'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/493164323488367453'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-upload-the-jar-or-war-file-to-custom-path-in-local-machine.html' title='Gradle : How to upload the Jar or War file to custom path in local machine'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8520130890053487202</id><published>2017-03-01T18:08:00.000+05:30</published><updated>2017-03-01T18:08:05.021+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='War'/><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to make a custom War file</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&amp;#10;&lt;ol&gt;&amp;#10;&lt;li&gt;&lt;code&gt;War&lt;/code&gt; task extends &lt;code&gt;Jar&lt;/code&gt;&lt;/li&gt;&amp;#10;&lt;li&gt;You can create war files with any configuration defined in &lt;code&gt;configurations { }&lt;/code&gt; closure&lt;/li&gt;&amp;#10;&lt;li&gt;You can also add files to an existing war file.&lt;/li&gt;&amp;#10;&lt;li&gt;You can select the files that needs to be included or excluded while creating a war file&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;h2&gt;How to create a War file in Gradle&lt;/h2&gt;&amp;#10;&lt;p&gt;To create a war file you have to create a task of type &lt;code&gt;War&lt;/code&gt; as shown below&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-comment"&gt;// include java plugin &lt;/span&gt;&amp;#10;apply plugin : &lt;span class="hljs-string"&gt;'java'&lt;/span&gt;&amp;#10;&amp;#10;&lt;span class="hljs-keyword"&gt;task&lt;/span&gt; createWar(type : War){&amp;#10;    &lt;span class="hljs-keyword"&gt;destinationDir&lt;/span&gt; = &lt;span class="hljs-keyword"&gt;file&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir&amp;#34;&lt;/span&gt;)&amp;#10;    baseName = &lt;span class="hljs-string"&gt;&amp;#34;my-war&amp;#34;&lt;/span&gt;&amp;#10;    version = &lt;span class="hljs-string"&gt;&amp;#34;1.1&amp;#34;&lt;/span&gt;&amp;#10;    caseSensitive = &lt;span class="hljs-keyword"&gt;true&lt;/span&gt;&amp;#10;    classifier = &lt;span class="hljs-string"&gt;&amp;#34;SNAPSHOT&amp;#34;&lt;/span&gt;&amp;#10;    &lt;span class="hljs-keyword"&gt;from&lt;/span&gt; &lt;span class="hljs-string"&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Run the above task with command &lt;code&gt;gradle -q createWar&lt;/code&gt;, this will create a war file named &lt;code&gt;my-war-1.1-SNAPSHOT.war&lt;/code&gt; in the &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt;&amp;#10;&lt;p&gt;&lt;a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.War.html"&gt;See Full Documentation of War Task&lt;/a&gt;&lt;/p&gt;&amp;#10;&lt;h2&gt;How to create a War file and exclude some files&lt;/h2&gt;&amp;#10;&lt;p&gt;Now if we want to exclude some files from a war file we can use the &lt;code&gt;exclude&lt;/code&gt;  method which takes &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;/code&gt;, and excludes them from the war file. Lets see an example below&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;task&lt;/span&gt; createWar(type : War){&amp;#10;    &lt;span class="hljs-keyword"&gt;destinationDir&lt;/span&gt; = &lt;span class="hljs-keyword"&gt;file&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir&amp;#34;&lt;/span&gt;)&amp;#10;    baseName = &lt;span class="hljs-string"&gt;&amp;#34;my-war&amp;#34;&lt;/span&gt;&amp;#10;    version = &lt;span class="hljs-string"&gt;&amp;#34;1.1&amp;#34;&lt;/span&gt;&amp;#10;    caseSensitive = &lt;span class="hljs-keyword"&gt;true&lt;/span&gt;&amp;#10;    classifier = &lt;span class="hljs-string"&gt;&amp;#34;SNAPSHOT&amp;#34;&lt;/span&gt;&amp;#10;    &lt;span class="hljs-keyword"&gt;from&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;src/main&amp;#34;&lt;/span&gt;){&amp;#10;        excludes = [&amp;#10;            &lt;span class="hljs-string"&gt;&amp;#34;resources/test.txt&amp;#34;&lt;/span&gt;&amp;#10;        ]&amp;#10;    }&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above task will create a &lt;code&gt;war&lt;/code&gt; file and will exclude the file &lt;code&gt;test.txt&lt;/code&gt; from directory &lt;code&gt;src/main/resources/&lt;/code&gt; .&lt;/p&gt;&amp;#10;&lt;div class="note"&gt; &lt;b&gt;Note&lt;/b&gt;&lt;br&gt;&lt;ol&gt;&amp;#10;&lt;li&gt;You can add multiple files in the exclude array to exclude multiple files&lt;/li&gt;&amp;#10;&lt;li&gt;You can add a directory to exclude it from war, e.g &lt;code&gt;excludes = [ 'resources/**' ]&lt;/code&gt;, this will exclude all files and folders in resources folder.&lt;/li&gt;&amp;#10;&lt;/ol&gt;&amp;#10;&lt;/div&gt;&lt;br&gt;&lt;h2&gt;How to create a War file and include files from some other directory&lt;/h2&gt;&amp;#10;&lt;p&gt;You may also get a scenario when you have to include some files from some other directory to the war file. To do that you can use the &lt;code&gt;includes&lt;/code&gt; method and define an array of files or folders to be included.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;task&lt;/span&gt; createWar(type : War){&amp;#10;    &lt;span class="hljs-keyword"&gt;destinationDir&lt;/span&gt; = &lt;span class="hljs-keyword"&gt;file&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir&amp;#34;&lt;/span&gt;)&amp;#10;    baseName = &lt;span class="hljs-string"&gt;&amp;#34;my-war&amp;#34;&lt;/span&gt;&amp;#10;    version = &lt;span class="hljs-string"&gt;&amp;#34;1.1&amp;#34;&lt;/span&gt;&amp;#10;    caseSensitive = &lt;span class="hljs-keyword"&gt;true&lt;/span&gt;&amp;#10;    classifier = &lt;span class="hljs-string"&gt;&amp;#34;SNAPSHOT&amp;#34;&lt;/span&gt;&amp;#10;    &lt;span class="hljs-keyword"&gt;from&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;src/main&amp;#34;&lt;/span&gt;){&amp;#10;        excludes = [&amp;#10;            &lt;span class="hljs-string"&gt;&amp;#34;resources/**&amp;#34;&lt;/span&gt;&amp;#10;        ]&amp;#10;    }&amp;#10;    &lt;span class="hljs-keyword"&gt;from&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;src/demo&amp;#34;&lt;/span&gt;){&amp;#10;        &lt;span class="hljs-keyword"&gt;includes&lt;/span&gt; = [&amp;#10;             &lt;span class="hljs-string"&gt;&amp;#34;a.txt&amp;#34;&lt;/span&gt;,&amp;#10;             &lt;span class="hljs-string"&gt;&amp;#34;b.txt&amp;#34;&lt;/span&gt;&amp;#10;        ]&amp;#10;    }&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above task will include the files from &lt;code&gt;src/main&lt;/code&gt; folder and &lt;code&gt;src/demo&lt;/code&gt; folder and make a war file.&lt;/p&gt;&amp;#10;&lt;h2&gt;Copy files to an War file at custom location&lt;/h2&gt;&amp;#10;&lt;p&gt;You may need to copy some files to the war file in some custom directory. Lets say, you want to copy configuration files from directory &lt;code&gt;src/conf&lt;/code&gt; to folder &lt;code&gt;/conf&lt;/code&gt; in the war file. Then you can write the task as shown below&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;task&lt;/span&gt; createWar(type : War){&amp;#10;    &lt;span class="hljs-keyword"&gt;destinationDir&lt;/span&gt; = &lt;span class="hljs-keyword"&gt;file&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;$buildDir&amp;#34;&lt;/span&gt;)&amp;#10;    baseName = &lt;span class="hljs-string"&gt;&amp;#34;my-war&amp;#34;&lt;/span&gt;&amp;#10;    version = &lt;span class="hljs-string"&gt;&amp;#34;1.1&amp;#34;&lt;/span&gt;&amp;#10;    caseSensitive = &lt;span class="hljs-keyword"&gt;true&lt;/span&gt;&amp;#10;    classifier = &lt;span class="hljs-string"&gt;&amp;#34;SNAPSHOT&amp;#34;&lt;/span&gt;&amp;#10;    &lt;span class="hljs-keyword"&gt;from&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;src/main&amp;#34;&lt;/span&gt;){&amp;#10;        excludes = [&amp;#10;            &lt;span class="hljs-string"&gt;&amp;#34;resources/**&amp;#34;&lt;/span&gt;&amp;#10;        ]&amp;#10;    }&amp;#10;    &lt;span class="hljs-keyword"&gt;from&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;src/conf&amp;#34;&lt;/span&gt;){&amp;#10;        &lt;span class="hljs-keyword"&gt;into&lt;/span&gt;(&lt;span class="hljs-string"&gt;&amp;#34;/conf&amp;#34;&lt;/span&gt;)&amp;#10;    }&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This task will copy the files from &lt;code&gt;/src/conf&lt;/code&gt; to the &lt;code&gt;/conf&lt;/code&gt; folder in the war file.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8520130890053487202/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-make-a-war-file-include-exclude-files-gradle.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8520130890053487202'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8520130890053487202'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/03/how-to-make-a-war-file-include-exclude-files-gradle.html' title='Gradle : How to make a custom War file'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8501956646615201783</id><published>2017-02-23T11:59:00.000+05:30</published><updated>2017-03-03T14:58:38.716+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy'/><title type='text'>Groovy : What is Groovy Truth and define Custom Groovy Truth</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="markdown"&gt;&lt;h2&gt;What is Groovy Truth&lt;/h2&gt;Groovy has its own way of defining what is true and what is false, this is called the &lt;code&gt;Groovy Truth&lt;/code&gt;. In Java, we have to write statements like &lt;code&gt;if(obj ==null)&lt;/code&gt;, in groovy you can simply write &lt;code&gt;if(obj)&lt;/code&gt; and you can define in what conditions this object will evaluate to true and when it will evaluate to false.&lt;br /&gt;&lt;pre class="info"&gt; &lt;b&gt;Info&lt;/b&gt;&lt;br /&gt;To define your custom logic for groovy Truth you need to define method&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;boolean&lt;/span&gt; asBoolean(){&lt;br /&gt; &lt;span class="hljs-comment"&gt;// your logic here&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;What is True in Groovy&lt;/h2&gt;Following evaluated to true in groovy&lt;br /&gt;&lt;ol&gt;&lt;li&gt;boolean true&lt;/li&gt;&lt;li&gt;Not null objects&lt;/li&gt;&lt;li&gt;Non 0 numbers&lt;/li&gt;&lt;li&gt;Not null and not empty Strings&lt;/li&gt;&lt;li&gt;Not null and not empty lists, maps, collections&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;What is False in Groovy&lt;/h2&gt;Following things evaluates to false in groovy&lt;br /&gt;&lt;ol&gt;&lt;li&gt;boolean false&lt;/li&gt;&lt;li&gt;Numeric 0 number&lt;/li&gt;&lt;li&gt;Null objects&lt;/li&gt;&lt;li&gt;Null Strings&lt;/li&gt;&lt;li&gt;Null or empty lists, maps, collections&lt;/li&gt;&lt;/ol&gt;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; groovyTruth = {val-&amp;gt;&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(val)&lt;br /&gt;     println &lt;span class="hljs-string"&gt;"$val is true"&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;br /&gt;    println &lt;span class="hljs-string"&gt;"$val is false"&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;boolean&lt;/span&gt; b1 = &lt;span class="hljs-literal"&gt;true&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;boolean&lt;/span&gt; b2 = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;groovyTruth(b1)  &lt;span class="hljs-comment"&gt;// true  &lt;/span&gt;&lt;br /&gt;groovyTruth(b2) &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; n1 = &lt;span class="hljs-number"&gt;0&lt;/span&gt;  &lt;br /&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; n2 = &lt;span class="hljs-number"&gt;12&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; n3 = &lt;span class="hljs-number"&gt;-321&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;groovyTruth(n1) &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(n2) &lt;span class="hljs-comment"&gt;// true&lt;/span&gt;&lt;br /&gt;groovyTruth(n3) &lt;span class="hljs-comment"&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;String s1 = &lt;span class="hljs-literal"&gt;null&lt;/span&gt;&lt;br /&gt;String s2 = &lt;span class="hljs-string"&gt;""&lt;/span&gt;&lt;br /&gt;String s3 = &lt;span class="hljs-string"&gt;"some string"&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;groovyTruth(s1)  &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(s2)  &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(s3)  &lt;span class="hljs-comment"&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Object o1 = &lt;span class="hljs-literal"&gt;null&lt;/span&gt;&lt;br /&gt;Object o2 = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Object()&lt;br /&gt;&lt;br /&gt;groovyTruth(o1)  &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(o2)  &lt;span class="hljs-comment"&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;List l1 = &lt;span class="hljs-literal"&gt;null&lt;/span&gt;&lt;br /&gt;List l2 = []&lt;br /&gt;List l3 = [&lt;span class="hljs-number"&gt;1&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;]&lt;br /&gt;&lt;br /&gt;groovyTruth(l1) &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(l2) &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(l3) &lt;span class="hljs-comment"&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Map m1 = &lt;span class="hljs-literal"&gt;null&lt;/span&gt; &lt;br /&gt;Map m2 = [:]&lt;br /&gt;Map m3 = [&lt;span class="hljs-string"&gt;'key'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'val'&lt;/span&gt;]&lt;br /&gt;&lt;br /&gt;groovyTruth(m1)  &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(m2)  &lt;span class="hljs-comment"&gt;// false&lt;/span&gt;&lt;br /&gt;groovyTruth(m3)  &lt;span class="hljs-comment"&gt;// true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;When we run this code, it will give the following output&lt;br /&gt;&lt;div class="output"&gt;&lt;b&gt;Output&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;true is true&lt;br /&gt;false is false&lt;br /&gt;0 is false&lt;br /&gt;12 is true&lt;br /&gt;-321 is true&lt;br /&gt;null is false&lt;br /&gt;is false&lt;br /&gt;some string is true&lt;br /&gt;null is false&lt;br /&gt;java.lang.Object@37074b2c is true&lt;br /&gt;null is false&lt;br /&gt;[] is false&lt;br /&gt;[1, 2, 3] is true&lt;br /&gt;null is false&lt;br /&gt;[:] is false&lt;br /&gt;[key:val] is true&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;Custom Groovy Truth&lt;/h2&gt;You can also define your custom Groovy Truth, that is how object will evaluate to true and false . For this you need to override the method &lt;code&gt;Boolean asBoolean()&lt;/code&gt; to return a boolean value which will be used to evaluate truth of the object.&lt;br /&gt;Let's take a class Student and it should give true if the status of student is &lt;strong&gt;enrolled&lt;/strong&gt;&lt;br /&gt;&lt;pre class="hljs"&gt;&lt;code&gt;​&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Student&lt;/span&gt;{&lt;/span&gt;  &lt;br /&gt;  String name &lt;br /&gt;  String status&lt;br /&gt;&lt;br /&gt; &lt;span class="hljs-keyword"&gt;boolean&lt;/span&gt; asBoolean(){&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; status == &lt;span class="hljs-string"&gt;'enrolled'&lt;/span&gt;&lt;br /&gt; }&lt;br /&gt; String toString(){&lt;br /&gt;   &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; name&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Student s1 = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Student(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;'s1'&lt;/span&gt;, &lt;span class="hljs-string"&gt;status:&lt;/span&gt; &lt;span class="hljs-string"&gt;'enrolled'&lt;/span&gt;)&lt;br /&gt;Student s2 = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Student(&lt;span class="hljs-string"&gt;name :&lt;/span&gt; &lt;span class="hljs-string"&gt;'s2'&lt;/span&gt;, &lt;span class="hljs-string"&gt;status:&lt;/span&gt; &lt;span class="hljs-string"&gt;'applied'&lt;/span&gt;)&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; groovyTruth = {val-&amp;gt;&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(val)&lt;br /&gt;     println &lt;span class="hljs-string"&gt;"$val is true"&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;br /&gt;    println &lt;span class="hljs-string"&gt;"$val is false"&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;groovyTruth(s1)&lt;br /&gt;groovyTruth(s2)&lt;br /&gt;​&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;So the above code will give the following output&lt;br /&gt;&lt;div class="output"&gt;&lt;b&gt;Output&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;s1 is true&lt;br /&gt;s2 is false&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;How to Customise  groovy Truth for the existing Classes in Groovy&lt;/h2&gt;Let's say we want to make the string "null" to evaluate to false. Then we can override the &lt;code&gt;asBoolean()&lt;/code&gt; method of the &lt;code&gt;String&lt;/code&gt; class.&lt;br /&gt;So, the following will evaluate to false in this scenario.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;null - null object&lt;/li&gt;&lt;li&gt;""  - blank string&lt;/li&gt;&lt;li&gt;"null"  - string will null as a string&lt;/li&gt;&lt;/ol&gt;&lt;pre class="hljs"&gt;&lt;code&gt;String.metaClass.asBoolean = {&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(delegate == &lt;span class="hljs-literal"&gt;null&lt;/span&gt; || delegate == &lt;span class="hljs-string"&gt;""&lt;/span&gt; || delegate == &lt;span class="hljs-string"&gt;"null"&lt;/span&gt;)&lt;br /&gt;     &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;true&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;String s1 = &lt;span class="hljs-literal"&gt;null&lt;/span&gt;&lt;br /&gt;String s2 = &lt;span class="hljs-string"&gt;""&lt;/span&gt;&lt;br /&gt;String s3 = &lt;span class="hljs-string"&gt;"null"&lt;/span&gt;&lt;br /&gt;String s4 = &lt;span class="hljs-string"&gt;"some string"&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; groovyTruth = {val-&amp;gt;&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(val)&lt;br /&gt;     println &lt;span class="hljs-string"&gt;"$val is true"&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;br /&gt;    println &lt;span class="hljs-string"&gt;"$val is false"&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;groovyTruth(s1)&lt;br /&gt;groovyTruth(s2)&lt;br /&gt;groovyTruth(s3)&lt;br /&gt;groovyTruth(s4)​&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;This will give the following output&lt;br /&gt;&lt;div class="output"&gt;&lt;b&gt;Output&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;null is false&lt;br /&gt;is false&lt;br /&gt;null is false&lt;br /&gt;some string is true&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8501956646615201783/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/02/what-is-groovy-truth-and-define-custom-groovy-truth.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8501956646615201783'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8501956646615201783'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/02/what-is-groovy-truth-and-define-custom-groovy-truth.html' title='Groovy : What is Groovy Truth and define Custom Groovy Truth'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7641302721044432216</id><published>2017-02-15T22:34:00.002+05:30</published><updated>2017-02-15T22:35:54.449+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='npm'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Browserify'/><category scheme='http://www.blogger.com/atom/ns#' term='Node'/><title type='text'>Browserify : How to use Node.js require dependencies in Browser as Javascipt</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to get Browserify&lt;/h2&gt;&amp;#10;&lt;p&gt;Use the following to download &lt;code&gt;browserify&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm install -g browserify&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;h3&gt;Automate Browserify Dependency&lt;/h3&gt;&amp;#10;&lt;p&gt;You can also create a &lt;code&gt;package.json&lt;/code&gt; file by the following command.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm init&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This will create a basic &lt;code&gt;package.json&lt;/code&gt; file. now run the command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm install --save browserify&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;&lt;code&gt;--save&lt;/code&gt; option will download the file and save its reference in &lt;code&gt;package.json&lt;/code&gt;. Now on other machine you just need to run the command &lt;code&gt;npm install&lt;/code&gt; and it will download the &lt;code&gt;browserify&lt;/code&gt; plugin and save it on your machine.&lt;/p&gt;&amp;#10;&lt;p&gt;This will download the &lt;code&gt;browserify&lt;/code&gt; in &lt;code&gt;node_modules&lt;/code&gt; folder. Now we can use browserify to download our node dependencies. For this we will first create a &lt;code&gt;.js&lt;/code&gt; file named &lt;code&gt;require.js&lt;/code&gt;, you can name it anything you want.&lt;/p&gt;&amp;#10;&lt;p&gt;Let's see a sample file.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;angular = &lt;span class="hljs-built_in"&gt;require&lt;/span&gt;(&lt;span class="hljs-string"&gt;'angular'&lt;/span&gt;);&amp;#10;ngSanitize = &lt;span class="hljs-built_in"&gt;require&lt;/span&gt;(&lt;span class="hljs-string"&gt;'angular-sanitize'&lt;/span&gt;);&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Now, to make &lt;code&gt;browserify&lt;/code&gt; work you should have all these modules installed on your system under &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;npm install angular&amp;#10;npm install angular-sanitize&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Now, you can package both files in a single file by running the following command.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;browserify require.js &amp;gt; destFile.js&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above command will compile all the files in &lt;code&gt;require.js&lt;/code&gt; to the destination file specified after &lt;code&gt;&amp;gt;&lt;/code&gt; . You can specify both relative and absolute path.&lt;/p&gt;&amp;#10;&lt;p&gt;So, now you do not need to include both &lt;code&gt;angular.js&lt;/code&gt; and &lt;code&gt;angualr-sanitize.js&lt;/code&gt; files in your html, rather you just need to include &lt;code&gt;destFile.js&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;h2&gt;Browserify reference to included file.&lt;/h2&gt;&amp;#10;&lt;p&gt;If you want a reference to your js file you can update your js file as follows.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-comment"&gt;// to include markdown dependency&lt;/span&gt;&amp;#10;global.md = &lt;span class="hljs-built_in"&gt;require&lt;/span&gt;(&lt;span class="hljs-string"&gt;'markdown-it'&lt;/span&gt;);&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Now you can get the reference of your markdown library as md and use it in javascript or jquery as follows&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; markdown = md();&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This will make an instance of markdown and assign to variable markdown.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7641302721044432216/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/02/how-to-use-node.js-require-dependencies-in-browser-as-javascipt.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7641302721044432216'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7641302721044432216'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/02/how-to-use-node.js-require-dependencies-in-browser-as-javascipt.html' title='Browserify : How to use Node.js require dependencies in Browser as Javascipt'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1367050663451855455</id><published>2017-02-15T21:06:00.000+05:30</published><updated>2017-02-15T21:08:07.660+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><category scheme='http://www.blogger.com/atom/ns#' term='Cargo Plugin'/><title type='text'>Gradle : How to use Gradle Cargo Plugin to Deploy war on Tomcat</title><content type='html'>&lt;div class="markdown"&gt;&lt;p&gt;This post is based on the &lt;a href="https://github.com/bmuschko/gradle-cargo-plugin"&gt;Gradle Cargo Plugin by bmuschko&lt;/a&gt;&lt;/p&gt;&amp;#10;&lt;h2&gt;Include the Plugin&lt;/h2&gt;&amp;#10;&lt;p&gt;You need to include the plugin in your &lt;code&gt;build.gradle&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;buildscript&lt;/span&gt; {&amp;#10;    &lt;span class="hljs-keyword"&gt;repositories&lt;/span&gt; {&amp;#10;        jcenter()&amp;#10;    }&amp;#10;&amp;#10;    &lt;span class="hljs-keyword"&gt;dependencies&lt;/span&gt; {&amp;#10;        &lt;span class="hljs-keyword"&gt;classpath&lt;/span&gt; &lt;span class="hljs-string"&gt;'com.bmuschko:gradle-cargo-plugin:2.2.3'&lt;/span&gt;&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;apply plugin: &lt;span class="hljs-string"&gt;'com.bmuschko.cargo'&lt;/span&gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;&lt;code&gt;buildscript&lt;/code&gt; block should be the first thing in the &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;&amp;#10;&lt;h2&gt;Include the Gradle Cargo plugin dependencies&lt;/h2&gt;&amp;#10;&lt;p&gt;Add the following in your gradle&lt;code&gt;dependencies&lt;/code&gt; block&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;dependencies&lt;/span&gt; {&amp;#10;    &lt;span class="hljs-keyword"&gt;def&lt;/span&gt; cargoVersion = &lt;span class="hljs-string"&gt;'1.4.5'&lt;/span&gt;&amp;#10;    cargo &lt;span class="hljs-string"&gt;&amp;#34;org.codehaus.cargo:cargo-core-uberjar:$cargoVersion&amp;#34;&lt;/span&gt;,&amp;#10;            &lt;span class="hljs-string"&gt;&amp;#34;org.codehaus.cargo:cargo-ant:$cargoVersion&amp;#34;&lt;/span&gt;&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;h2&gt;Define the Tomcat Container&lt;/h2&gt;&amp;#10;&lt;p&gt;To deploy The war files to Tomcat you need to create a &lt;code&gt;dsl&lt;/code&gt; by name &lt;code&gt;cargo&lt;/code&gt; and define the mandatory &lt;code&gt;containerId&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;div class="note"&gt; &lt;b&gt;Note&lt;/b&gt;&lt;br&gt;&lt;p&gt;ContainerId will define the version of tomcat you want to use. If your want to deploy to tomcat6 your containerId will &lt;code&gt;tomcat6x&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;p&gt;&lt;a href="https://codehaus-cargo.github.io/cargo/Home.html"&gt;See the complete list of possible contianerId's supported&lt;/a&gt;&lt;/p&gt;&amp;#10;&lt;/div&gt;&lt;br&gt;&lt;h2&gt;Gradle task to deploy &lt;code&gt;war&lt;/code&gt; file on Tomcat&lt;/h2&gt;&amp;#10;&lt;p&gt;Below is a sample gradle task that will deploy war file from given location to Tomcat.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="hljs-keyword"&gt;task&lt;/span&gt; deployAppA(type: com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote) {&amp;#10;    &lt;span class="hljs-keyword"&gt;description&lt;/span&gt; = &lt;span class="hljs-string"&gt;&amp;#34;Deploys WAR to Tomcat .&amp;#34;&lt;/span&gt;  &lt;span class="hljs-comment"&gt;// description of task &lt;/span&gt;&amp;#10;    hostname = &lt;span class="hljs-string"&gt;'127.0.0.1'&lt;/span&gt; &lt;span class="hljs-comment"&gt;// ip of the tomcat &lt;/span&gt;&amp;#10;    port = &lt;span class="hljs-number"&gt;8080&lt;/span&gt; &lt;span class="hljs-comment"&gt;// port at which tomcat is running&lt;/span&gt;&amp;#10;    username = &lt;span class="hljs-string"&gt;&amp;#34;tomcat&amp;#34;&lt;/span&gt; &lt;span class="hljs-comment"&gt;// username of tomcat&lt;/span&gt;&amp;#10;    password = &lt;span class="hljs-string"&gt;&amp;#34;tomcat&amp;#34;&lt;/span&gt;  &lt;span class="hljs-comment"&gt;// password of the tomcat&lt;/span&gt;&amp;#10;    deployables = [&amp;#10;            &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; com.bmuschko.gradle.cargo.convention.Deployable(&lt;span class="hljs-keyword"&gt;file&lt;/span&gt;: &lt;span class="hljs-keyword"&gt;file&lt;/span&gt;(&lt;span class="hljs-string"&gt;'/path/to/war/appA.war'&lt;/span&gt;), context: &lt;span class="hljs-string"&gt;'appA'&lt;/span&gt;)]&amp;#10;}&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above will deploy your war file &lt;code&gt;appA.war&lt;/code&gt; on Tomcat running on your local machine.&lt;/p&gt;&amp;#10;&lt;div class="note"&gt; &lt;b&gt;Note&lt;/b&gt;&lt;br&gt;&lt;p&gt;Your tomcat should have &lt;code&gt;manager-script&lt;/code&gt; role to allow the plugin to deploy war on tomcat.&lt;/p&gt;&amp;#10;&lt;/div&gt;&lt;br&gt;&lt;h2&gt;Adding Manage-Script role to Tomcat&lt;/h2&gt;&amp;#10;&lt;p&gt;To add the role to Tomcat, go to &lt;code&gt;path-to-tomcat/conf&lt;/code&gt; folder and replace the contents of file with the following.&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;&lt;span class="php"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span class="hljs-string"&gt;'1.0'&lt;/span&gt; encoding=&lt;span class="hljs-string"&gt;'utf-8'&lt;/span&gt;&lt;span class="hljs-meta"&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;#10;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;tomcat-users&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#10;  &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;role&lt;/span&gt; &lt;span class="hljs-attr"&gt;rolename&lt;/span&gt;=&lt;span class="hljs-string"&gt;&amp;#34;manager-script&amp;#34;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&amp;#10;  &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;user&lt;/span&gt; &lt;span class="hljs-attr"&gt;username&lt;/span&gt;=&lt;span class="hljs-string"&gt;&amp;#34;tomcat&amp;#34;&lt;/span&gt; &lt;span class="hljs-attr"&gt;password&lt;/span&gt;=&lt;span class="hljs-string"&gt;&amp;#34;tomcat&amp;#34;&lt;/span&gt; &lt;span class="hljs-attr"&gt;roles&lt;/span&gt;=&lt;span class="hljs-string"&gt;&amp;#34;tomcat,manager-script&amp;#34;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&amp;#10;&amp;#10;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;tomcat-users&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;The above will set a user &lt;code&gt;tomcat&lt;/code&gt; with password &lt;code&gt;tomcat&lt;/code&gt; and roles &lt;code&gt;tomcat&lt;/code&gt; and &lt;code&gt;manager-script&lt;/code&gt;.&lt;/p&gt;&amp;#10;&lt;p&gt;Now restart your tomcat server and run the gradle task with the command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;gradle -q deployAppA&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;This should deploy your war file to tomcat.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1367050663451855455/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/02/how-to-use-gradle-cargo-plugin-to-deploy-war-on-tomcat.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1367050663451855455'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1367050663451855455'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/02/how-to-use-gradle-cargo-plugin-to-deploy-war-on-tomcat.html' title='Gradle : How to use Gradle Cargo Plugin to Deploy war on Tomcat'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7719185100077048568</id><published>2017-02-15T18:07:00.000+05:30</published><updated>2017-02-15T20:10:12.664+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><category scheme='http://www.blogger.com/atom/ns#' term='WINDOWS'/><title type='text'>Tomcat : How to start Tomcat as a service on Windows 7,8,10</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Step 1 : Download and Extract tomcat&lt;/h2&gt;&amp;#10;&lt;p&gt;&lt;a href="http://tomcat.apache.org/index.html"&gt;Download tomcat&lt;/a&gt; from the link in &lt;code&gt;.zip&lt;/code&gt; format. Once download is complete extract the tomcat in the location you want, preferably &lt;code&gt;C:\Tomcat\&lt;/code&gt;.&lt;br&gt;&amp;#10;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat-ws-1.png" alt="Tomcat extract"&gt;&lt;/p&gt;&amp;#10;&lt;h2&gt;Step 2 : Install Tomcat as a Service&lt;/h2&gt;&amp;#10;&lt;p&gt;Go to the tomcat directory &lt;code&gt;C:\Tomcat\bin&lt;/code&gt;. in the address bar write &lt;code&gt;cmd&lt;/code&gt;. This will open the command prompt window.&lt;br&gt;&amp;#10;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat-ws-2.png" alt="Tomcat extract"&gt;&lt;/p&gt;&amp;#10;&lt;p&gt;Now in the command prompt window type the command&lt;/p&gt;&amp;#10;&lt;pre class="hljs"&gt;&lt;code&gt;service.bat install &amp;lt;Service -Name&amp;gt;&amp;#10;&lt;/code&gt;&lt;/pre&gt;&amp;#10;&lt;p&gt;Here &lt;code&gt;&amp;lt;Service-Name&amp;gt;&lt;/code&gt; can be any name that you want to assign to your Service.&lt;/p&gt;&amp;#10;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat-ws-3.png" alt="Tomcat extract"&gt;&lt;/p&gt;&amp;#10;&lt;p&gt;When you run this command you will see the following output.&lt;/p&gt;&amp;#10;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat-ws-4.png" alt="Tomcat extract"&gt;&lt;/p&gt;&amp;#10;&lt;h2&gt;Check the installed Service&lt;/h2&gt;&amp;#10;&lt;p&gt;Now, lets see if the service is created or not. For this open &lt;code&gt;Services&lt;/code&gt; . It will give the following screen.&lt;/p&gt;&amp;#10;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat-ws-5.png" alt="Tomcat extract"&gt;&lt;/p&gt;&amp;#10;&lt;h2&gt;Configure Service to Run at Startup&lt;/h2&gt;&amp;#10;&lt;p&gt;We can make the service to run on windows startup, for this, open the Service setting by double click on the service. It will open the following screen&lt;/p&gt;&amp;#10;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat-ws-6.png" alt="Tomcat extract"&gt;&lt;/p&gt;&amp;#10;&lt;p&gt;From the dropdown &lt;code&gt;Startup type&lt;/code&gt; select &lt;code&gt;Automatic&lt;/code&gt; . This will start the service when &lt;code&gt;Windows&lt;/code&gt; starts/boots.&lt;/p&gt;&amp;#10;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7719185100077048568/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/02/how-to-start-tomcat-as-a-service-on-windows-7-8-10.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7719185100077048568'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7719185100077048568'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/02/how-to-start-tomcat-as-a-service-on-windows-7-8-10.html' title='Tomcat : How to start Tomcat as a service on Windows 7,8,10'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3123612441941422002</id><published>2017-01-03T13:10:00.002+05:30</published><updated>2017-01-03T13:10:54.366+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Jar'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How To Exclude Files and Packages from a Jar file</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How To Exclude File from a Jar file.&lt;/h2&gt;&lt;p&gt;Gradle task &lt;code&gt;Jar&lt;/code&gt; has a property &lt;code&gt;excludes&lt;/code&gt; which takes an array as an input and exclude these files from the Jar file it creates.&lt;/p&gt;&lt;p&gt;Let's assume the following directory structure&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/gradle/jar1.png" alt="Project Structure"&gt;&lt;/p&gt;&lt;p&gt;Following example excludes files from the Jar file.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task createExcludingFiles(type :Jar){&lt;br /&gt;    from ('src'){&lt;br /&gt;        excludes = ["main/java/com/ekiras/demo/D.java","main/java/com/ekiras/demo/E.java"]&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will exclude files &lt;code&gt;D.java&lt;/code&gt;, &lt;code&gt;E.java&lt;/code&gt; from the jar file. Run the gradle task using command &lt;code&gt;gradle -q createExcludingFiles&lt;/code&gt;. The Jar file created will have the following files.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;META-INF/&lt;br /&gt;META-INF/MANIFEST.MF&lt;br /&gt;main/&lt;br /&gt;main/java/&lt;br /&gt;main/java/com/&lt;br /&gt;main/java/com/ekiras/&lt;br /&gt;main/java/com/ekiras/demo/&lt;br /&gt;main/java/com/ekiras/demo/A.java&lt;br /&gt;main/java/com/ekiras/demo/C.java&lt;br /&gt;main/java/com/ekiras/demo/F.java&lt;br /&gt;main/java/com/ekiras/demo/B.java&lt;br /&gt;main/java/com/ekiras/demo/p1/&lt;br /&gt;main/java/com/ekiras/demo/p1/X.java&lt;br /&gt;main/java/com/ekiras/demo/p1/Z.java&lt;br /&gt;main/java/com/ekiras/demo/p1/Y.java&lt;br /&gt;test/&lt;br /&gt;test/java/&lt;br /&gt;main/resources/&lt;br /&gt;test/resources/&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Exclude Package in Jar file&lt;/h2&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task createExcludingPackage(type :Jar){&lt;br /&gt;    from ('src'){&lt;br /&gt;        excludes = ["main/java/com/ekiras/demo/D.java" ,"main/java/com/ekiras/demo/p1/**"]&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the task using command &lt;code&gt;gradle -q createExcludingPackage&lt;/code&gt;. This will remove&lt;/p&gt;&lt;ol&gt;&lt;li&gt;All the files from package &lt;code&gt;p1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Class D.java&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The Jar file created will have the following files.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-output"&gt;META-INF/&lt;br /&gt;META-INF/MANIFEST.MF&lt;br /&gt;main/&lt;br /&gt;main/java/&lt;br /&gt;main/java/com/&lt;br /&gt;main/java/com/ekiras/&lt;br /&gt;main/java/com/ekiras/demo/&lt;br /&gt;main/java/com/ekiras/demo/A.java&lt;br /&gt;main/java/com/ekiras/demo/E.java&lt;br /&gt;main/java/com/ekiras/demo/C.java&lt;br /&gt;main/java/com/ekiras/demo/F.java&lt;br /&gt;main/java/com/ekiras/demo/B.java&lt;br /&gt;test/&lt;br /&gt;test/java/&lt;br /&gt;main/resources/&lt;br /&gt;test/resources/&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class="download"&gt;    &lt;a href="https://github.com/ekiras/gradle"&gt;Download from Github&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3123612441941422002/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-exclude-files-packages-from-jar-file-created-gradle-task.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3123612441941422002'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3123612441941422002'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-exclude-files-packages-from-jar-file-created-gradle-task.html' title='Gradle : How To Exclude Files and Packages from a Jar file'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3034798876469617572</id><published>2017-01-02T19:30:00.000+05:30</published><updated>2017-01-02T19:30:36.748+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Jar'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to create a Jar file</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to name a Jar file&lt;/h2&gt;&lt;p&gt;Lets take the following jar file for explaning the jar naming conventions.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;customName_wrapper_2.0.1_SNAPSHOT.jar&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A jar file has the following properties&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;baseName&lt;/td&gt;&lt;td&gt;customName&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;appendix&lt;/td&gt;&lt;td&gt;wrapper&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;version&lt;/td&gt;&lt;td&gt;2.0.1&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;classifier&lt;/td&gt;&lt;td&gt;SNAPSHOT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;archiveName&lt;/td&gt;&lt;td&gt;-&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;Here property &lt;code&gt;archiveName&lt;/code&gt; if specified will override all the other naming conventions like &lt;code&gt;baseName&lt;/code&gt; etc. It should be a fully  qualified name of the Jar including the extension (.jar)&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Other Properties of Gradle Task :: Jar&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;destinationDir&lt;/td&gt;&lt;td&gt;Destination where jar is to be created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;manifest&lt;/td&gt;&lt;td&gt;Include Manifest file&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;from&lt;/td&gt;&lt;td&gt;Directory from where files are to be read&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Creating a Jar file&lt;/h2&gt;&lt;p&gt;Let's assume the following directory structure&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/gradle/jar1.png" alt="Project Structure"&gt;&lt;/p&gt;&lt;h2&gt;Create a Jar file with all files.&lt;/h2&gt;&lt;p&gt;We can write a gradle task to include all files in &lt;code&gt;src&lt;/code&gt; to our jar file as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task createAll(type : Jar){&lt;br /&gt;    from 'src'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the gradle task as &lt;code&gt;gradle -q createAll&lt;/code&gt; will give the following files in the jar&lt;/p&gt;&lt;pre&gt;&lt;code&gt;META-INF/&lt;br /&gt;META-INF/MANIFEST.MF&lt;br /&gt;main/&lt;br /&gt;main/java/&lt;br /&gt;main/java/com/&lt;br /&gt;main/java/com/ekiras/&lt;br /&gt;main/java/com/ekiras/demo/&lt;br /&gt;main/java/com/ekiras/demo/D.java&lt;br /&gt;main/java/com/ekiras/demo/A.java&lt;br /&gt;main/java/com/ekiras/demo/E.java&lt;br /&gt;main/java/com/ekiras/demo/C.java&lt;br /&gt;main/java/com/ekiras/demo/F.java&lt;br /&gt;main/java/com/ekiras/demo/B.java&lt;br /&gt;main/java/com/ekiras/demo/p1/&lt;br /&gt;main/java/com/ekiras/demo/p1/X.java&lt;br /&gt;main/java/com/ekiras/demo/p1/Z.java&lt;br /&gt;main/java/com/ekiras/demo/p1/Y.java&lt;br /&gt;test/&lt;br /&gt;test/java/&lt;br /&gt;main/resources/&lt;br /&gt;test/resources/&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create a Jar file from a Package.&lt;/h2&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task createFromPackage(type : Jar){&lt;br /&gt;    from ("src/main/java/com/ekiras/demo/p1")&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the above task with command &lt;code&gt;gradle -q createFromPackage&lt;/code&gt;, it will give the following files in jar.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;META-INF/&lt;br /&gt;META-INF/MANIFEST.MF&lt;br /&gt;X.java&lt;br /&gt;Z.java&lt;br /&gt;Y.java&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create a Jar file with Selected Files.&lt;/h2&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task createSelectedJar(type : Jar){&lt;br /&gt;    from ('src/main/java/com/ekiras/demo'){&lt;br /&gt;        includes = ["A.java","B.java", "p1/X.java", "p1/Y.java"]&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the above command with command &lt;code&gt;gradle -q createSelectedJar&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;META-INF/&lt;br /&gt;META-INF/MANIFEST.MF&lt;br /&gt;A.java&lt;br /&gt;B.java&lt;br /&gt;p1/&lt;br /&gt;p1/X.java&lt;br /&gt;p1/Y.java&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Create a Jar file excluding some files&lt;/h2&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task createExcludingFiles(type :Jar){&lt;br /&gt;    from ('src'){&lt;br /&gt;        excludes = ["main/java/com/ekiras/demo/D.java","main/java/com/ekiras/demo/E.java", "main/java/com/ekiras/demo/p1/**"]&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the gradle task with command &lt;code&gt;gradle -q createExcludingFiles&lt;/code&gt;. It will result in a jar file with the following files&lt;/p&gt;&lt;pre&gt;&lt;code class="language-output"&gt;META-INF/&lt;br /&gt;META-INF/MANIFEST.MF&lt;br /&gt;main/&lt;br /&gt;main/java/&lt;br /&gt;main/java/com/&lt;br /&gt;main/java/com/ekiras/&lt;br /&gt;main/java/com/ekiras/demo/&lt;br /&gt;main/java/com/ekiras/demo/A.java&lt;br /&gt;main/java/com/ekiras/demo/C.java&lt;br /&gt;main/java/com/ekiras/demo/F.java&lt;br /&gt;main/java/com/ekiras/demo/B.java&lt;br /&gt;test/&lt;br /&gt;test/java/&lt;br /&gt;main/resources/&lt;br /&gt;test/resources/&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;To Sum up all the exmaples above&lt;/h2&gt;&lt;p&gt;Following is a gradle task that create a jar file&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task createJar(type: Jar){&lt;br /&gt;    from ('src/main/java/com/ekiras/demo'){&lt;br /&gt;        includes = ["A.java","B.java", "p1/**"]&lt;br /&gt;        excludes = ["D.java","E.java"]&lt;br /&gt;    }&lt;br /&gt;    baseName = 'customName'&lt;br /&gt;    appendix = 'wrapper'&lt;br /&gt;    version = "2.0.1"&lt;br /&gt;    classifier = 'SNAPSHOT'&lt;br /&gt;    archiveName = "${baseName}_${appendix}_${version}_${classifier}.jar"&lt;br /&gt;    extension  = "ext"&lt;br /&gt;    destinationDir = new File("${buildDir}/test/a")&lt;br /&gt;&lt;br /&gt;    manifest {&lt;br /&gt;        attributes = [&lt;br /&gt;                'Main-Class' : "com.ekiras.A",&lt;br /&gt;                'Version'    : 2.0&lt;br /&gt;         ]&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;we can also write a gradle task to see the files that were created inside the jar file as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task showFiles(dependsOn : createJar){&lt;br /&gt;    doLast{&lt;br /&gt;        FileTree files = zipTree("${buildDir}/test/a/${archiveName}")&lt;br /&gt;        files.each {&lt;br /&gt;            println "${it.name}"&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the task &lt;code&gt;gradle -q createJar showFiles&lt;/code&gt; or simply &lt;code&gt;gradle -q showFiles&lt;/code&gt; , it will give the following result&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A.java&lt;br /&gt;B.java&lt;br /&gt;MANIFEST.MF&lt;br /&gt;X.java&lt;br /&gt;Y.java&lt;br /&gt;Z.java&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3034798876469617572/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-create-jar-file-include-exclude-files-gradle-task.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3034798876469617572'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3034798876469617572'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-create-jar-file-include-exclude-files-gradle-task.html' title='Gradle : How to create a Jar file'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-555782195147569100</id><published>2017-01-02T17:23:00.000+05:30</published><updated>2017-01-02T17:26:04.384+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><title type='text'>Tomcat : How to start Tomcat on more than one Port.</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to start Tomcat on more than one Port.&lt;/h2&gt;&lt;p&gt;Tomcat settings can be found in &lt;code&gt;TomcatFolder/conf/server.xml&lt;/code&gt; file.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;Root&lt;/code&gt; element of the configuration is &lt;code&gt;Server&lt;/code&gt; tag.&lt;/li&gt;&lt;li&gt;You can add multiple &lt;code&gt;Service&lt;/code&gt; under &lt;code&gt;Server&lt;/code&gt; tag for running tomcat on more than one port.&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Default Service Configuration should look as follows&lt;/h3&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;  &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Service&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"Catalina"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8080"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"HTTP/1.1"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;connectionTimeout&lt;/span&gt;=&lt;span class="hljs-value"&gt;"20000"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8009"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"AJP/1.3"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Engine&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"Catalina"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;defaultHost&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Realm&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.realm.LockOutRealm"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Realm&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.realm.UserDatabaseRealm"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;resourceName&lt;/span&gt;=&lt;span class="hljs-value"&gt;"UserDatabase"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Realm&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Host&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;  &lt;span class="hljs-attribute"&gt;appBase&lt;/span&gt;=&lt;span class="hljs-value"&gt;"webapps"&lt;/span&gt;&lt;br /&gt;            &lt;span class="hljs-attribute"&gt;unpackWARs&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;autoDeploy&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Valve&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.valves.AccessLogValve"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;directory&lt;/span&gt;=&lt;span class="hljs-value"&gt;"logs"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;prefix&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost_access_log."&lt;/span&gt; &lt;span class="hljs-attribute"&gt;suffix&lt;/span&gt;=&lt;span class="hljs-value"&gt;".txt"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;pattern&lt;/span&gt;=&lt;span class="hljs-value"&gt;"%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Engine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Service&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above configurations states the folllowing things&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;Service name="Catalina"&lt;/code&gt; - Service name is &lt;code&gt;Catalina&lt;/code&gt;, you can change it to give your application name.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Connector port="8080" protocol="HTTP/1.1"&lt;/code&gt; - Tomcat will run on &lt;code&gt;port 8080&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;connectionTimeout="20000"&lt;/code&gt; - Connection timeout in &lt;code&gt;20000 mili seconds&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Connector port="8009" protocol="AJP/1.3"&lt;/code&gt; - AJP connection on port &lt;code&gt;8009&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;name="localhost"&lt;/code&gt; - Name of the host where tomcat will run.&lt;/li&gt;&lt;li&gt;&lt;code&gt;appBase="webapp"&lt;/code&gt; - Base directory for deployed apps is &lt;code&gt;webapp&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;unpackWARs="true"&lt;/code&gt; - The war files deplyed wll be unpacked&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Running Tomcat on multiple ports.&lt;/h2&gt;&lt;p&gt;To start tomcat on more than one port you can add multiple &lt;code&gt;Service&lt;/code&gt; blocks under &lt;code&gt;Server&lt;/code&gt; root tag as shown below&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;  &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Service&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"app1"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8080"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"HTTP/1.1"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;connectionTimeout&lt;/span&gt;=&lt;span class="hljs-value"&gt;"20000"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8009"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"AJP/1.3"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Engine&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"Catalina"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;defaultHost&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Realm&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.realm.LockOutRealm"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Realm&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.realm.UserDatabaseRealm"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;resourceName&lt;/span&gt;=&lt;span class="hljs-value"&gt;"UserDatabase"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Realm&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Host&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;  &lt;span class="hljs-attribute"&gt;appBase&lt;/span&gt;=&lt;span class="hljs-value"&gt;"app1"&lt;/span&gt;&lt;br /&gt;            &lt;span class="hljs-attribute"&gt;unpackWARs&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;autoDeploy&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Valve&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.valves.AccessLogValve"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;directory&lt;/span&gt;=&lt;span class="hljs-value"&gt;"logs"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;prefix&lt;/span&gt;=&lt;span class="hljs-value"&gt;"app1_access_log."&lt;/span&gt; &lt;span class="hljs-attribute"&gt;suffix&lt;/span&gt;=&lt;span class="hljs-value"&gt;".txt"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;pattern&lt;/span&gt;=&lt;span class="hljs-value"&gt;"%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Engine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Service&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Service&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"app2"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8090"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"HTTP/1.1"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;connectionTimeout&lt;/span&gt;=&lt;span class="hljs-value"&gt;"20000"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8091"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"AJP/1.3"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Engine&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"Catalina"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;defaultHost&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Realm&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.realm.LockOutRealm"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Realm&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.realm.UserDatabaseRealm"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;resourceName&lt;/span&gt;=&lt;span class="hljs-value"&gt;"UserDatabase"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Realm&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Host&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;  &lt;span class="hljs-attribute"&gt;appBase&lt;/span&gt;=&lt;span class="hljs-value"&gt;"app2"&lt;/span&gt;&lt;br /&gt;            &lt;span class="hljs-attribute"&gt;unpackWARs&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;autoDeploy&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Valve&lt;/span&gt; &lt;span class="hljs-attribute"&gt;className&lt;/span&gt;=&lt;span class="hljs-value"&gt;"org.apache.catalina.valves.AccessLogValve"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;directory&lt;/span&gt;=&lt;span class="hljs-value"&gt;"logs"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;prefix&lt;/span&gt;=&lt;span class="hljs-value"&gt;"app2_access_log."&lt;/span&gt; &lt;span class="hljs-attribute"&gt;suffix&lt;/span&gt;=&lt;span class="hljs-value"&gt;".txt"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;pattern&lt;/span&gt;=&lt;span class="hljs-value"&gt;"%h %l %u %t &amp;amp;quot;%r&amp;amp;quot; %s %b"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Host&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Engine&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-title"&gt;Service&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here in above configuration we have specified the following.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Service &lt;code&gt;app1&lt;/code&gt; configuration will run on port &lt;code&gt;8080&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Service &lt;code&gt;app2&lt;/code&gt; configuration will run on port &lt;code&gt;8090&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;app1&lt;/code&gt; will keep files and war files in folder &lt;code&gt;app1&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;app2&lt;/code&gt; will keep files and war files in folder &lt;code&gt;app2&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;app1&lt;/code&gt; and &lt;code&gt;app2&lt;/code&gt; will write access logs in folder &lt;code&gt;logs/app1_access_log.txt&lt;/code&gt; and &lt;code&gt;logs/app2_access_log.txt&lt;/code&gt; respectively&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;Note : None of the above configuration will keep files or war files in webapp folder.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-run-change-default-port-8080-of-tomcat.html"&gt;How to change default port 8080 of Tomcat&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/tomcat-how-to-change-deployment-directory-webapps-to-custom-directory.html"&gt;How to change Deployment directory from webapp to custom Directory&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-start-tomcat-on-multiple-more-than-one-ports.html"&gt;How to start Tomcat on more than one Port&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2014/12/how-to-deploy-war-on-tomcat.html"&gt;How to Deploy a war on Tomcat&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/555782195147569100/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-start-tomcat-on-multiple-more-than-one-ports.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/555782195147569100'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/555782195147569100'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-start-tomcat-on-multiple-more-than-one-ports.html' title='Tomcat : How to start Tomcat on more than one Port.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4854330224674047336</id><published>2017-01-02T17:18:00.000+05:30</published><updated>2017-01-02T17:27:55.778+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><title type='text'>Tomcat : How to change default port 8080 of Tomcat</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to change default port 8080 of Tomcat&lt;/h2&gt;&lt;p&gt;Look for the file &lt;code&gt;server.xml&lt;/code&gt; in folder &lt;code&gt;path-to-Tomcat/conf/&lt;/code&gt;&lt;/p&gt;&lt;p&gt;This file containes the configuration for tomcat. Look for the following lines in this file.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8080"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"HTTP/1.1"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;connectionTimeout&lt;/span&gt;=&lt;span class="hljs-value"&gt;"20000"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Connector port="8080"&lt;/code&gt; defines the port on which the tomcat will run. If you want to run tomcat on any port other than &lt;code&gt;8080&lt;/code&gt; then you can just change the port number here.&lt;/p&gt;&lt;p&gt;e.g Running Tomcat on port 8090&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8090"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"HTTP/1.1"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;connectionTimeout&lt;/span&gt;=&lt;span class="hljs-value"&gt;"20000"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;e.g Running Tomcat on port 9000&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Connector&lt;/span&gt; &lt;span class="hljs-attribute"&gt;port&lt;/span&gt;=&lt;span class="hljs-value"&gt;"9000"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;protocol&lt;/span&gt;=&lt;span class="hljs-value"&gt;"HTTP/1.1"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;connectionTimeout&lt;/span&gt;=&lt;span class="hljs-value"&gt;"20000"&lt;/span&gt;&lt;br /&gt;               &lt;span class="hljs-attribute"&gt;redirectPort&lt;/span&gt;=&lt;span class="hljs-value"&gt;"8443"&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-run-change-default-port-8080-of-tomcat.html"&gt;How to change default port 8080 of Tomcat&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/tomcat-how-to-change-deployment-directory-webapps-to-custom-directory.html"&gt;How to change Deployment directory from webapp to custom Directory&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-start-tomcat-on-multiple-more-than-one-ports.html"&gt;How to start Tomcat on more than one Port&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2014/12/how-to-deploy-war-on-tomcat.html"&gt;How to Deploy a war on Tomcat&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4854330224674047336/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-run-change-default-port-8080-of-tomcat.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4854330224674047336'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4854330224674047336'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2017/01/how-to-run-change-default-port-8080-of-tomcat.html' title='Tomcat : How to change default port 8080 of Tomcat'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5930643533657047274</id><published>2016-12-31T11:25:00.000+05:30</published><updated>2016-12-31T11:25:33.930+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><title type='text'>Tomcat : How to change Deployment  directory from webapp to custom Directory.</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to change Working Directory of Tomcat to Custom Directory&lt;/h2&gt;&lt;p&gt;Default Tomcat working directory is &lt;code&gt;webapp&lt;/code&gt;. If you want to change this to some other directory then you can follow the steps below.&lt;/p&gt;&lt;p&gt;Open the &lt;code&gt;server.xml&lt;/code&gt; file. You can find this file in &lt;code&gt;conf/&lt;/code&gt; directory of your tomcat folder.&lt;/p&gt;&lt;p&gt;Find the following line in the file&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;br /&gt;     &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Host&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;  &lt;span class="hljs-attribute"&gt;appBase&lt;/span&gt;=&lt;span class="hljs-value"&gt;"webapps"&lt;/span&gt;&lt;br /&gt;           &lt;span class="hljs-attribute"&gt;unpackWARs&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;autoDeploy&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It states the following things&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;name="localhost"&lt;/code&gt; - name of the server&lt;/li&gt;&lt;li&gt;&lt;code&gt;appBase="webapps"&lt;/code&gt; - working directory of tomcat where applications are deployed&lt;/li&gt;&lt;li&gt;&lt;code&gt;unpackWARs="true"&lt;/code&gt; - if tomcat should unpack war files.&lt;/li&gt;&lt;li&gt;&lt;code&gt;autoDeploy="true"&lt;/code&gt; - if tomcat should auto deploy changes&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;How to change Work directory of tomcat.&lt;/h2&gt;&lt;p&gt;To change the work directory from &lt;code&gt;webapp&lt;/code&gt; to some other directory you can give the&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;absolute path&lt;/code&gt; to the directory where you want to deploy apps.&lt;/li&gt;&lt;li&gt;&lt;code&gt;relative path&lt;/code&gt; to the directory inside the Tomcat folder.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;e.g Deploying in directory with absolute path&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;br /&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Host&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;  &lt;span class="hljs-attribute"&gt;appBase&lt;/span&gt;=&lt;span class="hljs-value"&gt;"/home/ekiras/tomcat/deploy"&lt;/span&gt;&lt;br /&gt;           &lt;span class="hljs-attribute"&gt;unpackWARs&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;autoDeploy&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Deploying in directory with relative path&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;br /&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;Host&lt;/span&gt; &lt;span class="hljs-attribute"&gt;name&lt;/span&gt;=&lt;span class="hljs-value"&gt;"localhost"&lt;/span&gt;  &lt;span class="hljs-attribute"&gt;appBase&lt;/span&gt;=&lt;span class="hljs-value"&gt;"custom"&lt;/span&gt;&lt;br /&gt;         &lt;span class="hljs-attribute"&gt;unpackWARs&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;autoDeploy&lt;/span&gt;=&lt;span class="hljs-value"&gt;"true"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5930643533657047274/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/tomcat-how-to-change-deployment-directory-webapps-to-custom-directory.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5930643533657047274'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5930643533657047274'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/tomcat-how-to-change-deployment-directory-webapps-to-custom-directory.html' title='Tomcat : How to change Deployment  directory from webapp to custom Directory.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3434998133858912723</id><published>2016-12-17T00:44:00.000+05:30</published><updated>2016-12-31T11:14:42.668+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to list files inside a Jar, Zip Tar Files in Gradle Task</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to load and read files in Gradle Project.&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Gradle Project Api&lt;/code&gt; has the following methods for using files.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;file()&lt;/code&gt; - to load and read a particular file&lt;/li&gt;&lt;li&gt;&lt;code&gt;files()&lt;/code&gt;  - to load and read multiple files&lt;/li&gt;&lt;li&gt;&lt;code&gt;fileTree()&lt;/code&gt; - to load and read file hierarchy in a directory or folder&lt;/li&gt;&lt;li&gt;&lt;code&gt;zipTree()&lt;/code&gt; - to load and read a zip file (includes Jar , War and Ear files)&lt;/li&gt;&lt;li&gt;&lt;code&gt;tarTree()&lt;/code&gt; - to load and read a tar file&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;How to list files inside a Zip file Jar File and Tar file&lt;/h2&gt;&lt;p&gt;Lets say we have a file structure as shown in image below.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/gradle/gf-1.png" alt="File Structure"&gt;&lt;/p&gt;&lt;p&gt;Following Gradle task will list the files inside a zip file, jar file and a tar file at the location "src/main/resources/archives/"&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task showFiles(){&lt;br /&gt;    doLast{&lt;br /&gt;        FileTree zipFiles = zipTree("src/main/resources/archives/resources.zip");&lt;br /&gt;        FileTree jarFiles = zipTree("src/main/resources/archives/resources.jar");&lt;br /&gt;        FileTree tarFiles = tarTree("src/main/resources/archives/resources.tar.gz");&lt;br /&gt;&lt;br /&gt;        println " \n#Contents of Zip File"&lt;br /&gt;        zipFiles.each {&lt;br /&gt;            println "${it.name}"&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        println " \n#Contents of Jar File"&lt;br /&gt;        jarFiles.each {&lt;br /&gt;            println "${it.name}"&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        println " \n#Contents of Tar File"&lt;br /&gt;        tarFiles.each {&lt;br /&gt;            println "${it.name}"&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the above gradle task using command &lt;code&gt;gradle -q showFiles&lt;/code&gt;, it will give the following output.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-output"&gt; &lt;br /&gt;#Contents of Zip File&lt;br /&gt;file1.properties&lt;br /&gt;sample1.txt&lt;br /&gt;sample2txt&lt;br /&gt; &lt;br /&gt;#Contents of Jar File&lt;br /&gt;file1.properties&lt;br /&gt;sample1.txt&lt;br /&gt;sample2txt&lt;br /&gt; &lt;br /&gt;#Contents of Tar File&lt;br /&gt;sample1.txt&lt;br /&gt;file1.properties&lt;br /&gt;sample2txt&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-how-to-load-and-read-file.html"&gt;How to Get a File using Relative Path&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-file-collection-in-gradle.html"&gt;How to Get Multiple Files using FileCollection &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-read-all-files-in-directory-file-tree.html"&gt;How to Get all files in a Directory using FileTree&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/difference-between-file-file-collection-and-file-tree.html"&gt;Difference between File, FileCollection and FileTree in Gradle&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3434998133858912723/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-list-files-inside-jar-tar-zip-files-gradle-task.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3434998133858912723'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3434998133858912723'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-list-files-inside-jar-tar-zip-files-gradle-task.html' title='Gradle : How to list files inside a Jar, Zip Tar Files in Gradle Task'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7654003647514223064</id><published>2016-12-09T00:38:00.000+05:30</published><updated>2016-12-09T11:28:02.439+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : Difference between File, FileCollection and FileTree in Gradle</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Difference Between File, FileCollection and FileTree in Gradle&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;File&lt;/th&gt;&lt;th&gt;FileCollection&lt;/th&gt;&lt;th&gt;FileTree&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;File is from &lt;code&gt;java.io&lt;/code&gt; package&lt;/td&gt;&lt;td&gt;FileCollection is from &lt;code&gt;org.gradle.api.file&lt;/code&gt; package&lt;/td&gt;&lt;td&gt;FileTree is from &lt;code&gt;org.gradle.api.file&lt;/code&gt; package&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;File represents a single file.&lt;/td&gt;&lt;td&gt;FileCollection represents a collection of files&lt;/td&gt;&lt;td&gt;FileTree represents hierarchy of files in a directory or folder.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Difference Between File, FileCollection and FileTree&lt;/h2&gt;&lt;p&gt;Suppose we have a directory structure as shown in image below.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/gradle/fs-1.png" alt="File Structure"&gt;&lt;/p&gt;&lt;p&gt;We can write a gradle task as shown below&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;&lt;br /&gt;task loadFiles(){&lt;br /&gt;    doLast{&lt;br /&gt;&lt;br /&gt;        File file = file('src/main/resources/sample1.txt')&lt;br /&gt;        println file.name&lt;br /&gt;        println "\n"&lt;br /&gt;&lt;br /&gt;        FileCollection collection = files('src/main/resources/sample1.txt','src/main/resources/sample2.txt')&lt;br /&gt;        collection.each {&lt;br /&gt;            println it.name&lt;br /&gt;        }&lt;br /&gt;        println "\n"&lt;br /&gt;&lt;br /&gt;        FileTree tree = fileTree('src')&lt;br /&gt;        tree.each {&lt;br /&gt;            println it.name&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the above gradle task using command &lt;code&gt;gradle -q loadFiles&lt;/code&gt;, it will give the following output.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-output"&gt;sample1.txt&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;sample1.txt&lt;br /&gt;sample2.txt&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;sample1.txt&lt;br /&gt;sample2txt&lt;br /&gt;file1.properties&lt;br /&gt;A.java&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-how-to-load-and-read-file.html"&gt;How to Get a File using Relative Path&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-file-collection-in-gradle.html"&gt;How to Get Multiple Files using FileCollection &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-read-all-files-in-directory-file-tree.html"&gt;How to Get all files in a Directory using FileTree&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7654003647514223064/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/difference-between-file-file-collection-and-file-tree.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7654003647514223064'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7654003647514223064'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/difference-between-file-file-collection-and-file-tree.html' title='Gradle : Difference between File, FileCollection and FileTree in Gradle'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6280094514247255538</id><published>2016-12-09T00:34:00.000+05:30</published><updated>2016-12-09T00:34:38.727+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to read all files in a directory using FileTree</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Introduction to FileTree in Gradle Api&lt;/h2&gt;&lt;p&gt;&lt;code&gt;FileTree&lt;/code&gt; is an interface that extends &lt;a href="http://www.ekiras.com/2016/12/what-is-file-collection-in-gradle.html"&gt;FileCollection&lt;/a&gt; and introduces methods like &lt;code&gt;matching()&lt;/code&gt; and &lt;code&gt;visit()&lt;/code&gt;. It class represents a hierarchy of files in a given directory. It includes files in same folder and all sub folders.&lt;/p&gt;&lt;h2&gt;How to get all files in a Directory&lt;/h2&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/gradle/fs-1.png" alt="File Structure"&gt;&lt;/p&gt;&lt;p&gt;To load all files in a given directory and its sub directories you can use &lt;code&gt;FileTree&lt;/code&gt;. Syntax for FileTree is as shown below.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;FileTree tree = fileTree('path/to/dir')&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The FileTree can get files in following ways&lt;/p&gt;&lt;ol&gt;&lt;li&gt;from relative path&lt;/li&gt;&lt;li&gt;from&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We can write a gradle task to list all the files in the src folder as shown below.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;&lt;br /&gt;task loadFiles(){&lt;br /&gt;    doLast{&lt;br /&gt;        FileTree tree = fileTree('src')&lt;br /&gt;        tree.each {&lt;br /&gt;            println it.name&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the aobe task using command &lt;code&gt;gradle -q loadFiles&lt;/code&gt; it will give the following output&lt;/p&gt;&lt;pre&gt;&lt;code class="language-output"&gt;sample1.txt&lt;br /&gt;sample2txt&lt;br /&gt;file1.properties&lt;br /&gt;A.java&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6280094514247255538/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-read-all-files-in-directory-file-tree.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6280094514247255538'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6280094514247255538'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-read-all-files-in-directory-file-tree.html' title='Gradle : How to read all files in a directory using FileTree'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7946682926043142282</id><published>2016-12-08T20:21:00.003+05:30</published><updated>2016-12-17T00:37:45.719+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : What is a FileCollection in Gradle Api</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Introduction to FileCollection&lt;/h2&gt;&lt;p&gt;&lt;code&gt;FileCollection&lt;/code&gt; is an interface that extends &lt;code&gt;Iterable&amp;lt;File&amp;gt;&lt;/code&gt;, &lt;code&gt;AntBuilderAware&lt;/code&gt; and &lt;code&gt;Buildable&lt;/code&gt; interfaces.&lt;/p&gt;&lt;h2&gt;How to load files in a FileCollection&lt;/h2&gt;&lt;p&gt;Suppose we have a file structure as shown in image below&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/gradle/gf-1.png" alt="File Structure"&gt;&lt;/p&gt;&lt;p&gt;We can load multiple files for operation using the following syntax&lt;/p&gt;&lt;pre&gt;&lt;code&gt;FileCollection collection = files('relative/path/file1','absolute/path/file2',new File('file3'))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown in the example above we can load files in three ways&lt;/p&gt;&lt;ol&gt;&lt;li&gt;From a relative path&lt;/li&gt;&lt;li&gt;From a absolute path&lt;/li&gt;&lt;li&gt;From a File object.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We can write a gradle task to read all files in a folder or directory as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task fileTree(){&lt;br /&gt;    doLast{&lt;br /&gt;        FileTree tree = fileTree('src')&lt;br /&gt;        tree.each {&lt;br /&gt;            println it.name&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when we run the above gradle task with the command &lt;code&gt;gradle -q fileTree&lt;/code&gt;, it will give the following output&lt;/p&gt;&lt;pre&gt;&lt;code class="language-output"&gt;sample1.txt&lt;br /&gt;sample2txt&lt;br /&gt;file1.properties&lt;br /&gt;resources.tar.gz&lt;br /&gt;resources.jar&lt;br /&gt;resources.zip&lt;br /&gt;A.java&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Operations and methods available for FileCollection&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;getSingleFile()&lt;/code&gt; - It returns a single file. (it will throw IllegalStateException if files contains more than one file or no file)&lt;/li&gt;&lt;li&gt;&lt;code&gt;getAsFileTree()&lt;/code&gt; - It returns the FileCollection as a FileTree.&lt;/li&gt;&lt;li&gt;&lt;code&gt;plus(FileCollection collection)&lt;/code&gt; - It will add the specified file collection to the existing file collection.&lt;/li&gt;&lt;li&gt;&lt;code&gt;minus(FileCollection collection)&lt;/code&gt; - It will remove from the collection files in specified collection.&lt;/li&gt;&lt;li&gt;&lt;code&gt;filter(Closure filter)&lt;/code&gt; - It will filter the files from collection and make changes to the same collection.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-how-to-load-and-read-file.html"&gt;How to Get a File using Relative Path&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-file-collection-in-gradle.html"&gt;How to Get Multiple Files using FileCollection &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-read-all-files-in-directory-file-tree.html"&gt;How to Get all files in a Directory using FileTree&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/difference-between-file-file-collection-and-file-tree.html"&gt;Difference between File, FileCollection and FileTree in Gradle&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7946682926043142282/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-file-collection-in-gradle.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7946682926043142282'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7946682926043142282'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-file-collection-in-gradle.html' title='Gradle : What is a FileCollection in Gradle Api'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1635160257443407517</id><published>2016-12-08T18:20:00.000+05:30</published><updated>2016-12-09T11:10:45.297+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to load and read a file in gradle task</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to read a file in Gradle Task&lt;/h2&gt;&lt;p&gt;To load a file, you can take following three approaches&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Load file using relative path&lt;pre&gt;&lt;code&gt;File file = file('relative/path/file')&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Load file using absolute path&lt;pre&gt;&lt;code&gt;File file = file('absolute/path/file')&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Load a file using &lt;code&gt;File&lt;/code&gt; object&lt;pre&gt;&lt;code&gt;File file = file(new File('somePath'))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Lets see how these three approaches work&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task loadFiles &amp;lt;&amp;lt; {&lt;br /&gt;   println file('src/main/resources/file1.properties')&lt;br /&gt;   println file('/home/ekiras/workspace/tutorials/gradle/src/main/resources/file1.properties')&lt;br /&gt;   println file(new File('src/main/resources/file1.properties'))&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the above task using command &lt;code&gt;gradle -q loadFiles&lt;/code&gt; it will give the following output&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/home/ekiras/workspace/tutorials/gradle/src/main/resources/file1.properties&lt;br /&gt;/home/ekiras/workspace/tutorials/gradle/src/main/resources/file1.properties&lt;br /&gt;/home/ekiras/workspace/tutorials/gradle/src/main/resources/file1.properties&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;How to read a File in gradle task&lt;/h2&gt;&lt;p&gt;Say, we have a file &lt;code&gt;sample.txt&lt;/code&gt; in &lt;code&gt;src/main/resources&lt;/code&gt; folder with the following context&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I am some awesome text line 1&lt;br /&gt;I am some awesome text line 2&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets read this file in a gradle task.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task readFile(){&lt;br /&gt;    doLast{&lt;br /&gt;        File file = file('src/main/resources/sample.txt')&lt;br /&gt;        println file.text&lt;br /&gt;        println ""&lt;br /&gt;        file.readLines().each{&lt;br /&gt;            println it&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now when we run the command &lt;code&gt;gradle -q readFile&lt;/code&gt; we will get the following output.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;I am some awesome text line 1&lt;br /&gt;I am some awesome text line 2&lt;br /&gt;&lt;br /&gt;I am some awesome text line 1&lt;br /&gt;I am some awesome text line 2&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-how-to-load-and-read-file.html"&gt;How to Get a File using Relative Path&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-file-collection-in-gradle.html"&gt;How to Get Multiple Files using FileCollection &lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-read-all-files-in-directory-file-tree.html"&gt;How to Get all files in a Directory using FileTree&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1635160257443407517/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-how-to-load-and-read-file.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1635160257443407517'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1635160257443407517'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-how-to-load-and-read-file.html' title='Gradle : How to load and read a file in gradle task'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8678494046227984552</id><published>2016-12-08T01:27:00.000+05:30</published><updated>2016-12-08T01:27:46.197+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to check if the operation system is Windows, Linux or Mac Os.</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to check if the operation system is Windows, Linux or Mac Os.&lt;/h2&gt;&lt;p&gt;&lt;code&gt;org.gradle.internal.os.OperatingSystem&lt;/code&gt; is an interface in gradle. This interface provides methods to get th einformation about the operating system.&lt;/p&gt;&lt;p&gt;This interface provides the following method to get the information about the operating system.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task osInfo(){&lt;br /&gt;    doLast{&lt;br /&gt;        println OperatingSystem.current();&lt;br /&gt;        println OperatingSystem.current().name;&lt;br /&gt;        println OperatingSystem.current().isLinux();&lt;br /&gt;        println OperatingSystem.current().isMacOsX();&lt;br /&gt;        println OperatingSystem.current().isWindows();&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the task with the command &lt;code&gt;gradle -q osInfo&lt;/code&gt; it will give the following information.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:osInfo&lt;br /&gt;Linux 4.4.0-51-generic amd64&lt;br /&gt;Linux&lt;br /&gt;true&lt;br /&gt;false&lt;br /&gt;false&lt;br /&gt;&lt;br /&gt;BUILD SUCCESSFUL&lt;br /&gt;&lt;br /&gt;Total time: 0.68 secs&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8678494046227984552/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-how-to-check-if-operation-system-is-linux-mac-windows.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8678494046227984552'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8678494046227984552'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-how-to-check-if-operation-system-is-linux-mac-windows.html' title='Gradle : How to check if the operation system is Windows, Linux or Mac Os.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6118856173678162210</id><published>2016-12-06T12:50:00.000+05:30</published><updated>2016-12-06T12:51:48.003+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : Introduction to Gradle Build Lifecycle</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Gradle Build Lifecycle Phases&lt;/h2&gt;&lt;p&gt;A gradle build has three phases&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;Initialization&lt;/code&gt; - In this phase the gradle build is initialized. Gradle scans the project and its sub projects to create a &lt;code&gt;Project&lt;/code&gt; instance of each project and sub project.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Configuration&lt;/code&gt; - In this phase the gradle build is configured. In this phase a &lt;code&gt;Task tree&lt;/code&gt; is created which determines how and when to run the tasks.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Execution&lt;/code&gt; - In this phase the gradle build is executed. This phase actually runs the tasks configured in the configuration phase.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;What are the Gradle Build Phases&lt;/h2&gt;&lt;p&gt;Lets take the following example&lt;/p&gt;&lt;h3&gt;build.gradle&lt;/h3&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;&lt;br /&gt;println 'This is executed during the configuration phase.'&lt;br /&gt;&lt;br /&gt;task configured {&lt;br /&gt;    println 'This is also executed during the configuration phase.'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task test {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'This is executed during the execution phase.'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task testBoth {&lt;br /&gt;    doFirst {&lt;br /&gt;      println 'This is executed first during the execution phase.'&lt;br /&gt;    }&lt;br /&gt;    doLast {&lt;br /&gt;      println 'This is executed last during the execution phase.'&lt;br /&gt;    }&lt;br /&gt;    println 'This is executed during the configuration phase as well.'&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above example is self explanatory and tell you about the gradle build lifecycle phases. When run it will give the following output.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;This is executed during the initialization phase.&lt;br /&gt;This is executed during the configuration phase.&lt;br /&gt;This is also executed during the configuration phase.&lt;br /&gt;This is executed during the configuration phase as well.&lt;br /&gt;:test&lt;br /&gt;This is executed during the execution phase.&lt;br /&gt;:testBoth&lt;br /&gt;This is executed first during the execution phase.&lt;br /&gt;This is executed last during the execution phase.&lt;br /&gt;&lt;br /&gt;BUILD SUCCESSFUL&lt;br /&gt;&lt;br /&gt;Total time: 1 secs&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="www.ekiras.com/p/gradle.html"&gt;Introduction to Gradle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-task-alias-short-forms.html"&gt;Gradle task Short hand notations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-run-single-or-multiple-gradle-tasks.html"&gt;How to run a specific gradle task or multiple tasks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/difference-between-dofirst-and-dolast-methods-in-gradle-task.html"&gt;Difference between doFirst() and doLast() methods&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-daemon.html"&gt;What is a Gradle Daemon&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6118856173678162210/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-build-life-cycle-phases-gradle.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6118856173678162210'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6118856173678162210'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-build-life-cycle-phases-gradle.html' title='Gradle : Introduction to Gradle Build Lifecycle'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-906899938796652476</id><published>2016-12-06T12:44:00.000+05:30</published><updated>2016-12-06T12:46:10.651+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to make a task that depends on another task</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to write a Gradle Task&lt;/h2&gt;&lt;p&gt;A gradle task can be written in the following two ways&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task hello(){&lt;br /&gt;  doLast(){&lt;br /&gt;    println "Hello World"&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or you can write a task as follows&lt;/p&gt;&lt;pre&gt;&lt;code&gt;task hello &amp;lt;&amp;lt; {&lt;br /&gt;   println "Hello World"&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here in example 2, &lt;code&gt;&amp;lt;&amp;lt; operator is simply an alias for doLast.&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;Write a Gradle Task that depends on another Gadle Task&lt;/h2&gt;&lt;p&gt;Lets take an example of the following gradle file.&lt;/p&gt;&lt;h3&gt;build.gradle&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;task openFile(){&lt;br /&gt;    doLast{&lt;br /&gt;        println "Open file"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task readFile(dependsOn : 'openFile'){&lt;br /&gt;    doLast{&lt;br /&gt;        println "Read File"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task closeFile(dependsOn : ['openFile','readFile']){&lt;br /&gt;    doLast{&lt;br /&gt;        println "Close File"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here in this example, we have three tasks&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;openFile&lt;/code&gt; - that will open a file&lt;/li&gt;&lt;li&gt;&lt;code&gt;readFile&lt;/code&gt; - that will read a file&lt;/li&gt;&lt;li&gt;&lt;code&gt;closeFile&lt;/code&gt; - that will close a file.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now, for able to read from a file, we should first open a file, so &lt;code&gt;readFile depends on openFile&lt;/code&gt;, also a file will be closed after reading a file so &lt;code&gt;closeFile task depends on both openFile and readFile&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Now if we run the tasks, it will give the following outputs&lt;/p&gt;&lt;pre&gt;&lt;code class="language-bash"&gt;&amp;gt; gradle -q openFile or gradle -q oF&lt;br /&gt;&amp;gt; Open file&lt;br /&gt;&lt;br /&gt;&amp;gt; gradle -q &lt;span class="hljs-built_in"&gt;read&lt;/span&gt;File or gradle -q cF&lt;br /&gt;&amp;gt; Open file&lt;br /&gt;&amp;gt; Read File&lt;br /&gt;&lt;br /&gt;gradle -q closeFile or gradle -q cF&lt;br /&gt;&amp;gt; Open file&lt;br /&gt;&amp;gt; Read File&lt;br /&gt;&amp;gt; Close File&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A gradle task is loaded in a lazy manner that means you can define a task anywhere in the build file. &lt;code&gt;The task dependency is looked in execution phase and not in configuration phase.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Let's check it by the following example&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;&lt;br /&gt;// Task B does not exists here but will be resolved at runtime.&lt;br /&gt;task A(dependsOn : 'B'){ &lt;br /&gt;  doLast(){&lt;br /&gt;    println "A"&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task B(){&lt;br /&gt;  doLast(){&lt;br /&gt;    println "B"&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="www.ekiras.com/p/gradle.html"&gt;Introduction to Gradle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-task-alias-short-forms.html"&gt;Gradle task Short hand notations&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-run-single-or-multiple-gradle-tasks.html"&gt;How to run a specific gradle task or multiple tasks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/difference-between-dofirst-and-dolast-methods-in-gradle-task.html"&gt;Difference between doFirst() and doLast() methods&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-daemon.html"&gt;What is a Gradle Daemon&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/906899938796652476/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-make-gradle-task-that-depends-on-another-gradle-task.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/906899938796652476'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/906899938796652476'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-make-gradle-task-that-depends-on-another-gradle-task.html' title='Gradle : How to make a task that depends on another task'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4394065785905869466</id><published>2016-12-05T23:50:00.000+05:30</published><updated>2016-12-05T23:50:17.531+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : What are task alias short forms</title><content type='html'> &lt;div class="markdown"&gt;&lt;h2&gt;What is a Gradle Task alias&lt;/h2&gt;&lt;p&gt;Suppose we have a gradle file as below&lt;/p&gt;&lt;h3&gt;build.gradle&lt;/h3&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task copyAllFiles(){&lt;br /&gt;    doLast{&lt;br /&gt;        println "copyAllFiles"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task copySomeFiles(){&lt;br /&gt;    doLast{&lt;br /&gt;        println "copyAllFiles"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task copyParticularFiles(){&lt;br /&gt;    doLast{&lt;br /&gt;        println "copyAllFiles"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now to run the above tasks we have to run the following commands&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle -q copyAllFiles&lt;br /&gt;gradle -q copySomeFiles&lt;br /&gt;gradle -q copyParticularFiles&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However we can also run the gradle tasks by unique names that diffrenetiates the tasks for example&lt;/p&gt;&lt;pre&gt;&lt;code class="language-bash"&gt;gradle -q cAF // short form &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; copyAllFiles&lt;br /&gt;gradle -q cSF // short form &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; copySomeFiles&lt;br /&gt;gradle -q cPF // short form &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; copyParticularFiles&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but if we run a task with a short name that does not uniquely define a task then it will trow an exception. for example&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;gradle -q copy&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will throw the execption&lt;/p&gt;&lt;pre&gt;&lt;code&gt;FAILURE: Build failed with an exception.&lt;br /&gt;&lt;br /&gt;* What went wrong:&lt;br /&gt;Task 'copy' is ambiguous in root project 'Gradle Tutorial'. Candidates are: 'copyAllFiles', 'copyParticularFiles', 'copySomeFiles'.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also note, that the characters used for short form are case sensitive, so &lt;code&gt;cAF&lt;/code&gt; will run the task &lt;code&gt;copyAllFiles&lt;/code&gt; but &lt;code&gt;caf&lt;/code&gt; will not.&lt;/p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4394065785905869466/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-gradle-task-alias-short-forms.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4394065785905869466'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4394065785905869466'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-gradle-task-alias-short-forms.html' title='Gradle : What are task alias short forms'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2399029000243250639</id><published>2016-12-05T04:06:00.000+05:30</published><updated>2016-12-05T04:12:21.419+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to define a list of Default tasks in Gradle</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;What is a Gradle Default task ?&lt;/h2&gt;&lt;p&gt;In gradle, we can have &lt;code&gt;default tasks&lt;/code&gt;. A default task is a task that will run if no task is specified. We can define any task a gradle default task using the following&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;defaultTasks 'task1','task2'&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;defaultTasks&lt;/code&gt; takes a list of tasks as a parameter. These tasks will be run if no task is specidied to run.&lt;/p&gt;&lt;h3&gt;build.gradle&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;defaultTasks 'banner','attribution'&lt;br /&gt;&lt;br /&gt;task banner(){&lt;br /&gt;    doLast {&lt;br /&gt;        println "______ _    _";&lt;br /&gt;        println "|  ____| |  (_)"&lt;br /&gt;        println "| |__  | | ___ _ __ __ _ ___   ___ ___  _ __ ___"&lt;br /&gt;        println "|  __| | |/ / | '__/ _` / __| / __/ _ \\| '_ ` _ \\"&lt;br /&gt;        println "| |____|   &amp;lt;| | | | (_| \\__ \\| (_| (_) | | | | | |"&lt;br /&gt;        println "|______|_|\\_\\_|_|  \\__,_|___(_)___\\___/|_| |_| |_|"&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;task attribution(){&lt;br /&gt;    doLast {&lt;br /&gt;        println "Developed by :: Ekansh Rastogi"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Default tasks will be run in the following two cases. In both the cases we have not specified the tasks that we need to run.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;1. gradle &lt;br /&gt;2. gradle -q&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will give the following output.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-sh"&gt;:banner&lt;br /&gt;______ _    _&lt;br /&gt;|  ____| |  (_)&lt;br /&gt;| |__  | | ___ _ __ __ _ ___   ___ ___  _ __ ___&lt;br /&gt;|  __| | |/ / | &lt;span class="hljs-string"&gt;'__/ _` / __| / __/ _ \| '&lt;/span&gt;_ ` _ \&lt;br /&gt;| |____|   &amp;lt;| | | | (_| \__ \| (_| (_) | | | | | |&lt;br /&gt;|______|_|\_\_|_|  \__,_|___(_)___\___/|_| |_| |_|&lt;br /&gt;:attribution&lt;br /&gt;Developed by :: Ekansh Rastogi&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2399029000243250639/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-default-task-in-gradle.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2399029000243250639'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2399029000243250639'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-default-task-in-gradle.html' title='Gradle : How to define a list of Default tasks in Gradle'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1830087244059014596</id><published>2016-12-05T02:51:00.000+05:30</published><updated>2016-12-05T03:08:08.317+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle Daemon'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to disable Gradle Daemon</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to disable Gradle Daemon&lt;/h2&gt;&lt;p&gt;There are two ways in which you can disable gradle daemons.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Using Environment Variable&lt;br&gt;To disable gradle daemon using env variable you can add a new flag &lt;code&gt;-Dorg.gradle.daemon=false&lt;/code&gt; to &lt;code&gt;GRADLE_OPTS&lt;/code&gt; env variable.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;GRADLE_OPTS="-Dorg.gradle.daemon=false"&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Using &lt;code&gt;gradle.properties&lt;/code&gt;&lt;/p&gt;&lt;p&gt;To diable gradle daemon using gradle.properties, you can edit the &lt;code&gt;gradle.properties&lt;/code&gt; file that is under the directory &lt;code&gt;&amp;lt;User-Home&amp;gt;/.gradle/&lt;/code&gt;. You need to set the following property in the file.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;org.gradle.daemon=false&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/p/gradle.html"&gt;Introduction to Gradle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-daemon.html"&gt;Gradle : What is a Gradle Daemon ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-continue-build-even-if-a-failure-occurs.html"&gt;How to continue a build even if a failure occurs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-import-gradle-file-in-another-gradle-file.html"&gt;How to import a gradle file in another gradle file&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-stop-running-gradle-daemon.html"&gt;How to stop a running Gradle Daemon ?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1830087244059014596/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-disable-gradle-daemon.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1830087244059014596'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1830087244059014596'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-disable-gradle-daemon.html' title='Gradle : How to disable Gradle Daemon'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-51698118755975665</id><published>2016-12-05T01:49:00.001+05:30</published><updated>2016-12-05T03:08:00.845+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle Daemon'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to list all running Gradle Daemon processes</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to list all running Gradle Daemon processes&lt;/h2&gt;&lt;p&gt;To see a list of all the running gradle Daemon processes you can use the following command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle --status&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will give you a list of all the running processes with their versions as shown in the sample output below.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-shell"&gt;   PID STATUS   INFO&lt;br /&gt;  3461 IDLE     3.0&lt;br /&gt; 31881 BUSY     3.0&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here the output is&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;PID&lt;/code&gt; - the process id of the gradle daemon process.&lt;/li&gt;&lt;li&gt;&lt;code&gt;STATUS&lt;/code&gt; - status of the Gradle Daemon, Idle states that this gradle daemon can be used for making builds. BUSY states that it is currently used for running some build.&lt;/li&gt;&lt;li&gt;&lt;code&gt;INFO&lt;/code&gt; - it states the version of gradle that is being used for these daemons.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/p/gradle.html"&gt;Introduction to Gradle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-daemon.html"&gt;Gradle : What is a Gradle Daemon ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-continue-build-even-if-a-failure-occurs.html"&gt;How to continue a build even if a failure occurs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-import-gradle-file-in-another-gradle-file.html"&gt;How to import a gradle file in another gradle file&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-stop-running-gradle-daemon.html"&gt;How to stop a running Gradle Daemon ?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/51698118755975665/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-how-to-list-all-running-gradle-daemons.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/51698118755975665'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/51698118755975665'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/gradle-how-to-list-all-running-gradle-daemons.html' title='Gradle : How to list all running Gradle Daemon processes'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8478317025141519682</id><published>2016-12-05T01:40:00.000+05:30</published><updated>2016-12-05T03:07:50.012+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle Daemon'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to stop a running Gradle Daemon ?</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to stop a running Gradle Daemon ?&lt;/h2&gt;&lt;p&gt;To stop all the runnung gradle daemon processes you can using the following command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle --stop&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will stop all the gradle daemon processess that are &lt;code&gt;running with the same gradle version as version of gradle that runs this command.&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/p/gradle.html"&gt;Introduction to Gradle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-daemon.html"&gt;Gradle : What is a Gradle Daemon ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-continue-build-even-if-a-failure-occurs.html"&gt;How to continue a build even if a failure occurs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-import-gradle-file-in-another-gradle-file.html"&gt;How to import a gradle file in another gradle file&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8478317025141519682/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-stop-running-gradle-daemon.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8478317025141519682'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8478317025141519682'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-stop-running-gradle-daemon.html' title='Gradle : How to stop a running Gradle Daemon ?'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4471023648764172219</id><published>2016-12-05T00:28:00.000+05:30</published><updated>2016-12-05T03:08:19.352+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle Daemon'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : What is a Gradle Daemon ?</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Gradle runs on JVM and several other dependencies.&lt;/li&gt;&lt;li&gt;Gradle has to do boootstrap stuff whenever gradle is started.&lt;/li&gt;&lt;li&gt;This startup process takes time and makes the build slower.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To overcome these points &lt;code&gt;gradle daemon&lt;/code&gt; was introduced.&lt;/p&gt;&lt;h2&gt;What is a Gradle Daemon ?&lt;/h2&gt;&lt;p&gt;Gradle daemon is a &lt;code&gt;long lived background background process&lt;/code&gt; that can be reused for building gradle projects faster. &lt;code&gt;Gradle wrapper&lt;/code&gt; saves the time for starting a new gradle instance every time and saves time required for bootstrapping and initialization.Such bootstrap tasks include&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Initialization of JVM&lt;/li&gt;&lt;li&gt;Cache Project information&lt;/li&gt;&lt;li&gt;Cache files , tasks&lt;/li&gt;&lt;li&gt;Project structures etc&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Gradle daemon is &lt;code&gt;configurable&lt;/code&gt; and can be switched on of off using &lt;code&gt;gradle.properties&lt;/code&gt; in path &lt;code&gt;&amp;lt;user-home&amp;gt;/.gradle/gradle.properties&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Also, gradle daemon &lt;code&gt;should be used only for development environments and not for production environmnets.&lt;/code&gt; This is beacasue in production environments you want to build your projet independently since it is more reliable.&lt;/p&gt;&lt;h2&gt;Check the status of Gradle Daemon&lt;/h2&gt;&lt;p&gt;To check the status of the gradle deamon you can use the command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle --status&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above command gives the following output. (A Gradle version can only connect to daemons of the same version.)&lt;/p&gt;&lt;pre&gt;&lt;code&gt;   PID STATUS   INFO&lt;br /&gt;  3461 IDLE     3.0&lt;br /&gt; 31881 BUSY     3.0&lt;br /&gt;&lt;br /&gt;Only Daemons for the current Gradle version are displayed.&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;How to stop a Gradle daemon&lt;/h2&gt;&lt;p&gt;To stop all running gradle daemon processess you can run the following command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle --stop&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will stop all the daemon processess that started with the same version of gradle that is used to execute the command.&lt;/p&gt;&lt;h2&gt;States of a Gradle Daemon&lt;/h2&gt;&lt;p&gt;A radle daemon can be in the following states.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;idle&lt;/code&gt; - this is a gradle state that is running but is not doing any execution. This gradle daemon can be used for running new builds.&lt;/li&gt;&lt;li&gt;&lt;code&gt;compatible&lt;/code&gt; - This is a gradle daemon that is compatible for running a gradle biuld.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Gradle build, firsts checks for an idle daemon with compatible configurations, if it exists, then the build is started using this daemon, if no such daemon exists then gradle will start a new gradle daemon for running the build.&lt;/p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4471023648764172219/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-gradle-daemon.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4471023648764172219'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4471023648764172219'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/what-is-gradle-daemon.html' title='Gradle : What is a Gradle Daemon ?'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6253564079681929704</id><published>2016-12-01T00:16:00.000+05:30</published><updated>2016-12-01T00:16:29.810+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to run a specific gradle task or multiple tasks</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to run a specific gradle task&lt;/h2&gt;&lt;p&gt;When you want to run a particular task only then you can run that task using the following command.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-shell"&gt;gradle -q &amp;lt;task-name&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;-q&lt;/code&gt; option tells gradle that you want to run only the tasks that are provided. In this example we have instructed gradle to run only one task&lt;/p&gt;&lt;h2&gt;How to run multiple gradle tasks&lt;/h2&gt;&lt;p&gt;Multilple gradle tasks can be run using the following syntax.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-shell"&gt;gradle -q &amp;lt;task-name&amp;gt; &amp;lt;task-name&amp;gt; &amp;lt;task-name&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In second example we have told gradle to run 3 tasks, they are run in the order they are provided. However if one of the task is dependent on any other task, then that task will execute first. Also &lt;code&gt;A task is run only one time even if it is specified multiple times.&lt;/code&gt;&lt;/p&gt;&lt;p&gt;For example if we have the following tasks in &lt;code&gt;build.gradle&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;task A {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'Running task A'&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    doFirst{&lt;br /&gt;        println(" Pring first")&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task B(dependsOn: A) {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'Running task B'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task C(dependsOn: [A, B]) {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'Running task C'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and we run the tasks using the following command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle B A C&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then the gradle tasks will be executed in this manner &lt;code&gt;First A will execute then B and finally C will execute&lt;/code&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;READ MORE&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/p/gradle.html"&gt;Introduction to Gradle&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/difference-between-dofirst-and-dolast-methods-in-gradle-task.html"&gt;Difference between doFirst() and doLast() methods&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6253564079681929704/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-run-single-or-multiple-gradle-tasks.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6253564079681929704'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6253564079681929704'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/how-to-run-single-or-multiple-gradle-tasks.html' title='Gradle : How to run a specific gradle task or multiple tasks'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5201429664368847937</id><published>2016-12-01T00:11:00.000+05:30</published><updated>2016-12-01T00:11:05.183+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : Difference between doFirst() and doLast() methods</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Point to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;doFirst() and doLast() are the methods of &lt;code&gt;org.gradle.api.Task&lt;/code&gt; interface.&lt;/li&gt;&lt;li&gt;Both these methods take a &lt;code&gt;Closure&lt;/code&gt; as a parameter.&lt;/li&gt;&lt;li&gt;When a task is called this closure is called.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A &lt;code&gt;Gradle task&lt;/code&gt; is sequence of &lt;code&gt;Action&lt;/code&gt; objects and when a task is run all these actions are called in a sequence by calling &lt;code&gt;Action.execute(T)&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;What are doFirst() and doLast() methods in a Gradle task.&lt;/h2&gt;&lt;h3&gt;doFirst(Closure action)&lt;/h3&gt;&lt;p&gt;This method will add your closure as an action to the beginning of the action sequence. All the code that is written in this closure is executed first when the task is executed.&lt;/p&gt;&lt;h3&gt;doLast(Closure action)&lt;/h3&gt;&lt;p&gt;This method will add your closure as an action to the end of the action sequence. All the code in this closure is executed in last when the task is executed.&lt;/p&gt;&lt;p&gt;Let's take a look at the following example.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;task A {&lt;br /&gt;    doLast {&lt;br /&gt;        println("Running task A :: LAST")&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    doFirst{&lt;br /&gt;        println("Running task A :: FIRST ")&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run this task using command &lt;code&gt;gradle -q A&lt;/code&gt; the following is the output of the command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Running task A :: FIRST &lt;br /&gt;Running task A :: LAST&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Any code that is written outside these two methods will be executed every time, even if some other task is run.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;For example, if we write our task in the following way and run&lt;/p&gt;&lt;pre&gt;&lt;code&gt;task A {&lt;br /&gt;    println(" print statement 1")&lt;br /&gt;    doLast {&lt;br /&gt;        println("Running task A :: LAST")&lt;br /&gt;    }&lt;br /&gt;    println(" print statement 2")&lt;br /&gt;&lt;br /&gt;    doFirst{&lt;br /&gt;        println("Running task A :: FIRST ")&lt;br /&gt;    }&lt;br /&gt;    println(" print statement 3")&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will give the following output&lt;/p&gt;&lt;pre&gt;&lt;code&gt; print statement 1&lt;br /&gt; print statement 2&lt;br /&gt; print statement 3&lt;br /&gt;Running task A :: FIRST &lt;br /&gt;Running task A :: LAST&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5201429664368847937/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/12/difference-between-dofirst-and-dolast-methods-in-gradle-task.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5201429664368847937'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5201429664368847937'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/12/difference-between-dofirst-and-dolast-methods-in-gradle-task.html' title='Gradle : Difference between doFirst() and doLast() methods'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4320391935543479907</id><published>2016-11-30T14:58:00.000+05:30</published><updated>2016-11-30T15:02:53.602+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to continue a build even if a failure occurs</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;How to continue a build even if a failure occurs&lt;/h2&gt;&lt;p&gt;Many a times there is a need to continue running a build process even if some of the tasks fails. To run a build even if the some of the tasks fail we can use the &lt;code&gt;--continue&lt;/code&gt; switch.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It will execute all tasks even if some of them fails. Normal behavior is that build stops as soon as first failure is encountered.&lt;/li&gt;&lt;li&gt;It will show the report of encountered failures at the end of the build.&lt;/li&gt;&lt;li&gt;When a task fails &lt;code&gt;all the tasks that depends on this task will not be executed&lt;/code&gt;. This is because, if compilation fails then, there is no point of packaging the project.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now lets take see a few examples&lt;/p&gt;&lt;h3&gt;build.gradle&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;group 'com.ekiras'&lt;br /&gt;version '1.0-SNAPSHOT'&lt;br /&gt;&lt;br /&gt;apply plugin: 'java'&lt;br /&gt;&lt;br /&gt;sourceCompatibility = 1.8&lt;br /&gt;&lt;br /&gt;repositories {&lt;br /&gt;    mavenCentral()&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;dependencies {&lt;br /&gt;    testCompile group: 'junit', name: 'junit', version: '4.11'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task failure(){&lt;br /&gt;    doLast{&lt;br /&gt;        println " I am going to fail now"&lt;br /&gt;        throw new RuntimeException("I am failing somewhere");&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets run the tasks using &lt;code&gt;gradle failure build&lt;/code&gt;. It will fail and not execute the task &lt;code&gt;build&lt;/code&gt; because &lt;code&gt;failure&lt;/code&gt; task has failed. See complete logs below&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:failure&lt;br /&gt; I am going to fail now&lt;br /&gt;:failure FAILED&lt;br /&gt;&lt;br /&gt;FAILURE: Build failed with an exception.&lt;br /&gt;&lt;br /&gt;* Where:&lt;br /&gt;Build file '/home/ekiras/workspace/tutorials/gradle/build.gradle' line: 22&lt;br /&gt;&lt;br /&gt;* What went wrong:&lt;br /&gt;Execution failed for task ':failure'.&lt;br /&gt;&amp;gt; I am failing somewhere&lt;br /&gt;&lt;br /&gt;* Try:&lt;br /&gt;Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.&lt;br /&gt;&lt;br /&gt;BUILD FAILED&lt;br /&gt;&lt;br /&gt;Total time: 0.626 secs&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now lets say we want to build even if the &lt;code&gt;failure&lt;/code&gt; task fails, so we can do so by command &lt;code&gt;gradle failure build --continue&lt;/code&gt;. it will give the following logs.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;:failure&lt;br /&gt; I am going to fail now&lt;br /&gt;:failure FAILED&lt;br /&gt;:compileJava UP-TO-DATE&lt;br /&gt;:processResources UP-TO-DATE&lt;br /&gt;:classes UP-TO-DATE&lt;br /&gt;:jar UP-TO-DATE&lt;br /&gt;:assemble UP-TO-DATE&lt;br /&gt;:compileTestJava UP-TO-DATE&lt;br /&gt;:processTestResources UP-TO-DATE&lt;br /&gt;:testClasses UP-TO-DATE&lt;br /&gt;:test UP-TO-DATE&lt;br /&gt;:check UP-TO-DATE&lt;br /&gt;:build UP-TO-DATE&lt;br /&gt;&lt;br /&gt;FAILURE: Build failed with an exception.&lt;br /&gt;&lt;br /&gt;* Where:&lt;br /&gt;Build file '/home/ekiras/workspace/tutorials/gradle/build.gradle' line: 22&lt;br /&gt;&lt;br /&gt;* What went wrong:&lt;br /&gt;Execution failed for task ':failure'.&lt;br /&gt;&amp;gt; I am failing somewhere&lt;br /&gt;&lt;br /&gt;* Try:&lt;br /&gt;Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.&lt;br /&gt;&lt;br /&gt;BUILD FAILED&lt;br /&gt;&lt;br /&gt;Total time: 0.595 secs&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference between the two logs in example is that, in first example execution terminated at the &lt;code&gt;failure task&lt;/code&gt; and &lt;code&gt;build task&lt;/code&gt; was never executed. However in example 2, even when the &lt;code&gt;failure task&lt;/code&gt; failed, &lt;code&gt;build task&lt;/code&gt; was executed.&lt;/p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4320391935543479907/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-continue-build-even-if-a-failure-occurs.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4320391935543479907'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4320391935543479907'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-continue-build-even-if-a-failure-occurs.html' title='Gradle : How to continue a build even if a failure occurs'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-484605517077779111</id><published>2016-11-30T13:42:00.000+05:30</published><updated>2016-11-30T13:42:24.467+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : What is a Gradle Task and how to write a custom task</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;What is a Gradle Task.&lt;/h2&gt;&lt;p&gt;Lets first create a gradle file &lt;code&gt;build.gradle&lt;/code&gt; with the following contents in it.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;group 'com.ekiras'&lt;br /&gt;version '1.0-SNAPSHOT'&lt;br /&gt;&lt;br /&gt;apply plugin: 'java'&lt;br /&gt;&lt;br /&gt;sourceCompatibility = 1.8&lt;br /&gt;&lt;br /&gt;repositories {&lt;br /&gt;    mavenCentral()&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;dependencies {&lt;br /&gt;    testCompile group: 'junit', name: 'junit', version: '4.11'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, lets run the the following command from terminal in the &lt;code&gt;root directory&lt;/code&gt; where &lt;code&gt;build.gradle&lt;/code&gt; is saved.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle tasks&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will give the list of all the tasks that are defined. It includes both &lt;code&gt;gradle default tasks&lt;/code&gt; and &lt;code&gt;custom tasks&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now, you can run any defined task using the command.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle &amp;lt;task-name&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;How to write a Custom Task in Gradle.&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;A task in gradle is an imlpementation of &lt;code&gt;org.gradle.api.Task&lt;/code&gt; interface.&lt;/li&gt;&lt;li&gt;&lt;code&gt;Task&lt;/code&gt; interface has two methods &lt;code&gt;doLast()&lt;/code&gt; and &lt;code&gt;doFirst()&lt;/code&gt; which can define the order of task execution. &lt;ul&gt;&lt;li&gt;&lt;code&gt;doFirst(Closure action)&lt;/code&gt; - This adds the given closure to the beginning of this task's action list.&lt;/li&gt;&lt;li&gt;&lt;code&gt;doLast(Closure action)&lt;/code&gt; - This adds the given Action to the end of this task's action list.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Other useful methods are &lt;ul&gt;&lt;li&gt;&lt;code&gt;getName()&lt;/code&gt; - returns the name of the task&lt;/li&gt;&lt;li&gt;&lt;code&gt;getPath()&lt;/code&gt; - returns the fully qualified path of the task&lt;/li&gt;&lt;li&gt;&lt;code&gt;mustRunAfter(Object... paths)&lt;/code&gt; - task should run after the given tasks&lt;/li&gt;&lt;li&gt;&lt;code&gt;setGroup(String group)&lt;/code&gt; - Adds the task to a specified group.&lt;/li&gt;&lt;li&gt;&lt;code&gt;setDependsOn(Iterable&amp;lt;?&amp;gt; dependsOnTasks)&lt;/code&gt; - set a list of tasks this task depends on.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;You can see &lt;a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Task.html"&gt;Full List of Methods in Task interface&lt;/a&gt; in the official documents.&lt;/p&gt;&lt;p&gt;Syntax for writing a task is as follows.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;// Simple Task&lt;br /&gt;task core(){&lt;br /&gt;  // do stuff&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;// Task which depends on some other task&lt;br /&gt;&lt;br /&gt;task main(dependsOn : 'core'){&lt;br /&gt;   // do stuff&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we can write the tasks as follows.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;task A {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'Running task A'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task B(dependsOn: A) {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'Running task B'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task C(dependsOn: [A, B]) {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'Running task C'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task D(dependsOn: [A, C]) {&lt;br /&gt;    doLast {&lt;br /&gt;        println 'Running task D'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&lt;li&gt;We can run any task using command &lt;code&gt;gradle &amp;lt;task-name&amp;gt;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;To run multipe tasks in one step you can use command &lt;code&gt;gradle &amp;lt;task-name&amp;gt; &amp;lt;task-name&amp;gt; &amp;lt;task-name&amp;gt;&lt;/code&gt;. It will run the tasks in the defined list specified.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;gradle &amp;lt;task-name&amp;gt; &amp;lt;task-name&amp;gt; &amp;lt;task-name&amp;gt;&lt;/code&gt; will only trigger tasks in this order, but task run list is still defined by tasks definitions that is if a tasks depends on any other task then taht task will be executed first. Also a task is run only once even if it is defines many times. &lt;code&gt;gradle A A A&lt;/code&gt; is equivalent to &lt;code&gt;gradle A&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/484605517077779111/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/what-is-gradle-task-how-to-write-custom-gradle-task.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/484605517077779111'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/484605517077779111'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/what-is-gradle-task-how-to-write-custom-gradle-task.html' title='Gradle : What is a Gradle Task and how to write a custom task'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4182009419241086083</id><published>2016-11-30T01:24:00.000+05:30</published><updated>2016-11-30T01:26:08.982+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><title type='text'>Gradle : How to import a gradle file in another gradle file</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to Import Gradle file in another gradle file.&lt;/h2&gt;&lt;p&gt;To import a gradle file in a gradle file you can use the following command in &lt;code&gt;.gradle&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We have a gradle file &lt;code&gt;build.gradle&lt;/code&gt; and we are including two other gradle files &lt;code&gt;tasks.gradle&lt;/code&gt; and &lt;code&gt;test.gradle&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;apply from : 'tasks.gradle'&lt;br /&gt;apply from : 'https://ekiras.github.io/temp/test.gradle'&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, in line 1, we have imported &lt;code&gt;tasks.gradle&lt;/code&gt; which lies in the same directory as &lt;code&gt;build.gradle&lt;/code&gt; and in line 2 we have imported a &lt;code&gt;test.gradle&lt;/code&gt; from a remote server. (Git hub pages in this case, it can be an s3 url or your server file url)&lt;/p&gt;&lt;h2&gt;Test Imported gradle file task&lt;/h2&gt;&lt;p&gt;&lt;code&gt;build.gradle&lt;/code&gt; has the following content&lt;/p&gt;&lt;pre&gt;&lt;code&gt;group 'com.ekiras'&lt;br /&gt;version '1.0-SNAPSHOT'&lt;br /&gt;&lt;br /&gt;apply plugin: 'java'&lt;br /&gt;apply from : 'tasks.gradle'&lt;br /&gt;apply from : 'https://ekiras.github.io/temp/test.gradle'&lt;br /&gt;&lt;br /&gt;sourceCompatibility = 1.8&lt;br /&gt;&lt;br /&gt;repositories {&lt;br /&gt;    mavenCentral()&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;dependencies {&lt;br /&gt;    testCompile group: 'junit', name: 'junit', version: '4.11'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;tasks.gradle&lt;/code&gt; has the following contents&lt;/p&gt;&lt;pre&gt;&lt;code&gt;task hello{&lt;br /&gt;    println "Hello World"&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can now run the task &lt;code&gt;hello&lt;/code&gt; with the following command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gradle -q hello&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It will give the following output.&lt;/p&gt;&lt;pre class="output"&gt;Hello World&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4182009419241086083/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-import-gradle-file-in-another-gradle-file.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4182009419241086083'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4182009419241086083'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-import-gradle-file-in-another-gradle-file.html' title='Gradle : How to import a gradle file in another gradle file'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2316540908593234086</id><published>2016-11-29T00:32:00.000+05:30</published><updated>2016-11-29T00:34:48.756+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Process Api'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><title type='text'>Java 9 : How to Terminating or Destroy a Running Process</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;You &lt;code&gt;cannot destroy or terminate the current process&lt;/code&gt; not even forcefully.&lt;/li&gt;&lt;li&gt;You can destroy a process by using the methods &lt;code&gt;destroy()&lt;/code&gt; or forcefully using &lt;code&gt;destroyForcibly()&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="www.ekiras.com/p/java9.html"&gt;Java 9 Feature&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;List all processes running on the OS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;Get the information of the current process&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html"&gt;Start a new Process and get its Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-get-process-information-from-process-id-in-java.html"&gt;How to get Process Information from Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-destroy-terminate-running-process-in-java.html"&gt;Destroy a running process&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;Destroy a Process&lt;/h2&gt;&lt;p&gt;There are two methods in interface &lt;code&gt;ProcessHandle&lt;/code&gt; that can be used to destroy a process.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;destroy()&lt;/code&gt; - to destroy a process noramally&lt;/li&gt;&lt;li&gt;&lt;code&gt;destroyForcibly()&lt;/code&gt; - to destroy a process forcefully. However the process may not be terminatted instantly since &lt;code&gt;operating system access controls may prevent the process from being killed&lt;/code&gt; thus resulting in case where &lt;code&gt;isAlive() method may return true&lt;/code&gt; for a brief period after destroyForcibly() is called.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In the example below we will first create a process and then kill it forcefully.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.Process;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;DestroyProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {&lt;br /&gt;            ProcessHandle processHandle = startProcess(&lt;span class="hljs-string"&gt;"tail -F /dev/null"&lt;/span&gt;).toHandle();&lt;br /&gt;            printProcessInfo(processHandle);&lt;br /&gt;            destroyProcess(processHandle);&lt;br /&gt;            Thread.sleep(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);&lt;br /&gt;            printProcessInfo(processHandle);&lt;br /&gt;        } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (IOException e) {&lt;br /&gt;            e.printStackTrace();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---Process Info---"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;destroyProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle process)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IllegalStateException&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Going to destroy Process with id :: "&lt;/span&gt; + process.getPid());&lt;br /&gt;        process.destroyForcibly();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; Process &lt;span class="hljs-title"&gt;startProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(String command)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Start Process :"&lt;/span&gt;);&lt;br /&gt;        Runtime runtime = Runtime.getRuntime();&lt;br /&gt;        Process process = runtime.exec(command);&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; process;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above code we have used &lt;code&gt;Thread.sleep(1000);&lt;/code&gt; to wait for the process to be terminated since &lt;code&gt;operating system access controls may prevent the process from being killed and isAlive() method may return true for a brief period of time.&lt;/code&gt; This code will return the following output.&lt;/p&gt;&lt;pre class="output"&gt;Start Process : &lt;br /&gt;---Process Info---&lt;br /&gt; Process Id :: 161&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /usr/bin/tail, args: [-F, /dev/null], startTime: Optional[2016-11-28T18:52:48.540Z], totalTime: Optional[PT0S]]&lt;br /&gt;Going to destroy Process with id :: 161&lt;br /&gt;---Process Info---&lt;br /&gt; Process Id :: 161&lt;br /&gt; Process isAlive() :: false&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: []&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;Trying to Destroy Current Process&lt;/h2&gt;&lt;p&gt;As already stated, you cannot destroy the current process even forcefully. Doing so will throw &lt;code&gt;IllegalStateException&lt;/code&gt;. Lets take a look at the exxample.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;DestroyCurrentProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        currentProcessInfo();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;currentProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Current Process : "&lt;/span&gt;);&lt;br /&gt;        ProcessHandle process = ProcessHandle.current();&lt;br /&gt;        printProcessInfo(process);&lt;br /&gt;        destroyProcess(process);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---------------------------------------------------------"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;destroyProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle process)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IllegalStateException&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Going to destroy Process with id :: "&lt;/span&gt; + process.getPid());&lt;br /&gt;        process.destroyForcibly();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will throw the error is shown below.&lt;/p&gt;&lt;pre class="output"&gt;Current Process : &lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 84&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /opt/jdk-9/bin/java, args: [DestroyCurrentProcess], startTime: Optional[2016-11-28T18:45:24.700Z], totalTime: Optional[PT0.34S]]&lt;br /&gt;Going to destroy Process with id :: 84&lt;br /&gt;Exception in thread "main" java.lang.IllegalStateException: destroy of current process not allowed&lt;br /&gt;    at java.base/java.lang.ProcessHandleImpl.destroyProcess(ProcessHandleImpl.java:308)&lt;br /&gt;    at java.base/java.lang.ProcessHandleImpl.destroyForcibly(ProcessHandleImpl.java:331)&lt;br /&gt;    at DestroyCurrentProcess.destroyProcess(DestroyCurrentProcess.java:34)&lt;br /&gt;    at DestroyCurrentProcess.currentProcessInfo(DestroyCurrentProcess.java:18)&lt;br /&gt;    at DestroyCurrentProcess.main(DestroyCurrentProcess.java:11)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2316540908593234086/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-destroy-terminate-running-process-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2316540908593234086'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2316540908593234086'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-destroy-terminate-running-process-in-java.html' title='Java 9 : How to Terminating or Destroy a Running Process'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5411389776358926175</id><published>2016-11-16T19:34:00.000+05:30</published><updated>2016-11-29T00:36:45.648+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Process Api'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><title type='text'>Java 9 : How to get Process Information from Process Id in Java</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;You need to run this code with &lt;code&gt;Java 1.9&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;ProcessHandle.of(Long processId)&lt;/code&gt; method will return an object of &lt;code&gt;Optional&amp;lt;ProcessHandle&amp;gt;&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href="http://download.java.net/java/jdk9/docs/api/java/util/Optional.html"&gt;Optional&lt;/a&gt; is a class introduced in java 8 which is &lt;code&gt;a container object which may or may not contain a non-null value&lt;/code&gt;. It has methods &lt;code&gt;boolean isPresent()&lt;/code&gt; which returns true if a value is present else returns false. &lt;code&gt;T get()&lt;/code&gt; method returns the object if present or else throws &lt;code&gt;NoSuchElementException&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="www.ekiras.com/p/java9.html"&gt;Java 9 Feature&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;List all processes running on the OS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;Get the information of the current process&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html"&gt;Start a new Process and get its Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-get-process-information-from-process-id-in-java.html"&gt;How to get Process Information from Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-destroy-terminate-running-process-in-java.html"&gt;Destroy a running process&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;Get Process Information from Process Id&lt;/h2&gt;&lt;p&gt;If we have the &lt;code&gt;process id&lt;/code&gt; of a process, then we can get the information about the process as shown in the following code.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.Process;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;DestroyProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {&lt;br /&gt;            ProcessHandle processHandle = startProcess(&lt;span class="hljs-string"&gt;"tail -F /dev/null"&lt;/span&gt;).toHandle();&lt;br /&gt;            printProcessInfo(processHandle);&lt;br /&gt;            destroyProcess(processHandle);&lt;br /&gt;            Thread.sleep(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);&lt;br /&gt;            printProcessInfo(processHandle);&lt;br /&gt;        } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (IOException e) {&lt;br /&gt;            e.printStackTrace();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---Process Info---"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;destroyProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle process)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IllegalStateException&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Going to destroy Process with id :: "&lt;/span&gt; + process.getPid());&lt;br /&gt;        process.destroy();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; Process &lt;span class="hljs-title"&gt;startProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(String command)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Start Process :"&lt;/span&gt;);&lt;br /&gt;        Runtime runtime = Runtime.getRuntime();&lt;br /&gt;        Process process = runtime.exec(command);&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; process;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We have a process running with the process id 678. Read &lt;a href="http://www.ekiras.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html"&gt;How to start a new Process&lt;/a&gt;.  When we run the above code with a  valid process id it will result in the following output.&lt;/p&gt;&lt;pre class="output"&gt;&amp;gt; java GetProcessById 678&lt;br /&gt;---Process Info---&lt;br /&gt; Process Id :: 678&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /usr/bin/tail, args: [-f, /dev/null], startTime: Optional[2016-11-14T08:36:02.310Z], totalTime: Optional[PT0S]]&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;When we run the above code with an invalid process id, we will get the following output.&lt;/p&gt;&lt;pre class="output"&gt;&amp;gt;  java GetProcessById 6785&lt;br /&gt; No process found by Process Id :: 6785&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5411389776358926175/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-get-process-information-from-process-id-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5411389776358926175'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5411389776358926175'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-get-process-information-from-process-id-in-java.html' title='Java 9 : How to get Process Information from Process Id in Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2707473333975918688</id><published>2016-11-16T18:19:00.000+05:30</published><updated>2016-11-29T00:37:20.528+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Process Api'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><title type='text'>Java 9 : How to start a new Process and get process id</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;This post used &lt;code&gt;Java 1.9&lt;/code&gt; since &lt;code&gt;ProcessHandle&lt;/code&gt; was introduced in Java 1.9.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="www.ekiras.com/p/java9.html"&gt;Java 9 Feature&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;List all processes running on the OS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;Get the information of the current process&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html"&gt;Start a new Process and get its Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-get-process-information-from-process-id-in-java.html"&gt;How to get Process Information from Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-destroy-terminate-running-process-in-java.html"&gt;Destroy a running process&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;Get the Current Process Information.&lt;/h2&gt;&lt;p&gt;In this example we will try to get information about the current process. For this we will use the m&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;StartProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {&lt;br /&gt;            Process process = startProcess(&lt;span class="hljs-string"&gt;"tail -F /dev/null"&lt;/span&gt;);&lt;br /&gt;            printProcessInfo(process.toHandle());&lt;br /&gt;        } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (IOException e) {&lt;br /&gt;            e.printStackTrace();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---Process Info---"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; Process &lt;span class="hljs-title"&gt;startProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(String command)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        Runtime runtime = Runtime.getRuntime();&lt;br /&gt;        Process process = runtime.exec(command);&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; process;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we run the above code, it will return the following output.&lt;/p&gt;&lt;pre class="output"&gt;---Process Info---&lt;br /&gt; Process Id :: 1865&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /usr/bin/tail, args: [-F, /dev/null], startTime: Optional[2016-11-16T12:40:10.460Z], totalTime: Optional[PT0S]]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2707473333975918688/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2707473333975918688'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2707473333975918688'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html' title='Java 9 : How to start a new Process and get process id'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1921021593810304163</id><published>2016-11-15T00:41:00.000+05:30</published><updated>2016-11-15T00:42:27.355+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Process Api'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><title type='text'>Java 9 : How to get Current Process Information</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Java 9 introduced the new &lt;code&gt;Process Api&lt;/code&gt; in &lt;code&gt;java.lang&lt;/code&gt; package.&lt;/li&gt;&lt;li&gt;&lt;code&gt;ProcessHandle&lt;/code&gt; interface can be used to perform operations with processes like start, destroy, list processes.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;Get the information of the current process&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=""&gt;Create a new process and then terminate it&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=""&gt;Terminating the current process&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=""&gt;Destroy a process forcefully&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=""&gt;Get children of a process&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;Get the Current Process Information.&lt;/h2&gt;&lt;p&gt;In this example we will try to get information about the current process. For this we will use the method &lt;code&gt;ProcessHandle.current()&lt;/code&gt; method, this will return the object &lt;code&gt;ProcessHandle&lt;/code&gt; which can be used to get the information of the process.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;CurrentProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        currentProcessInfo();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;currentProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Current Process : "&lt;/span&gt;);&lt;br /&gt;        ProcessHandle process = ProcessHandle.current();&lt;br /&gt;        printProcessInfo(process);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---------------------------------------------------------"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code will produce the following output on console.&lt;/p&gt;&lt;pre class="output"&gt;Current Process : &lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 551&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /opt/jdk-9/bin/java, args: [CurrentProcess], startTime: Optional[2016-11-14T07:45:33.440Z], totalTime: Optional[PT0.24S]]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1921021593810304163/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-get-current-process-information-in-java-9.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1921021593810304163'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1921021593810304163'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-get-current-process-information-in-java-9.html' title='Java 9 : How to get Current Process Information'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4703439424121693117</id><published>2016-11-15T00:35:00.000+05:30</published><updated>2016-11-29T00:38:11.989+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Process Api'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><title type='text'>Java 9 : How to list all processes running on the OS</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Java 9 introduced the new &lt;code&gt;Process Api&lt;/code&gt; in &lt;code&gt;java.lang&lt;/code&gt; package.&lt;/li&gt;&lt;li&gt;&lt;code&gt;ProcessHandle&lt;/code&gt; interface can be used to perform operations with processes like start, destroy, list processes.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="www.ekiras.com/p/java9.html"&gt;Java 9 Feature&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;List all processes running on the OS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html"&gt;Get the information of the current process&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html"&gt;Start a new Process and get its Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-get-process-information-from-process-id-in-java.html"&gt;How to get Process Information from Process Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-destroy-terminate-running-process-in-java.html"&gt;Destroy a running process&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;List all Processes running on the OS.&lt;/h2&gt;&lt;p&gt;To get all the processes running on the OS you can use the static method &lt;code&gt;allProcesses()&lt;/code&gt; of the &lt;code&gt;ProcessHandle&lt;/code&gt;, this will return a &lt;code&gt;Stream&amp;lt;ProcessHandle&amp;gt;&lt;/code&gt; stream of process handles which can be used to get information about each process. The below example shows how we can list all the running processes.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.stream.Stream;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;ListAllProcesses&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        allProcesses();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;allProcesses&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Process list:"&lt;/span&gt;);&lt;br /&gt;        Stream&amp;lt;ProcessHandle&amp;gt; processStream = ProcessHandle.allProcesses();&lt;br /&gt;        processStream.forEach(e -&amp;gt; printProcessInfo(e));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---------------------------------------------------------"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code will produce the following output on console.&lt;/p&gt;&lt;pre class="output"&gt;Process list:&lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 1&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /bin/bash, startTime: Optional[2016-11-14T05:24:57.150Z], totalTime: Optional[PT0.02S]]&lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 15&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 1&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /bin/bash, startTime: Optional[2016-11-14T05:25:06.670Z], totalTime: Optional[PT0.08S]]&lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 449&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /opt/jdk-9/bin/java, args: [ListAllProcesses], startTime: Optional[2016-11-14T07:38:41.240Z], totalTime: Optional[PT0.35S]]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4703439424121693117/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-list-all-processes-running-on-the-os.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4703439424121693117'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4703439424121693117'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-list-all-processes-running-on-the-os.html' title='Java 9 : How to list all processes running on the OS'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5639273950023638876</id><published>2016-11-14T22:29:00.000+05:30</published><updated>2016-11-14T22:31:39.282+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Process Api'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><title type='text'>Java 9 : How to use Java 9 Process Api</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Introduction to Java 9 Process Api&lt;/h2&gt;&lt;p&gt;The New &lt;code&gt;Java 9 Processes API&lt;/code&gt; will help provide&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Identifies the processess&lt;/li&gt;&lt;li&gt;Control of Native processes&lt;/li&gt;&lt;li&gt;Monitoring of processes&lt;/li&gt;&lt;li&gt;List Children of processess&lt;/li&gt;&lt;li&gt;Start a new Process&lt;/li&gt;&lt;li&gt;Destroy a running process&lt;/li&gt;&lt;li&gt;Access to the process input,output and error streams.&lt;/li&gt;&lt;li&gt;On Exit Handle when a process is destroyed or completed.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Testing Process API operations&lt;/h2&gt;&lt;p&gt;In this post java program we are testing the following operations&lt;/p&gt;&lt;ol&gt;&lt;li&gt;List all processess running in the OS.&lt;/li&gt;&lt;li&gt;Print the information of the current process.&lt;/li&gt;&lt;li&gt;Create a new process and then terminate it.&lt;/li&gt;&lt;li&gt;Do some action when the process is destroyed or completed.&lt;/li&gt;&lt;li&gt;Try to terminate the current process.&lt;/li&gt;&lt;li&gt;Destroy a process forcefully&lt;/li&gt;&lt;li&gt;Get children of a process.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;List all Processess&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ProcessHandle.allProcesses()&lt;/code&gt; is a static method in ProcessHandle interface that returns &lt;code&gt;Stream&amp;lt;ProcessHandle&amp;gt;&lt;/code&gt; object. We will iterate this stream to print the information of all the processess running.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.java9.processapi;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Arrays;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.List;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.stream.Stream;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;ListAllProcesses&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        allProcesses();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;allProcesses&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Process list:"&lt;/span&gt;);&lt;br /&gt;        Stream&amp;lt;ProcessHandle&amp;gt; processStream = ProcessHandle.allProcesses();&lt;br /&gt;        processStream.forEach(e -&amp;gt; printProcessInfo(e));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"------------------------------------------------------------------------------"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code will produce the following output on console.&lt;/p&gt;&lt;pre class="output"&gt;Process list:&lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 1&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /bin/bash, startTime: Optional[2016-11-14T05:24:57.150Z], totalTime: Optional[PT0.02S]]&lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 15&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 1&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /bin/bash, startTime: Optional[2016-11-14T05:25:06.670Z], totalTime: Optional[PT0.08S]]&lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 449&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /opt/jdk-9/bin/java, args: [ListAllProcesses], startTime: Optional[2016-11-14T07:38:41.240Z], totalTime: Optional[PT0.35S]]&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;Current Process Information&lt;/h2&gt;&lt;p&gt;In this example we will try to get information about the current process. For this we will use the method &lt;code&gt;ProcessHandle.current()&lt;/code&gt; method, this will return the object &lt;code&gt;ProcessHandle&lt;/code&gt; which can be used to get the information of the process.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;CurrentProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        currentProcessInfo();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;currentProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Current Process : "&lt;/span&gt;);&lt;br /&gt;        ProcessHandle process = ProcessHandle.current();&lt;br /&gt;        printProcessInfo(process);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---------------------------------------------------------"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code will produce the following output on console.&lt;/p&gt;&lt;pre class="output"&gt;Current Process : &lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 551&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /opt/jdk-9/bin/java, args: [CurrentProcess], startTime: Optional[2016-11-14T07:45:33.440Z], totalTime: Optional[PT0.24S]]&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;Terminating a Process&lt;/h2&gt;&lt;p&gt;In this example we will terminate/destroy a running process using &lt;code&gt;destroy()&lt;/code&gt; method in the &lt;code&gt;ProcessHandle&lt;/code&gt; interface.&lt;/p&gt;&lt;p&gt;To test this we have started a process to run in background. e.g&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tail -F /dev/null &amp;amp;;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we will destroy this process through our code.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.Process;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;DestroyProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; InterruptedException &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {&lt;br /&gt;            ProcessHandle processHandle = startProcess(&lt;span class="hljs-string"&gt;"tail -F /dev/null"&lt;/span&gt;).toHandle();&lt;br /&gt;            printProcessInfo(processHandle);&lt;br /&gt;            destroyProcess(processHandle);&lt;br /&gt;            Thread.sleep(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);&lt;br /&gt;            printProcessInfo(processHandle);&lt;br /&gt;        } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (IOException e) {&lt;br /&gt;            e.printStackTrace();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---------------------------------------------------------"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;destroyProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle process)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IllegalStateException&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Going to destroy Process with id :: "&lt;/span&gt; + process.getPid());&lt;br /&gt;        process.destroy();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; Process &lt;span class="hljs-title"&gt;startProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(String command)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Start Process :"&lt;/span&gt;);&lt;br /&gt;        Runtime runtime = Runtime.getRuntime();&lt;br /&gt;        Process process = runtime.exec(command);&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; process;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code will produce the following output on console.&lt;/p&gt;&lt;pre class="output"&gt;Start Process : &lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 1259&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /usr/bin/tail, args: [-F, /dev/null], startTime: Optional[2016-11-14T15:52:01.670Z], totalTime: Optional[PT0S]]&lt;br /&gt;Going to destroy Process with id :: 1259&lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 1259&lt;br /&gt; Process isAlive() :: false&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: []&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;Terminating Current Process&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;We cannot destroy the current Process&lt;/strong&gt; trying to destroy the current process will throw &lt;code&gt;IllegalStateException&lt;/code&gt;. In this example we will try to destroy/terminate the current process to see what happens when we try to destroy the current process.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.lang.ProcessHandle;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;DestroyCurrentProcess&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String[] args)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br /&gt;        currentProcessInfo();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;currentProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Current Process : "&lt;/span&gt;);&lt;br /&gt;        ProcessHandle process = ProcessHandle.current();&lt;br /&gt;        printProcessInfo(process);&lt;br /&gt;        destroyProcess(process);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;printProcessInfo&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle processHandle)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"---------------------------------------------------------"&lt;/span&gt;);&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Id :: "&lt;/span&gt; + processHandle.getPid());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process isAlive() :: "&lt;/span&gt; + processHandle.isAlive());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process children :: "&lt;/span&gt; + processHandle.children().count());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process supportsNormalTermination() :: "&lt;/span&gt; + processHandle.supportsNormalTermination());&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;" Process Info :: "&lt;/span&gt; + processHandle.info().toString());&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;destroyProcess&lt;/span&gt;&lt;span class="hljs-params"&gt;(ProcessHandle process)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IllegalStateException&lt;/span&gt;{&lt;br /&gt;        System.out.println(&lt;span class="hljs-string"&gt;"Going to destroy Process with id :: "&lt;/span&gt; + process.getPid());&lt;br /&gt;        process.destroy();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code will produce the following output on console.&lt;/p&gt;&lt;pre class="output"&gt;Current Process : &lt;br /&gt;---------------------------------------------------------&lt;br /&gt; Process Id :: 653&lt;br /&gt; Process isAlive() :: true&lt;br /&gt; Process children :: 0&lt;br /&gt; Process supportsNormalTermination() :: true&lt;br /&gt; Process Info :: [user: Optional[root], cmd: /opt/jdk-9/bin/java, args: [DestroyCurrentProcess], startTime: Optional[2016-11-14T08:32:28.640Z], totalTime: Optional[PT0.32S]]&lt;br /&gt;Going to destroy Process with id :: 653&lt;br /&gt;Exception in thread "main" java.lang.IllegalStateException: destroy of current process not allowed&lt;br /&gt;    at java.base/java.lang.ProcessHandleImpl.destroyProcess(ProcessHandleImpl.java:308)&lt;br /&gt;    at java.base/java.lang.ProcessHandleImpl.destroy(ProcessHandleImpl.java:326)&lt;br /&gt;    at DestroyCurrentProcess.destroyProcess(DestroyCurrentProcess.java:34)&lt;br /&gt;    at DestroyCurrentProcess.currentProcessInfo(DestroyCurrentProcess.java:18)&lt;br /&gt;    at DestroyCurrentProcess.main(DestroyCurrentProcess.java:11)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5639273950023638876/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-use-java-9-process-api-to-get-process-id.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5639273950023638876'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5639273950023638876'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/how-to-use-java-9-process-api-to-get-process-id.html' title='Java 9 : How to use Java 9 Process Api'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2391122245157021798</id><published>2016-11-07T00:17:00.000+05:30</published><updated>2016-11-07T03:00:54.451+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Project Jigsaw'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><category scheme='http://www.blogger.com/atom/ns#' term='Modules'/><title type='text'>Java 9 : How to create and run a custom Module</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;What is a Module in Java 9 ?&lt;/h2&gt;&lt;p&gt;Java Modules are a part of &lt;a href="http://www.ekiras.com/2016/11/java-9-what-is-project-jigsaw.html"&gt;Project Jigsaw&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;A module is a &lt;strong&gt;named, self-describing collection of code and data&lt;/strong&gt;. Its code is &lt;strong&gt;organized as a set of packages&lt;/strong&gt; containing types, i.e., Java classes and interfaces; its data includes resources and other kinds of static information.&lt;/p&gt;&lt;h2&gt;What are the Type of Modules in Java 9 ?&lt;/h2&gt;&lt;p&gt;There are two types of Java Modules&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Java Standard Modules&lt;/strong&gt;, they start with string &lt;code&gt;java.&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Java Non-Standard Modules&lt;/strong&gt;, they start with string &lt;code&gt;jdk.&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Creating a Custom Module.&lt;/h2&gt;&lt;p&gt;We can make the following types of modules&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Module that is independent of all other modules.&lt;/li&gt;&lt;li&gt;Module that requires other modules as dependencies.&lt;/li&gt;&lt;li&gt;Module that exports itself for use by other packages.&lt;/li&gt;&lt;li&gt;Module that imports some modules and exports some packages for other modules to use.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;When we are exporting the packages in modules, only the publically expoted modules are available to use by other modules.(We will get to this later in the post.)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;A simple module that does not imports or exports any module may look as follows.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;module com.ekiras { }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Creating an Independent Module&lt;/h2&gt;&lt;h4&gt;In this example we will be creating a simple module that will pring Hello World.&lt;/h4&gt;&lt;p&gt;We will create two file for this example&lt;/p&gt;&lt;pre&gt;&lt;code&gt;src/com.ekiras/com/ekiras/Main.java&lt;br /&gt;src/com.ekiras/module-info.java&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, we will add the following code to the files.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;module-info.java&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code class="language-java"&gt;module com.ekiras{&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This module definition means that&lt;/p&gt;&lt;ol&gt;&lt;li&gt;This module does not require any module to build itself.&lt;/li&gt;&lt;li&gt;This module does not exports any thing for other modules to use.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Main.java&lt;/strong&gt;&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Main&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;  &lt;br /&gt;  &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;main&lt;/span&gt;&lt;span class="hljs-params"&gt;(String args[])&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;   System.out.println(&lt;span class="hljs-string"&gt;"Hello World by Ekiras"&lt;/span&gt;);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will compile our code outside the src directory in mods folder (It can be any directory, if you specify any other directory just replace your directory name with mods for the rest of the post.)&lt;/p&gt;&lt;p&gt;Your directory structure should look as follows&lt;/p&gt;&lt;pre&gt;&lt;code&gt;|-path/&lt;br /&gt;   |-mods/&lt;br /&gt;     |-com.ekiras/&lt;br /&gt;   |-src/&lt;br /&gt;     |-com.ekiras/&lt;br /&gt;       |-com/&lt;br /&gt;         |-ekiras/&lt;br /&gt;            |-Main.java&lt;br /&gt;       |-module-info.java&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we will compile our module with the following command,&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;javac -d mods/com.ekiras/ src/com.ekiras/module-info.java src/com.ekiras/com/ekiras/Main.java &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure you run this command from &lt;strong&gt;path/&lt;/strong&gt; and not anywhere inside this directory(or else you can change this command as required).&lt;/p&gt;&lt;p&gt;This will generate the following classes in &lt;strong&gt;mods/com.ekiras/&lt;/strong&gt; folder.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;|-path&lt;br /&gt;   |-com.ekiras/&lt;br /&gt;     |-module-info.class&lt;br /&gt;     |-com/&lt;br /&gt;       |-ekiras/&lt;br /&gt;         |-Main.class&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, lets run this our first module with the following command&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;java --module-path mods -m com.ekiras/com.ekiras.Main&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class="output"&gt;Hello World by Ekiras&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;--modue-path&lt;/strong&gt; : This refers to the path where module has been compiled. It is mandatory. Since we are running this from path "path/" we have given mods as the path. If we were running this from path  "path/mods/", then our path would have been &lt;code&gt;--module-path .&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;-m or --module&lt;/strong&gt; : This refers to the module that we are going to run. Its param is &lt;code&gt;module.name/package.MainClass&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;How to Package a module&lt;/h2&gt;&lt;p&gt;Now we will be packaging our module to a Jar file. To create a jar file we will use the &lt;code&gt;jar&lt;/code&gt; tool of java. We can create a jar file with the following command.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;jar --create --file libs/com.ekiras.jar --module-version=&lt;span class="hljs-number"&gt;1.0&lt;/span&gt; --main-&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt;&lt;/span&gt;=com.ekiras.Main -C mods/com.ekiras .&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Check the Jar Module Description&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;jar --print-module-descriptor --file=libs/com.ekiras.jar&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will result in the following output&lt;/p&gt;&lt;pre class="output"&gt;com.ekiras@1.0&lt;br /&gt;  requires mandated java.base&lt;br /&gt;  contains com.ekiras&lt;br /&gt;  main-class com.ekiras.Main&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;The above output states the following&lt;/p&gt;&lt;ol&gt;&lt;li&gt;modulename is com.ekiras&lt;/li&gt;&lt;li&gt;version is 1.0&lt;/li&gt;&lt;li&gt;it requires the mandatory &lt;code&gt;java.base module&lt;/code&gt;, since all modules are build on this module as a base.&lt;/li&gt;&lt;li&gt;main class of the module is &lt;code&gt;com.ekiras.Main&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Run the jar file&lt;/h2&gt;&lt;p&gt;Now, we can run the jar file with the following command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java -p libs -m com.ekiras&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will result in the following output, also in this case we do not have to specify the Main class.&lt;/p&gt;&lt;div class="output"&gt;Hello World by Ekiras&lt;/div&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/ekiras/java-9/tree/master/modules/independent-module"&gt;Download from GITHUB&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2391122245157021798/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/java-9-how-to-create-compile-and-run-modules.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2391122245157021798'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2391122245157021798'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/java-9-how-to-create-compile-and-run-modules.html' title='Java 9 : How to create and run a custom Module'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-814493329288396556</id><published>2016-11-06T21:31:00.000+05:30</published><updated>2016-11-07T00:26:55.846+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Java9'/><category scheme='http://www.blogger.com/atom/ns#' term='Project Jigsaw'/><title type='text'>Java 9 : What is Project Jigsaw ?</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Project Jigsaw : Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;It is introducded in Java 9.&lt;/li&gt;&lt;li&gt;Its main aim is to modularize the Java SE Platform.&lt;/li&gt;&lt;li&gt;This will modularize the JDK, and we can use only those modules that we need instead of the full JDK installation.&lt;/li&gt;&lt;li&gt;Scale platform to run on smaller applications and devices.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/java-9-how-to-create-compile-and-run-modules.html"&gt;Creating Custom Java Modules&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;Design Implementations of Project Jigsaw.&lt;/h2&gt;&lt;p&gt;New java commands related to &lt;strong&gt;Project Jigsaw&lt;/strong&gt;  added are the following&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    --module-path &amp;lt;module path&amp;gt;...&lt;br /&gt;                  A : separated list of directories, each directory&lt;br /&gt;                  is a directory of modules.&lt;br /&gt;    --upgrade-module-path &amp;lt;module path&amp;gt;...&lt;br /&gt;                  A : separated list of directories, each directory&lt;br /&gt;                  is a directory of modules that replace upgradeable&lt;br /&gt;                  modules in the runtime image&lt;br /&gt;    -m &amp;lt;module&amp;gt;[/&amp;lt;mainclass&amp;gt;]&lt;br /&gt;    --module &amp;lt;modulename&amp;gt;[/&amp;lt;mainclass&amp;gt;]&lt;br /&gt;                  the initial module to resolve, and the name of the main class&lt;br /&gt;                  to execute if not specified by the module&lt;br /&gt;    --add-modules &amp;lt;modulename&amp;gt;[,&amp;lt;modulename&amp;gt;...]&lt;br /&gt;                  root modules to resolve in addition to the initial module.&lt;br /&gt;                  &amp;lt;modulename&amp;gt; can also be ALL-DEFAULT, ALL-SYSTEM,&lt;br /&gt;                  ALL-MODULE-PATH.&lt;br /&gt;    --limit-modules &amp;lt;modulename&amp;gt;[,&amp;lt;modulename&amp;gt;...]&lt;br /&gt;                  limit the universe of observable modules&lt;br /&gt;    --list-modules [&amp;lt;modulename&amp;gt;[,&amp;lt;modulename&amp;gt;...]]&lt;br /&gt;                  list the observable modules and exit&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;What are Modules ?&lt;/h2&gt;&lt;p&gt;Firstly, let's see what is a module in Java.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A module is a named, self-describing collection of code and data. Its code is organized as a set of packages containing types, i.e., Java classes and interfaces; its data includes resources and other kinds of static information.&lt;/p&gt;&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;All the Java code will be a part of some &lt;strong&gt;java module&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;All Java base modules will have their name starting with string  &lt;strong&gt;java.&lt;/strong&gt;. These are also called as &lt;strong&gt;Java Standard Modules&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;All other Java packages will be part of Java JDK and will have module names starting from &lt;strong&gt;jdk.&lt;/strong&gt;. These are also called as &lt;strong&gt;Java Non Statndard Modules&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;All the Standard Modules are shown with orange color, and all Non-Standard modules are shown in Blue color &lt;img src="https://bugs.openjdk.java.net/secure/attachment/57772/jdk.png" alt="Java Module Structure"&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href="http://www.ekiras.com"&gt;Read more about Java Module Structure&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Now let's run the command&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java --list-modules&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will list all the modules. Some of the many modules will be&lt;/p&gt;&lt;pre&gt;&lt;code&gt;java.compiler@9-ea&lt;br /&gt;java.httpclient@9-ea&lt;br /&gt;java.instrument@9-ea&lt;br /&gt;java.jnlp@9-ea&lt;br /&gt;java.logging@9-ea&lt;br /&gt;java.se@9-ea&lt;br /&gt;java.se.ee@9-ea&lt;br /&gt;java.security.jgss@9-ea&lt;br /&gt;java.security.sasl@9-ea&lt;br /&gt;jdk.compiler@9-ea&lt;br /&gt;jdk.crypto.ec@9-ea&lt;br /&gt;jdk.jartool@9-ea&lt;br /&gt;jdk.javadoc@9-ea&lt;br /&gt;jdk.jconsole@9-ea&lt;br /&gt;jdk.jlink@9-ea&lt;br /&gt;jdk.jshell@9-ea&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Above shown list is just a subsut of modules and not the complete list of modules.(Just to show what the output will look like)&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;"</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/814493329288396556/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/java-9-what-is-project-jigsaw.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/814493329288396556'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/814493329288396556'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/java-9-what-is-project-jigsaw.html' title='Java 9 : What is Project Jigsaw ?'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8220420615513415246</id><published>2016-11-03T15:11:00.000+05:30</published><updated>2016-11-03T15:17:04.678+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Spring Data'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringDataJPA'/><category scheme='http://www.blogger.com/atom/ns#' term='JPA'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Relational Mappings'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringDataJPA : One to Many Mapping in Spring Boot Hibernate JPA with Spring Data</title><content type='html'>&lt;div class='markdown'&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/09/one-to-one-mapping-in-spring-boot-spring-data-jpa-hibernate.html"&gt;One To One Mapping&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;Let's create two entities/domains &lt;code&gt;Employee&lt;/code&gt; and &lt;code&gt;Department&lt;/code&gt; such that they have the following relation between them.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Department has-many Employees&lt;/code&gt; which means an Employee can belong to only one &lt;code&gt;Department&lt;/code&gt; and a &lt;code&gt;Department&lt;/code&gt; can have many &lt;code&gt;Employee&lt;/code&gt; and &lt;code&gt;Department&lt;/code&gt; is the owner of the relation between the two.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Owner of the relation means that &lt;strong&gt;Owner can exist without the dependent entity&lt;/strong&gt; but &lt;strong&gt;dependent entity cannot stay without the owner entity&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dependent Entity of Relationship will containes the 'foreign key' ID of the Owner entity&lt;/strong&gt;. In this case, Address will contian the Employee Id in &amp;gt;its table as shown in the table structure below.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;So a Department can exist without Employee but an Employee cannot be there without a Department. If you&lt;/p&gt;&lt;ol&gt;&lt;li&gt;on deleting an Employee, the Employee-Department mapping will be removed&lt;/li&gt;&lt;li&gt;on deleting a Department, all the employees in the department should be deleted.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Employee.java&lt;/h2&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Date;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Employee&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date dateCreated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date lastUpdated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String email;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String name;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String password;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@OneToOne&lt;/span&gt;(mappedBy = &lt;span class="hljs-string"&gt;"employee"&lt;/span&gt;,optional = &lt;span class="hljs-keyword"&gt;false&lt;/span&gt;,cascade = CascadeType.ALL)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Address address;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@ManyToOne&lt;/span&gt;(fetch = FetchType.EAGER)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Department department;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-comment"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Department.java&lt;/h2&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Date;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.List;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Department&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date dateCreated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date lastUpdated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String name;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@OneToMany&lt;/span&gt;(cascade = CascadeType.ALL,mappedBy = &lt;span class="hljs-string"&gt;"department"&lt;/span&gt;, fetch = FetchType.LAZY)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; List&amp;lt;Employee&amp;gt; employees;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-comment"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following Tables will be created from the Entities defined above.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-sql"&gt;mysql&amp;gt; show tables;&lt;br /&gt;+-----------------------+&lt;br /&gt;| Tables_in_jpa_mapping |&lt;br /&gt;+-----------------------+&lt;br /&gt;| address               |&lt;br /&gt;| department            |&lt;br /&gt;| employee              |&lt;br /&gt;+-----------------------+&lt;br /&gt;3 rows in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;mysql&amp;gt; desc employee;&lt;br /&gt;+---------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| Field         | Type         | Null | Key | Default | Extra          |&lt;br /&gt;+---------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| id            | bigint(20)   | NO   | PRI | NULL    | auto_increment |&lt;br /&gt;| date_created  | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| email         | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| last_updated  | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| name          | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| password      | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| department_id | bigint(20)   | YES  | MUL | NULL    |                |&lt;br /&gt;+---------------+--------------+------+-----+---------+----------------+&lt;br /&gt;7 rows in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;mysql&amp;gt; desc department;&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| Field        | Type         | Null | Key | Default | Extra          |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| id           | bigint(20)   | NO   | PRI | NULL    | auto_increment |&lt;br /&gt;| date_created | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| last_updated | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| name         | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;4 rows in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;mysql&amp;gt; desc address;&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| Field        | Type         | Null | Key | Default | Extra          |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| id           | bigint(20)   | NO   | PRI | NULL    | auto_increment |&lt;br /&gt;| address      | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| date_created | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| last_updated | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| employee_id  | bigint(20)   | YES  | MUL | NULL    |                |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;5 rows in set (0.01 sec)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following are the images that show the working of the One-To-Many mapping.&lt;/p&gt;&lt;p&gt;List of Departments&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/otm1.png" alt="img"&gt;&lt;/p&gt;&lt;p&gt;Adding Employee&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/otm2.png" alt="img"&gt;&lt;/p&gt;&lt;p&gt;Employee Details&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/otm3.png" alt="img"&gt;&lt;/p&gt;&lt;p&gt;List of all Employees&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/otm4.png" alt="img"&gt;&lt;/p&gt;&lt;p&gt;List of Employees in a Department&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/otm5.png" alt="img"&gt;&lt;/p&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/ekiras/spring-boot/tree/master/data-jpa/mapping/one-to-many-mapping"&gt;Download from GITHUB&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8220420615513415246/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/11/one-to-many-mapping-in-spring-boot-spring-data-jpa-hibernate.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8220420615513415246'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8220420615513415246'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/11/one-to-many-mapping-in-spring-boot-spring-data-jpa-hibernate.html' title='SpringDataJPA : One to Many Mapping in Spring Boot Hibernate JPA with Spring Data'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1895420930730719443</id><published>2016-10-25T14:04:00.000+05:30</published><updated>2016-10-25T14:08:49.950+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GIT'/><category scheme='http://www.blogger.com/atom/ns#' term='WINDOWS'/><category scheme='http://www.blogger.com/atom/ns#' term='SSH'/><title type='text'>GIT : How to generate SSH key in Windows for GIT</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Download and install &lt;strong&gt;Puttygen&lt;/strong&gt; to generate the SSH key to be used in GIT.&lt;/li&gt;&lt;li&gt;Save the Private Key in a safe location and do not miss it.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;STEP 1 : Open Puttygen to generate Key&lt;/h2&gt;&lt;p&gt;Puttygen is a opensource plugin of Putty and is used to create Public/Private keys for WinSCP.&lt;/p&gt;&lt;p&gt;When you open the puttygen you will see the following screen as shown in image below&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/1.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;p&gt;Now Select the following&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Select SSH-2 RSA (Type of key to generate tabs)&lt;/li&gt;&lt;li&gt;1024 (Number of bits to use to generate key)&lt;/li&gt;&lt;li&gt;Click Generate button to generate the key.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;STEP 2 : Generating Key&lt;/h2&gt;&lt;p&gt;After you click the generate button you will see the following screen&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/2.png" alt="Open Puttygen"&gt;&lt;strong&gt;Keep clicking on the empty space provided until progress bar reaches the end&lt;/strong&gt; This is used to create randomness in the key. Once the progress bar reaches the end, it will show the generated key.&lt;/p&gt;&lt;h2&gt;STEP 3 : Save Public &amp;amp; Private Keys&lt;/h2&gt;&lt;p&gt;Once your key is generated you will see the public key in the text box at the top as shown in the image below.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/3.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;p&gt;The screen shows the following things.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Public key at top.&lt;/li&gt;&lt;li&gt;Key fingerprint used to create the key.&lt;/li&gt;&lt;li&gt;Key Phrase. You can add a password to your generated key. If you add password to the key then you have to enter the password/key phrase everytime you do ssh. This is extra security to the key however you can keep it empty, if you are sure nobody can copy the key from your system.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Click on &lt;strong&gt;Save private Key&lt;/strong&gt; &amp;amp; &lt;strong&gt;Save public Key&lt;/strong&gt; to save the keys.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Save the private key in a safe directory or location. If you miss this private key you will not be able to use ssh.&lt;/p&gt;&lt;p&gt;Private key is saved in the &lt;strong&gt;.ppk&lt;/strong&gt; format on windows. Do not change the extension of the file&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;STEP 4 : Load Private Key to Puttygen&lt;/h2&gt;&lt;p&gt;You can load the saved private key in Step 3 to view the public key. You will see the following screen when you click on &lt;strong&gt;Load&lt;/strong&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/4.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;p&gt;Just select the saved private key and you will be able to see the public key.&lt;/p&gt;&lt;h2&gt;STEP 5 : Use Public Key&lt;/h2&gt;&lt;p&gt;Right click on the public key textbox&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/5.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;p&gt;Click on Select All to select the the public key and then copy the Public Key for the nect step.&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/6.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;h2&gt;Step 6 : Adding Public key in GIT for SSH&lt;/h2&gt;&lt;p&gt;Open your Github account and go to profile settings, then click on SSH and GPG keys tab.&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/7.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;p&gt;Click on the New SSH Key button as shown in the image below&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/8.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;p&gt;Add the Key title in the title box and public key generated in previous steps in the space with label key and finally save by clicking on &lt;strong&gt;Add SSH key&lt;/strong&gt; button in green.&lt;br&gt;&lt;img src="http://resources.ekiras.com/images/git/windows/9.png" alt="Open Puttygen"&gt;&lt;/p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1895420930730719443/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/10/how-to-generate-ssh-key-in-windows-for-git.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1895420930730719443'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1895420930730719443'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/10/how-to-generate-ssh-key-in-windows-for-git.html' title='GIT : How to generate SSH key in Windows for GIT'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4951536551314763534</id><published>2016-10-07T22:55:00.000+05:30</published><updated>2016-10-17T13:14:00.914+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Csv'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Logstash'/><title type='text'>Logstash : No sincedb_path set, generating one based on the file path while reading csv file</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;No sincedb_path set, generating one based on the file path&lt;/h2&gt;&lt;p&gt;Suppose you have a file at location &lt;code&gt;$PATH/a.csv&lt;/code&gt; and we want to read and export data( elastic search server).Let's say you are trying to read this log file through the following configuration&lt;/p&gt;&lt;pre&gt;&lt;code&gt;input {&lt;br /&gt;  file {&lt;br /&gt;    path =&amp;gt; ["/some/path/a.csv"]&lt;br /&gt;    start_position =&amp;gt; "beginning"&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, when you run this for the first time, this will work perfectly. The point to note here is that, when you have run this for the first time, logstash will automatically create a &lt;code&gt;sincedb_path&lt;/code&gt; file at your home directory and it might look like &lt;code&gt;.sincedb_1a892d89f927eb484cb12a7b7385ab72&lt;/code&gt;. This file tells the logstash that it has already processed this file.&lt;/p&gt;&lt;p&gt;If you want to reprocess this file, all you need to do is just delete this file.&lt;/p&gt;&lt;p&gt;OR&lt;/p&gt;&lt;p&gt;A better solution would be to use the following configurations&lt;/p&gt;&lt;pre&gt;&lt;code&gt;input {&lt;br /&gt;  file {&lt;br /&gt;    path =&amp;gt; ["/some/path/a.csv"]&lt;br /&gt;    start_position =&amp;gt; "beginning"&lt;br /&gt;    sincedb_path =&amp;gt; "/dev/null"&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above configuration will always write the &lt;code&gt;.sincedb_path&lt;/code&gt; file to the &lt;code&gt;/dev/null&lt;/code&gt; path.&lt;/p&gt;&lt;blockquote&gt;&lt;h3&gt;/dev/null&lt;/h3&gt;&lt;p&gt;/dev/null is a simple device (implemented in software and not corresponding to any hardware device on the system).&lt;/p&gt;&lt;p&gt;/dev/null looks empty when you read from it. Writing to /dev/null does nothing: data written to this device simply "disappear."&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4951536551314763534/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/10/no-sincedb-path-set-getting-one-based-on-file.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4951536551314763534'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4951536551314763534'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/10/no-sincedb-path-set-getting-one-based-on-file.html' title='Logstash : No sincedb_path set, generating one based on the file path while reading csv file'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5218351218398721516</id><published>2016-09-29T01:46:00.000+05:30</published><updated>2016-11-03T15:15:06.887+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringDataJPA'/><category scheme='http://www.blogger.com/atom/ns#' term='JPA'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringDataJPA : One to one Mapping in Spring Boot Hibernate JPA with Spring Data</title><content type='html'>&lt;div class='markdown'&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/one-to-many-mapping-in-spring-boot-spring-data-jpa-hibernate.html"&gt;One To Many Mapping&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;Let's create two classes &lt;strong&gt;Employee&lt;/strong&gt; and &lt;strong&gt;Address&lt;/strong&gt;, such that they have the following relation between them.&lt;/p&gt;&lt;p&gt;&lt;code&gt;Employee has-a Address&lt;/code&gt; which means a &lt;code&gt;one-to-one&lt;/code&gt; mapping between the two and &lt;code&gt;Employee&lt;/code&gt; is the owner of the relation.&lt;/p&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;Owner of the relation means that &lt;strong&gt;Owner can exist without the dependent entity&lt;/strong&gt; but &lt;strong&gt;dependent entity cannot stay without the owner entity.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Dependent Entity of Relationship will containes the 'foreign key' ID of the Owner entity&lt;/strong&gt;. In this case, Address will contian the Employee Id in its table as shown in the table structure below.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;p&gt;This means that Employee can stay without an Address but Address cannot stay without the Employee. In even more simpler words, If employee is deleted his address should also be deleted, but if address is deleted employee should not be deleted.&lt;/p&gt;&lt;p&gt;Employee.java&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Date;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Employee&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date dateCreated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date lastUpdated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String email;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String name;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String password;&lt;br /&gt;    &lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@OneToOne&lt;/span&gt;(mappedBy = &lt;span class="hljs-string"&gt;"employee"&lt;/span&gt;,optional = &lt;span class="hljs-keyword"&gt;false&lt;/span&gt;,cascade = CascadeType.ALL)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Address address;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;toString&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;"Employee{"&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;"id="&lt;/span&gt; + id +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", dateCreated="&lt;/span&gt; + dateCreated +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", lastUpdated="&lt;/span&gt; + lastUpdated +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", email='"&lt;/span&gt; + email + &lt;span class="hljs-string"&gt;'\''&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", name='"&lt;/span&gt; + name + &lt;span class="hljs-string"&gt;'\''&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", password='"&lt;/span&gt; + password + &lt;span class="hljs-string"&gt;'\''&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;'}'&lt;/span&gt;;&lt;br /&gt;    }&lt;br /&gt;    &lt;span class="hljs-comment"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Address.java&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Date;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Address&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date dateCreated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date lastUpdated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String address;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@OneToOne&lt;/span&gt;(fetch = FetchType.LAZY)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Employee employee;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;toString&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;"Address{"&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;"id="&lt;/span&gt; + id +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", dateCreated="&lt;/span&gt; + dateCreated +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", lastUpdated="&lt;/span&gt; + lastUpdated +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", address='"&lt;/span&gt; + address + &lt;span class="hljs-string"&gt;'\''&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", employee="&lt;/span&gt; + employee +&lt;br /&gt;                &lt;span class="hljs-string"&gt;'}'&lt;/span&gt;;&lt;br /&gt;    }&lt;br /&gt;    &lt;span class="hljs-comment"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following Tables will be created from the Entities defined above.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;&lt;br /&gt;+-----------------------+&lt;br /&gt;| Tables_in_jpa_mapping |&lt;br /&gt;+-----------------------+&lt;br /&gt;| address               |&lt;br /&gt;| employee              |&lt;br /&gt;+-----------------------+&lt;br /&gt;2 rows in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;mysql&amp;gt; desc employee;&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| Field        | Type         | Null | Key | Default | Extra          |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| id           | bigint(20)   | NO   | PRI | NULL    | auto_increment |&lt;br /&gt;| date_created | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| email        | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| last_updated | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| name         | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| password     | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;6 rows in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;mysql&amp;gt; desc address;&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| Field        | Type         | Null | Key | Default | Extra          |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| id           | bigint(20)   | NO   | PRI | NULL    | auto_increment |&lt;br /&gt;| address      | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| date_created | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| last_updated | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| employee_id  | bigint(20)   | YES  | MUL | NULL    |                |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;5 rows in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can save the object's as shown in the example below&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;test&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;    &lt;br /&gt;        &lt;span class="hljs-comment"&gt;// create employee object&lt;/span&gt;&lt;br /&gt;        Employee employee = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Employee();&lt;br /&gt;        employee.setName(&lt;span class="hljs-string"&gt;"Ekansh"&lt;/span&gt;);&lt;br /&gt;        employee.setEmail(&lt;span class="hljs-string"&gt;"ekansh@ekiras.com"&lt;/span&gt;);&lt;br /&gt;        employee.setPassword(&lt;span class="hljs-string"&gt;"pwd"&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-comment"&gt;// create Address object&lt;/span&gt;&lt;br /&gt;        Address address = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; Address();&lt;br /&gt;        address.setAddress(&lt;span class="hljs-string"&gt;"Some Address"&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;        employee.setAddress(address);&lt;br /&gt;        &lt;br /&gt;        &lt;span class="hljs-comment"&gt;// actual save call for the object&lt;/span&gt;&lt;br /&gt;        employeeRepository.save(employee);&lt;br /&gt;&lt;br /&gt;    } &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following are the images that show the working of the One-TO-One mapping.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/1.png" alt="Initial Interface"&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/2.png" alt="Initial Interface"&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/3.png" alt="Initial Interface"&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/4.png" alt="Initial Interface"&gt;&lt;img src="http://resources.ekiras.com/images/spring-boot/jpa/mapping/5.png" alt="Initial Interface"&gt;&lt;/p&gt;&lt;hr&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/ekiras/spring-boot/tree/master/data-jpa/mapping/one-to-one-mapping"&gt;Download from GITHUB&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5218351218398721516/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/09/one-to-one-mapping-in-spring-boot-spring-data-jpa-hibernate.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5218351218398721516'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5218351218398721516'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/09/one-to-one-mapping-in-spring-boot-spring-data-jpa-hibernate.html' title='SpringDataJPA : One to one Mapping in Spring Boot Hibernate JPA with Spring Data'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7313493886118373895</id><published>2016-09-22T17:38:00.000+05:30</published><updated>2016-09-22T17:47:46.037+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringDataJPA'/><category scheme='http://www.blogger.com/atom/ns#' term='JPA'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringDataJpa : How to override the domain mapping defined in Parent Entity class with MappedSuperclass</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Your Parent class should be annotated with &lt;code&gt;@MappedSuperclass&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Follow the &lt;a href="http://www.ekiras.com/2016/09/how-to-handle-inheritance-with-entities-in-spring-data-jpa.html"&gt;Tutorial : How to handle Inheritence with Entities&lt;/a&gt; to know how to wrap common properties of entities to a base class.&lt;/li&gt;&lt;li&gt;To override any property you must&lt;br&gt;a.  Apply the &lt;code&gt;@AttributeOverride&lt;/code&gt; annotation on the class that need to override the property&lt;br&gt;b.  set &lt;code&gt;name&lt;/code&gt; property of &lt;code&gt;@AttributeOverride&lt;/code&gt; as the name of the field in super class.&lt;br&gt;c.  set the &lt;code&gt;column&lt;/code&gt; property of &lt;code&gt;@AttributeOverride&lt;/code&gt; to override the column definition of the attribute.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let's say our Base class looks as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain.base;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Date;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt;*&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@MappedSuperclass&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;abstract&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;BaseDomain&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;  &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;  &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date dateCreated;&lt;br /&gt;&lt;br /&gt;  &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;  &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date lastUpdated;&lt;br /&gt;&lt;br /&gt;  &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;  &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;toString&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;"BaseDomain{"&lt;/span&gt; +&lt;br /&gt;              &lt;span class="hljs-string"&gt;"id="&lt;/span&gt; + id +&lt;br /&gt;              &lt;span class="hljs-string"&gt;", dateCreated="&lt;/span&gt; + dateCreated +&lt;br /&gt;              &lt;span class="hljs-string"&gt;", lastUpdated="&lt;/span&gt; + lastUpdated +&lt;br /&gt;              &lt;span class="hljs-string"&gt;'}'&lt;/span&gt;;&lt;br /&gt;  }&lt;br /&gt;  &lt;span class="hljs-comment"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can override the &lt;code&gt;id&lt;/code&gt; field of the &lt;code&gt;BaseDomain&lt;/code&gt; class in inheriting class as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; com.ekiras.domain.base.BaseDomain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.AttributeOverride;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.Column;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.Entity;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@AttributeOverride&lt;/span&gt;(name = &lt;span class="hljs-string"&gt;"id"&lt;/span&gt;,column = &lt;span class="hljs-annotation"&gt;@Column&lt;/span&gt;(name = &lt;span class="hljs-string"&gt;"userId"&lt;/span&gt;))&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;User&lt;/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/span&gt; &lt;span class="hljs-title"&gt;BaseDomain&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String email;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String name;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String password;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-comment"&gt;// getters and setters&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown in the code above we have used &lt;code&gt;@AttributeOverride&lt;/code&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-annotation"&gt;@AttributeOverride&lt;/span&gt;(name = &lt;span class="hljs-string"&gt;"id"&lt;/span&gt;,column = &lt;span class="hljs-annotation"&gt;@Column&lt;/span&gt;(name = &lt;span class="hljs-string"&gt;"userId"&lt;/span&gt;))&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, &lt;code&gt;name= "id"&lt;/code&gt; states that we are going to override the mapping for the &lt;code&gt;id&lt;/code&gt; field of the super class. &lt;code&gt;column = @Column(name = "userId")&lt;/code&gt; states the new configuration of the &lt;code&gt;id&lt;/code&gt; defined in the super class. Here we simple change the name of the column for table &lt;code&gt;user&lt;/code&gt; defined by class &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This will create the table user as shown below.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;&lt;br /&gt;+-----------------------+&lt;br /&gt;| Tables_in_jpa_mapping |&lt;br /&gt;+-----------------------+&lt;br /&gt;| user                  |&lt;br /&gt;+-----------------------+&lt;br /&gt;1 row in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;mysql&amp;gt; desc user;&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| Field        | Type         | Null | Key | Default | Extra          |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| user_id      | bigint(20)   | NO   | PRI | NULL    | auto_increment |&lt;br /&gt;| date_created | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| last_updated | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| email        | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| name         | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| password     | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;6 rows in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;@AttributeOverride&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;May be applied to an entity that extends a mapped superclass or to an embedded field or&lt;br&gt;property to override a basic mapping or id mapping defined by the mapped superclass or embeddable class (or embeddable class of one of its attributes).&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;May be applied to an element collection containing instances of an embeddable class or to a map collection whose key and/or value is an embeddable class. When AttributeOverride is applied to a map, "key." or "value." must be used to prefix the name of the attribute that is being overridden in order to specify it as part of the map key or map value.&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;To override mappings at multiple levels of embedding, a dot (".") notation form must be used in the name element to indicate an attribute within an embedded attribute. The value of each identifier used with the dot notation is the name of the respective embedded field or property.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/ekiras/spring-boot/tree/master/data-jpa/inheritance/attribute-override"&gt;Download code from GITHUB&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;h3&gt;Also Read&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/09/how-to-handle-inheritance-with-entities-in-spring-data-jpa.html"&gt;How to handle inheritance with Entities&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7313493886118373895/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/09/how-to-override-the-domain-mapping-defined-in-parent-entity-with-mapped-super-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7313493886118373895'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7313493886118373895'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/09/how-to-override-the-domain-mapping-defined-in-parent-entity-with-mapped-super-class.html' title='SpringDataJpa : How to override the domain mapping defined in Parent Entity class with MappedSuperclass'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-424098283963766008</id><published>2016-09-22T14:28:00.000+05:30</published><updated>2016-09-29T01:48:06.264+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Spring Data'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringDataJPA'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>SpringDataJpa : How to handle inheritance with Entities</title><content type='html'>&lt;div class="markdown"&gt;&lt;h2&gt;Points to Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Mark your Base Entity class with annotation &lt;code&gt;@MappedSuperclass&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Define all common fields and their getter setters in this class.&lt;/li&gt;&lt;li&gt;Make the base class abstract.&lt;/li&gt;&lt;li&gt;Make all fields as protected so that they can be accessed in inheriting class without getters and setter.&lt;/li&gt;&lt;li&gt;You can also define &lt;code&gt;@PrePersist&lt;/code&gt; and &lt;code&gt;@PreUpdate&lt;/code&gt; in this class.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Fields that should be in the Base Entity&lt;/h2&gt;&lt;p&gt;Your Base Entity class should have only those field that need to be common for all your entities that will inherit this class. &lt;br&gt;Sample Base Entity that you should use might look as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain.base;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Date;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@MappedSuperclass&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;BaseDomain&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date dateCreated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Temporal&lt;/span&gt;(TemporalType.TIMESTAMP)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; Date lastUpdated;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;toString&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;"BaseDomain{"&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;"id="&lt;/span&gt; + id +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", dateCreated="&lt;/span&gt; + dateCreated +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", lastUpdated="&lt;/span&gt; + lastUpdated +&lt;br /&gt;                &lt;span class="hljs-string"&gt;'}'&lt;/span&gt;;&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; &lt;span class="hljs-title"&gt;getId&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; id;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setId&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.id = id;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; Date &lt;span class="hljs-title"&gt;getDateCreated&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; dateCreated;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setDateCreated&lt;/span&gt;&lt;span class="hljs-params"&gt;(Date dateCreated)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.dateCreated = dateCreated;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; Date &lt;span class="hljs-title"&gt;getLastUpdated&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; lastUpdated;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setLastUpdated&lt;/span&gt;&lt;span class="hljs-params"&gt;(Date lastUpdated)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.lastUpdated = lastUpdated;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above &lt;code&gt;BaseDomain&lt;/code&gt; class we have marked it with annotation &lt;code&gt;@MappedSuperclass&lt;/code&gt;. This will enforce that no table is created for this class in the database.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;@MappedSuperclass&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A class designated with the &lt;code&gt;MappedSuperclass&lt;/code&gt;annotation can be mapped in the same way as an entity except that the mappings will apply only to its subclasses since no table exists for the mapped superclass itself. When applied to the subclasses the inherited mappings will apply in the context of the subclass tables.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now, let us inherit this base class in the &lt;code&gt;User&lt;/code&gt; Entity class. So the User.java class may be as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; com.ekiras.domain.base.BaseDomain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.Entity;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;User&lt;/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/span&gt; &lt;span class="hljs-title"&gt;BaseDomain&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String email;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String name;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String password;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;toString&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;super&lt;/span&gt;.toString()+&lt;span class="hljs-string"&gt;" :: User{"&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;"email='"&lt;/span&gt; + email + &lt;span class="hljs-string"&gt;'\''&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", name='"&lt;/span&gt; + name + &lt;span class="hljs-string"&gt;'\''&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;", password='"&lt;/span&gt; + password + &lt;span class="hljs-string"&gt;'\''&lt;/span&gt; +&lt;br /&gt;                &lt;span class="hljs-string"&gt;'}'&lt;/span&gt;;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;getEmail&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; email;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setEmail&lt;/span&gt;&lt;span class="hljs-params"&gt;(String email)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.email = email;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;getName&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; name;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setName&lt;/span&gt;&lt;span class="hljs-params"&gt;(String name)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.name = name;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; String &lt;span class="hljs-title"&gt;getPassword&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; password;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setPassword&lt;/span&gt;&lt;span class="hljs-params"&gt;(String password)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.password = password;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we will run the project it will create the following table in the database.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;&lt;br /&gt;+-----------------------+&lt;br /&gt;| Tables_in_jpa_mapping |&lt;br /&gt;+-----------------------+&lt;br /&gt;| user                  |&lt;br /&gt;+-----------------------+&lt;br /&gt;1 row in set (0.00 sec)&lt;br /&gt;&lt;br /&gt;mysql&amp;gt; desc user;&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| Field        | Type         | Null | Key | Default | Extra          |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;| id           | bigint(20)   | NO   | PRI | NULL    | auto_increment |&lt;br /&gt;| date_created | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| last_updated | datetime     | YES  |     | NULL    |                |&lt;br /&gt;| email        | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| name         | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;| password     | varchar(255) | YES  |     | NULL    |                |&lt;br /&gt;+--------------+--------------+------+-----+---------+----------------+&lt;br /&gt;6 rows in set (0.01 sec)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This shows that,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;No table is created for the &lt;code&gt;BaseDomain&lt;/code&gt; class.&lt;/li&gt;&lt;li&gt;All the field od the &lt;code&gt;BaseDmain&lt;/code&gt; class are included in the inherting class User.&lt;/li&gt;&lt;/ol&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/ekiras/spring-boot/tree/master/data-jpa/mapped-super-class"&gt; Download project from GITHUB&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/424098283963766008/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/09/how-to-handle-inheritance-with-entities-in-spring-data-jpa.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/424098283963766008'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/424098283963766008'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/09/how-to-handle-inheritance-with-entities-in-spring-data-jpa.html' title='SpringDataJpa : How to handle inheritance with Entities'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7067970418693521380</id><published>2016-09-19T16:00:00.000+05:30</published><updated>2016-09-19T16:18:49.891+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Jar'/><category scheme='http://www.blogger.com/atom/ns#' term='Java 9'/><title type='text'>Java : How to create a Jar with single or multiple files</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to create a jar file.&lt;/h2&gt;&lt;p&gt;We can make a jar file with a single class using the following commands&lt;/p&gt;&lt;p&gt;Here &lt;filename&gt; can be replaced by the name of the jar file you want.&lt;/filename&gt;&lt;/p&gt;&lt;h3&gt;1. Create a jar file with single file&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;jar --create --file=&amp;lt;FileName&amp;gt; &amp;lt;file-1&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;2. Create a jar file with multiple files&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;jar --create --file=&amp;lt;FileName&amp;gt; &amp;lt;file-1&amp;gt; &amp;lt;file-2&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;3. Create a jar file with all files in a directory&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;jar --create --file="&amp;lt;FileName&amp;gt; -C /path/to/dir/ ."&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here &lt;code&gt;-C&lt;/code&gt; specifies the directory and &lt;code&gt;.&lt;/code&gt; specifies that it need to include all the files in te directory.&lt;/p&gt;&lt;h2&gt;Some of the shorthands for the above commands&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Option&lt;/th&gt;&lt;th&gt;Shorthand&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;--create&lt;/td&gt;&lt;td&gt;-c&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;--file&lt;/td&gt;&lt;td&gt;-f&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;--module-path&lt;/td&gt;&lt;td&gt;-p&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;--verbose&lt;/td&gt;&lt;td&gt;-v&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;--list&lt;/td&gt;&lt;td&gt;-t&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;--extract&lt;/td&gt;&lt;td&gt;-x&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3&gt;How to extract a jar file&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;jar -xf &amp;lt;FileName&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;How to list the contents of a jar file&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;jar -tf &amp;lt;FileName&amp;gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7067970418693521380/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/09/java-how-to-create-jar-with-single-or-multiple-files.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7067970418693521380'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7067970418693521380'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/09/java-how-to-create-jar-with-single-or-multiple-files.html' title='Java : How to create a Jar with single or multiple files'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7353146688837341715</id><published>2016-09-18T16:39:00.000+05:30</published><updated>2016-09-18T17:59:35.863+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Pattern'/><title type='text'>Design Patterns : Builder Pattern</title><content type='html'>&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;It is a &lt;strong&gt;Creational Design Pattern&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;It must be used when you have &lt;strong&gt;multiple overloaded constructors&lt;/strong&gt; or setters&lt;/li&gt;&lt;li&gt;Its main purpose it to hide from the user, &lt;strong&gt;how the object is to be created&lt;/strong&gt;.&lt;/li&gt;&lt;li&gt;It is advised to &lt;strong&gt;make your constructors private&lt;/strong&gt; when you are using Builder Design Pattern.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;What is Builder Design Pattern&lt;/h2&gt;&lt;p&gt;It is a creational design pattern. So it is only responsible for how an object must be created.&lt;/p&gt;&lt;p&gt;There may be scenarios where there is a class with many instance variables that may be needed to create an object of the class. For this you might have to create many overloaded constructors.&lt;/p&gt;&lt;p&gt;For Example we have a class &lt;strong&gt;NutritionFacts&lt;/strong&gt; that has following instance variables&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servingSize;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servings;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; calories;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; fat;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; sodium;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; carbohydrate;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then to create the object of the class we can have constructors as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;  NutritionFacts cocaCola = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; NutritionFacts(&lt;span class="hljs-number"&gt;240&lt;/span&gt;, &lt;span class="hljs-number"&gt;8&lt;/span&gt;, &lt;span class="hljs-number"&gt;100&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;35&lt;/span&gt;, &lt;span class="hljs-number"&gt;27&lt;/span&gt;);&lt;br /&gt;  NutritionFacts cocaCola = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; NutritionFacts(&lt;span class="hljs-number"&gt;240&lt;/span&gt;, &lt;span class="hljs-number"&gt;8&lt;/span&gt;, &lt;span class="hljs-number"&gt;100&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);&lt;br /&gt;  NutritionFacts cocaCola = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; NutritionFacts(&lt;span class="hljs-number"&gt;240&lt;/span&gt;, &lt;span class="hljs-number"&gt;8&lt;/span&gt;, &lt;span class="hljs-number"&gt;100&lt;/span&gt;, &lt;span class="hljs-number"&gt;35&lt;/span&gt;, &lt;span class="hljs-number"&gt;27&lt;/span&gt;);&lt;br /&gt;  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown in the code above, it is not clear from the code itself what constructor is called for setting values.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;This is the best example where we should use Builder Pattern for Building our class objects.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now, when using Builder Pattern we will be able to tell from the code itself what values are we setting for which instance variable.&lt;/p&gt;&lt;p&gt;For example, if the above constructor were replaces by the following code sample.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;     NutritionFacts facts = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; NutritionFacts.Builder(&lt;span class="hljs-number"&gt;100&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;)&lt;br /&gt;                .calories(&lt;span class="hljs-number"&gt;785&lt;/span&gt;)&lt;br /&gt;                .carbohydrate(&lt;span class="hljs-number"&gt;452&lt;/span&gt;)&lt;br /&gt;                .fat(&lt;span class="hljs-number"&gt;24&lt;/span&gt;)&lt;br /&gt;                .sodium(&lt;span class="hljs-number"&gt;8&lt;/span&gt;)&lt;br /&gt;                .build();&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above code is in itself readable and tells what values are we setting for variables.&lt;/p&gt;&lt;h2&gt;Advantages of Builder Pattern&lt;/h2&gt;&lt;p&gt;This makes the setting of variables and paramaters very readable and less error prone.&lt;/p&gt;&lt;h2&gt;Disadvantages Of Builder Pattern&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;If the number of paramaters are not more than 4 or the number of required paramaters are more than this may not be the optimal solution since the cost of making builders will be more.&lt;/li&gt;&lt;li&gt;Another main disadvantage is that your builder should have same number of fields as the class itself, hence the duplicacy of code is more and you need to make changes to both class and Builder when adding or removing any field.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;How to Implement Builder Design pattern in Java ?&lt;/h2&gt;&lt;p&gt;To implement the Builder Design pattern in Java we will create a Builder Class for making object of our class.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;We can have make this Builder class inside our class or even outside the class. How ever it is adviced to to create this class inside the class for which the object will be created. Otherwise you will not be able to make the constructor of the class private. If the construtor is not private then,the user can still make the object with the &lt;strong&gt;new keyword&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Also the Builder class should have all the field of the main class.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Builder class should be a static inner class of the Main class and set all the values to its instance variables instead of the Main class&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The Builder class should have public setter methods and no getters.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;When the build method is called it should build the object depending updon the values passed and return an object.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;A sample class may look as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;NutritionFacts&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servingSize;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servings;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; calories;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; fat;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; sodium;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; carbohydrate;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Builder&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-comment"&gt;// Required parameters&lt;/span&gt;&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servingSize;&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servings;&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-comment"&gt;// Optional parameters - initialized to default values&lt;/span&gt;&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; calories = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; fat = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; carbohydrate = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; sodium = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-title"&gt;Builder&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servingSize, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; servings)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.servingSize = servingSize;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.servings = servings;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; Builder &lt;span class="hljs-title"&gt;calories&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;            calories = val;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; Builder &lt;span class="hljs-title"&gt;fat&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;            fat = val;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; Builder &lt;span class="hljs-title"&gt;carbohydrate&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;            carbohydrate = val;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; Builder &lt;span class="hljs-title"&gt;sodium&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;            sodium = val;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; NutritionFacts &lt;span class="hljs-title"&gt;build&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; NutritionFacts(&lt;span class="hljs-keyword"&gt;this&lt;/span&gt;);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-title"&gt;NutritionFacts&lt;/span&gt;&lt;span class="hljs-params"&gt;(Builder builder)&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        servingSize = builder.servingSize;&lt;br /&gt;        servings = builder.servings;&lt;br /&gt;        calories = builder.calories;&lt;br /&gt;        fat = builder.fat;&lt;br /&gt;        sodium = builder.sodium;&lt;br /&gt;        carbohydrate = builder.carbohydrate;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;getServingSize&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; servingSize;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;getServings&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; servings;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;getCalories&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; calories;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;getFat&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; fat;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;getSodium&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; sodium;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;getCarbohydrate&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; carbohydrate;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and now you can build the Object of the class NutritionFacts as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;NutritionFacts facts = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; NutritionFacts.Builder(&lt;span class="hljs-number"&gt;100&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;)&lt;br /&gt;                .calories(&lt;span class="hljs-number"&gt;785&lt;/span&gt;)&lt;br /&gt;                .carbohydrate(&lt;span class="hljs-number"&gt;452&lt;/span&gt;)&lt;br /&gt;                .fat(&lt;span class="hljs-number"&gt;0&lt;/span&gt;)&lt;br /&gt;                .build();&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&lt;div class="download"&gt; &lt;a href="https://github.com/ekiras/design-patterns/tree/master/builder-pattern"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;&lt;hr&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7353146688837341715/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/09/introduction-to-builder-pattern.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7353146688837341715'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7353146688837341715'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/09/introduction-to-builder-pattern.html' title='Design Patterns : Builder Pattern'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7424984725781905376</id><published>2016-08-25T16:10:00.000+05:30</published><updated>2016-08-25T16:10:28.720+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Pattern'/><title type='text'>DesignPattern : Introduction to Builder Pattern</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In this pattern the class always &lt;b&gt;contains a Builder class&lt;/b&gt; that will create the object for this class.&lt;/li&gt;&lt;li&gt;This class can &lt;b&gt;optionally have a private Constructor&lt;/b&gt;, this enforces the use of the Builder for making objects.&lt;/li&gt;&lt;li&gt;You should use this patter only for classes with many fields at least &lt;b&gt;more than 4 to 6&lt;/b&gt;, and needs many &lt;b&gt;overloaded constructors&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Avoid&lt;/b&gt; using this pattern when your class has &lt;b&gt;less than 4 fields&lt;/b&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Builder Pattern&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/08/design-pattern-introduction-to-builder.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7424984725781905376'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7424984725781905376'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4036341738168716899</id><published>2016-08-17T15:45:00.000+05:30</published><updated>2016-09-17T11:11:48.886+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Groovy'/><title type='text'>Groovy : Difference between findAll() and collect() methods</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;findAll()&lt;/h2&gt;&lt;div&gt;This method will find all the items in the groovy collection that matches the IDENTITY closure.&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;collect()&lt;/h2&gt;&lt;div&gt;This method iterates through a collection and transforms each entry element to a new element using IDENTITY closure as a transformer. It returns a new collection of elements copied from the original collection.&lt;/div&gt;&lt;h2&gt;Difference between finalAll() and collect() methods&lt;/h2&gt;&lt;br /&gt;&lt;table class="table table-bordered table-striped"&gt;&lt;tr&gt;&lt;th&gt;findAll()&lt;/th&gt;&lt;th&gt;collect()&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;findAll() will return the collection or subset of collection that satisfy the Identity closure or a condition&lt;/td&gt;&lt;td&gt;collect() will return a new collection or sub set of collection.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;findAll() will not modify the entry elements of the collection&lt;/td&gt;&lt;td&gt;collect() will modify the elements by Identity closure.&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;findAll() will return the elements that matches the condition or Identity closure.&lt;/td&gt;&lt;td&gt;collect() will return all the elements of the collection based on the transformation specified by the closure.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;br /&gt;&lt;pre&gt;&lt;code class="language-java"&gt;def list = [&lt;span class="hljs-number"&gt;1&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;];    &lt;br /&gt;    &lt;br /&gt;println list.findAll{it==&lt;span class="hljs-number"&gt;3&lt;/span&gt;}     &lt;span class="hljs-comment"&gt;// [3]  &lt;/span&gt;&lt;br /&gt;println list.findAll{it&amp;gt;&lt;span class="hljs-number"&gt;3&lt;/span&gt;}      &lt;span class="hljs-comment"&gt;// [4, 5]  &lt;/span&gt;&lt;br /&gt;println list.findAll{it*&lt;span class="hljs-number"&gt;2&lt;/span&gt;}      &lt;span class="hljs-comment"&gt;// [1, 2, 3, 4, 5]  &lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;println list.collect{it%&lt;span class="hljs-number"&gt;2&lt;/span&gt;==&lt;span class="hljs-number"&gt;0&lt;/span&gt;}   &lt;span class="hljs-comment"&gt;// [false, true, false, true, false]  &lt;/span&gt;&lt;br /&gt;println list.collect{it==&lt;span class="hljs-number"&gt;2&lt;/span&gt;}     &lt;span class="hljs-comment"&gt;// [false, true, false, false, false]  &lt;/span&gt;&lt;br /&gt;println list.collect{it*&lt;span class="hljs-number"&gt;2&lt;/span&gt;}      &lt;span class="hljs-comment"&gt;// [2, 4, 6, 8, 10]  &lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4036341738168716899/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/08/groovy-difference-between-findall-and-collect-methods.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4036341738168716899'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4036341738168716899'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/08/groovy-difference-between-findall-and-collect-methods.html' title='Groovy : Difference between findAll() and collect() methods'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5556076395436568283</id><published>2016-08-14T14:25:00.000+05:30</published><updated>2016-08-14T14:29:33.737+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Filter'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : How to create a Filter in Spring Boot Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Implement the class &lt;b&gt;Filter&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Add &lt;b&gt;@Configuration&lt;/b&gt;&amp;nbsp;annotation to the class to register it as a filter bean.&lt;/li&gt;&lt;li&gt;Call method&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;filterChain.doFilter(resquest,response)&lt;/b&gt;&amp;nbsp;to continue the request flow&lt;/li&gt;&lt;li&gt;Call method sendError to send error, &lt;pre&gt;((HttpServletResponse)response).sendError(HttpServletResponse.SC_BAD_REQUEST);&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Call method sendRedirect to redirect request to error handler &lt;pre&gt;((HttpServletResponse)response).sendRedirect("/errorUrl");&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to create a Filter in Spring Boot Application&lt;/h2&gt;IN order to make a filter, we have create a class SecurityFilter   &lt;br /&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;package&lt;/span&gt;&amp;nbsp;com.ekiras.filter;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.core.Ordered;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.core.annotation.Order;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.stereotype.Component;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;javax.servlet.*;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;javax.servlet.http.HttpServletResponse;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;java.io.IOException;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;/**&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@author&amp;nbsp;ekansh&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*/&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Component&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Order&lt;/span&gt;(Ordered.HIGHEST_PRECEDENCE)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;SecurityFilter&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;Filter&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;boolean&lt;/span&gt;&amp;nbsp;CONDITION&amp;nbsp;=&amp;nbsp;&lt;span class="keyword"&gt;true&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;init(FilterConfig&amp;nbsp;filterConfig)&amp;nbsp;&lt;span class="keyword"&gt;throws&lt;/span&gt;&amp;nbsp;ServletException&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;doFilter(ServletRequest&amp;nbsp;request,&amp;nbsp;ServletResponse&amp;nbsp;response,&amp;nbsp;FilterChain&amp;nbsp;chain)&amp;nbsp;&lt;span class="keyword"&gt;throws&lt;/span&gt;&amp;nbsp;IOException,&amp;nbsp;ServletException&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt;(CONDITION==&lt;span class="keyword"&gt;true&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;chain.doFilter(request,response);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;else&lt;/span&gt;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((HttpServletResponse)response).setStatus(HttpServletResponse.SC_BAD_REQUEST);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;destroy()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;package com.ekiras.filter;  import org.springframework.core.Ordered; import org.springframework.core.annotation.Order; import org.springframework.stereotype.Component;  import javax.servlet.*; import javax.servlet.http.HttpServletResponse; import java.io.IOException;  /**  * @author ekansh  */ @Component @Order(Ordered.HIGHEST_PRECEDENCE) public class SecurityFilter implements Filter {      private static final boolean CONDITION = true;      @Override     public void init(FilterConfig filterConfig) throws ServletException {      }      @Override     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {         if(CONDITION==true)             chain.doFilter(request,response);         else{             ((HttpServletResponse)response).setStatus(HttpServletResponse.SC_BAD_REQUEST);         }      }      @Override     public void destroy() {      } } &lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;This is how you can create the filter and register it in the Spring Boot Application. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5556076395436568283/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/08/how-to-create-filter-in-spring-boot-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5556076395436568283'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5556076395436568283'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/08/how-to-create-filter-in-spring-boot-application.html' title='SpringBoot : How to create a Filter in Spring Boot Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8901800300128101312</id><published>2016-08-10T20:07:00.000+05:30</published><updated>2016-08-10T23:11:21.114+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : What is Spring Boot</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Spring Boot : Introduction&lt;/h2&gt;Spring Boot can be referred as &lt;b&gt;Spring on Steroids.&lt;/b&gt;&amp;nbsp;Spring boot is a wrapper written over spring modules to allow users to create fast paced spring applications without doing the redundent configurations needed to setup the application.&lt;br /&gt;&lt;br /&gt;Features provided by Spring Boot&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;CLI applications&lt;/b&gt;&amp;nbsp;- enables to create a single class application.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Embedded Tomcat and Jetty&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Auto configurations&lt;/b&gt; for most of the libraries like mysql, mongo, amqp etc&lt;/li&gt;&lt;li&gt;No Xml required for setup or configurations.&lt;/li&gt;&lt;li&gt;Ability to &lt;b&gt;package&lt;/b&gt; the application as both &lt;b&gt;war and jar.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Dependency Management &lt;/b&gt;using starter projects and BOM's.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;For example,&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;When you create a spring application that needs Mysql database. We had to&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;declare the mysql connector dependency in build file.&lt;/li&gt;&lt;li&gt;add the component scan to search the classes for mappings.&lt;/li&gt;&lt;li&gt;map each entity/domain in xml files.&lt;/li&gt;&lt;li&gt;Read data base configurations and create DataSource bean.&lt;/li&gt;&lt;li&gt;add resource handlers to serve static content like css, js, images etc.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;After doing all these steps, if you did not miss any and all your configurations are good, you will be able to run your application properly. But with spring boot all you need to do is,&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Add Spring boot dependency&lt;/li&gt;&lt;li&gt;add data base configurations in a properties file or yaml file.&lt;/li&gt;&lt;li&gt;run application&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Here in spring boot, Auto configuration is already done to load your database credentials from a properties file and create datasource bean.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="alert alert-info"&gt;The first case might take 1-2 days or even a week if your a newbie in spring world. However when you do that same thing in Spring Boot, you will be able to launch the application in a few hours or even less.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This is how Spring Boot has made the Spring configurations so easy and has removed all the Boiler plate code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8901800300128101312/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/08/introduction-to-spring-boot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8901800300128101312'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8901800300128101312'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/08/introduction-to-spring-boot.html' title='SpringBoot : What is Spring Boot'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-444111764895816798</id><published>2016-08-04T13:06:00.000+05:30</published><updated>2016-08-04T13:34:26.839+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Cordova'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Ionic'/><category scheme='http://www.blogger.com/atom/ns#' term='Plugins'/><title type='text'>Ionic : How to get list of all plugins installed</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to get list of all plugins installed for Ionic App&lt;/h2&gt;&lt;br /&gt;You can get a list of all plugins that you have installed on for your ionic app by the following command&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;  cordova plugin list&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="alert alert-warning"&gt;Make sure you are in your app directory.&lt;/div&gt;&lt;br /&gt;Output of the above command will result as follows.&lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;cordova-plugin-admob 2.2.0 "AdMob"&lt;br /&gt;cordova-plugin-admobpro 2.18.0 "AdMob Plugin Pro"&lt;br /&gt;cordova-plugin-device 1.1.2 "Device"&lt;br /&gt;cordova-plugin-extension 1.5.1 "Cordova Plugin Extension"&lt;br /&gt;cordova-plugin-google-analytics 0.8.1 "Google Universal Analytics Plugin"&lt;br /&gt;cordova-plugin-splashscreen 3.2.2 "Splashscreen"&lt;br /&gt;cordova-plugin-statusbar 2.1.3 "StatusBar"&lt;br /&gt;cordova-plugin-whitelist 1.2.3-dev "Whitelist"&lt;br /&gt;cordova-plugin-x-socialsharing 5.1.2 "SocialSharing"&lt;br /&gt;cordova-plugin-x-toast 2.5.2 "Toast"&lt;br /&gt;cordova-sqlite-storage 1.4.2 "Cordova sqlite storage plugin"&lt;br /&gt;ionic-plugin-keyboard 2.2.0 "Keyboard"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Also you can view the file &lt;b&gt;android.json&lt;/b&gt; inside the folder &lt;b&gt;path-to-app/plugins/&lt;/b&gt;&amp;nbsp;and you will find all the plugins configured by ionic.&lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;{&lt;br /&gt;    "prepare_queue": {&lt;br /&gt;        "installed": [],&lt;br /&gt;        "uninstalled": []&lt;br /&gt;    },&lt;br /&gt;    "config_munge": {&lt;br /&gt;        "files": {}&lt;br /&gt;    },&lt;br /&gt;    "installed_plugins": {&lt;br /&gt;        "cordova-plugin-device": {&lt;br /&gt;            "PACKAGE_NAME": "com.ekiras.demo"&lt;br /&gt;        },&lt;br /&gt;        "cordova-plugin-statusbar": {&lt;br /&gt;            "PACKAGE_NAME": "com.ekiras.demo"&lt;br /&gt;        },&lt;br /&gt;        "cordova-plugin-whitelist": {&lt;br /&gt;            "PACKAGE_NAME": "com.ekiras.demo"&lt;br /&gt;        }&lt;br /&gt;    },&lt;br /&gt;    "dependent_plugins": {&lt;br /&gt;        "cordova-plugin-extension": {&lt;br /&gt;            "PACKAGE_NAME": "com.ekiras.demo"&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt;Note : &lt;/b&gt; &lt;br /&gt;You can remove the plugins by using command&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;cordova plugin remove &amp;lt;plugin-name&amp;gt; &lt;/pre&gt;You can add the plugins by using command&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;cordova plugin add &amp;lt;plugin-name&amp;gt; &lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/444111764895816798/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/08/ionic-how-to-get-list-of-all-plugins-installed.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/444111764895816798'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/444111764895816798'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/08/ionic-how-to-get-list-of-all-plugins-installed.html' title='Ionic : How to get list of all plugins installed'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6460268713583642726</id><published>2016-08-03T11:34:00.008+05:30</published><updated>2016-08-03T12:45:00.070+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Arrays'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Algorithms'/><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Interview'/><title type='text'>Arrays : Finding the Element in array where next element is +1, +0 or -1</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Problem Statement&lt;/h2&gt;&lt;div&gt;You are given an array where each element follows the rule that given any index, the number at that index will either be&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;+1 of the number&amp;nbsp;at that index.&lt;/li&gt;&lt;li&gt;+0 of the number&amp;nbsp;at that index.&lt;/li&gt;&lt;li&gt;-1 of the number at that index.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Suppose the array is&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Sample Input&lt;/h3&gt;&lt;br /&gt;&lt;div&gt;arr &amp;nbsp; &amp;nbsp; &amp;nbsp; = {1,2,3,2,3,4,5,6,7,6,5,4,5,6,4,4,4,4};&lt;/div&gt;&lt;div&gt;search = 5&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Sample Output&lt;/h3&gt;&lt;br /&gt;&lt;div&gt;6 &amp;nbsp;(First occurrence of search )&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Sample Input&lt;/h3&gt;&lt;br /&gt;&lt;div style="font-size: medium; font-weight: normal;"&gt;arr &amp;nbsp; &amp;nbsp; &amp;nbsp; = {1,2,1,2,1,2,1,2,1,2};&lt;/div&gt;&lt;div style="font-size: medium; font-weight: normal;"&gt;search = 5&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Sample Output&lt;/h3&gt;&lt;br /&gt;&lt;div style="font-size: medium;"&gt;1 &amp;nbsp;(&amp;nbsp;Element is not found in the array)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2&gt;Algorithm&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Star iterating from start of the array.&lt;/li&gt;&lt;li&gt;Check if the value at the index is same as the search value&lt;/li&gt;&lt;ol&gt;&lt;li&gt;if yes, then return the index&lt;/li&gt;&lt;li&gt;if no, then increment the index counter by modulus of difference of value to search and value at index&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;return -1 if value to search does not exist in the array.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Java Program&lt;/h2&gt;&lt;br /&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;package&lt;/span&gt;&amp;nbsp;com.ekiras.arrays;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;SearchElement&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;final&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;int&lt;/span&gt;[]&amp;nbsp;arr&amp;nbsp;=&amp;nbsp;{&lt;span class="number"&gt;1&lt;/span&gt;,&lt;span class="number"&gt;2&lt;/span&gt;,&lt;span class="number"&gt;3&lt;/span&gt;,&lt;span class="number"&gt;2&lt;/span&gt;,&lt;span class="number"&gt;3&lt;/span&gt;,&lt;span class="number"&gt;4&lt;/span&gt;,&lt;span class="number"&gt;5&lt;/span&gt;,&lt;span class="number"&gt;6&lt;/span&gt;,&lt;span class="number"&gt;7&lt;/span&gt;,&lt;span class="number"&gt;6&lt;/span&gt;,&lt;span class="number"&gt;5&lt;/span&gt;,&lt;span class="number"&gt;4&lt;/span&gt;,&lt;span class="number"&gt;5&lt;/span&gt;,&lt;span class="number"&gt;6&lt;/span&gt;,&lt;span class="number"&gt;4&lt;/span&gt;,&lt;span class="number"&gt;4&lt;/span&gt;,&lt;span class="number"&gt;4&lt;/span&gt;,&lt;span class="number"&gt;4&lt;/span&gt;};&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;main(String&amp;nbsp;args[]){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&lt;span class="string"&gt;"elemet&amp;nbsp;found&amp;nbsp;at&amp;nbsp;::&amp;nbsp;"&lt;/span&gt;&amp;nbsp;+&amp;nbsp;find(&lt;span class="number"&gt;5&lt;/span&gt;)&amp;nbsp;+&amp;nbsp;&lt;span class="string"&gt;"th&amp;nbsp;index"&lt;/span&gt;);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;static&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;nbsp;find(&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;nbsp;search){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;nbsp;cntr=&lt;span class="number"&gt;0&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;while&lt;/span&gt;(cntr&amp;lt;arr.length){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;if&lt;/span&gt;(arr[cntr]==search)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;cntr;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;else&lt;/span&gt;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cntr&amp;nbsp;+=&amp;nbsp;Math.abs(search&amp;nbsp;-&amp;nbsp;arr[cntr]);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;-&lt;span class="number"&gt;1&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;package com.ekiras.arrays;  public class SearchElement {   private static final int[] arr = {1,2,3,2,3,4,5,6,7,6,5,4,5,6,4,4,4,4};    public static void main(String args[]){   System.out.println("elemet found at :: " + find(5) + "th index");     }    public static int find(int search){   int cntr=0;   while(cntr&lt;arr.length){    if(arr[cntr]==search)     return cntr;    else{     cntr += Math.abs(search - arr[cntr]);    }   }   return -1;  }   } &lt;/textarea&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6460268713583642726/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/08/arrays-finding-element-in-array-where_50.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6460268713583642726'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6460268713583642726'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/08/arrays-finding-element-in-array-where_50.html' title='Arrays : Finding the Element in array where next element is +1, +0 or -1'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1937363473634001487</id><published>2016-07-14T16:59:00.001+05:30</published><updated>2016-07-15T01:20:09.048+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Dependency Injection'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Inversion Of Control'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring : Difference between @Autowired, @Inject and @Resource</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;@Inject &lt;/b&gt;is not a spring feature you need to include&amp;nbsp;&lt;a href="https://mvnrepository.com/artifact/javax.inject/javax.inject/1" target="_blank"&gt;javax inject dependency&lt;/a&gt;&amp;nbsp;in order to use @Inject.&lt;/li&gt;&lt;li&gt;&lt;b&gt;@Autowired&lt;/b&gt; is Spring annotation used to inject dependency just like @Inject. It use &lt;b&gt;@Qualifier&lt;/b&gt; annotation to differentiate between the beans.&lt;/li&gt;&lt;li&gt;&lt;b&gt;@Resource&lt;/b&gt; is also Spring annotation, but it uses bean name to inject dependencies and differentiate between beans.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Problem Statement :: Structure&lt;/h2&gt;In order to show how &lt;b&gt;@Autowired&lt;/b&gt; &lt;b&gt;@Inject&lt;/b&gt; and &lt;b&gt;@Resource&lt;/b&gt; annotations work &amp;nbsp;we will create 3 services&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Interface &lt;b&gt;PersonService&lt;/b&gt;, this is the interface for all person related operations.&lt;/li&gt;&lt;li&gt;Class &lt;b&gt;EngineerService&lt;/b&gt;, this is the service that will do operations for engineer.&lt;/li&gt;&lt;li&gt;Class &lt;b&gt;ManagerService&lt;/b&gt;, this is the service that will do operations for manager.&lt;/li&gt;&lt;/ul&gt;Here, both &lt;b&gt;EngineerService&lt;/b&gt; and &lt;b&gt;ManagerService&lt;/b&gt; implements &lt;b&gt;PersonService.&lt;/b&gt;&amp;nbsp;Now we will try to add the services to a controller by different&amp;nbsp;&amp;nbsp;ways to test how &lt;b&gt;@Autowire&lt;/b&gt;, &lt;b&gt;@Inject&lt;/b&gt; and &lt;b&gt;@Resource&lt;/b&gt; will work.&lt;br /&gt;&lt;br /&gt;So the above structure looks like as shown in the code below.&lt;br /&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;interface&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;EngineerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"EngineerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;ManagerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"ManagerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;public interface PersonService {      public String getName(); }   @Service public class EngineerService implements PersonService {      @Override     public String getName() {         return "EngineerService";     }  }  @Service public class ManagerService implements PersonService {      @Override     public String getName() {         return "ManagerService";     } } &lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;Test with @Autowired annotations&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;h3&gt;Parent Reference Type and name&lt;/h3&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@RestController&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;PersonController&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Autowired&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Resource&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Inject&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;@RestController public class PersonController {      @Autowired     private PersonService personService;      @Resource     private PersonService personService;      @Inject     private PersonService personService; } &lt;/textarea&gt;&lt;/div&gt;In this case @Autowired @Inject and @Resource all will throw the following exception.&lt;br /&gt;&lt;div class="output"&gt;Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException&lt;/div&gt;&lt;br /&gt; &lt;/li&gt;&lt;li&gt;&lt;h3&gt;Parent Reference Type and Child Reference Name&lt;/h3&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@RestController&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;PersonController&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Autowired&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;engineerService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Resource&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;engineerService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Inject&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;engineerService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;@RestController public class PersonController {      @Autowired     private PersonService engineerService;      @Resource     private PersonService engineerService;      @Inject     private PersonService engineerService;  }&lt;/textarea&gt;&lt;/div&gt;In this case, all @Autowired, @Inject and @Resource annotations will inject EngineerService, and getName() will return "EngineerService". &lt;div class="alert alert-info"&gt;&lt;b&gt;Note :: &lt;/b&gt; When beans are created, they are created by name of the class, EngineerService will resolve to engineerService and its bean will be resolved by name engineerService. Hence when we try to use it with &lt;b&gt;PersonService engineerService&lt;/b&gt; , this will inject engineerService bean.&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;interface&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;EngineerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"EngineerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"manager"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;ManagerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"ManagerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@RestController&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;PersonController&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Autowired&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Resource&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Inject&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;public interface PersonService {      public String getName(); }  @Service @Qualifier(value = "engineer") public class EngineerService implements PersonService {      @Override     public String getName() {         return "EngineerService";     }  }  @Service @Qualifier(value = "manager") public class ManagerService implements PersonService {      @Override     public String getName() {         return "ManagerService";     } }  @RestController public class PersonController {      @Autowired     @Qualifier(value = "engineer")     private PersonService personService;      @Resource     @Qualifier(value = "engineer")     private PersonService personService;      @Inject     @Qualifier(value = "engineer")     private PersonService personService;  } &lt;/textarea&gt;&lt;/div&gt;In this case, all will inject the EngineerService bean to the PersonCOntroller. This is because we have given names to beans using @Qualifier annotation and then used them with the same name.  &lt;/li&gt;&lt;li&gt;&lt;h3&gt;Ambiguous Qualifiers with Parent Reference Type and name&lt;/h3&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;interface&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"person"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;EngineerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"EngineerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"person"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;ManagerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"ManagerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@RestController&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;PersonController&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Autowired&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"person"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Resource&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"person"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Inject&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"person"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;personService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;public interface PersonService {      public String getName(); }  @Service @Qualifier(value = "person") public class EngineerService implements PersonService {      @Override     public String getName() {         return "EngineerService";     }  }  @Service @Qualifier(value = "person") public class ManagerService implements PersonService {      @Override     public String getName() {         return "ManagerService";     } }  @RestController public class PersonController {      @Autowired     @Qualifier(value = "person")     private PersonService personService;      @Resource     @Qualifier(value = "person")     private PersonService personService;      @Inject     @Qualifier(value = "person")     private PersonService personService;  } &lt;/textarea&gt;&lt;/div&gt;In this case, since the qualifiers are ambiguous, all the three will result in the exception.&lt;br /&gt;&lt;div class="output"&gt;Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException&lt;/div&gt;&lt;br /&gt; This is because spring will not be able to find a unique bean with the qualifier "person". &lt;/li&gt;&lt;li&gt;&lt;h3&gt;Ambiguous Qualifiers with Parent Reference type and Child Reference name&lt;/h3&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;interface&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;EngineerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"EngineerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Service&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"manager"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;ManagerService&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;getName()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class="string"&gt;"ManagerService"&lt;/span&gt;;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@RestController&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;PersonController&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Autowired&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;engineerService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Resource&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;engineerService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Inject&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Qualifier&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;&lt;span class="string"&gt;"engineer"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;private&lt;/span&gt;&amp;nbsp;PersonService&amp;nbsp;engineerService;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;public interface PersonService {      public String getName(); }  @Service @Qualifier(value = "engineer") public class EngineerService implements PersonService {      @Override     public String getName() {         return "EngineerService";     }  }  @Service @Qualifier(value = "manager") public class ManagerService implements PersonService {      @Override     public String getName() {         return "ManagerService";     } }  @RestController public class PersonController {      @Autowired     @Qualifier(value = "engineer")     private PersonService engineerService;      @Resource     @Qualifier(value = "engineer")     private PersonService engineerService;      @Inject     @Qualifier(value = "engineer")     private PersonService engineerService;  } &lt;/textarea&gt;&lt;/div&gt;In this case, @Autowired and @Inject will throw the following exception&lt;br /&gt;&lt;div class="output"&gt;Caused by: org.springframework.beans.factory.NoUniqueBeanDefinitionException&lt;/div&gt;But, @Resouce will still inject the EngineerService bean. &lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br/&gt;&lt;div class="alert alert-info"&gt;Hence following conclusion can be made on the basis of the above test scenario's&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;All, @Autowired, @Inject and @Resource throws exception with Ambiguous Bean names.&lt;/li&gt;&lt;li&gt;If Unique Qualifiers are used, all will inject the specified beans.&lt;/li&gt;&lt;li&gt;If Ambiguous beans are there only @Resouce can inject beans based on names of Bean name.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1937363473634001487/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/07/spring-difference-between-autowired-inject-resource-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1937363473634001487'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1937363473634001487'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/07/spring-difference-between-autowired-inject-resource-annotation.html' title='Spring : Difference between @Autowired, @Inject and @Resource'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2751835040186397368</id><published>2016-07-12T20:15:00.000+05:30</published><updated>2016-07-12T20:15:08.055+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>SpringBoot : How to integrate AngularJs with SpringBoot</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/07/springboot-how-to-integrate-angularjs.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2751835040186397368'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2751835040186397368'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2546916917380444444</id><published>2016-07-01T00:53:00.004+05:30</published><updated>2016-07-01T00:53:34.546+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringSecurity : How to add Custom Login Page in Spring Boot MVC application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Make sure you have added Spring Security Starter.&lt;/li&gt;&lt;li&gt;Create a HTML page to show the custom login page.&lt;/li&gt;&lt;li&gt;Add a ViewController Registry to display the view when requested.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt;Note ::&lt;/b&gt; In this tutorial we have disabled CSRF since we are using a plain html page. In the Next tutorial we will look how to enable CSRF with a custom login page.&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;Steps to add Custom Login Page in Spring Boot MVC application&lt;/h2&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-0R0vsh_D0gE/V3VvyMcQwDI/AAAAAAAAIzI/rGNZfzwFoek7vCzmPqtf4QWE0AdG4jFjQCLcB/s1600/clpage-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="262" src="https://3.bp.blogspot.com/-0R0vsh_D0gE/V3VvyMcQwDI/AAAAAAAAIzI/rGNZfzwFoek7vCzmPqtf4QWE0AdG4jFjQCLcB/s400/clpage-1.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;this is body. &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/--fbQGK_y4dE/V3VvyLWeV2I/AAAAAAAAIzM/bTCHRnxpZR83F9PdwqLBOHuva5RmgcqAACLcB/s1600/clp-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="262" src="https://2.bp.blogspot.com/--fbQGK_y4dE/V3VvyLWeV2I/AAAAAAAAIzM/bTCHRnxpZR83F9PdwqLBOHuva5RmgcqAACLcB/s400/clp-2.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/spring-boot/tree/mvc/springSecurity/customLoginPage"&gt;&lt;strong&gt;Download Project from GitHub&lt;/strong&gt;&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/07/springsecurity-how-to-add-custom-login-page-in-spring-boot-mvc-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2546916917380444444'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2546916917380444444'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://3.bp.blogspot.com/-0R0vsh_D0gE/V3VvyMcQwDI/AAAAAAAAIzI/rGNZfzwFoek7vCzmPqtf4QWE0AdG4jFjQCLcB/s72-c/clpage-1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4064695222314090238</id><published>2016-06-28T16:50:00.002+05:30</published><updated>2016-06-29T13:33:58.072+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Profiles'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : What are Profiles in Spring Boot Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;What are Profiles in Spring Boot&lt;/h2&gt;Profiles can be seen as different environments in spring boot application. Suppose you are working on an application where you have different staging environments like Dev, QA, UAT, Production etc. So you will have different configurations for each environment, for this kind of applications what you need is having different values that can be switched depending upon some flags.&lt;br /&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;In early days, people used to write configurations for all environments and comment the unused environments. But with Spring Boot we can do this without commenting any code by use of &lt;strong&gt;Profiles&lt;/strong&gt;.&lt;/div&gt;&lt;br /&gt;Suppose we have database name configurations for our application as follows&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Dev&lt;b&gt;&amp;nbsp;&amp;nbsp;&lt;/b&gt;&amp;nbsp;- ekiras_dev&lt;/li&gt;&lt;li&gt;QA &amp;nbsp; &amp;nbsp;- ekiras_qa&lt;/li&gt;&lt;li&gt;UAT &amp;nbsp;- ekiras_uat&lt;/li&gt;&lt;li&gt;Prod &amp;nbsp;- ekiras&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Now, we can use profiling in this case. How we will do it ? lets see&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Creating Profiles in Spring Boot&amp;nbsp;&lt;/h2&gt;We will create different files for different environments and call then as profile in rest of the blog.&lt;br /&gt;e.g&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;&lt;b&gt;application-dev.properties&lt;/b&gt;&lt;/div&gt;&lt;div class="panel-body"&gt;db.name=ekiras_dev&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;&lt;b&gt;application-qa.properties&lt;/b&gt;&lt;/div&gt;&lt;div class="panel-body"&gt;db.name=ekiras_qa&lt;/div&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;All the application files should either be under the resources folder or any folder that is in classpath. (resources/ is in class path by default).&lt;br /&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;Similarly you can have properties file for different profiles in the same folder. Each profile should be as &lt;b&gt;application-{env}.properties&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;How Spring Boot Load Profiles&lt;/h2&gt;&lt;div&gt;Spring boot by default loads &lt;b&gt;application.properties&lt;/b&gt;&amp;nbsp;from classpath if no profile is selected or specified. If you want to load profile specific properties then you need to tell spring boot application to load that profile, you can define this by the following ways&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Specify the profile in application.properties as &lt;b&gt;spring.profiles.active=dev&lt;/b&gt;&amp;nbsp;this will enable the dev profile.&lt;/li&gt;&lt;li&gt;Specify the profile at run time as &lt;b&gt;-Dspring.profiles.active=dev&lt;/b&gt;&amp;nbsp;this will enable dev profile, also this will &lt;b&gt;override any profile specified using step 1.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Spring looks for properties files as application-{profile}.properties where {profile} will be any profile you specify by using any of the steps mentioned above.&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4064695222314090238/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/06/springboot-what-are-profiles-in-spring.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4064695222314090238'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4064695222314090238'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/06/springboot-what-are-profiles-in-spring.html' title='SpringBoot : What are Profiles in Spring Boot Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4047577883136555370</id><published>2016-06-23T16:50:00.001+05:30</published><updated>2016-06-23T16:54:57.316+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='MVC'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Html'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : How to display static html file in Spring boot MVC application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In order to serve static files like js, css, images etc ,all your files should be under the &lt;b&gt;resources/static&lt;/b&gt; folder. Spring application can serve all the static files inside folders&lt;/li&gt;&lt;ul&gt;&lt;li&gt;resources/static/&lt;/li&gt;&lt;li&gt;resources/public/&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;In order to serve html files from spring boot application&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;your html files should be under static/public folder&lt;/li&gt;&lt;li&gt;you need to add view controller to serve html file&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h2&gt;How to display static html file in Spring boot MVC application&lt;/h2&gt;&lt;h2 style="text-align: left;"&gt;Step 1 : Extend Class WebMvcConfigurerAdapter&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-jftRXcbb9so/V2vFsFservI/AAAAAAAAIpM/Q0Lo0_eiy8IOpkT1_67RQrQUxbdCnWzCgCLcB/s1600/sb-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img class="img-responsive" border="0" src="https://1.bp.blogspot.com/-jftRXcbb9so/V2vFsFservI/AAAAAAAAIpM/Q0Lo0_eiy8IOpkT1_67RQrQUxbdCnWzCgCLcB/s1600/sb-1.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-U6h3Jm4FQOA/V2vFsABNyMI/AAAAAAAAIpI/mSg90aziMgMV3ybqYYoZP3lDba4lyAnTACLcB/s1600/sb-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img class="img-responsive" border="0" src="https://2.bp.blogspot.com/-U6h3Jm4FQOA/V2vFsABNyMI/AAAAAAAAIpI/mSg90aziMgMV3ybqYYoZP3lDba4lyAnTACLcB/s1600/sb-2.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You should create a class that extends &lt;b&gt;WebMvcConfigurerAdapter&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Your class should have&amp;nbsp;&lt;b&gt;@Configuration &lt;/b&gt;annotation.&lt;/li&gt;&lt;li&gt;You class should not have&amp;nbsp;&lt;b&gt;@EnableMvc&lt;/b&gt; annotation.&lt;/li&gt;&lt;li&gt;Override &lt;b&gt;addViewControllers&lt;/b&gt; method and add your mapping.&lt;/li&gt;&lt;li&gt;Override &lt;b&gt;configurePathMatch&lt;/b&gt; method and update suffix path matching.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Configuration&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;MvcConfigurer&amp;nbsp;&lt;span class="keyword"&gt;extends&lt;/span&gt;&amp;nbsp;WebMvcConfigurerAdapter&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;addViewControllers(ViewControllerRegistry&amp;nbsp;registry)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;registry.addViewController(&lt;span class="string"&gt;"/error"&lt;/span&gt;).setViewName(&lt;span class="string"&gt;"error.html"&lt;/span&gt;);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;registry.setOrder(Ordered.HIGHEST_PRECEDENCE);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;configurePathMatch(PathMatchConfigurer&amp;nbsp;configurer)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;super&lt;/span&gt;.configurePathMatch(configurer);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;configurer.setUseSuffixPatternMatch(&lt;span class="keyword"&gt;false&lt;/span&gt;);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;@Configuration public class MvcConfigurer extends WebMvcConfigurerAdapter {      @Override     public void addViewControllers(ViewControllerRegistry registry) {         registry.addViewController("/error").setViewName("error.html");         registry.setOrder(Ordered.HIGHEST_PRECEDENCE);     }      @Override     public void configurePathMatch(PathMatchConfigurer configurer) {         super.configurePathMatch(configurer);         configurer.setUseSuffixPatternMatch(false);     }   } &lt;/textarea&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In the above code we have added a mapping for &lt;b&gt;"/error"&lt;/b&gt; to show &lt;b&gt;"/error.html"&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Set the registry order to highest precedence, otherwise app will not render the page.&lt;/li&gt;&lt;li&gt;Ovveride configurePathMatch to set suffix pattern to false, this will allow &lt;b&gt;/error&lt;/b&gt; to render &lt;b&gt;/error.html&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt; NOTE :: &lt;/b&gt;Similarly you can add other mappings to display your html pages. To add a default landing page to the application you can add "index.html" under static folder. For index file, you do not need to add any mapping.&lt;/div&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/spring-boot/tree/mvc/customErrorPage"&gt;Download from Github&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4047577883136555370/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/06/how-to-display-static-html-in-springboot-mvc.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4047577883136555370'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4047577883136555370'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/06/how-to-display-static-html-in-springboot-mvc.html' title='SpringBoot : How to display static html file in Spring boot MVC application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://1.bp.blogspot.com/-jftRXcbb9so/V2vFsFservI/AAAAAAAAIpM/Q0Lo0_eiy8IOpkT1_67RQrQUxbdCnWzCgCLcB/s72-c/sb-1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3883397817476149574</id><published>2016-06-06T15:15:00.000+05:30</published><updated>2016-06-06T15:17:36.736+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='linux'/><category scheme='http://www.blogger.com/atom/ns#' term='shellScripting'/><category scheme='http://www.blogger.com/atom/ns#' term='shell'/><title type='text'>ShellScript : How to write to the beginning of a file in Linux</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to write to the beginning of a file using shell script in Linux&lt;/h2&gt;Suppose, we have a file &lt;b&gt;release.txt&lt;/b&gt;&amp;nbsp;and we want to write to first line of the of the file whenever a new release is made.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;sed -i '1i\'"text to write " filename &lt;/pre&gt;&lt;br /&gt;Using the above command as &lt;b&gt;sed -i '1i\'"newVersion-RELEASE" release.txt&lt;/b&gt;&lt;br /&gt;This will append the text to the first line of the file release.txt&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-lZ8yJZPe4Ls/V1VEa_Y80jI/AAAAAAAAHf4/w1IJENx3hHQZ1vR4QhrQUxiKR-wH8uSsQCLcB/s1600/script.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://3.bp.blogspot.com/-lZ8yJZPe4Ls/V1VEa_Y80jI/AAAAAAAAHf4/w1IJENx3hHQZ1vR4QhrQUxiKR-wH8uSsQCLcB/s1600/script.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In the example shown above , we have added a new version 2.0.0-RELEASE to version.txt file .&lt;br /&gt;&lt;br /&gt;If you want to do this using a shell script then you can do it as follows&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;#!/bin/bash&lt;br /&gt;&lt;br /&gt;function writeAtBeginning(){&lt;br /&gt;    sed -i '1i\'"$1" $2&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;writeAtBeginning "$@"&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-B1F8lP3N5kw/V1VF0ZtCU1I/AAAAAAAAHgE/ZrxXrar8wbIuOF71B_K6EiIAtHRB2QOnwCLcB/s1600/shell-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="https://2.bp.blogspot.com/-B1F8lP3N5kw/V1VF0ZtCU1I/AAAAAAAAHgE/ZrxXrar8wbIuOF71B_K6EiIAtHRB2QOnwCLcB/s1600/shell-2.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In the above example, we have added the new version through a shell function by passing version and file name as parameters&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3883397817476149574/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/06/how-to-write-to-beginning-of-file-shell-script-linux.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3883397817476149574'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3883397817476149574'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/06/how-to-write-to-beginning-of-file-shell-script-linux.html' title='ShellScript : How to write to the beginning of a file in Linux'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://3.bp.blogspot.com/-lZ8yJZPe4Ls/V1VEa_Y80jI/AAAAAAAAHf4/w1IJENx3hHQZ1vR4QhrQUxiKR-wH8uSsQCLcB/s72-c/script.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2754632475654655159</id><published>2016-05-23T22:49:00.000+05:30</published><updated>2016-05-23T22:49:10.640+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : How to run Spring boot application to custom port</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;div style="text-align: left;"&gt;Default port for spring boot application is 8080.&amp;nbsp;You can change the port number in the following ways&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;from&amp;nbsp;&lt;b&gt;application.properties&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;command line arguments&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to run Spring boot application to custom port&lt;/h2&gt;In order to run a spring boot application on a custom port you can specify the port in &lt;br /&gt;&lt;strong&gt;application.properties.&lt;/strong&gt;&lt;br /&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;br /&gt;&lt;pre&gt;server.port=8090 &lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;If you are using environment specific properties file then you can define &lt;b&gt;server.port&lt;/b&gt;&amp;nbsp;property in each of your properties file.&lt;br /&gt;&lt;br /&gt;You can alternatively set the port from command line arguments like below&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;gradle -Dserver.port=8090 bootRun&lt;/pre&gt;&lt;br /&gt;This will override any configuration of port given inside the properties file or &lt;b&gt;application.yml&lt;/b&gt; file.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2754632475654655159/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/05/how-to-run-spring-boot-application-on-custom-port-8080.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2754632475654655159'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2754632475654655159'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/05/how-to-run-spring-boot-application-on-custom-port-8080.html' title='SpringBoot : How to run Spring boot application to custom port'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5716446868555077946</id><published>2016-04-13T02:37:00.000+05:30</published><updated>2016-04-13T02:37:13.333+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringSecurity : How to disable Session Creation for Stateless Authentication</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to disable Session Creation for Stateless Authentication&lt;/h2&gt;&lt;br /&gt;We need to disable session creation for authenticating requests based on token based authentication.&lt;br /&gt;This can be easily configured by the following configurations.&lt;br /&gt;&lt;div&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;package&lt;/span&gt;&amp;nbsp;com.ekiras.ss.security.config;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;com.ekiras.ss.security.filter.TokenAuthenticationFilter;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.context.annotation.Bean;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.core.Ordered;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.core.annotation.Order;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.security.config.annotation.web.builders.HttpSecurity;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.security.config.http.SessionCreationPolicy;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;/**&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@author&amp;nbsp;ekansh&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@since&amp;nbsp;11/4/16&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;&amp;nbsp;*/&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@EnableWebSecurity&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@Order&lt;/span&gt;(Ordered.LOWEST_PRECEDENCE-&lt;span class="number"&gt;100&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;RestSecurityConfigurerAdapter&amp;nbsp;&lt;span class="keyword"&gt;extends&lt;/span&gt;&amp;nbsp;WebSecurityConfigurerAdapter&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;configure(HttpSecurity&amp;nbsp;http)&amp;nbsp;&lt;span class="keyword"&gt;throws&lt;/span&gt;&amp;nbsp;Exception&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;package com.ekiras.ss.security.config;  import com.ekiras.ss.security.filter.TokenAuthenticationFilter; import org.springframework.context.annotation.Bean; import org.springframework.core.Ordered; import org.springframework.core.annotation.Order; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;  /**  * @author ekansh  * @since 11/4/16  */ @EnableWebSecurity @Order(Ordered.LOWEST_PRECEDENCE-100) public class RestSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {      @Override     protected void configure(HttpSecurity http) throws Exception {          http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);      }     } &lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;The above configurations, will force the application to stop creating sessions and storing authentication data in session i.e The SecurityContextHolder will not be holding the authentication for each authentication.&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;br /&gt;Pros&lt;/h3&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Each call will be stateless.&lt;/li&gt;&lt;li&gt;No session will be created or maintained.&lt;/li&gt;&lt;li&gt;Very good for rest applications.&lt;/li&gt;&lt;li&gt;Authentication expiry will be handled by the token expiry&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Cons&lt;/h3&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Response time will increase, as each request needs to be authenticated every time.&lt;/li&gt;&lt;li&gt;To maintain state of an authenticated request you need to persist token, if auth token can be used multiple times.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5716446868555077946/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5716446868555077946'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5716446868555077946'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html' title='SpringSecurity : How to disable Session Creation for Stateless Authentication'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8588423784884640226</id><published>2016-04-10T19:02:00.000+05:30</published><updated>2016-04-10T19:02:56.974+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringSecurity : Integrate Sitemesh Templating Engine</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/integrate-sitemesh-templating-engine-in-spring-boot-and-spring-security.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8588423784884640226'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8588423784884640226'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2852356522779621933</id><published>2016-04-06T16:01:00.000+05:30</published><updated>2017-01-04T15:07:51.671+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringSecurity : Authenticate User with Custom UserDetailsService</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Create class that implement &lt;code&gt;UserDetailsService&lt;/code&gt; and override &lt;code&gt;loadUserByUsername()&lt;/code&gt; method.&lt;/li&gt;&lt;li&gt;Throw &lt;code&gt;UsernameNotFoundException&lt;/code&gt; if no user was found by username.&lt;/li&gt;&lt;li&gt;Register this class as a bean by overriding &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Authenticate User with Custom UserDetailsService&lt;/h2&gt;&lt;h3&gt;Step 1 : Create Entities for User and Role&lt;/h3&gt;&lt;hr&gt;&lt;h4&gt;Create Entity User&lt;/h4&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.ss.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Set;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;User&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String username;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String password;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;boolean&lt;/span&gt; enabled;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@ManyToMany&lt;/span&gt;(fetch = FetchType.EAGER,cascade = CascadeType.ALL)&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@JoinTable&lt;/span&gt;(joinColumns = &lt;span class="hljs-annotation"&gt;@JoinColumn&lt;/span&gt;(name = &lt;span class="hljs-string"&gt;"user_id"&lt;/span&gt;),inverseJoinColumns = &lt;span class="hljs-annotation"&gt;@JoinColumn&lt;/span&gt;(name = &lt;span class="hljs-string"&gt;"role_id"&lt;/span&gt;))&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Set&amp;lt;role&amp;gt; roles;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-comment"&gt;// GETTERS and SETTERS&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h4&gt;Create Entity Role&lt;/h4&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.ss.domain;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.persistence.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Set;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Entity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;Role&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Id&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@GeneratedValue&lt;/span&gt;(strategy = GenerationType.AUTO)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; id;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String role;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@ManyToMany&lt;/span&gt;(mappedBy = &lt;span class="hljs-string"&gt;"roles"&lt;/span&gt;,fetch = FetchType.LAZY)&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Set&amp;lt;user&amp;gt; users;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-comment"&gt;// GETTERS and SETTERS&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create three tables in your database&lt;/p&gt;&lt;ol&gt;&lt;li&gt;user&lt;/li&gt;&lt;li&gt;role&lt;/li&gt;&lt;li&gt;user_roles&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Step 2 : Create CustomUserDetailsService&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;Now, create a new class named as &lt;code&gt;SSUserDetailsService&lt;/code&gt; that implements &lt;code&gt;UserDetailsService&lt;/code&gt; and override the &lt;code&gt;loadUserByUsername()&lt;/code&gt; method  as follows.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.ss.config;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; com.ekiras.ss.domain.Role;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; com.ekiras.ss.domain.User;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; com.ekiras.ss.repository.UserRepository;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.slf4j.Logger;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.slf4j.LoggerFactory;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.core.GrantedAuthority;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.core.authority.SimpleGrantedAuthority;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.core.userdetails.UserDetails;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.core.userdetails.UserDetailsService;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.core.userdetails.UsernameNotFoundException;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.transaction.Transactional;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.HashSet;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.util.Set;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Transactional&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;SSUserDetailsService&lt;/span&gt; &lt;span class="hljs-keyword"&gt;implements&lt;/span&gt; &lt;span class="hljs-title"&gt;UserDetailsService&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; Logger LOGGER = LoggerFactory.getLogger(SSUserDetailsService.class);&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; UserRepository userRepository;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-title"&gt;SSUserDetailsService&lt;/span&gt;&lt;span class="hljs-params"&gt;(UserRepository userRepository)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.userRepository=userRepository;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; UserDetails &lt;span class="hljs-title"&gt;loadUserByUsername&lt;/span&gt;&lt;span class="hljs-params"&gt;(String username)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; UsernameNotFoundException &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {&lt;br /&gt;            User user = userRepository.findByUsername(username);&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (user == &lt;span class="hljs-keyword"&gt;null&lt;/span&gt;) {&lt;br /&gt;                LOGGER.debug(&lt;span class="hljs-string"&gt;"user not found with the provided username"&lt;/span&gt;);&lt;br /&gt;                &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;null&lt;/span&gt;;&lt;br /&gt;            }&lt;br /&gt;            LOGGER.debug(&lt;span class="hljs-string"&gt;" user from username "&lt;/span&gt; + user.toString());&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), getAuthorities(user));&lt;br /&gt;        }&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (Exception e){&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;throw&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; UsernameNotFoundException(&lt;span class="hljs-string"&gt;"User not found"&lt;/span&gt;);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Set&amp;lt;grantedauthority&amp;gt; &lt;span class="hljs-title"&gt;getAuthorities&lt;/span&gt;&lt;span class="hljs-params"&gt;(User user)&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        Set&amp;lt;grantedauthority&amp;gt; authorities = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; HashSet&amp;lt;grantedauthority&amp;gt;();&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(Role role : user.getRoles()) {&lt;br /&gt;            GrantedAuthority grantedAuthority = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; SimpleGrantedAuthority(role.getRole());&lt;br /&gt;            authorities.add(grantedAuthority);&lt;br /&gt;        }&lt;br /&gt;        LOGGER.debug(&lt;span class="hljs-string"&gt;"user authorities are "&lt;/span&gt; + authorities.toString());&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; authorities;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This class will load the User from username. When the login form is submitted, spring security will use this class to load the user by the username provided. If the User is not found with that name then the &lt;code&gt;UsernameNotFoundException&lt;/code&gt; is thrown.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;loadUserByUsername()&lt;/strong&gt; method should return an object of &lt;strong&gt;UserDetails&lt;/strong&gt;. You can user two constructors to return this object&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;org.springframework.security.core.userdetails.User&lt;/strong&gt; class&lt;/li&gt;&lt;li&gt;Object of any other class that implements &lt;strong&gt;UserDetails&lt;/strong&gt; interface&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h3&gt;Step 3 : Register our Custom UserDetailsService to SpringSecurity as a Bean&lt;/h3&gt;&lt;hr&gt;&lt;p&gt;Now, we need to register this class as a bean and tell spring security to use this class for loading user from database. So, first we will override the userDetailsBean&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-annotation"&gt;@Autowired&lt;/span&gt; &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; UserRepository userRepository;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; UserDetailsService &lt;span class="hljs-title"&gt;userDetailsServiceBean&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; SSUserDetailsService(userRepository);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;We will pass the bean &lt;strong&gt;UserRepository&lt;/strong&gt; to the &lt;strong&gt;UserDetailsService&lt;/strong&gt; because this bean will be loaded before the repository is loaded, so we might get the useeRepository bean as null in out SSUserDetailsService.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Now we will configure spring security to use our UserDetailsService as follows&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(AuthenticationManagerBuilder auth)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        auth.userDetailsService(userDetailsServiceBean());&lt;br /&gt;    }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, our spring security configurer may look like as shown in code below.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.ss.config;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; com.ekiras.ss.repository.UserRepository;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.core.userdetails.UserDetailsService;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.web.util.matcher.AntPathRequestMatcher;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Configuration&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@EnableWebSecurity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;SpringSecurityConfigurer&lt;/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/span&gt; &lt;span class="hljs-title"&gt;WebSecurityConfigurerAdapter&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Autowired&lt;/span&gt; &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; UserRepository userRepository;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(AuthenticationManagerBuilder auth)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        auth.userDetailsService(userDetailsServiceBean());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; UserDetailsService &lt;span class="hljs-title"&gt;userDetailsServiceBean&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; SSUserDetailsService(userRepository);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(HttpSecurity http)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        http&lt;br /&gt;            .authorizeRequests()&lt;br /&gt;                .antMatchers(&lt;span class="hljs-string"&gt;"/admin/**"&lt;/span&gt;).hasAuthority(&lt;span class="hljs-string"&gt;"ADMIN"&lt;/span&gt;)&lt;br /&gt;                .antMatchers(&lt;span class="hljs-string"&gt;"/user/**"&lt;/span&gt;).hasAuthority(&lt;span class="hljs-string"&gt;"USER"&lt;/span&gt;)&lt;br /&gt;                .anyRequest().authenticated()&lt;br /&gt;            .and()&lt;br /&gt;            .formLogin()&lt;br /&gt;            .and()&lt;br /&gt;            .logout().logoutRequestMatcher(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; AntPathRequestMatcher(&lt;span class="hljs-string"&gt;"/logout"&lt;/span&gt;)).logoutSuccessUrl(&lt;span class="hljs-string"&gt;"/login"&lt;/span&gt;);&lt;br /&gt;        ;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-configure-spring-security-with-spring-boot.html"&gt;Configure Spring Security with Spring boot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html"&gt;Configure JDBC Authetication using MYSQL Query&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html"&gt;Authenticate User with Custom UserDetailsService&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html"&gt;Implement Role Hierarchy with In-Memory Authentication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-list-user-authorities-in-spring-security.html"&gt;How to list the User Authorities in Controller,Filter and Services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html"&gt;Disable Session Creation for Stateless Authentication&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;pre&gt;    &lt;a href="https://github.com/ekiras/spring-boot-spring-security-rest/tree/jdbcDataSourceAuthentication"&gt;Download from Github&lt;/a&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2852356522779621933/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2852356522779621933'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2852356522779621933'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html' title='SpringSecurity : Authenticate User with Custom UserDetailsService'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1541384702604779348</id><published>2016-04-05T17:54:00.000+05:30</published><updated>2017-01-04T13:33:16.047+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringSecurity : Configure JDBC Authetication using MYSQL Query</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Create Database Schema and tables&lt;/h2&gt;&lt;p&gt;First we will create a Database Schema as shown in the image below.&lt;/p&gt;&lt;p&gt;&lt;img src="https://2.bp.blogspot.com/-f_YKXKhMgTo/VwOo4IQ1PNI/AAAAAAAAGl4/NbzjxEJash81F1FZwKRQ--AMiVnrF7eHA/s640/ss_1.png" alt="Sql schema"&gt;&lt;/p&gt;&lt;p&gt;We have to create 3 Tables in database.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;user&lt;/code&gt; - to hold the user data.&lt;/li&gt;&lt;li&gt;&lt;code&gt;role&lt;/code&gt; - to hold the data of roles that a user can have.&lt;/li&gt;&lt;li&gt;&lt;code&gt;user_roles&lt;/code&gt; - to hold the mapping of user and roles.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Configure JDBC Authetication using MYSQL Query.&lt;/h2&gt;&lt;h3&gt;Step 1 : Add the Dependencies&lt;/h3&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt; compile('org.springframework.boot:spring-boot-starter-data-jpa')&lt;br /&gt; runtime('mysql:mysql-connector-java')&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Step 2 : Add the Datasource properties&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;spring.jpa.hibernate.ddl-auto=update&lt;br /&gt;&lt;br /&gt;spring.datasource.url=jdbc:mysql://localhost/demo_ss&lt;br /&gt;spring.datasource.username=root&lt;br /&gt;spring.datasource.password=root&lt;br /&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;br /&gt;spring.datasource.maxActive=10&lt;br /&gt;spring.datasource.max-idle=4&lt;br /&gt;spring.datasource.min-idle=2&lt;br /&gt;spring.datasource.test-while-idle=true&lt;br /&gt;spring.datasource.test-on-borrow=true&lt;br /&gt;spring.datasource.validation-query=SELECT 1&lt;br /&gt;spring.datasource.time-between-eviction-runs-millis=60000&lt;br /&gt;spring.datasource.min-evictable-idle-time-millis=300000&lt;br /&gt;spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Step 3 : Add the Datasource Bean to SpringSecurity Configurer class&lt;/h3&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-annotation"&gt;@Autowired&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; DataSource dataSource;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Add queries to be fired for user authentication&lt;/h3&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(AuthenticationManagerBuilder auth)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        auth.jdbcAuthentication()&lt;br /&gt;                .usersByUsernameQuery(&lt;span class="hljs-string"&gt;"select username,password,enabled from user where username=?"&lt;/span&gt;)&lt;br /&gt;                .authoritiesByUsernameQuery(&lt;span class="hljs-string"&gt;"select u.username,r.role from user u inner join user_roles ur on(u.id=ur.user_id) inner join role r on(ur.role_id=r.id)  where u.username=?"&lt;/span&gt;)&lt;br /&gt;                .dataSource(dataSource);&lt;br /&gt;        auth.userDetailsService(userDetailsService());&lt;br /&gt;    }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following code will demonstrate how to configure spring security to authenticate the user using a simple mysql query.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.ss.config;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.sql.DataSource;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@EnableWebSecurity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;SpringSecurityConfigurer&lt;/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/span&gt; &lt;span class="hljs-title"&gt;WebSecurityConfigurerAdapter&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Autowired&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; DataSource dataSource;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(AuthenticationManagerBuilder auth)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        auth.jdbcAuthentication()&lt;br /&gt;                .usersByUsernameQuery(&lt;span class="hljs-string"&gt;"select username,password,enabled from user where username=?"&lt;/span&gt;)&lt;br /&gt;                .authoritiesByUsernameQuery(&lt;span class="hljs-string"&gt;"select u.username,r.role from user u inner join user_roles ur on(u.id=ur.user_id) inner join role r on(ur.role_id=r.id)  where u.username=?"&lt;/span&gt;)&lt;br /&gt;                .dataSource(dataSource);&lt;br /&gt;        auth.userDetailsService(userDetailsService());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(HttpSecurity http)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        http&lt;br /&gt;            .authorizeRequests()&lt;br /&gt;                .antMatchers(&lt;span class="hljs-string"&gt;"/admin/**"&lt;/span&gt;).hasAuthority(&lt;span class="hljs-string"&gt;"ADMIN"&lt;/span&gt;)&lt;br /&gt;                .antMatchers(&lt;span class="hljs-string"&gt;"/user/**"&lt;/span&gt;).hasAuthority(&lt;span class="hljs-string"&gt;"USER"&lt;/span&gt;)&lt;br /&gt;                .anyRequest().fullyAuthenticated()&lt;br /&gt;                .and()&lt;br /&gt;            .formLogin()&lt;br /&gt;            .and()&lt;br /&gt;            .logout()&lt;br /&gt;        ;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-configure-spring-security-with-spring-boot.html"&gt;Configure Spring Security with Spring boot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html"&gt;Configure JDBC Authetication using MYSQL Query&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html"&gt;Authenticate User with Custom UserDetailsService&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html"&gt;Implement Role Hierarchy with In-Memory Authentication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-list-user-authorities-in-spring-security.html"&gt;How to list the User Authorities in Controller,Filter and Services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html"&gt;Disable Session Creation for Stateless Authentication&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;pre class="download"&gt;    &lt;a href="https://github.com/ekiras/spring-boot-spring-security-rest/tree/jdbcSimpleAuthentication"&gt;Download from Github&lt;/a&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1541384702604779348/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1541384702604779348'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1541384702604779348'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html' title='SpringSecurity : Configure JDBC Authetication using MYSQL Query'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://2.bp.blogspot.com/-f_YKXKhMgTo/VwOo4IQ1PNI/AAAAAAAAGl4/NbzjxEJash81F1FZwKRQ--AMiVnrF7eHA/s72-c/ss_1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5300635101351187015</id><published>2016-04-04T11:53:00.000+05:30</published><updated>2017-01-04T14:39:20.879+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringSecurity : How to list the User Authorities in Controller,Filter and Services</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to get the User Authorities in Controller,Filter and Services&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;You can get the user authorities from the &lt;code&gt;SecurityContextHolder&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;code&gt;getContext().getAuthenication().getAuthorities()&lt;/code&gt; will return the authorities for the currently logged in user.&lt;/li&gt;&lt;li&gt;You cannot add the user Authority to this collection of user Authorities.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; Object &lt;span class="hljs-title"&gt;authorities&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        Set&amp;lt;grantedauthority&amp;gt; authorities = (Set&amp;lt;grantedauthority&amp;gt;) SecurityContextHolder.getContext().getAuthentication().getAuthorities();&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(authorities.contains(&lt;span class="hljs-string"&gt;"ADMIN"&lt;/span&gt;)){&lt;br /&gt;            &lt;span class="hljs-comment"&gt;// do something&lt;/span&gt;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;""&lt;/span&gt;;&lt;br /&gt;        }&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-title"&gt;if&lt;/span&gt;&lt;span class="hljs-params"&gt;(authorities.contains(&lt;span class="hljs-string"&gt;"USER"&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;{&lt;br /&gt;            &lt;span class="hljs-comment"&gt;// do something else&lt;/span&gt;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;""&lt;/span&gt;;&lt;br /&gt;        }&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;{&lt;br /&gt;            &lt;span class="hljs-comment"&gt;// do something else&lt;/span&gt;&lt;br /&gt;            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-string"&gt;""&lt;/span&gt;;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown in the example above you can get the user authorities by the following method.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;Collection authorities = SecurityContextHolder.getContext().getAuthentication().getAuthorities();&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-configure-spring-security-with-spring-boot.html"&gt;Configure Spring Security with Spring boot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html"&gt;Configure JDBC Authetication using MYSQL Query&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html"&gt;Authenticate User with Custom UserDetailsService&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html"&gt;Implement Role Hierarchy with In-Memory Authentication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-list-user-authorities-in-spring-security.html"&gt;How to list the User Authorities in Controller,Filter and Services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html"&gt;Disable Session Creation for Stateless Authentication&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5300635101351187015/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/how-to-list-user-authorities-in-spring-security.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5300635101351187015'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5300635101351187015'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/04/how-to-list-user-authorities-in-spring-security.html' title='SpringSecurity : How to list the User Authorities in Controller,Filter and Services'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8065275873200298662</id><published>2016-04-01T16:32:00.001+05:30</published><updated>2017-01-04T14:43:49.551+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringSecurity : Implement Role Hierarchy with In-Memory Authentication</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Implement Role Hierarchy with In-Memory Authentication&lt;/h2&gt;&lt;p&gt;In order to configure role hierarchy, you need to&lt;/p&gt;&lt;ol&gt;&lt;li&gt;make a bean &lt;code&gt;RoleHierarchy&lt;/code&gt;&lt;/li&gt;&lt;li&gt;define a &lt;code&gt;expressionhandler&lt;/code&gt; to read role hierarchy&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.ss.config;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.access.expression.SecurityExpressionHandler;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.access.hierarchicalroles.RoleHierarchy;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.builders.HttpSecurity;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.web.FilterInvocation;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@EnableWebSecurity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;SpringSecurityConfigurer&lt;/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/span&gt; &lt;span class="hljs-title"&gt;WebSecurityConfigurerAdapter&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; SecurityExpressionHandler&amp;lt;filterinvocation&amp;gt; &lt;span class="hljs-title"&gt;webExpressionHandler&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;        DefaultWebSecurityExpressionHandler defaultWebSecurityExpressionHandler = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; DefaultWebSecurityExpressionHandler();&lt;br /&gt;        defaultWebSecurityExpressionHandler.setRoleHierarchy(roleHierarchy());&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; defaultWebSecurityExpressionHandler;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Bean&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; RoleHierarchy &lt;span class="hljs-title"&gt;roleHierarchy&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        RoleHierarchyImpl roleHierarchy = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; RoleHierarchyImpl();&lt;br /&gt;        roleHierarchy.setHierarchy(&lt;span class="hljs-string"&gt;"ADMIN &amp;gt; USER"&lt;/span&gt;);&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; roleHierarchy;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(AuthenticationManagerBuilder auth)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        auth.inMemoryAuthentication()&lt;br /&gt;                .withUser(&lt;span class="hljs-string"&gt;"ekansh"&lt;/span&gt;)&lt;br /&gt;                .password(&lt;span class="hljs-string"&gt;"password"&lt;/span&gt;)&lt;br /&gt;                .authorities(&lt;span class="hljs-string"&gt;"USER"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"ROLE"&lt;/span&gt;);&lt;br /&gt;        auth.inMemoryAuthentication()&lt;br /&gt;                .withUser(&lt;span class="hljs-string"&gt;"admin"&lt;/span&gt;)&lt;br /&gt;                .password(&lt;span class="hljs-string"&gt;"admin"&lt;/span&gt;)&lt;br /&gt;                .authorities(&lt;span class="hljs-string"&gt;"ADMIN"&lt;/span&gt;);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(HttpSecurity http)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        http&lt;br /&gt;            .authorizeRequests()&lt;br /&gt;                .expressionHandler(webExpressionHandler())&lt;br /&gt;                .antMatchers(&lt;span class="hljs-string"&gt;"/admin/**"&lt;/span&gt;).hasAuthority(&lt;span class="hljs-string"&gt;"ADMIN"&lt;/span&gt;)&lt;br /&gt;                .antMatchers(&lt;span class="hljs-string"&gt;"/user/**"&lt;/span&gt;).hasAuthority(&lt;span class="hljs-string"&gt;"USER"&lt;/span&gt;)&lt;br /&gt;                .anyRequest().authenticated()&lt;br /&gt;            .and()&lt;br /&gt;            .formLogin()&lt;br /&gt;            .and()&lt;br /&gt;            .logout()&lt;br /&gt;        ;&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the example above, we have made a role hierarchy where&lt;/p&gt;&lt;ol&gt;&lt;li&gt;ADMIN can access MODERATOR and USER roles,&lt;/li&gt;&lt;li&gt;MODERATOR can access USER roles.&lt;/li&gt;&lt;li&gt;USER can neither access MODERATOR nor ADMIN roles.&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class="language-java"&gt;    &lt;span class="hljs-annotation"&gt;@Bean&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; RoleHierarchy &lt;span class="hljs-title"&gt;roleHierarchy&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;        RoleHierarchyImpl roleHierarchy = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; RoleHierarchyImpl();&lt;br /&gt;        roleHierarchy.setHierarchy(&lt;span class="hljs-string"&gt;"ADMIN &amp;gt; MODERATOR &amp;gt; USER"&lt;/span&gt;);&lt;br /&gt;        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; roleHierarchy;&lt;br /&gt;    }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is an easy way to configure and manage roles and role permissions for making security groups.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-configure-spring-security-with-spring-boot.html"&gt;Configure Spring Security with Spring boot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html"&gt;Configure JDBC Authetication using MYSQL Query&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html"&gt;Authenticate User with Custom UserDetailsService&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html"&gt;Implement Role Hierarchy with In-Memory Authentication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-list-user-authorities-in-spring-security.html"&gt;How to list the User Authorities in Controller,Filter and Services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html"&gt;Disable Session Creation for Stateless Authentication&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;pre class="download"&gt;    &lt;a href="https://github.com/ekiras/spring-boot-spring-security-rest/tree/roleHierarchy"&gt;Download from Github&lt;/a&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8065275873200298662/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8065275873200298662'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8065275873200298662'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html' title='SpringSecurity : Implement Role Hierarchy with In-Memory Authentication'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5671636146249009607</id><published>2016-04-01T14:34:00.004+05:30</published><updated>2017-01-04T13:28:25.307+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringSecurity : Configure In Memory Authentication </title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Configure Spring Security to Authenticate user using In-Memory Authentication.&lt;/h2&gt;&lt;p&gt;To implement inMemory authentication, all you need to do is&lt;/p&gt;&lt;ol&gt;&lt;li&gt;extend &lt;code&gt;WebSecurityConfigurerAdapter&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;override &lt;code&gt;configure(AuthenticationManagerBuilder)&lt;/code&gt; method&lt;/li&gt;&lt;li&gt;add &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;roles/authorities&lt;/code&gt; for authentication.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;After adding the following class to your application, you will be able to login using these username password pairs.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.ss.config;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; *&lt;span class="hljs-javadoctag"&gt; @author&lt;/span&gt; ekiras&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@EnableWebSecurity&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;SpringSecurityConfigurer&lt;/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/span&gt; &lt;span class="hljs-title"&gt;WebSecurityConfigurerAdapter&lt;/span&gt;&lt;/span&gt;{&lt;br /&gt;    &lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-annotation"&gt;@Override&lt;/span&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;protected&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;configure&lt;/span&gt;&lt;span class="hljs-params"&gt;(AuthenticationManagerBuilder auth)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br /&gt;        auth.inMemoryAuthentication()&lt;br /&gt;                .withUser(&lt;span class="hljs-string"&gt;"ekansh"&lt;/span&gt;)&lt;br /&gt;                .password(&lt;span class="hljs-string"&gt;"password"&lt;/span&gt;)&lt;br /&gt;                .roles(&lt;span class="hljs-string"&gt;"USER"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"ROLE"&lt;/span&gt;);&lt;br /&gt;        auth.inMemoryAuthentication()&lt;br /&gt;                .withUser(&lt;span class="hljs-string"&gt;"admin"&lt;/span&gt;)&lt;br /&gt;                .password(&lt;span class="hljs-string"&gt;"admin"&lt;/span&gt;)&lt;br /&gt;                .roles(&lt;span class="hljs-string"&gt;"ADMIN"&lt;/span&gt;);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As shown in the code above, we have configured two user-password pairs,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;username : user , password : user and role/authorities : USER.&lt;/li&gt;&lt;li&gt;username : admin , password : admin and role/authorities : ADMIN.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You can use any of the above pairs to login and authenticate user. First, can be used for requests that can be accessed by USER role and Second can be used to access the requests with ADMIN role.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-configure-spring-security-with-spring-boot.html"&gt;Configure Spring Security with Spring boot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html"&gt;Configure JDBC Authetication using MYSQL Query&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html"&gt;Authenticate User with Custom UserDetailsService&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html"&gt;Implement Role Hierarchy with In-Memory Authentication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-list-user-authorities-in-spring-security.html"&gt;How to list the User Authorities in Controller,Filter and Services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html"&gt;Disable Session Creation for Stateless Authentication&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;hr&gt;&lt;pre class="download"&gt;    &lt;a href="https://github.com/ekiras/spring-boot-spring-security-rest/tree/inMemoryAuthentication"&gt;Download project from Github&lt;/a&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5671636146249009607/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/in-memory-authentication-with-spring-security.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5671636146249009607'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5671636146249009607'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/04/in-memory-authentication-with-spring-security.html' title='SpringSecurity : Configure In Memory Authentication '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3094949923973733208</id><published>2016-04-01T13:12:00.001+05:30</published><updated>2017-01-04T14:49:20.443+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringSecurity : How to configure Spring Security with Spring boot</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;How to integrate Spring Security with Spring boot&lt;/h2&gt;&lt;p&gt;Add the following dependency in your &lt;strong&gt;build.gradle&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class="language-gradle"&gt;compile('org.springframework.boot:spring-boot-starter-security')&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Basic Spring Security Configurations&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Add the dependency in your build.gradle&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Run your application gradle bootRun for gradle and mvn spring:run for maven&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;img src="https://4.bp.blogspot.com/-izEPj6HTTjs/VkzY-eUvJMI/AAAAAAAADLE/Sat0s-lR6S86A4cAFYNRlcR21foL68zdg/s640/ss-2.png" alt="Image"&gt;&lt;/p&gt;&lt;ol start="3"&gt;&lt;li&gt;The default username is user and the password will be printed in the logs as shown in the image above. So in this case you can login using&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class="language-java"&gt;username = user&lt;br /&gt;password = &lt;span class="hljs-comment"&gt;// printed in logs&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A new password will be created each time the application restarts.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Spring Security Configurations with defined username and password&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Add the following in your application.properties&lt;/li&gt;&lt;/ol&gt;&lt;pre&gt;&lt;code class="language-java"&gt;security.user.name=user&lt;br /&gt;security.user.password=password&lt;br /&gt;security.user.role=USER, ADMIN&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;ol start="2"&gt;&lt;li&gt;&lt;p&gt;Using this approach you will be able to login to your application using the username and password defined by you.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The default Roles assigned on login will be the one specified by you in properties file.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-configure-spring-security-with-spring-boot.html"&gt;Configure Spring Security with Spring boot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html"&gt;Configure JDBC Authetication using MYSQL Query&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html"&gt;Authenticate User with Custom UserDetailsService&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html"&gt;Implement Role Hierarchy with In-Memory Authentication&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-list-user-authorities-in-spring-security.html"&gt;How to list the User Authorities in Controller,Filter and Services&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html"&gt;Disable Session Creation for Stateless Authentication&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3094949923973733208/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/04/how-to-configure-spring-security-with-spring-boot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3094949923973733208'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3094949923973733208'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/04/how-to-configure-spring-security-with-spring-boot.html' title='SpringSecurity : How to configure Spring Security with Spring boot'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://4.bp.blogspot.com/-izEPj6HTTjs/VkzY-eUvJMI/AAAAAAAADLE/Sat0s-lR6S86A4cAFYNRlcR21foL68zdg/s72-c/ss-2.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2601900676552544004</id><published>2016-03-26T13:41:00.000+05:30</published><updated>2016-03-26T13:47:30.193+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='Jackson'/><category scheme='http://www.blogger.com/atom/ns#' term='JSON'/><category scheme='http://www.blogger.com/atom/ns#' term='Filter'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : Read JSON object from POST Request in Filter</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Add the following dependency to the gradle project.&lt;br /&gt;&lt;pre&gt;compile('com.fasterxml.jackson.core:jackson-databind:2.7.1-1')&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;Read JSON in Filter and bind it to POJO class&lt;/h2&gt;&lt;div&gt;You can read the JSON inside a Filter class in SpringBoot by&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Create a BufferedReader object by reading request object.&lt;/li&gt;&lt;li&gt;Create an ObjectMapper object.&lt;/li&gt;&lt;li&gt;Read JSON from bufferedReader object and bind it to any POJO class.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;package&lt;/span&gt;&amp;nbsp;com.ekiras.test;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;com.fasterxml.jackson.databind.JsonMappingException;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;com.fasterxml.jackson.databind.ObjectMapper;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;javax.servlet.*;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;java.io.BufferedReader;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;java.io.IOException;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;/**&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@author&amp;nbsp;ekansh&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@since&amp;nbsp;26/3/16&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*/&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;MyFilter&amp;nbsp;&lt;span class="keyword"&gt;implements&lt;/span&gt;&amp;nbsp;Filter&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;init(FilterConfig&amp;nbsp;filterConfig)&amp;nbsp;&lt;span class="keyword"&gt;throws&lt;/span&gt;&amp;nbsp;ServletException&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;some&amp;nbsp;init&amp;nbsp;code&amp;nbsp;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;doFilter(ServletRequest&amp;nbsp;request,&amp;nbsp;ServletResponse&amp;nbsp;response,&amp;nbsp;FilterChain&amp;nbsp;chain)&amp;nbsp;&lt;span class="keyword"&gt;throws&lt;/span&gt;&amp;nbsp;IOException,&amp;nbsp;ServletException&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;declare&amp;nbsp;a&amp;nbsp;reader&amp;nbsp;&amp;nbsp;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedReader&amp;nbsp;reader;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;try&lt;/span&gt;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;get&amp;nbsp;reader&amp;nbsp;from&amp;nbsp;the&amp;nbsp;request&amp;nbsp;object&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reader&amp;nbsp;=&amp;nbsp;request.getReader();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;create&amp;nbsp;an&amp;nbsp;object&amp;nbsp;mapper&amp;nbsp;instance&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ObjectMapper&amp;nbsp;mapper&amp;nbsp;=&amp;nbsp;&lt;span class="keyword"&gt;new&lt;/span&gt;&amp;nbsp;ObjectMapper();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;read&amp;nbsp;values&amp;nbsp;from&amp;nbsp;the&amp;nbsp;reader&amp;nbsp;object&amp;nbsp;and&amp;nbsp;map&amp;nbsp;the&amp;nbsp;response&amp;nbsp;to&amp;nbsp;desired&amp;nbsp;class.&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mapper.readValue(reader,Object.&lt;span class="keyword"&gt;class&lt;/span&gt;);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;span class="keyword"&gt;catch&lt;/span&gt;&amp;nbsp;(JsonMappingException&amp;nbsp;e){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;void&lt;/span&gt;&amp;nbsp;destroy()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;some&amp;nbsp;code&amp;nbsp;to&amp;nbsp;be&amp;nbsp;run&amp;nbsp;at&amp;nbsp;destruction&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;package com.ekiras.test;  import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.ObjectMapper;  import javax.servlet.*; import java.io.BufferedReader; import java.io.IOException;  /**  * @author ekansh  * @since 26/3/16  */ public class MyFilter implements Filter {       @Override     public void init(FilterConfig filterConfig) throws ServletException {         // some init code      }      @Override     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {         // declare a reader           BufferedReader reader;         try{             // get reader from the request object             reader = request.getReader();             // create an object mapper instance             ObjectMapper mapper = new ObjectMapper();             // read values from the reader object and map the response to desired class.             mapper.readValue(reader,Object.class);         }catch (JsonMappingException e){             e.printStackTrace();         }     }      @Override     public void destroy() {         // some code to be run at destruction     }  } &lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;So, in this way you can read JSON from the request and bind it to the any custom class.&lt;br /&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt;Note :: &lt;/b&gt; To bind the JSON to any POJO class, you need to pass the class name of the pojo class to the objectMapper object.&lt;br /&gt;e.g mapper.readValue(reader,MyCustomClass.class); &lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2601900676552544004/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/03/springboot-read-json-object-from-post-request-in-filter.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2601900676552544004'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2601900676552544004'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/03/springboot-read-json-object-from-post-request-in-filter.html' title='SpringBoot : Read JSON object from POST Request in Filter'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8713911330332314551</id><published>2016-02-29T00:51:00.000+05:30</published><updated>2016-02-29T00:51:38.598+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SessionFactory'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : How to use &amp; configure SessionFactory Bean</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Add the &lt;b&gt;SessionFactory&lt;/b&gt;&amp;nbsp;bean in the Application class.&lt;/li&gt;&lt;li&gt;Add the Current Session Context class in application.properties.&lt;/li&gt;&lt;li&gt;Use the SessionFactory using&amp;nbsp;&lt;b&gt;@Autowired&lt;/b&gt;&amp;nbsp;annotation.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to Configure &amp;amp; Use SessionFactory Bean&lt;/h2&gt;Add the following to the Main Application class or Configuration class. &lt;br /&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@Bean&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;SessionFactory&amp;nbsp;sessionFactory(HibernateEntityManagerFactory&amp;nbsp;hemf){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;hemf.getSessionFactory();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt; @Bean  public SessionFactory sessionFactory(HibernateEntityManagerFactory hemf){   return hemf.getSessionFactory();  }&lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;Add the following line in application.properties &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate4.SpringSessionContext&lt;/pre&gt;&lt;br /&gt;Now you can use the Session Factory in your code as follows. &lt;br /&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol start="1" class="dp-j"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span class="keyword"&gt;class&lt;/span&gt;&lt;span&gt;&amp;nbsp;Sample&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Autowired&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;SessionFactory&amp;nbsp;sessionFactory;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;use&amp;nbsp;the&amp;nbsp;session&amp;nbsp;factory&amp;nbsp;as&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;sessionFactory.getCurrentSession();&amp;nbsp;to&amp;nbsp;get&amp;nbsp;the&amp;nbsp;current&amp;nbsp;session&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&lt;/span&gt;&lt;span&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;}&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;textarea style="display:none;" class="originalCode"&gt;class Sample {      @Autowired    SessionFactory sessionFactory;     // use the session factory as     // sessionFactory.getCurrentSession(); to get the current session    // }&lt;/textarea&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8713911330332314551/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-use-configure-session-factory-bean-springboot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8713911330332314551'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8713911330332314551'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-use-configure-session-factory-bean-springboot.html' title='SpringBoot : How to use &amp; configure SessionFactory Bean'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7284196149868779758</id><published>2016-02-23T11:06:00.000+05:30</published><updated>2016-02-23T11:06:11.420+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>Java : How to sort Array List based on Custom Order</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to sort Array List using Custom Order&lt;/h2&gt;On many occasions we need to sort an array list or linked list based on custom logic. Suppose you have a Quiz application and you want to return questions based on a custom question id.&lt;br /&gt;&lt;br /&gt;e.g Request : &lt;b&gt;ids = [ 88, 21, 43, 15, 64, 35 ]&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;When you will fetch the Questions from Database you will be using a query something like below&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;select * from question where id in (?)&lt;/pre&gt;&lt;br /&gt;This will give you questions ordered by id by default. So to covert it in same order as requested order you can use&lt;br /&gt;&lt;br /&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;//&amp;nbsp;ids&amp;nbsp;=&amp;nbsp;[&amp;nbsp;88,&amp;nbsp;21,&amp;nbsp;43,&amp;nbsp;15,&amp;nbsp;64,&amp;nbsp;35&amp;nbsp;]&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;//&amp;nbsp;questions&amp;nbsp;=&amp;nbsp;new&amp;nbsp;ArrayList&amp;lt;Question&amp;gt;();&amp;nbsp;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Collections.sort(questions,&amp;nbsp;&lt;span class="keyword"&gt;new&lt;/span&gt;&amp;nbsp;Comparator&amp;lt;Question&amp;gt;()&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@Override&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;int&lt;/span&gt;&amp;nbsp;compare(QuestionDto&amp;nbsp;q1,&amp;nbsp;QuestionDto&amp;nbsp;q2)&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;compare&amp;nbsp;based&amp;nbsp;on&amp;nbsp;the&amp;nbsp;index&amp;nbsp;of&amp;nbsp;id&amp;nbsp;in&amp;nbsp;list&amp;nbsp;**ids&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;ids.indexOf(q1.getId())&amp;nbsp;-&amp;nbsp;ids.indexOf(q2.getId());&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;});&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;       // ids = [ 88, 21, 43, 15, 64, 35 ]        // questions = new ArrayList&lt;question&gt;();         Collections.sort(questions, new Comparator&lt;question&gt;() {             @Override             public int compare(QuestionDto q1, QuestionDto q2) {                 // compare based on the index of id in list **ids                 return ids.indexOf(q1.getId()) - ids.indexOf(q2.getId());             }         });&lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;The above code will give you questions in order of ids requested.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7284196149868779758/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-sort-array-list-based-on-custom-order-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7284196149868779758'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7284196149868779758'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-sort-array-list-based-on-custom-order-java.html' title='Java : How to sort Array List based on Custom Order'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4874112346868628678</id><published>2016-02-19T02:11:00.000+05:30</published><updated>2016-02-19T11:37:43.713+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Exception Handling'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : How to do Exception Handling in Rest Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;div&gt;There are three ways to do exception handling in spring boot application.&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Global Level using - &amp;nbsp;&lt;b&gt;@ControllerAdvice&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Controller Level using -&amp;nbsp;&lt;b&gt;@ExceptionHandler&lt;/b&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Method Level using -&amp;nbsp;&lt;b&gt;try/catch&amp;nbsp;&lt;/b&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;div class="note"&gt;&lt;a href="http:/#" target="_blank"&gt;Difference between @ExceptionHandler and @ControllerAdvice&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;How to do Exception Handling in Rest Application&lt;/h2&gt;&lt;div&gt;To demonstrate Exception Handling we will make three Exceptions.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;BaseException that will be parent of all the Custom Exceptions.&lt;/li&gt;&lt;li&gt;CustomException1 that extends Base Exception.&lt;/li&gt;&lt;li&gt;CustomException2 that extends Base Exception.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;We will create the following methods&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ex1() throws BaseException&lt;/li&gt;&lt;li&gt;ex2()&amp;nbsp;throws&amp;nbsp;CustomException1&lt;/li&gt;&lt;li&gt;ex3()&amp;nbsp;throws&amp;nbsp;CustomException2&lt;/li&gt;&lt;li&gt;ex4() throws NullPointerException&amp;nbsp;&lt;/li&gt;&lt;li&gt;ex5() throws NumberFormatException&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;and now we will see how we can handle these exceptions using above mentioned ways.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Way 1 : Global Exception Handling using @ControllerAdvice&lt;/h2&gt;&lt;/div&gt;Add a class with annotation &lt;b&gt;@ControllerAdvice &lt;/b&gt;and&amp;nbsp;&lt;b&gt;@RestController.&lt;/b&gt;&amp;nbsp;This will make the class return a Rest Response.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;@ControllerAdvice&lt;/b&gt;&amp;nbsp;tells your spring application that this class will do the exception handling for your application.&lt;/li&gt;&lt;li&gt;&lt;b&gt;@RestController&lt;/b&gt;&amp;nbsp;will make it a controller and let this class render the response.&lt;/li&gt;&lt;li&gt;Use&amp;nbsp;&lt;b&gt;@ExceptionHandler&lt;/b&gt;&amp;nbsp;annotation to define the class of Exception it will catch. (A Base class will catch all the Inherited and extended classes)&lt;/li&gt;&lt;li&gt;You can set the response status for exception using&amp;nbsp;&lt;b&gt;@ResponseStatus&lt;/b&gt;&amp;nbsp;annotation.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h4&gt;HomeController.class&lt;/h4&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;package&lt;/span&gt;&amp;nbsp;com.ekiras.controller;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;com.ekiras.exception.BaseException;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;com.ekiras.exception.CustomException1;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;com.ekiras.exception.CustomException2;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.web.bind.annotation.ExceptionHandler;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.web.bind.annotation.RequestMapping;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.web.bind.annotation.RestController;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;/**&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@author&amp;nbsp;ekansh&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@since&amp;nbsp;19/2/16&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*/&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@RestController&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@RequestMapping&lt;/span&gt;({&lt;span class="string"&gt;""&lt;/span&gt;,&lt;span class="string"&gt;"/"&lt;/span&gt;})&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;HomeController&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="string"&gt;"/ex1"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;ex1(){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;will&amp;nbsp;be&amp;nbsp;catched&amp;nbsp;by&amp;nbsp;global&amp;nbsp;exception&amp;nbsp;handler&amp;nbsp;method&amp;nbsp;handleBaseException&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;new&lt;/span&gt;&amp;nbsp;BaseException(&lt;span class="string"&gt;"Base&amp;nbsp;Exception"&lt;/span&gt;);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="string"&gt;"/ex2"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;ex2(){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;will&amp;nbsp;be&amp;nbsp;catched&amp;nbsp;by&amp;nbsp;global&amp;nbsp;exception&amp;nbsp;handler&amp;nbsp;method&amp;nbsp;handleBaseException&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;new&lt;/span&gt;&amp;nbsp;CustomException1();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="string"&gt;"/ex3"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;ex3(){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;will&amp;nbsp;be&amp;nbsp;catched&amp;nbsp;by&amp;nbsp;global&amp;nbsp;exception&amp;nbsp;handler&amp;nbsp;method&amp;nbsp;handleBaseException&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;new&lt;/span&gt;&amp;nbsp;CustomException2();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="string"&gt;"/ex4"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;ex4(){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;will&amp;nbsp;be&amp;nbsp;catched&amp;nbsp;by&amp;nbsp;global&amp;nbsp;exception&amp;nbsp;handler&amp;nbsp;method&amp;nbsp;handleException&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;new&lt;/span&gt;&amp;nbsp;NullPointerException(&lt;span class="string"&gt;"null&amp;nbsp;pointer&amp;nbsp;exception"&lt;/span&gt;);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="string"&gt;"/ex5"&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;ex5(){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;//&amp;nbsp;will&amp;nbsp;be&amp;nbsp;catched&amp;nbsp;by&amp;nbsp;controller&amp;nbsp;exception&amp;nbsp;hnadler&amp;nbsp;handler&amp;nbsp;method&amp;nbsp;nfeHandler&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;new&lt;/span&gt;&amp;nbsp;NumberFormatException(&lt;span class="string"&gt;"number&amp;nbsp;format&amp;nbsp;exception"&lt;/span&gt;);&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="comment"&gt;/**&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;This&amp;nbsp;method&amp;nbsp;will&amp;nbsp;handle&amp;nbsp;all&amp;nbsp;the&amp;nbsp;Number&amp;nbsp;Format&amp;nbsp;Exceptions&amp;nbsp;that&amp;nbsp;arise&amp;nbsp;within&amp;nbsp;this&amp;nbsp;controller.&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&amp;nbsp;*/&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@ExceptionHandler&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;NumberFormatException.&lt;span class="keyword"&gt;class&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;nfeHandler(NumberFormatException&amp;nbsp;e){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;e.getMessage();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;package com.ekiras.controller;  import com.ekiras.exception.BaseException; import com.ekiras.exception.CustomException1; import com.ekiras.exception.CustomException2; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;  /**  * @author ekansh  * @since 19/2/16  */ @RestController @RequestMapping({"","/"}) public class HomeController {      @RequestMapping("/ex1")     public String ex1(){         // will be catched by global exception handler method handleBaseException         throw new BaseException("Base Exception");     }      @RequestMapping("/ex2")     public String ex2(){         // will be catched by global exception handler method handleBaseException         throw new CustomException1();     }      @RequestMapping("/ex3")     public String ex3(){         // will be catched by global exception handler method handleBaseException         throw new CustomException2();     }      @RequestMapping("/ex4")     public String ex4(){         // will be catched by global exception handler method handleException         throw new NullPointerException("null pointer exception");     }      @RequestMapping("/ex5")     public String ex5(){         // will be catched by controller exception hnadler handler method nfeHandler         throw new NumberFormatException("number format exception");     }      /**      * This method will handle all the Number Format Exceptions that arise within this controller.      *       * */     @ExceptionHandler(value = NumberFormatException.class)     public String nfeHandler(NumberFormatException e){         return e.getMessage();     }  } &lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;GlobalExceptionHandler.class&lt;/h4&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;package&lt;/span&gt;&amp;nbsp;com.ekiras.handler.exception;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;com.ekiras.exception.BaseException;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.http.HttpStatus;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.web.bind.annotation.ControllerAdvice;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.web.bind.annotation.ExceptionHandler;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.web.bind.annotation.ResponseStatus;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;import&lt;/span&gt;&amp;nbsp;org.springframework.web.bind.annotation.RestController;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;/**&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@author&amp;nbsp;ekansh&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="comment"&gt;&amp;nbsp;*&amp;nbsp;@since&amp;nbsp;19/2/16&lt;/span&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="comment"&gt;&amp;nbsp;*/&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="annotation"&gt;@ControllerAdvice&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@RestController&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span class="keyword"&gt;class&lt;/span&gt;&amp;nbsp;GlobalExceptionHandler&amp;nbsp;{&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@ResponseStatus&lt;/span&gt;(HttpStatus.BAD_REQUEST)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@ExceptionHandler&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;BaseException.&lt;span class="keyword"&gt;class&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;handleBaseException(BaseException&amp;nbsp;e){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;e.getMessage();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="annotation"&gt;@ExceptionHandler&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;Exception.&lt;span class="keyword"&gt;class&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;handleException(Exception&amp;nbsp;e){&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;e.getMessage();}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;package com.ekiras.handler.exception;  import com.ekiras.exception.BaseException; import org.springframework.http.HttpStatus; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseStatus; import org.springframework.web.bind.annotation.RestController;  /**  * @author ekansh  * @since 19/2/16  */ @ControllerAdvice @RestController public class GlobalExceptionHandler {      @ResponseStatus(HttpStatus.BAD_REQUEST)     @ExceptionHandler(value = BaseException.class)     public String handleBaseException(BaseException e){         return e.getMessage();     }      @ExceptionHandler(value = Exception.class)     public String handleException(Exception e){return e.getMessage();}   } &lt;/textarea&gt;&lt;/div&gt;&lt;br /&gt;Here,&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;handleBaseException(BaseException e) :: &lt;/b&gt;&amp;nbsp;will catch all the exceptions for classes BaseException, CustomException1 and CustomException2.&lt;/li&gt;&lt;li&gt;&lt;b&gt;handleException(Exception e) :: &lt;/b&gt;&amp;nbsp;will handle all the exceptions that are childs of Exception class.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="alert alert-danger"&gt;&lt;b&gt;Note :: &lt;/b&gt; If &lt;b&gt;BaseException&lt;/b&gt; or its child exception is thrown then &lt;b&gt;handleBaseException&lt;/b&gt;() will catch this exception and not the &lt;b&gt;handleException&lt;/b&gt;() method &lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Way 2 : Controller Level Exception handling using&amp;nbsp;@ExceptionHandler&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;div class="tools"&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('ViewSource',this);return false;"&gt;view plain&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('CopyToClipboard',this);return false;"&gt;copy to clipboard&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('PrintSource',this);return false;"&gt;print&lt;/a&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=5485242750509374114#" onclick="dp.sh.Toolbar.Command('About',this);return false;"&gt;?&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;ol class="dp-j" start="1"&gt;&lt;li class="alt"&gt;&lt;span class="annotation"&gt;@ExceptionHandler&lt;/span&gt;(value&amp;nbsp;=&amp;nbsp;NumberFormatException.&lt;span class="keyword"&gt;class&lt;/span&gt;)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;&lt;span class="keyword"&gt;public&lt;/span&gt;&amp;nbsp;String&amp;nbsp;nfeHandler(NumberFormatException&amp;nbsp;e){&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="keyword"&gt;return&lt;/span&gt;&amp;nbsp;e.getMessage();&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class=""&gt;&amp;nbsp;}&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;textarea class="originalCode" style="display: none;"&gt;   @ExceptionHandler(value = NumberFormatException.class)     public String nfeHandler(NumberFormatException e){         return e.getMessage();     }&lt;/textarea&gt;&lt;/div&gt;The above code in the &lt;b&gt;HomeController.java&lt;/b&gt;&amp;nbsp;will catch will the&amp;nbsp;&lt;b&gt;NumberFormatException&lt;/b&gt;&amp;nbsp;that arise from this controller. This&amp;nbsp;will not handle&amp;nbsp;&lt;b&gt;NumberFormatException&lt;/b&gt;&amp;nbsp;that occurs in any other controller.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-sFMO6JIXiJI/Vsaw8u6avrI/AAAAAAAAF54/sCyy2ff6lTk/s1600/e1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="113" class="img img-responsive" src="https://1.bp.blogspot.com/-sFMO6JIXiJI/Vsaw8u6avrI/AAAAAAAAF54/sCyy2ff6lTk/s640/e1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-K9CrmyMsRJ0/Vsaw88ViDTI/AAAAAAAAF5w/qLhWnAMIQ50/s1600/e2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="128" class="img img-responsive" src="https://1.bp.blogspot.com/-K9CrmyMsRJ0/Vsaw88ViDTI/AAAAAAAAF5w/qLhWnAMIQ50/s640/e2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-q5J65gd6xlc/Vsaw85lCRQI/AAAAAAAAF50/PPVTp3zN1gQ/s1600/e3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="98" class="img img-responsive" src="https://4.bp.blogspot.com/-q5J65gd6xlc/Vsaw85lCRQI/AAAAAAAAF50/PPVTp3zN1gQ/s640/e3.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-m2FfhUJiU3M/Vsaw9RX6GRI/AAAAAAAAF58/FfB-5CGVX9w/s1600/e4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="106" class="img img-responsive" src="https://1.bp.blogspot.com/-m2FfhUJiU3M/Vsaw9RX6GRI/AAAAAAAAF58/FfB-5CGVX9w/s640/e4.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-6VHJSHkRiWU/Vsaw9mbMILI/AAAAAAAAF6A/7Cw4utiEtUg/s1600/e5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="98" class="img img-responsive" src="https://3.bp.blogspot.com/-6VHJSHkRiWU/Vsaw9mbMILI/AAAAAAAAF6A/7Cw4utiEtUg/s640/e5.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;b&gt;&lt;a href="https://github.com/gitekiras/spring-boot-exception-handling" target="_blank"&gt;Download project from GitHub&amp;nbsp;&lt;/a&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4874112346868628678/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-do-exception-handling-in-springboot-rest-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4874112346868628678'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4874112346868628678'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-do-exception-handling-in-springboot-rest-application.html' title='SpringBoot : How to do Exception Handling in Rest Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://1.bp.blogspot.com/-sFMO6JIXiJI/Vsaw8u6avrI/AAAAAAAAF54/sCyy2ff6lTk/s72-c/e1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3859417141293236164</id><published>2016-02-17T16:53:00.001+05:30</published><updated>2016-02-17T16:53:31.621+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : How to disable the Application Banner </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to disable the Application Banner&amp;nbsp;&lt;/h2&gt;You can disable the application banner using the following ways &lt;br /&gt;&lt;ul&gt;&lt;li&gt;You can diable by adding following in &lt;b&gt;application.properties&lt;/b&gt; file &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;spring.main.web_environment=false&lt;br /&gt;spring.main.banner_mode=off&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;You can disable the same by adding the following code to your main Application class.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;    public static void main(String[] args) {&lt;br /&gt;        new SpringApplicationBuilder()&lt;br /&gt;                .showBanner(false)&lt;br /&gt;                .sources(Application.class)&lt;br /&gt;                .run(args);&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;By following any of the above steps you can disable the banner in the spring boot application.&lt;br /&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt;Note :: &lt;/b&gt;&lt;a href="http://www.ekiras.com/2016/02/adding-custom-banner-in-springboot-application.html" target="_blank"&gt; How to add Custom Banner in Spring Boot Application.&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3859417141293236164/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-disable-application-banner-in-spring-boot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3859417141293236164'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3859417141293236164'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-disable-application-banner-in-spring-boot.html' title='SpringBoot : How to disable the Application Banner '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6862703404102024205</id><published>2016-02-17T16:37:00.000+05:30</published><updated>2016-02-17T16:55:36.588+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : Adding Custom Banner in Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Adding Custom Banner in Spring Boot Application&lt;/h2&gt;You can replace the default spring boot banner for your application to give a more meaningful name to it.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://2.bp.blogspot.com/-gc5VgGG2s8Q/VsRR8MMtJFI/AAAAAAAAF5A/A909sj_t590/s1600/banner-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="151" src="https://2.bp.blogspot.com/-gc5VgGG2s8Q/VsRR8MMtJFI/AAAAAAAAF5A/A909sj_t590/s640/banner-1.png" width="640" /&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://4.bp.blogspot.com/-mswtwjOTY70/VsRSGoH7I9I/AAAAAAAAF5E/k3QmFn-S4DQ/s1600/banner-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="112" src="https://4.bp.blogspot.com/-mswtwjOTY70/VsRSGoH7I9I/AAAAAAAAF5E/k3QmFn-S4DQ/s640/banner-2.png" width="640" /&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Steps to add Custom Banner in application.&lt;/h3&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Go to the link &lt;a href="http://patorjk.com/software/taag/#p=display&amp;amp;f=Graffiti&amp;amp;t=Type%20Something%20" target="_blank"&gt;ASCII art generator&lt;/a&gt;&amp;nbsp;and generate an ascii art.&lt;/li&gt;&lt;li&gt;Create a file named &lt;b&gt;banner.txt&lt;/b&gt;&amp;nbsp;under &lt;b&gt;resources&lt;/b&gt; folder.&lt;/li&gt;&lt;li&gt;That's it, rerun your application and you will be able to see your new banner.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt;Note :: &lt;/b&gt; name of the file should be &lt;b&gt;banner.txt&lt;/b&gt; and placed in folder &lt;b&gt;resources&lt;/b&gt;&lt;/div&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt;Note :: &lt;/b&gt;&lt;a href="http://www.ekiras.com/2016/02/how-to-disable-application-banner-in-spring-boot.html" target="_blank"&gt; How to disable the banner in Spring boot Application.&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6862703404102024205/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/02/adding-custom-banner-in-springboot-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6862703404102024205'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6862703404102024205'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/02/adding-custom-banner-in-springboot-application.html' title='SpringBoot : Adding Custom Banner in Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://2.bp.blogspot.com/-gc5VgGG2s8Q/VsRR8MMtJFI/AAAAAAAAF5A/A909sj_t590/s72-c/banner-1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8736411520673603453</id><published>2016-02-06T15:23:00.000+05:30</published><updated>2016-02-06T15:23:27.269+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Logging'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>Spring Boot : How to enable Hibernate SQL Logging using application.properties</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to enable Hibernate SQL Logging in Spring Boot using application.properties&lt;/h2&gt;You can enable hibernate sql logging level to Debug. This will print the sql queries fired by hibernate.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;logging.level.org.hibernate.SQL=DEBUG&lt;/pre&gt;&lt;br/&gt;Your complete SQL configuration may look like following &lt;br/&gt;&lt;pre&gt;&lt;br /&gt;spring.jpa.hibernate.ddl-auto=update&lt;br /&gt;spring.datasource.url=jdbc:mysql://localhost/ekiras&lt;br /&gt;spring.datasource.username=root&lt;br /&gt;spring.datasource.password=root&lt;br /&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver&lt;br /&gt;logging.level.org.hibernate.SQL=DEBUG&lt;br /&gt;&lt;/pre&gt; &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8736411520673603453/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-enable-hibernate-sql-logging-spring-boot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8736411520673603453'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8736411520673603453'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/02/how-to-enable-hibernate-sql-logging-spring-boot.html' title='Spring Boot : How to enable Hibernate SQL Logging using application.properties'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7990002330855225908</id><published>2016-01-20T03:03:00.000+05:30</published><updated>2016-01-20T03:03:09.688+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Internalization'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : Internalization and i18n messages for Rest</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Accept the Locale from Headers e.g &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;   @RequestHeader("Accept-Language") Locale locale&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;Step 1 : Define Beans for Internationalization&lt;/h2&gt;Add the files in &lt;b&gt;resources/i18n&lt;/b&gt; folder as shown in image &lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-RaSlTSfnwds/Vp6rDvcUraI/AAAAAAAAFXk/wWByUIZc6lQ/s1600/msgBundle.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img  class="img img-responsive" border="0" src="http://3.bp.blogspot.com/-RaSlTSfnwds/Vp6rDvcUraI/AAAAAAAAFXk/wWByUIZc6lQ/s400/msgBundle.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Add the following to the Application class ( The main class)&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;&lt;br /&gt;&lt;br /&gt; @Bean&lt;br /&gt; public LocaleResolver localeResolver() {&lt;br /&gt;  SessionLocaleResolver slr = new SessionLocaleResolver();&lt;br /&gt;  slr.setDefaultLocale(Locale.US); // Set default Locale as US&lt;br /&gt;  return slr;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Bean&lt;br /&gt; public ResourceBundleMessageSource messageSource() {&lt;br /&gt;  ResourceBundleMessageSource source = new ResourceBundleMessageSource();&lt;br /&gt;  source.setBasenames("i18n/messages");  // name of the resource bundle &lt;br /&gt;  source.setUseCodeAsDefaultMessage(true);&lt;br /&gt;  return source;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now inject the MessageSource Bean where you want to internationalize the message. We will be doing it in the Controller. &lt;div class="alert alert-info"&gt;&lt;b&gt;Note : &lt;/b&gt; You need to define all your resouce bundles in the &lt;b&gt;messageSource&lt;/b&gt; bean so that the application can pick them.&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;&lt;br /&gt;&lt;br /&gt;    @RestController&lt;br /&gt;    public class HomeController {&lt;br /&gt;&lt;br /&gt;       @Autowired &lt;br /&gt;       private MessageSource messageSource;&lt;br /&gt;&lt;br /&gt;       @RequestMapping("/msg")&lt;br /&gt;       public String msg(@RequestHeader("Accept-Language") Locale locale){&lt;br /&gt;          return messageSource.getMessage("msg",null,locale);&lt;br /&gt;       }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; &lt;br /&gt;   &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7990002330855225908/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/01/springboot-internalization-and-i18n.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7990002330855225908'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7990002330855225908'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/01/springboot-internalization-and-i18n.html' title='SpringBoot : Internalization and i18n messages for Rest'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-RaSlTSfnwds/Vp6rDvcUraI/AAAAAAAAFXk/wWByUIZc6lQ/s72-c/msgBundle.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6704547036432652915</id><published>2016-01-19T17:24:00.001+05:30</published><updated>2016-01-19T17:39:48.740+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Data Binding'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Headers'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : How to read Header from Request and bind to variable</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to read Headers in Spring Boot Controller&lt;/h2&gt;&lt;div class="alert alert-info"&gt;&lt;a href="http://www.ekiras.com/2015/10/springboot-no-access-control-allow-origin-ajax-call.html" target="_blank"&gt;How to Allow Custom Headers in Spring Boot&amp;nbsp;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Suppose we have a controller and want to bind the Headers to a variable, then we can do the following  &lt;br /&gt;&lt;br /&gt;&lt;pre&gt; &lt;br /&gt;    @RequestHeader(value = "Accept-Language", defaultValue = "en") String locale&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This will bind the Header &lt;b&gt;Accept-Language&lt;/b&gt;, to the variable locale. &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;value=""&lt;/b&gt; It defines the name of the header to bind to the variable &lt;/li&gt;&lt;li&gt;&lt;b&gt;required= boolean&lt;/b&gt; It tells if this is mandatory header or not. default value is true &lt;/li&gt;&lt;li&gt;&lt;b&gt;defaultValue ="" &lt;/b&gt; It can be used to give a default value if the header is not present.&lt;/li&gt;&lt;/ul&gt;Similarly you can bind Custom Headers like shown below &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;     // String&lt;br /&gt;    @RequestHeader(value = "X-My-String-Header", defaultValue = "Hello World") String h1&lt;br /&gt;     // Long&lt;br /&gt;    @RequestHeader(value = "X-My-Long-Header", defaultValue = 212) Long h2&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="alert alert-danger"&gt;Do not use "&lt;b&gt;_&lt;/b&gt;" underscore in header key or values, because they get neglected while http calls.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6704547036432652915/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/01/how-to-read-custom-header-from-spring-boot-controller.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6704547036432652915'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6704547036432652915'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/01/how-to-read-custom-header-from-spring-boot-controller.html' title='SpringBoot : How to read Header from Request and bind to variable'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2030721739385459497</id><published>2016-01-19T14:41:00.000+05:30</published><updated>2016-01-19T14:47:01.314+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Data Binding'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : How to bind data from url to a variable</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Binding data from URL to a variable&lt;/h2&gt; Suppose you want to have bind some data from URL then you can do the following &lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;create the &lt;b&gt;@RequestMapping&lt;/b&gt; annotation e.g &lt;br /&gt;   &lt;ul&gt;     &lt;li&gt;/list/{id}&lt;/li&gt;     &lt;li&gt;/{version}/list/{id}&lt;/li&gt;   &lt;/ul&gt;&lt;/li&gt;&lt;li&gt; bind the Url parameters using &lt;b&gt;@PathVariable&lt;/b&gt; annotation e.g &lt;br /&gt;   &lt;ul&gt;     &lt;li&gt;@PathVariable("id") Long id &lt;/li&gt;     &lt;li&gt;@PathVariable("version") int version,@PathVariable("id") Long id  &lt;/li&gt;   &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Complete code may look like this, &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;br /&gt;    @RequestMapping("list/{id}")&lt;br /&gt;    public Object list(@PathVariable("id") Long id ){&lt;br /&gt;&lt;br /&gt;     // Logic goes here &lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;br /&gt;    @RequestMapping("/{version}/list/{id}")&lt;br /&gt;    public Object list(@PathVariable("version") int version,@PathVariable("id") Long id ){&lt;br /&gt;&lt;br /&gt;     // Logic goes here &lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2030721739385459497/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/01/how-to-bind-request-data-to-variable-in-springboot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2030721739385459497'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2030721739385459497'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/01/how-to-bind-request-data-to-variable-in-springboot.html' title='SpringBoot : How to bind data from url to a variable'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4119508116351340387</id><published>2016-01-19T13:42:00.000+05:30</published><updated>2016-01-19T13:42:12.306+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='JPA'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>JPA : One to Many Mapping using Hibernate Spring Boot</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://resources.ekiras.com/images/jpa/one-to-many.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img img-reponsive" src="http://resources.ekiras.com/images/jpa/one-to-many.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;STEP 1 :: Add the dependencies&lt;/h2&gt;You need to add the following dependencies in your &lt;b&gt;build.gradle&lt;/b&gt; file.&lt;br /&gt;&lt;pre&gt;    &lt;br /&gt;    compile('org.springframework.boot:spring-boot-starter-data-jpa')&lt;br /&gt;    compile('org.springframework.boot:spring-boot-starter-jdbc')&lt;br /&gt;    runtime('mysql:mysql-connector-java')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;STEP 2 :: Make Entity classes&lt;/h2&gt;You need to create two entity QUESTION and TOPIC.&lt;br /&gt;&lt;br /&gt;Here the Topic Entity will have an annotation &lt;b&gt;@OneToMany&lt;/b&gt; , this indicates the following &lt;br/ &gt;&lt;ul&gt;&lt;li&gt;This one topic can have many questions.&lt;/li&gt;&lt;li&gt;All the questions will be deleted or updated when topic is deleted/updated.&lt;/li&gt;&lt;li&gt;Its mapping is defined by Entity Question by the mapping of topic variable.&lt;/li&gt;&lt;li&gt;It will give a list of all question of a topic when it is fetched&lt;/li&gt;&lt;li&gt;If you do not need questions when topic is fetched then make fetch type as LAZY &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;br /&gt;    @OneToMany(cascade = CascadeType.ALL,mappedBy = "topic",fetch = FetchType.EAGER)&lt;br /&gt;    private List&lt;Question&gt; questions;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here the Question entity will have the annotation &lt;b&gt;@ManyToOne&lt;/b&gt;, this will indicate the following, &lt;ul&gt;&lt;li&gt;One question can belong to only one topic.&lt;/li&gt;&lt;li&gt;When you fetch question, it will not fetch the topic because the fetch mode is LAZY&lt;/li&gt;&lt;li&gt;It will join make the foreign key column as &lt;b&gt;topic_id&lt;/b&gt;. If you want any other name, then you can define using &lt;b&gt;@JoinColumn&lt;/b&gt; annotation &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;    @ManyToOne(fetch = FetchType.LAZY)&lt;br /&gt;    @JoinColumn(name = "topic_id")&lt;br /&gt;    private Topic topic;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt; Full class code is shown below &lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/73027f95efb4e7899e7f.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4119508116351340387/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/01/jpa-one-to-many-mapping-using-hibernate-spring-boot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4119508116351340387'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4119508116351340387'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/01/jpa-one-to-many-mapping-using-hibernate-spring-boot.html' title='JPA : One to Many Mapping using Hibernate Spring Boot'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1959183637460899140</id><published>2016-01-08T02:46:00.000+05:30</published><updated>2016-01-08T02:46:18.810+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Java : How to generate a random number between two given numbers</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to find a Random Number Between two given Numbers&lt;/h2&gt;Suppose we want to generate a number between two given numbers X and Y then we can use the following two approaches.&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Approach 1&lt;/h2&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Generate a random number between 0 to (Y - X ) just add this to X. i.e &lt;b&gt;X+N&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;div&gt;For, example if we have to calculate a random number between 100 and 150,&lt;/div&gt;&lt;div&gt;then in that case X = 100 , Y = 150,&lt;br /&gt;Then we calculate a number between 0 to (150-100) &amp;nbsp;i.e &amp;nbsp;0 to 50. Thus, we just need to add this to 100 to get a number in range of 100 to 150.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Approach 2&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Generate a number N using the &lt;b&gt;Math.random()&lt;/b&gt; method such that &lt;b&gt;( N &amp;lt; X&amp;lt; Y )&lt;/b&gt;&lt;/li&gt;&lt;li&gt;If &lt;b&gt;N &amp;lt;= Y - X&lt;/b&gt;&amp;nbsp;then result is &lt;b&gt;X+N&lt;/b&gt;&lt;/li&gt;&lt;li&gt;else, we add the difference of N from the difference of X and Y i.e &lt;b&gt;X + ( N - ( Y - X ))&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;For, example if we have to calculate a random number between 100 and 150,&lt;/div&gt;&lt;div&gt;then in that case X = 100 , Y = 150,&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Case 1 : N = 24 ( less than Y- X)&lt;br /&gt;In this case result will be X + N that is 24 + 100 = 124 &lt;/li&gt;&lt;li&gt;Case 2 : N = 88 ( greater than Y-X )&lt;br /&gt;In this case result will be X + ( N - (Y - X)) that is 100 + (88 - (100 - 50)) = 138&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;public class Rand {&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  System.out.println(sol1(100,150));&lt;br /&gt;  System.out.println(sol2(100,150));&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; public static int sol1(int start, int end){&lt;br /&gt;  int num = rand(end-start);&lt;br /&gt;  return num+start;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; public static int sol2(int start,int end){&lt;br /&gt;  int num = rand(start);&lt;br /&gt;  if(num&amp;lt;=end-start)&lt;br /&gt;   return num+start;&lt;br /&gt;  else{&lt;br /&gt;   return start+num-(end-start);&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; public static int rand(int n){&lt;br /&gt;  return ((int)(Math.random()*n));&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre class='output'&gt;&lt;br /&gt;133&lt;br /&gt;145&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1959183637460899140/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2016/01/how-to-generate-random-number-between-two-given-numbers-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1959183637460899140'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1959183637460899140'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2016/01/how-to-generate-random-number-between-two-given-numbers-in-java.html' title='Java : How to generate a random number between two given numbers'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-9211841436238639819</id><published>2015-12-22T11:07:00.000+05:30</published><updated>2015-12-22T11:09:10.624+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to send Object from One Activity to Another Activity </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can send an Object from one Activity to another using two ways&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Make a class extend Parcelable&amp;nbsp;&lt;/li&gt;&lt;li&gt;Make class Serializable&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;Parcelable&lt;/b&gt; is a faster way to send and receive data, but it needs a lot of code to be written and manage in a particular way, however &lt;b&gt;Serializable&lt;/b&gt; is a Java technique and is much simpler than the former way.&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;Send Object from one Activity to Another Activity using Serializable&lt;/h2&gt;We will make a POJO class Person that needs to be sent from ActivityOne to ActivityTwo. The Person class just needs to implement the serializable interface.&lt;br /&gt;&lt;br /&gt;The code may look like below&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Activity to send Object &lt;br /&gt;&lt;pre&gt;intent.putExtra("name", object);&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Activity to receive object &lt;br /&gt; &lt;pre&gt;Object object = (Object) getIntent().getSerializableExtra("name");&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;The full code example looks like the following &lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/ce17387134104e4cc1ef.js"&gt;&lt;/script&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/9211841436238639819/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-send-object-from-one-activity-to-another-in-android.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9211841436238639819'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9211841436238639819'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-send-object-from-one-activity-to-another-in-android.html' title='Android : How to send Object from One Activity to Another Activity '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7788148128877376580</id><published>2015-12-17T16:18:00.000+05:30</published><updated>2015-12-17T16:21:45.997+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Url'/><title type='text'>Java : How to Make a Http GET request and read response</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to Make a Http GET request and read response&lt;/h2&gt;Steps to make a HTTP GET request&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Make &lt;b&gt;URL&lt;/b&gt; object.&lt;/li&gt;&lt;li&gt;Make &lt;b&gt;HttpURLConnection&lt;/b&gt; object from &lt;b&gt;URL&lt;/b&gt; object and type cast it to&amp;nbsp;&lt;b&gt;HttpURLConnection&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Set Request method to GET.&lt;/li&gt;&lt;li&gt;Add Headers using method &lt;b&gt;setRequestProperty()&lt;/b&gt;&amp;nbsp;if required.&lt;/li&gt;&lt;li&gt;Use BufferedReader to read the input stream of the connection.&lt;/li&gt;&lt;li&gt;Read the response from buffered reader object.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;The code to implement the above steps is shown below.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/00e7fabcc4cfa3277dcc.js"&gt;&lt;/script&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7788148128877376580/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-make-http-get-request-and-read-response-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7788148128877376580'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7788148128877376580'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-make-http-get-request-and-read-response-in-java.html' title='Java : How to Make a Http GET request and read response'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8908826015245238943</id><published>2015-12-12T19:02:00.000+05:30</published><updated>2015-12-12T19:02:21.050+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to disable back button to Splash Screen Activity</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Ideally splash screen should be shown only at the start on the Android Application.&lt;/li&gt;&lt;li&gt;Application should not go back to the Splash screen when back button is pressed&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to disable back button to Splash Screen Activity&lt;/h2&gt;In order to disable your application to go back to the your can do the following&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Disable the Back Button on the Activity called just after the Splash Screen.&lt;/li&gt;&lt;li&gt;Remove the Splash Activity from Application life-cycle/history.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;b&gt;You can disable the back button on any activity programmatically&lt;/b&gt; using the following &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;@Override&lt;br /&gt;public void onBackPressed() {&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;You can also do the same by disabling back to activity by removing it from history in AndroidManifest.xml&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&amp;lt;activity android:name=".SplashActivity" android:noHistory="true"/&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8908826015245238943/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-disable-back-button-to-splash-activity.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8908826015245238943'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8908826015245238943'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-disable-back-button-to-splash-activity.html' title='Android : How to disable back button to Splash Screen Activity'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2773041235102358232</id><published>2015-12-12T13:18:00.000+05:30</published><updated>2015-12-12T13:21:32.384+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Enumeration'/><category scheme='http://www.blogger.com/atom/ns#' term='Enum'/><title type='text'>Java : How to make enums inside java class</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to make enums inside java class&lt;/h2&gt;You can use enums inside a class as shown in the code below.&lt;br /&gt;&lt;br /&gt;&lt;div class='alert alert-info'&gt;&lt;b&gt;User.Gender.MALE or FEMALE&lt;/b&gt;&amp;nbsp;is always associated with the user property. However if you need Gender to be generic and u want to use it with animals also, then you might want to keep this enum in a separate class.&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;public class User {&lt;br /&gt; &lt;br /&gt; public enum Gender{&lt;br /&gt;  MALE,&lt;br /&gt;  FEMALE&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; private String name;&lt;br /&gt; private String address;&lt;br /&gt; private String email;&lt;br /&gt; private String password;&lt;br /&gt; private Gender gender = Gender.MALE;&lt;br /&gt; &lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;You can also use the enums with parameters inside class as shown below.&lt;br /&gt;&lt;br /&gt;&lt;pre class='brush:java'&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;public class User {&lt;br /&gt; &lt;br /&gt; public enum Gender{&lt;br /&gt;  MALE("male"),&lt;br /&gt;  FEMALE("female");&lt;br /&gt;  &lt;br /&gt;  String value;&lt;br /&gt;  Gender(String value){&lt;br /&gt;   this.value=value;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; private String name;&lt;br /&gt; private String address;&lt;br /&gt; private String email;&lt;br /&gt; private String password;&lt;br /&gt; private Gender gender = Gender.MALE;&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt; &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2773041235102358232/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-make-enums-inside-java-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2773041235102358232'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2773041235102358232'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-make-enums-inside-java-class.html' title='Java : How to make enums inside java class'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3357261907314417876</id><published>2015-12-11T00:19:00.002+05:30</published><updated>2015-12-11T00:38:41.602+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Material Design'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to implement Material Design Tab Layout</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to implement Material Design Tab Layout&lt;/h2&gt;&lt;div class=""&gt;&lt;a href="http://ekiras.com/" target="_blank"&gt;Android Material Design Tab Layout with toolbar&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Android Material Design Tab Layout without toolbar looks like the following.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-2bw65K07y6M/VmnIAtny6lI/AAAAAAAADvc/ubY-7WIkh6w/s1600/t2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="400" src="http://3.bp.blogspot.com/-2bw65K07y6M/VmnIAtny6lI/AAAAAAAADvc/ubY-7WIkh6w/s400/t2.png" width="232" /&gt;&lt;/a&gt;&lt;a href="http://1.bp.blogspot.com/-gL2PTSlUJCo/VmnIAUPcc4I/AAAAAAAADvg/DRCewIJZKhY/s1600/t3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="400" src="http://1.bp.blogspot.com/-gL2PTSlUJCo/VmnIAUPcc4I/AAAAAAAADvg/DRCewIJZKhY/s400/t3.png" width="227" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;You can implement the Tab Layout in android by using the following steps.&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Step 1 : Add the design dependency in the project&lt;/h2&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[5]"&gt;dependencies {&lt;br /&gt;    compile fileTree(dir: 'libs', include: ['*.jar'])&lt;br /&gt;    testCompile 'junit:junit:4.12'&lt;br /&gt;    compile 'com.android.support:appcompat-v7:23.1.0'&lt;br /&gt;    compile 'com.android.support:design:23.1.0'&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;After adding the dependency, synchronize your project so that gradle downloads and add the dependency. &lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Step 2 : Layout Structure for the activity&lt;/h2&gt;Your activity structure should be like following.&lt;br /&gt;&lt;pre&gt;--CoordinatorLayout&lt;br /&gt;----AppBarLayout&lt;br /&gt;------TabLayout&lt;br /&gt;----ViewPager&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now let's understand why we need to follow this hierarchy to create the tab layout.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;CoordinatorLayout&lt;/b&gt; provides an additional layer of control over the touch events between child views. It is actually a &lt;b&gt;super powered FrameLayout&lt;/b&gt;. So we will wrap all our layout inside the Coordinator layout.&lt;/li&gt;&lt;li&gt;&lt;b&gt;AppBar&lt;/b&gt; Layout is used to wrap the TabLayout inside it. It will wrap the Tabs text/heading and will always be a part of the app bar. This &lt;b&gt;allows the tabs to be always visible at the top on vertical scrolling down&lt;/b&gt;. If we do not wrap the Tab Layout inside AppBarLayout then we will need to place and adjust its position manually when the pager will scroll vertically.&lt;/li&gt;&lt;li&gt;&lt;b&gt;TabLayout&lt;/b&gt;&amp;nbsp;this layout is the one that will &lt;b&gt;display the tab/pager header/text&lt;/b&gt;. If this layout is not added, then the tab headers will not be displayed but the tabs can be still switched by swiping left and right.&lt;/li&gt;&lt;li&gt;&lt;b&gt;ViewPager&lt;/b&gt;&amp;nbsp;this layout &lt;b&gt;is actual implementation of the pages/tabs&lt;/b&gt; that can be swiped left and right. It should contain fragment layouts that need to displayed on each tab.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;So your main layout should look like the following&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[15,16]"&gt;&amp;lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    xmlns:app="http://schemas.android.com/apk/res-auto"&lt;br /&gt;    android:layout_width="match_parent"&lt;br /&gt;    android:layout_height="match_parent"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;android.support.design.widget.AppBarLayout&lt;br /&gt;        android:layout_width="match_parent"&lt;br /&gt;        android:layout_height="wrap_content"&lt;br /&gt;        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;android.support.design.widget.TabLayout&lt;br /&gt;            android:id="@+id/tabs"&lt;br /&gt;            android:layout_width="match_parent"&lt;br /&gt;            android:layout_height="wrap_content"&lt;br /&gt;            app:tabMode="fixed"&lt;br /&gt;            app:tabGravity="fill"/&amp;gt;&lt;br /&gt;    &amp;lt;/android.support.design.widget.AppBarLayout&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;android.support.v4.view.ViewPager&lt;br /&gt;        android:id="@+id/viewpager"&lt;br /&gt;        android:layout_width="match_parent"&lt;br /&gt;        android:layout_height="match_parent"&lt;br /&gt;        app:layout_behavior="@string/appbar_scrolling_view_behavior"  /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/android.support.design.widget.CoordinatorLayout&amp;gt;&lt;/pre&gt;&lt;br /&gt;Points to note here is&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;app:tabMode="fixed" &lt;/b&gt;- it is used when the number of tabs to be displayed can be shown in screen. (fits the screen and scroll is not needed to display all tabs)&lt;/li&gt;&lt;li&gt;&lt;b&gt;app:tabGravity="fill"&lt;/b&gt; - it is used to fill the parent width with the tabs. the tabs will be utilize the width of the parent and will be of same width.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Other mode are&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;app:tabMode="scroll"&lt;/b&gt; if the number of tabs do not fit the screen size.&lt;/li&gt;&lt;li&gt;&lt;b&gt;app:tabGravity="center"&lt;/b&gt;&amp;nbsp;if the tabs are to be displayed in the center and does not fill the parent width.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Step 3 : Creating a ViewPagerAdapter to setup ViewPager&lt;/h2&gt;&lt;br /&gt;&lt;pre class="brush:java;"&gt;package com.ekiras.tab.adapter;&lt;br /&gt;&lt;br /&gt;import android.support.v4.app.Fragment;&lt;br /&gt;import android.support.v4.app.FragmentManager;&lt;br /&gt;import android.support.v4.app.FragmentPagerAdapter;&lt;br /&gt;&lt;br /&gt;import java.util.ArrayList;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * @author ekansh &lt;br /&gt; */&lt;br /&gt;public class ViewPagerAdapter extends FragmentPagerAdapter {&lt;br /&gt;&lt;br /&gt;    private final List&amp;lt;Fragment&amp;gt; fragmentList = new ArrayList&amp;lt;Fragment&amp;gt;();&lt;br /&gt;    private final List&amp;lt;String&amp;gt; titles = new ArrayList&amp;lt;String&amp;gt;();&lt;br /&gt;&lt;br /&gt;    public ViewPagerAdapter(FragmentManager fm) {&lt;br /&gt;        super(fm);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public Fragment getItem(int position) {&lt;br /&gt;        return fragmentList.get(position);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public int getCount() {&lt;br /&gt;        return fragmentList.size();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public CharSequence getPageTitle(int position) {&lt;br /&gt;        return titles.get(position);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void addFragment(Fragment fragment, String title){&lt;br /&gt;        fragmentList.add(fragment);&lt;br /&gt;        titles.add(title);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Step 4 : Making Fragments to be displayed in ViewPager&lt;/h2&gt;For demo purpose we have create two fragments&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;FragOne&lt;/li&gt;&lt;li&gt;FragTwo&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.tab.fragment;&lt;br /&gt;&lt;br /&gt;import android.os.Bundle;&lt;br /&gt;import android.support.v4.app.Fragment;&lt;br /&gt;import android.view.LayoutInflater;&lt;br /&gt;import android.view.View;&lt;br /&gt;import android.view.ViewGroup;&lt;br /&gt;&lt;br /&gt;import com.ekiras.tab.R;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * @author ekansh &lt;br /&gt; */&lt;br /&gt;public class FragOne extends Fragment{&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&lt;br /&gt;        View view = inflater.inflate(R.layout.fragment_one,container,false);&lt;br /&gt;        return view;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.tab.fragment;&lt;br /&gt;&lt;br /&gt;import android.os.Bundle;&lt;br /&gt;import android.support.v4.app.Fragment;&lt;br /&gt;import android.view.LayoutInflater;&lt;br /&gt;import android.view.View;&lt;br /&gt;import android.view.ViewGroup;&lt;br /&gt;&lt;br /&gt;import com.ekiras.tab.R;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * @author ekansh &lt;br /&gt; */&lt;br /&gt;public class FragTwo extends Fragment{&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&lt;br /&gt;        View view = inflater.inflate(R.layout.fragment_two,container,false);&lt;br /&gt;        return view;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;And their layout is as follows&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    android:orientation="vertical" android:layout_width="match_parent"&lt;br /&gt;    android:layout_height="match_parent"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;TextView&lt;br /&gt;        android:layout_width="wrap_content"&lt;br /&gt;        android:layout_height="match_parent"&lt;br /&gt;        android:text="Fragment One"&lt;br /&gt;        android:textSize="40dp"&lt;br /&gt;        android:textStyle="bold"&lt;br /&gt;        /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    android:orientation="vertical" android:layout_width="match_parent"&lt;br /&gt;    android:layout_height="match_parent"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;TextView&lt;br /&gt;        android:layout_width="wrap_content"&lt;br /&gt;        android:layout_height="match_parent"&lt;br /&gt;        android:text="Fragment Two"&lt;br /&gt;        android:textSize="40dp"&lt;br /&gt;        android:textStyle="bold"&lt;br /&gt;        /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Step 5 : Putting everything together in Activity&lt;/h2&gt;&lt;br /&gt;&lt;pre class="brush:java;"&gt;package com.ekiras.tab;&lt;br /&gt;&lt;br /&gt;import android.os.Bundle;&lt;br /&gt;import android.support.design.widget.TabLayout;&lt;br /&gt;import android.support.v4.view.ViewPager;&lt;br /&gt;import android.support.v7.app.AppCompatActivity;&lt;br /&gt;import com.ekiras.tab.adapter.ViewPagerAdapter;&lt;br /&gt;import com.ekiras.tab.fragment.FragOne;&lt;br /&gt;import com.ekiras.tab.fragment.FragTwo;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * @author ekansh &lt;br /&gt; * &lt;br /&gt; * */&lt;br /&gt;public class MainActivity extends AppCompatActivity {&lt;br /&gt;&lt;br /&gt;    private ViewPager viewPager;&lt;br /&gt;    private TabLayout tabLayout;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void onCreate(Bundle savedInstanceState) {&lt;br /&gt;        super.onCreate(savedInstanceState);&lt;br /&gt;        setContentView(R.layout.activity_main);&lt;br /&gt;&lt;br /&gt;        viewPager = (ViewPager) findViewById(R.id.viewpager);&lt;br /&gt;        setupViewPager(viewPager);&lt;br /&gt;        tabLayout = (TabLayout) findViewById(R.id.tabs);&lt;br /&gt;        tabLayout.setupWithViewPager(viewPager);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    public void setupViewPager(ViewPager viewPager){&lt;br /&gt;        ViewPagerAdapter pagerAdapter = new ViewPagerAdapter(getSupportFragmentManager());&lt;br /&gt;        pagerAdapter.addFragment(new FragOne(),"Frag One");&lt;br /&gt;        pagerAdapter.addFragment(new FragTwo(),"Frag Two");&lt;br /&gt;        viewPager.setAdapter(pagerAdapter);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;In the above activity we have done the following  &lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Created a ViewPager adapter to hold the fragments in view pager, these will be used as tabs.&lt;/li&gt;&lt;li&gt;Created a Tab layout to set the view pager heading and controls.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3357261907314417876/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-implement-material-design-tab-layout-in-android.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3357261907314417876'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3357261907314417876'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/12/how-to-implement-material-design-tab-layout-in-android.html' title='Android : How to implement Material Design Tab Layout'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-2bw65K07y6M/VmnIAtny6lI/AAAAAAAADvc/ubY-7WIkh6w/s72-c/t2.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4411670711587935502</id><published>2015-11-19T01:27:00.002+05:30</published><updated>2015-11-19T01:31:36.048+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Security : Getting started with Spring Security and Spring Boot</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Add dependency of spring security&lt;/li&gt;&lt;li&gt;Add custom username password in application.properties&lt;/li&gt;&lt;li&gt;A unique password is generated each time application is started if no authentication process is specified.&lt;/li&gt;&lt;li&gt;You can configure your own authentication &amp;nbsp;providers, managers, filters, entry points, tokens etc as required.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Getting started with Spring Security and Spring Boot&lt;/h2&gt;In order to apply Spring Security to a Spring Boot application, firstly you need to add the dependency in the application as follows&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In Maven you can do it as follows.&lt;pre&gt;&amp;lt;dependencies&amp;gt;&lt;br /&gt;    &amp;lt;dependency&amp;gt;&lt;br /&gt;        &amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;&lt;br /&gt;        &amp;lt;artifactId&amp;gt;spring-security-web&amp;lt;/artifactId&amp;gt;&lt;br /&gt;        &amp;lt;version&amp;gt;4.0.3.RELEASE&amp;lt;/version&amp;gt;&lt;br /&gt;    &amp;lt;/dependency&amp;gt;&lt;br /&gt;&amp;lt;/dependencies&amp;gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;In Gradle you can do it as follows.&lt;pre&gt;dependencies {&lt;br /&gt;    compile 'org.springframework.security:spring-security-web:4.0.3.RELEASE'&lt;br /&gt;}&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Your initial project may look like as shown in the image&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-YQ_eGe6YMEc/VkyumTXJmNI/AAAAAAAADKY/BazUxhSwaPI/s1600/ss-1.1.png" imageanchor="1" style="margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" class="img-responsive" height="400" src="http://2.bp.blogspot.com/-YQ_eGe6YMEc/VkyumTXJmNI/AAAAAAAADKY/BazUxhSwaPI/s400/ss-1.1.png" width="218" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;Create a controller &lt;b&gt;HomeController&lt;/b&gt; as in out case and just add a &lt;b&gt;/home&lt;/b&gt;&amp;nbsp;mapping for the application.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.controller;&lt;br /&gt;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br /&gt;import org.springframework.web.bind.annotation.RestController;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 18/11/15.&lt;br /&gt; */&lt;br /&gt;@RestController&lt;br /&gt;@RequestMapping(value = "/")&lt;br /&gt;public class HomeController {&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = "home")&lt;br /&gt;    public String home(){&lt;br /&gt;        return "Hello World";&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Now, just run the application using command &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;gradle run&lt;/pre&gt;&lt;br /&gt;Now open the application in browser, you will get a popup to enter the user name and password. This is the default security provided by spring security.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-wC3Gbxni-V0/VkzWLEvWEJI/AAAAAAAADKs/cpvS4LoLlq0/s1600/ss-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="473" src="http://1.bp.blogspot.com/-wC3Gbxni-V0/VkzWLEvWEJI/AAAAAAAADKs/cpvS4LoLlq0/s640/ss-1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;You can login using the default&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;username - user&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;password - generated at application startup as shown in image below&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-fWlsnoUM61U/VkzWNDqXGzI/AAAAAAAADK0/zBLXzvLWfWE/s1600/ss-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="76" src="http://2.bp.blogspot.com/-fWlsnoUM61U/VkzWNDqXGzI/AAAAAAAADK0/zBLXzvLWfWE/s640/ss-2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="alert alert-info flat"&gt;&lt;b&gt;Note : &lt;/b&gt; A unique password is generated each time the application is started.&lt;/div&gt;&lt;br /&gt;You can also create a custom username and password by specifying it in the &lt;b&gt;application.properties&lt;/b&gt; as follows&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;security.user.name=ekansh&lt;br /&gt;security.user.password=password&lt;/pre&gt;&lt;br /&gt;Now you can login with the credentials&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;username - ekansh&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;password - password&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-eQpE0nhPRKg/VkzZAMGBKKI/AAAAAAAADLI/ndnAfeSIUf8/s1600/ss-2.1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img class="img-responsive" border="0" height="216" src="http://1.bp.blogspot.com/-eQpE0nhPRKg/VkzZAMGBKKI/AAAAAAAADLI/ndnAfeSIUf8/s400/ss-2.1.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4411670711587935502/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/11/getting-started-with-spring-security-in-spring-boot-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4411670711587935502'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4411670711587935502'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/11/getting-started-with-spring-security-in-spring-boot-application.html' title='Spring Security : Getting started with Spring Security and Spring Boot'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-YQ_eGe6YMEc/VkyumTXJmNI/AAAAAAAADKY/BazUxhSwaPI/s72-c/ss-1.1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1347945778136459542</id><published>2015-11-11T22:53:00.000+05:30</published><updated>2015-11-12T00:12:23.173+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><title type='text'>Java : How to write a File in Java using FileWriter</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Write a File in Java using FileWriter&lt;/h2&gt;You can write a file using FileWriter as shown in the code below.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[19,20,21]"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;import java.io.File;&lt;br /&gt;import java.io.FileWriter;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;import java.util.Date;&lt;br /&gt;&lt;br /&gt;class FileDemo {&lt;br /&gt;&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  readFile();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public static void readFile() {&lt;br /&gt;  System.out.println(" Start :: writing file");&lt;br /&gt;  try {&lt;br /&gt;   File file = new File("/home/ekansh/myFile.txt");&lt;br /&gt;   FileWriter fileWriter = new FileWriter(file);&lt;br /&gt;   fileWriter.write("hello, this file is created at :: " + new Date());&lt;br /&gt;   fileWriter.flush();&lt;br /&gt;   fileWriter.close();&lt;br /&gt;   System.out.println(" End :: writing file");&lt;br /&gt;  } catch (IOException e) {&lt;br /&gt;   e.printStackTrace();&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;You can write the data using the &lt;b&gt;write()&lt;/b&gt; method and then call the &lt;b&gt;flush()&lt;/b&gt; method to force the os to write to the file, finally &lt;b&gt;close()&lt;/b&gt; method to close the file writer object, so that it can be garbage collected. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1347945778136459542/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/11/how-to-write-file-in-java-using-filewriter.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1347945778136459542'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1347945778136459542'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/11/how-to-write-file-in-java-using-filewriter.html' title='Java : How to write a File in Java using FileWriter'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-75753821040719491</id><published>2015-11-04T14:22:00.000+05:30</published><updated>2015-11-04T14:29:23.693+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='JavaScript'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>JavaScript : What is Javascript Hoisting </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;What is Hoisting in Javascript ??&lt;/h2&gt;In Javascript the variable declaration can be done at any place inside the function or inside the script. &lt;b&gt;Where a variable is declared makes no difference because the javascript interpreter always move the variable declarations silently to the top of the scope where the variable is used.&lt;/b&gt;&lt;br /&gt;For example, everyone will be fine the following javascript code. &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&amp;lt;script&amp;gt;&lt;br /&gt;  var num;&lt;br /&gt;  num = 5;&lt;br /&gt;  &lt;br /&gt;  function foo(){&lt;br /&gt;    alert(num);&lt;br /&gt;  }&lt;br /&gt;  foo();  &lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And, all will be able to guess that the function &lt;b&gt;foo() will alert value 5&lt;/b&gt;. &lt;br /&gt;However, the following code will confuse a lot of the developers, since the variable num is used before it is declared. &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&amp;lt;script&amp;gt;&lt;br /&gt;  num = 5;&lt;br /&gt;  &lt;br /&gt;  function foo(){&lt;br /&gt;    alert(num);&lt;br /&gt;  }&lt;br /&gt;    &lt;br /&gt;  foo();  &lt;br /&gt;  var num;&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The above code will run absolutely fine and will alert 5 just as in the previous example.&lt;br /&gt;So what happened in example 2 ? What happened is &lt;b&gt;Javascript Hoisting&lt;/b&gt;&amp;nbsp;and it happened automatically behind the scenes.&lt;br /&gt;&lt;div class="alert alert-info"&gt;As stated earlier, The javascript interpreter moved the declaration of the variable num to the top not the initialization, so the code becomes&lt;/div&gt;&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;&lt;br /&gt;  var num;&lt;br /&gt;  num = 5;&lt;br /&gt;  &lt;br /&gt;  function foo(){&lt;br /&gt;    alert(num);&lt;br /&gt;  }&lt;br /&gt;    &lt;br /&gt;  foo();  &lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;&lt;b&gt;Note :: javascript hoisting only moves declarations to top but not initialization to top.&lt;/b&gt;&lt;/div&gt;What above statement means is that&lt;br /&gt;&lt;pre&gt;  &lt;br /&gt;  function foo(){&lt;br /&gt;    alert(num);&lt;br /&gt;  } &lt;br /&gt;  foo();  &lt;br /&gt;&lt;br /&gt;  var num = 5;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The above code will alert &lt;b&gt;undefined&lt;/b&gt;, instead of 5, this is because only the declaration is hoisted and not initialization. The above code as read bu interpreter is as follows&lt;br /&gt;&lt;br/&gt;&lt;pre&gt;  &lt;br /&gt;  var num;&lt;br /&gt;&lt;br /&gt;  function foo(){&lt;br /&gt;    alert(num);&lt;br /&gt;  }&lt;br /&gt;  foo();  &lt;br /&gt;&lt;br /&gt;  num = 5;&lt;br /&gt;&lt;/pre&gt;So it is very important to keep this in mind while writing your javascript code.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/75753821040719491/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/11/javascript-what-is-javascript-hoisting.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/75753821040719491'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/75753821040719491'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/11/javascript-what-is-javascript-hoisting.html' title='JavaScript : What is Javascript Hoisting '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4519116373224221528</id><published>2015-11-04T03:51:00.002+05:30</published><updated>2016-06-28T16:53:44.277+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Spring Profiles'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>SpringBoot : How to set active profile in spring boot application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;There are two ways to set the spring profiles&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using OS environment variables&lt;/li&gt;&lt;li&gt;Using -D arguments&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;&lt;a href="http://www.ekiras.com/2016/06/springboot-what-are-profiles-in-spring.html" target="_blank"&gt;Must Read :: What are profiles in Spring boot.&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;How to set active profile in spring boot application&lt;/h2&gt;If you want to set Operating System Environment variables for your application the you can do as follows &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;export SPRING_PROFILES_ACTIVE=development&lt;br /&gt;export SERVER_PORT=8090&lt;br /&gt;gradle bootRun&lt;br /&gt;java -jar build/libs/demo-1.0.0.jar&lt;/pre&gt;&lt;br /&gt;If you want to specify it each time while running jar then you can do as follows &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;java -jar -Dspring.profiles.active=development build/libs/dem-1.0.0.jar&lt;br /&gt;java -jar -Dserver.port=8090 build/libs/demo-1.0.0.jar&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4519116373224221528/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/11/how-to-set-active-profile-in-spring-boot-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4519116373224221528'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4519116373224221528'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/11/how-to-set-active-profile-in-spring-boot-application.html' title='SpringBoot : How to set active profile in spring boot application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7497661950693580557</id><published>2015-11-02T01:13:00.002+05:30</published><updated>2015-11-02T01:39:01.994+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='JavaScript'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='OOJS'/><title type='text'>OOJS : Create an Object in Javascript</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can create objects of a function in javascript.&lt;/li&gt;&lt;li&gt;Function can have both private and public methods.&lt;/li&gt;&lt;li&gt;Functions can inherit other functions&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Create an Object in Javascript&lt;/h2&gt;Let us create a User object in javascript. &lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:js;"&gt;var User = function() {&lt;br /&gt;    _self = this;&lt;br /&gt;    var _name;&lt;br /&gt;    _self.getName = function() {&lt;br /&gt;        return _name;&lt;br /&gt;    }&lt;br /&gt;    _self.setName = function(name) {&lt;br /&gt;        _name = name;&lt;br /&gt;    }&lt;br /&gt;    _self.toString = function() {&lt;br /&gt;        return "Person{name::" + _name + "}";&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here User is a function &lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;name is a private variable and will not be accessible outside the User function.&lt;/li&gt;&lt;li&gt;_self is used to save the &lt;b&gt;this&lt;/b&gt;&amp;nbsp;reference, this is done so that it does not mix with the &lt;b&gt;this&lt;/b&gt;&amp;nbsp;of the inner functions.&lt;/li&gt;&lt;li&gt;&lt;b&gt;getName, setName and toString&lt;/b&gt; are the public functions that can be called from an object of User function.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre class="output"&gt;typeof User&lt;br /&gt;"function"&lt;/pre&gt;&lt;br /&gt;Now let us create two Objects of the User function. &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;var user1 = new User();&lt;br /&gt;var user2 = new User();&lt;/pre&gt;&lt;br /&gt;Both user1 and user2 are the objects of the User function, and they are not equal to each other, i.e they are two different objects. &lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;typeof user1&lt;br /&gt;"object"&lt;br /&gt;&lt;br /&gt;typeof user2&lt;br /&gt;"object"&lt;br /&gt;&lt;br /&gt;user1 == user2&lt;br /&gt;false&lt;br /&gt;&lt;br /&gt;user1 === user2&lt;br /&gt;false&lt;/pre&gt;&lt;br /&gt;Now let us call the functions on the user objects. &lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;user1.getName()&lt;br /&gt;undefined&lt;br /&gt;&lt;br /&gt;user1.setName("ekiras");&lt;br /&gt;undefined&lt;br /&gt;&lt;br /&gt;user1.getName();&lt;br /&gt;"ekiras"&lt;br /&gt;&lt;br /&gt;user1.toString();&lt;br /&gt;"Person{name::ekiras}"&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7497661950693580557/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/11/oojs-create-object-in-javascript.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7497661950693580557'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7497661950693580557'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/11/oojs-create-object-in-javascript.html' title='OOJS : Create an Object in Javascript'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7848231562286558883</id><published>2015-11-01T22:49:00.000+05:30</published><updated>2015-11-01T22:49:45.574+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Hazelcast'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Hazelcast : Auto Reconnect to Hazelcast Server</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can call the method &lt;b&gt;getLifecycleService().isRunning()&lt;/b&gt;&amp;nbsp;to check if the hazelcast clinet is up and running.&lt;br /&gt;&lt;h2&gt;Auto Reconnect to Hazelcast Server&lt;/h2&gt;You can use the following code to reconnect to Hazelcast server, in case the hazelcast client looses the connection to the hazelcast server. &lt;pre&gt;if(!(hazelcastInstance!=null &amp;&amp; hazelcastInstance.getLifecycleService().isRunning())){&lt;br /&gt;            // create a new hazelcast connection&lt;br /&gt;        }&lt;br /&gt;      return hazelcast instance&lt;br /&gt;&lt;/pre&gt; &lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/eca85c09837ff002371c.js"&gt;&lt;/script&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7848231562286558883/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/11/hazelcast-auto-reconnect-to-hazelcast-server.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7848231562286558883'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7848231562286558883'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/11/hazelcast-auto-reconnect-to-hazelcast-server.html' title='Hazelcast : Auto Reconnect to Hazelcast Server'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3124919796916066735</id><published>2015-10-31T05:42:00.001+05:30</published><updated>2015-10-31T05:46:40.978+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Hazelcast'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>Hazelcast : Setup Hazelcast Server in Spring Boot Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;span style="font-weight: normal;"&gt;Following are the steps to setup to&lt;/span&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Hazelcast server&lt;/li&gt;&lt;li&gt;Put data in hazelcast&lt;/li&gt;&lt;li&gt;Retrieve data from hazelcast&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Step 1 : Add the Hazelcast dependency&lt;/h2&gt;&lt;pre &gt;    compile("com.hazelcast:hazelcast:3.3.5")&lt;br /&gt;    compile("com.hazelcast:hazelcast-client:3.3.5")&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;Step 2 : Initialize the Hazelcast Instance (Hazelcast Server)&lt;/h2&gt;&lt;pre &gt;Config config = new XmlConfigBuilder().build();&lt;br /&gt;HazelcastInstance hazelcastInstance = Hazelcast.newHazelcastInstance(config);&lt;/pre&gt;&lt;br /&gt;The above code will start the Hazelcast server with default settings. &lt;a href="http:"&gt;For more settings you can refer this blog&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Step 3 : Connect to Hazelcast server using a Hazelcast Client&lt;/h2&gt;Now to need to get a Hazelcast client to get and post data to the hazelcast server. Following is an example of how to get the hazelcast client. &lt;br /&gt;&lt;br /&gt;&lt;pre &gt;ClientConfig clientConfig = new ClientConfig();&lt;br /&gt;clientConfig.getNetworkConfig().addAddress(address);&lt;br /&gt;clientConfig.getNetworkConfig().setConnectionAttemptLimit(10);&lt;br /&gt;clientConfig.getNetworkConfig().setConnectionAttemptPeriod(24 * 60);&lt;br /&gt;clientConfig.getNetworkConfig().setConnectionTimeout(1000);&lt;br /&gt;HazelcastInstance hazelcastInstance = HazelcastClient.newHazelcastClient(clientConfig);&lt;/pre&gt;&lt;br /&gt;So whenever you need to get or put data to hazelcast you need to pass the hazelcast client object to get a hazelcast reference. &amp;nbsp;Some points to note here are&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Hazelcast client is &lt;b&gt;static&lt;/b&gt; so that it does not create a new client for each request&lt;/li&gt;&lt;li&gt;&lt;b&gt;setConnectionAttemptLimit()&lt;/b&gt;&amp;nbsp;defines the number of attempts it makes to connect to the server before failing.&lt;/li&gt;&lt;li&gt;&lt;b&gt;setConnectionAttemptPeriod()&lt;/b&gt;&amp;nbsp;it defines the period for the next attempt to to find a member to connect to. It is the time to wait in mili seconds before another attempt.&lt;/li&gt;&lt;li&gt;&lt;b&gt;setConnectionTimeout()&lt;/b&gt;&amp;nbsp;Timeout value in millis for nodes to accept client connection requests, a zero value means wait until connection established or an error occurs.&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;Step 4 : Put some data in Hazelcast&lt;/h2&gt;Hazelcast always puts data in a collection using it via &lt;b&gt;reference string&lt;/b&gt;, lets say we want to put some data in a Map then, we do it as follows &lt;br /&gt;&lt;br /&gt;&lt;pre &gt;IMap&amp;lt;Long,String&amp;gt; map = hazelcastInstance.getMap("userMap");&lt;br /&gt;map.put(1,"User1");&lt;br /&gt;map.put(2,"User2");&lt;br /&gt;map.put(3,"User3");&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;In the above code,&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;userMap&lt;/b&gt;&amp;nbsp;is the reference to the map stored in the hazelcast server.&lt;/li&gt;&lt;li&gt;&lt;b&gt;IMap&lt;/b&gt; is the return type of the Map in Hazelcast.(&lt;b&gt;IMap&lt;/b&gt;&amp;nbsp;is an interface that extends &lt;b&gt;ConcurrentMap&lt;/b&gt; and &lt;b&gt;BaseMap&lt;/b&gt; interfaces. Thus you can also use the reference of Map to get the map from Hazelcast.)&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;Step 5 : Get data from Hazelcast&amp;nbsp;&lt;/h2&gt;&lt;pre &gt;IMap&amp;lt;Long,String&amp;gt; map = hazelcastInstance.getMap("userMap");&lt;br /&gt;     for(Long key : map.keySet())&lt;br /&gt;         System.out.println("key :: " + key + " value :: " + map.get(key));&lt;/pre&gt;&lt;br /&gt;The above code will print all the key value pairs in the userMap in the Hazelcast server.  &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3124919796916066735/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/how-to-setup-hazelcast-server-in-spring-boot-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3124919796916066735'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3124919796916066735'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/how-to-setup-hazelcast-server-in-spring-boot-application.html' title='Hazelcast : Setup Hazelcast Server in Spring Boot Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8001450810531261802</id><published>2015-10-31T04:45:00.003+05:30</published><updated>2015-10-31T04:46:35.482+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Bootstrap'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Boot : How to create a Bootstrap class</title><content type='html'>&lt;h2&gt;Points To Remember&lt;/h2&gt;In order to create a class that acts like a bootstrap for the application, that class needs to implement the &lt;b&gt;InitializingBean&lt;/b&gt; of the package &lt;b&gt;org.springframework.beans.factory.InitializingBean&lt;/b&gt;&lt;h2&gt;How to create a Bootstrap class in spring boot application&lt;/h2&gt; Following is an example of a Bootstrap class. This class will be executed first when the application is coming up and is ready to server requests. Any class that implements &lt;b&gt;InitializingBean&lt;/b&gt; will be executed before the application is up and its &lt;b&gt;afterPropertiesSet&lt;/b&gt; method will be called.&lt;br/&gt;&lt;br/&gt;&lt;pre&gt;public class Bootstrap implements InitializingBean&lt;/pre&gt;&lt;br/&gt;&lt;script src="https://gist.github.com/gitekiras/9454842aca076ebb5094.js"&gt;&lt;/script&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8001450810531261802/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/spring-boot-how-to-create-bootstrap-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8001450810531261802'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8001450810531261802'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/spring-boot-how-to-create-bootstrap-class.html' title='Spring Boot : How to create a Bootstrap class'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3225476116024972864</id><published>2015-10-27T19:41:00.004+05:30</published><updated>2015-10-27T19:42:17.952+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Filter'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Boot : How to register a Filter in the Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Steps : How to register a Filter in the Application&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Make a class.&lt;/li&gt;&lt;li&gt;Make it a spring bean by using&amp;nbsp;&lt;b&gt;@Component&lt;/b&gt; annotation.&lt;/li&gt;&lt;li&gt;Implement Filter interface to register it as a Filter in the Filter chain.&lt;/li&gt;&lt;li&gt;Use&amp;nbsp;&lt;b&gt;@Order&lt;/b&gt;&amp;nbsp;annotation to define the order of the filter in the filter chain.&lt;/li&gt;&lt;/ul&gt;&lt;br/&gt;&lt;div&gt;Following is the example of how you can implement the Filter using the above mentioned steps&lt;/div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/725fd50ecd2a1e83c1f6.js"&gt;&lt;/script&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3225476116024972864/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/spring-boot-how-to-register-filter-in-spring-boot-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3225476116024972864'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3225476116024972864'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/spring-boot-how-to-register-filter-in-spring-boot-application.html' title='Spring Boot : How to register a Filter in the Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5916062643878359038</id><published>2015-10-27T14:22:00.001+05:30</published><updated>2015-10-27T14:40:31.241+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Filter'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring : How to define Filter order in Filter Chain in Spring Boot</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;From Spring boot version you can define the order of your filters by defining order for your filters using &lt;b&gt;@Order&lt;/b&gt; annotation. &lt;br /&gt;You can use @Order annotation as follows to make a filter to be first in the filter chain.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;@Order(1)&lt;/pre&gt;&lt;h2&gt;How to define Filter order in Filter Chain in Spring Boot&lt;/h2&gt;Following is the example where we have registered two filters  &lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Security Filter&lt;/b&gt; -  To block unauthorized requests&lt;/li&gt;&lt;li&gt;&lt;b&gt;Tracking Filter&lt;/b&gt; - To log each request coming to the server&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/f127fd6c8a2b4a223b2c.js"&gt;&lt;/script&gt; &lt;pre class="output"&gt;###### security filter&lt;br /&gt;###### tracking filter&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5916062643878359038/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/spring-how-to-define-filter-order-in-filter-chain-in-spring-boot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5916062643878359038'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5916062643878359038'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/spring-how-to-define-filter-order-in-filter-chain-in-spring-boot.html' title='Spring : How to define Filter order in Filter Chain in Spring Boot'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3533791643715096651</id><published>2015-10-27T02:17:00.004+05:30</published><updated>2015-10-27T02:17:55.334+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>Java : How to check if the field of a class is STATIC by Reflection</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can use &lt;b&gt;Reflection&lt;/b&gt;&amp;nbsp;to check if the field of a class is &lt;b&gt;static&lt;/b&gt; or not.&lt;/li&gt;&lt;li&gt;You need to get the modifiers of the field to check if the field is &lt;b&gt;static.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to check if the field of a class is static by Reflection&lt;/h2&gt;The following is the only way to check if the field is &lt;b&gt;static&lt;/b&gt; or not &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;field.getModifiers()&amp;amp; Modifier.STATIC) == Modifier.STATIC &lt;/pre&gt;&lt;br /&gt;Following program shows how to get the &lt;b&gt;static&lt;/b&gt; fields from a class.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[11]"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;import java.lang.reflect.Field;&lt;br /&gt;import java.lang.reflect.Modifier;&lt;br /&gt;&lt;br /&gt;public class Test {&lt;br /&gt; &lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Field[] fields = Person.class.getDeclaredFields();&lt;br /&gt;  for(Field field : fields){&lt;br /&gt;   if((field.getModifiers()&amp;amp; Modifier.STATIC) == Modifier.STATIC ){&lt;br /&gt;    System.out.println("final field :: " + field.getName());&lt;br /&gt;   }&lt;br /&gt;  } &lt;br /&gt; } &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Person{&lt;br /&gt; public static final int someConstant = 2;&lt;br /&gt; private String name;&lt;br /&gt; private String email;&lt;br /&gt; &lt;br /&gt; public String getName() {&lt;br /&gt;  return name;&lt;br /&gt; }&lt;br /&gt; public void setName(String name) {&lt;br /&gt;  this.name = name;&lt;br /&gt; }&lt;br /&gt; public String getEmail() {&lt;br /&gt;  return email;&lt;br /&gt; }&lt;br /&gt; public void setEmail(String email) {&lt;br /&gt;  this.email = email;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3533791643715096651/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/java-how-to-check-if-field-of-class-is-static-by-reflection.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3533791643715096651'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3533791643715096651'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/java-how-to-check-if-field-of-class-is-static-by-reflection.html' title='Java : How to check if the field of a class is STATIC by Reflection'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-438974914669126709</id><published>2015-10-27T01:59:00.000+05:30</published><updated>2015-10-27T02:18:22.052+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>Java : How to check if the field of a class is FINAL by Reflection</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can use &lt;b&gt;Reflection&lt;/b&gt;&amp;nbsp;to check if the field of a class is final or not.&lt;/li&gt;&lt;li&gt;You need to get the modifiers of the field to check if the field is final&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to check if the field of a class is final by Reflection&lt;/h2&gt;The following is the only way to check if the field is final or not &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;field.getModifiers()&amp;amp; Modifier.FINAL) == Modifier.FINAL &lt;/pre&gt;&lt;br /&gt;Following program shows how to get the final fields from a class.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[11]"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;import java.lang.reflect.Field;&lt;br /&gt;import java.lang.reflect.Modifier;&lt;br /&gt;&lt;br /&gt;public class Test {&lt;br /&gt; &lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Field[] fields = Person.class.getDeclaredFields();&lt;br /&gt;  for(Field field : fields){&lt;br /&gt;   if((field.getModifiers()&amp;amp; Modifier.FINAL) == Modifier.FINAL ){&lt;br /&gt;    System.out.println("final field :: " + field.getName());&lt;br /&gt;   }&lt;br /&gt;  } &lt;br /&gt; } &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Person{&lt;br /&gt; public static final int someConstant = 2;&lt;br /&gt; private String name;&lt;br /&gt; private String email;&lt;br /&gt; &lt;br /&gt; public String getName() {&lt;br /&gt;  return name;&lt;br /&gt; }&lt;br /&gt; public void setName(String name) {&lt;br /&gt;  this.name = name;&lt;br /&gt; }&lt;br /&gt; public String getEmail() {&lt;br /&gt;  return email;&lt;br /&gt; }&lt;br /&gt; public void setEmail(String email) {&lt;br /&gt;  this.email = email;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/438974914669126709/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/java-how-to-check-if-field-of-class-is-final-by-reflection.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/438974914669126709'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/438974914669126709'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/java-how-to-check-if-field-of-class-is-final-by-reflection.html' title='Java : How to check if the field of a class is FINAL by Reflection'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6443783589549733267</id><published>2015-10-25T19:28:00.000+05:30</published><updated>2015-10-25T19:31:47.521+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Exceptions'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Concurrent'/><title type='text'>Java : Exception in thread "main" java.util.ConcurrentModificationException</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;When&amp;nbsp;Exception in thread "main" java.util.ConcurrentModificationException occurs.&lt;/h2&gt;&lt;pre class="brush:java"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;import java.util.ArrayList;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;public class Test {&lt;br /&gt;&lt;br /&gt;	public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;		// create a new list &lt;br /&gt;		List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;();&lt;br /&gt;		&lt;br /&gt;		// add 50 items to the list&lt;br /&gt;		for(int itr=0;itr&amp;lt;50;itr++)&lt;br /&gt;			list.add("user-"+(itr+1));&lt;br /&gt;		&lt;br /&gt;		// try to remove item from list while iterating the list&lt;br /&gt;		for(String str : list){&lt;br /&gt;			if(str.equals("user-15")){&lt;br /&gt;				list.remove(str);&lt;br /&gt;			}&lt;br /&gt;		}&lt;br /&gt;	}&lt;br /&gt;	&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The above code will give the following error. &lt;br /&gt;&lt;pre class="output"&gt;Exception in thread "main" java.util.ConcurrentModificationException&lt;br /&gt;	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)&lt;br /&gt;	at java.util.ArrayList$Itr.next(ArrayList.java:831)&lt;br /&gt;	at testing.Test.main(Test.java:18)&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;How to avoid ConcurrentModificationException &lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Create the list of type &lt;b&gt;CopyOnWriteArrayList&lt;/b&gt;, this will create a new copy of list for every operation performed and then replace it with original.&lt;pre&gt;List&amp;lt;String&amp;gt; list = new CopyOnWriteArrayList&amp;lt;String&amp;gt;();&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Create a new copy of the list for iterating the list &lt;pre&gt;for(String str : new ArrayList&amp;lt;String&amp;gt;(list))&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Use the &lt;b&gt;Iterator&lt;/b&gt; to iterate the list and modify its contents.&lt;pre&gt;Iterator&amp;lt;String&amp;gt; iterator = list.iterator();&lt;br /&gt;	while(iterator.hasNext()){&lt;br /&gt;		String str = iterator.next();&lt;br /&gt;		if(str.equals("user-15")){&lt;br /&gt;			iterator.remove();&lt;br /&gt;		}&lt;br /&gt;	}&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6443783589549733267/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/java-exception-in-thread-main-java-util-concurrent-modification-exception.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6443783589549733267'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6443783589549733267'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/java-exception-in-thread-main-java-util-concurrent-modification-exception.html' title='Java : Exception in thread &quot;main&quot; java.util.ConcurrentModificationException'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1784179466347775126</id><published>2015-10-23T02:49:00.002+05:30</published><updated>2015-10-23T02:52:00.869+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android: Pagination in Custom List View</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can refer to blog - &lt;a href="http://www.ekiras.com/2015/10/android-create-list-view-with-custom-list-view-adapter.html" target="_blank"&gt;Create list view with custom list view adapter&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Now we will implement pagination in this list view.&lt;br /&gt;&lt;h2&gt;Pagination in Custom List View&lt;/h2&gt; &lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Android-infinite-scroll"&gt;Download Source from GitHub&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We will add 20 items each time to the list view.&lt;/li&gt;&lt;li&gt;After 18th element is displayed on the screen we will call a method to load new items to the list view, so that user does not wait for new items to be loaded.(In real cases you might be loading from a server and this might take much time).&lt;/li&gt;&lt;li&gt;We will restrict our pagination after 400 elements have been displayed.( It is a replication of the scenario when the server has no more items to be displayed).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;We will be setting a &lt;b&gt;onScrollListener()&lt;/b&gt; on the listView to check when to load new items and add them to the list.&lt;/div&gt;&lt;div&gt;&lt;pre class="brush:java;highlight:[1,8,9,10,12];"&gt;listView.setOnScrollListener(new AbsListView.OnScrollListener() {&lt;br /&gt;            @Override&lt;br /&gt;            public void onScrollStateChanged(AbsListView absListView, int i) {&lt;br /&gt;&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            @Override&lt;br /&gt;            public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {&lt;br /&gt;                if(firstVisibleItem+visibleItemCount &amp;gt; totalItemCount-2 &amp;&amp; totalItemCount &amp;lt; maxRecords){&lt;br /&gt;                    personAdapter.add(bootData());&lt;br /&gt;                    personAdapter.notifyDataSetChanged();&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        });&lt;/pre&gt;&amp;nbsp;&lt;/div&gt; Full code snapshot is given below.&lt;br/&gt;&lt;br/&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Android-infinite-scroll"&gt;Download Source from GitHub&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;script src="https://gist.github.com/gitekiras/e610eebbf6c1d658522d.js"&gt;&lt;/script&gt; &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1784179466347775126/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-pagination-in-custom-list-view.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1784179466347775126'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1784179466347775126'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-pagination-in-custom-list-view.html' title='Android: Pagination in Custom List View'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3428188904431308220</id><published>2015-10-22T14:52:00.000+05:30</published><updated>2016-11-16T17:57:21.612+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Ajax'/><category scheme='http://www.blogger.com/atom/ns#' term='CORS'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Cross Domain'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : No 'Access-Control-Allow-Origin' Access-Control-Allow-Origin</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;p&gt;This error occurs when&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Server does not allow cross domain headers.&lt;/li&gt;&lt;li&gt;Application does not allow cross domain headers.&lt;/li&gt;&lt;li&gt;Custom headers provided by request is not accepted by the application.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;How to Solve :&amp;nbsp;No 'Access-Control-Allow-Origin' Access-Control-Allow-Origin error&lt;/h2&gt;&lt;p&gt;In order to allow cross domain ajax calls to your Server you need to allow the Cross Domian Headers in your application.&lt;/p&gt;&lt;p&gt;You can allow the cross domain requests from your application in Spring boot by adding a CORS Filter as shown below.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Origin"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"*"&lt;/span&gt;);&lt;br /&gt;response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Methods"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"POST, GET, OPTIONS, DELETE"&lt;/span&gt;);&lt;br /&gt;response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Max-Age"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"3600"&lt;/span&gt;);&lt;br /&gt;response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Headers"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"Content-Type, x-requested-with, X-Custom-Header"&lt;/span&gt;);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here you need to specify the following&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Headers your application accepts as a comma separated Header keys like &lt;code&gt;X-Custom-Header&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Max age for the requests.&lt;/li&gt;&lt;li&gt;Methods that your application allows.&lt;/li&gt;&lt;li&gt;Origins that your application allows. In example above we have specified &lt;code&gt;*&lt;/code&gt;, it means it will allow requests from all origins. You can give comma separated values to allow, access from your domains only.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;You can set CORS using &lt;strong&gt;spring boot default configurations&lt;/strong&gt;, as shown below.&lt;/p&gt;&lt;pre&gt;# ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)&lt;br /&gt;&lt;b&gt;endpoints.cors.allow-credentials&lt;/b&gt;=# Set whether credentials are supported. When not set, credentials are not supported.&lt;br /&gt;&lt;b&gt;endpoints.cors.allowed-headers&lt;/b&gt;=# Comma-separated list of headers to allow in a request. '*' allows all headers.&lt;br /&gt;&lt;b&gt;endpoints.cors.allowed-methods&lt;/b&gt;=GET # Comma-separated list of methods to allow. '*' allows all methods.&lt;br /&gt;&lt;b&gt;endpoints.cors.allowed-origins&lt;/b&gt;=# Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.&lt;br /&gt;&lt;b&gt;endpoints.cors.exposed-headers&lt;/b&gt;=# Comma-separated list of headers to include in a response.&lt;br /&gt;&lt;b&gt;endpoints.cors.max-age&lt;/b&gt;=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.&lt;br /&gt;&lt;/pre&gt;&lt;p&gt;You can use custom Filter to set CORS , Full example, how to use CorsFilter is shown below.&lt;/p&gt;&lt;pre&gt;&lt;code class="language-java"&gt;&lt;span class="hljs-keyword"&gt;package&lt;/span&gt; com.ekiras.filter;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.springframework.stereotype.Component;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.servlet.*;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; javax.servlet.http.HttpServletResponse;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; java.io.IOException;&lt;br /&gt;&lt;br /&gt;&lt;span class="hljs-javadoc"&gt;/**&lt;br /&gt; * Created by ekansh on 22/10/15.&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-annotation"&gt;@Component&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;CorsFilter&lt;/span&gt; &lt;span class="hljs-keyword"&gt;implements&lt;/span&gt; &lt;span class="hljs-title"&gt;Filter&lt;/span&gt; &lt;/span&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;doFilter&lt;/span&gt;&lt;span class="hljs-params"&gt;(ServletRequest req, ServletResponse res, FilterChain chain)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; IOException, ServletException &lt;/span&gt;{&lt;br /&gt;        HttpServletResponse response = (HttpServletResponse) res;&lt;br /&gt;        response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Origin"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"*"&lt;/span&gt;);&lt;br /&gt;        response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Methods"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"POST, GET, OPTIONS, DELETE"&lt;/span&gt;);&lt;br /&gt;        response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Max-Age"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"3600"&lt;/span&gt;);&lt;br /&gt;        response.setHeader(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Headers"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"Content-Type, x-requested-with, X-Custom-Header"&lt;/span&gt;);&lt;br /&gt;        chain.doFilter(req, res);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;init&lt;/span&gt;&lt;span class="hljs-params"&gt;(FilterConfig filterConfig)&lt;/span&gt; &lt;/span&gt;{}&lt;br /&gt;&lt;br /&gt;    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;destroy&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3428188904431308220/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/springboot-no-access-control-allow-origin-ajax-call.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3428188904431308220'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3428188904431308220'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/springboot-no-access-control-allow-origin-ajax-call.html' title='SpringBoot : No &apos;Access-Control-Allow-Origin&apos; Access-Control-Allow-Origin'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-328266757494619814</id><published>2015-10-20T01:23:00.005+05:30</published><updated>2015-10-20T02:22:59.915+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : Create a List View with custom List View Adapter</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to create a custom List Adapter to show a model class in the list view.&lt;/li&gt;&lt;li&gt;You need to create a xml file to display, how each item of the list will look on the UI.&lt;/li&gt;&lt;li&gt;You need to set the Tag in the view, so that your data does not refresh due to scroll.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Android-list-view" target="_blank"&gt;Download from GitHub&lt;/a&gt;&lt;/div&gt;&lt;h2&gt;Create a List View with custom List View Adapter&lt;/h2&gt;You need to make&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Person Model class - show data on UI from this class&lt;/li&gt;&lt;li&gt;Person Adapter - create the list view and inflate the view&lt;/li&gt;&lt;li&gt;Main Activity - to contain the list view&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The List View will look like as shown in image below&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-17gbdbBSQn4/ViVXOVyRnVI/AAAAAAAABrM/PkYJpJmAA6o/s1600/clv-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="400" src="http://2.bp.blogspot.com/-17gbdbBSQn4/ViVXOVyRnVI/AAAAAAAABrM/PkYJpJmAA6o/s400/clv-1.png" width="243" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/af74a1a9e779e1971838.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Android-list-view" target="_blank"&gt;Download from GitHub&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/328266757494619814/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-create-list-view-with-custom-list-view-adapter.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/328266757494619814'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/328266757494619814'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-create-list-view-with-custom-list-view-adapter.html' title='Android : Create a List View with custom List View Adapter'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-17gbdbBSQn4/ViVXOVyRnVI/AAAAAAAABrM/PkYJpJmAA6o/s72-c/clv-1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7791076919622342053</id><published>2015-10-19T08:51:00.000+05:30</published><updated>2015-10-19T08:53:19.020+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : Difference between gravity and layout_gravity</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;There are two attributes for a View in android to align its content&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;gravity&lt;/li&gt;&lt;li&gt;layout_gravity&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The basic difference between the two is that&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;android:gravity&lt;/b&gt; is used for &lt;b&gt;child elements of the view.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;android:gravity_layout&amp;nbsp;&lt;/b&gt;is used for this element &lt;b&gt;with respect to parent view&lt;/b&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So, if you have a layout like&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:xml;highlight:[4,11,16]"&gt;&amp;lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    android:layout_width="match_parent"&lt;br /&gt;    android:layout_height="match_parent"&lt;br /&gt;    android:gravity="center"&lt;br /&gt;    &amp;gt;&lt;br /&gt;        &amp;lt;TextView&lt;br /&gt;            android:layout_width="match_parent"&lt;br /&gt;            android:layout_height="50dp"&lt;br /&gt;            android:text="EkiRas"&lt;br /&gt;            android:textSize="22dp"&lt;br /&gt;            android:gravity="center"&lt;br /&gt;            /&amp;gt;&lt;br /&gt; &amp;lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;     android:layout_width="match_parent"&lt;br /&gt;     android:layout_height="match_parent"&lt;br /&gt;     android:layout_gravity="center"&lt;br /&gt;     &amp;gt;&lt;br /&gt; // Other Elements&lt;br /&gt; &amp;lt;/LinearLayout&amp;gt;&lt;br /&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/pre&gt;&lt;br /&gt;In the above code,&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;outer&amp;nbsp;LinearLayout&amp;nbsp;will set its child elements in center.&lt;/li&gt;&lt;li&gt;TextView &lt;b&gt;gravity:center&lt;/b&gt;&amp;nbsp;will set its ocntent in center.&lt;/li&gt;&lt;li&gt;inner LinearLayout will be aligned in the center of its parent, that is outer&amp;nbsp;LinearLayout.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7791076919622342053/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-difference-between-gravity-and-layout-gravity.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7791076919622342053'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7791076919622342053'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-difference-between-gravity-and-layout-gravity.html' title='Android : Difference between gravity and layout_gravity'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1336975407788649783</id><published>2015-10-15T06:27:00.001+05:30</published><updated>2015-10-15T06:46:11.745+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to hide and show a view </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;There are three things yo can do to set the &lt;b&gt;visibility&lt;/b&gt; of a VIEW in android&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;VISIBLE&lt;/b&gt; - it makes the VIEW visible .&lt;/li&gt;&lt;li&gt;&lt;b&gt;INVISIBLE&lt;/b&gt; - it makes the VIEW invisible but it still takes the space occupied by the View element on the screen.&lt;/li&gt;&lt;li&gt;&lt;b&gt;GONE&lt;/b&gt; - it makes the VIEW invisible and also hides the space occupied by the view on the screen.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h2&gt;How to make a TextView Visible&lt;/h2&gt;The following code makes the TextView invisible to the user and also hides the space occupied by the TextView on screen  &lt;br /&gt;&lt;pre class="brush:xml;highlight:[3]"&gt;&amp;lt;TextView&lt;br /&gt;    android:id="@+id/text_view_name"&lt;br /&gt;    android:visibility="gone"&lt;br /&gt;    android:layout_height="30dp"&lt;br /&gt;    android:textColor="@android:color/holo_blue_dark"&lt;br /&gt;    android:paddingLeft="15dp"&lt;br /&gt;    android:textStyle="bold"&lt;br /&gt;    android:layout_centerVertical="true"&lt;br /&gt;    android:layout_centerHorizontal="true"&lt;br /&gt;    android:gravity="center_vertical"&lt;br /&gt;    android:layout_width="match_parent"&lt;br /&gt;    android:background="#e7e7e1"&lt;br /&gt;    xmlns:android="http://schemas.android.com/apk/res/android" /&amp;gt;&lt;/pre&gt;&lt;br /&gt;The following code makes the TextView invisible to the use but does not hide the space occupied by it. &lt;br /&gt;&lt;pre class="brush:xml;highlight:[3]"&gt;&amp;lt;TextView&lt;br /&gt;    android:id="@+id/text_view_name"&lt;br /&gt;    android:visibility="invisible"&lt;br /&gt;    android:layout_height="30dp"&lt;br /&gt;    android:textColor="@android:color/holo_blue_dark"&lt;br /&gt;    android:paddingLeft="15dp"&lt;br /&gt;    android:textStyle="bold"&lt;br /&gt;    android:layout_centerVertical="true"&lt;br /&gt;    android:layout_centerHorizontal="true"&lt;br /&gt;    android:gravity="center_vertical"&lt;br /&gt;    android:layout_width="match_parent"&lt;br /&gt;    android:background="#e7e7e1"&lt;br /&gt;    xmlns:android="http://schemas.android.com/apk/res/android" /&amp;gt;&lt;/pre&gt;&lt;br/&gt;The following code makes the TextView visible to the use and also occupies the space on the screen &lt;br /&gt;&lt;pre class="brush:xml;highlight:[3]"&gt;&amp;lt;TextView&lt;br /&gt;    android:id="@+id/text_view_name"&lt;br /&gt;    android:visibility="visible"&lt;br /&gt;    android:layout_height="30dp"&lt;br /&gt;    android:textColor="@android:color/holo_blue_dark"&lt;br /&gt;    android:paddingLeft="15dp"&lt;br /&gt;    android:textStyle="bold"&lt;br /&gt;    android:layout_centerVertical="true"&lt;br /&gt;    android:layout_centerHorizontal="true"&lt;br /&gt;    android:gravity="center_vertical"&lt;br /&gt;    android:layout_width="match_parent"&lt;br /&gt;    android:background="#e7e7e1"&lt;br /&gt;    xmlns:android="http://schemas.android.com/apk/res/android" /&amp;gt;&lt;/pre&gt;&lt;br/&gt; To set the visibility of this text box from the Activity you can do it as follows.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;pre class="brush:java;"&gt;TextView textView = (TextView) findViewById(R.id.text_view_name);&lt;br /&gt;                textView.setVisibility(View.VISIBLE);&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre class="brush:java;"&gt;TextView textView = (TextView) findViewById(R.id.text_view_name);&lt;br /&gt;                textView.setVisibility(View.INVISIBLE);&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre class="brush:java;"&gt;TextView textView = (TextView) findViewById(R.id.text_view_name);&lt;br /&gt;                textView.setVisibility(View.GONE);&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1336975407788649783/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-hide-and-show-element-and-hide-a-view-and-hide-its-space.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1336975407788649783'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1336975407788649783'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-hide-and-show-element-and-hide-a-view-and-hide-its-space.html' title='Android : How to hide and show a view '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6868680323639735685</id><published>2015-10-12T18:22:00.001+05:30</published><updated>2015-10-13T00:00:33.953+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Rest Template'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='JSON'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>RestTemplate : How to get response from a server by HTTP GET call</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You need to add the following dependency to your project to use Spring Rest Template. &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;compile('org.springframework:spring-web:3.0.2.RELEASE')&lt;/pre&gt;&lt;br /&gt;&lt;h2&gt;How to get response from a server by HTTP GET call&lt;/h2&gt;Following are the methods that can be used to get the response from a url using HTTP GET method.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;h2&gt;&lt;b&gt;getForObject()&lt;/b&gt; &lt;/h2&gt; This method takes a &lt;b&gt;URL&lt;/b&gt;, &lt;b&gt;Response class&lt;/b&gt;&amp;nbsp;(it tells that the response should be bound to this class). &lt;pre class="brush:java;"&gt;RestTemplate restTemplate = new RestTemplate();&lt;br /&gt;String response = restTemplate.getForObject("http://localhost:8080/someUrl",String.class);&lt;/pre&gt;&lt;br /&gt;Following method will make a Http GET call with params.&lt;br /&gt;&lt;pre class="brush:java;"&gt;Map&amp;lt;String,String&amp;gt; params = new LinkedHashMap&amp;lt;String, String&amp;gt;();&lt;br /&gt;params.put("userId","1");&lt;br /&gt;        &lt;br /&gt;RestTemplate restTemplate = new RestTemplate();&lt;br /&gt;String response = restTemplate.getForObject("http://localhost:8080/someUrl",String.class,params);&lt;/pre&gt;&lt;br /&gt;&lt;div class="alert alert-info  flat"&gt;This method does not give the following &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Http status code for the GET call&lt;/li&gt;&lt;li&gt;Http headers of the response from the server&lt;/li&gt;&lt;/ul&gt;In case you need these headers and status code then you might need to use the &lt;b&gt;getForEntity()&lt;/b&gt; or &lt;b&gt;exchange()&lt;/b&gt; methods. &lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;h2&gt;&lt;b&gt;getForEntity()&lt;/b&gt; &lt;/h2&gt; This method can be used to send a HTTP GET request to a url. &lt;pre class="brush:java;;"&gt;RestTemplate restTemplate = new RestTemplate();&lt;br /&gt;ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity("http://localhost:8080/someUrl",String.class);&lt;/pre&gt;Following method will make a Http GET call with params.&lt;br /&gt;&lt;pre class="brush:java;"&gt;Map&lt;String,String&gt; params = new LinkedHashMap&lt;String, String&gt;();&lt;br /&gt;params.put("userId","1");&lt;br /&gt;&lt;br /&gt;RestTemplate restTemplate = new RestTemplate();&lt;br /&gt;ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.getForEntity("http://localhost:8080/someUrl",String.class);&lt;/pre&gt;&lt;br/&gt;&lt;div class="alert alert-info flat"&gt;You can get the response as follows &lt;ul&gt;&lt;li&gt;&lt;b&gt;Response Headers : &lt;/b&gt; response.getHeaders();&lt;/li&gt;&lt;li&gt;&lt;b&gt;Status Code : &lt;/b&gt; response.getStatusCode();&lt;/li&gt;&lt;li&gt;&lt;b&gt;Response Body : &lt;/b&gt; response.getBody();&lt;/li&gt;&lt;/ul&gt;  &lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6868680323639735685/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/resttemplate-how-to-get-response-from-a-server-by-http-get-call.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6868680323639735685'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6868680323639735685'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/resttemplate-how-to-get-response-from-a-server-by-http-get-call.html' title='RestTemplate : How to get response from a server by HTTP GET call'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1659323179033645661</id><published>2015-10-11T03:32:00.000+05:30</published><updated>2015-10-11T03:32:29.205+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Rest Template'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Android : Consuming Rest Api's with Spring Rest Template</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-consuming-rest-apis-with-spring-rest-template.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1659323179033645661'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1659323179033645661'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-255798347777815937</id><published>2015-10-10T04:08:00.001+05:30</published><updated>2015-10-10T04:08:43.064+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to change the Android Application Label in Action Bar</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Android saves the Application level Settings like App Icon, App Label etc in the &lt;b&gt;AndroidManifest.xml&lt;/b&gt; file.&lt;br /&gt;&lt;h2&gt;How to change the Android Application Icon&amp;nbsp;&lt;/h2&gt;Go to the &lt;b&gt;Application &amp;gt; manifests &amp;gt; AndroidManifests.xml&lt;/b&gt;&amp;nbsp;file and look for the following lines.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[8];"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    package="com.ekiras.activity" &amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;application&lt;br /&gt;        android:allowBackup="true"&lt;br /&gt;        android:icon="@drawable/icon"&lt;br /&gt;        android:label="@string/app_name"&lt;br /&gt;        android:theme="@style/AppTheme" &amp;gt;&lt;br /&gt;        // Your activities are declared here&lt;br /&gt;        &amp;lt;activity&amp;gt;&amp;lt;/activity&amp;gt;&lt;br /&gt;    &amp;lt;/application&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/manifest&amp;gt;&lt;/pre&gt;&lt;br /&gt;You can set the Application icon in &lt;b&gt;strings.xml&lt;/b&gt; by name &lt;b&gt;app_name&lt;/b&gt;&amp;nbsp;in the &lt;b&gt;values&lt;/b&gt; folder.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[2];"&gt;&amp;lt;resources&amp;gt;&lt;br /&gt;    &amp;lt;string name="app_name"&amp;gt;Ekiras&amp;lt;/string&amp;gt;&lt;br /&gt;    &amp;lt;string name="action_settings"&amp;gt;Settings&amp;lt;/string&amp;gt;&lt;br /&gt;&amp;lt;/resources&amp;gt;&lt;/pre&gt;&lt;br /&gt;If you do not want to keep them in &lt;b&gt;strings.xml&lt;/b&gt; file then you can simple assign them in &lt;b&gt;AndroidManifests.xml&lt;/b&gt; file , however it is recommended that you keep them in strings.xml file.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/255798347777815937/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-change-android-application-label-in-action-bar.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/255798347777815937'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/255798347777815937'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-change-android-application-label-in-action-bar.html' title='Android : How to change the Android Application Label in Action Bar'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2157943288181396525</id><published>2015-10-09T06:09:00.003+05:30</published><updated>2015-10-09T06:21:08.129+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to create a Basic List View </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to create a ListView in your activity.&lt;/li&gt;&lt;li&gt;Then create a view for Item of the ListView.&lt;/li&gt;&lt;li&gt;Create an Adapter and a list of objects to display.&lt;/li&gt;&lt;li&gt;Pass the List of objects to the ListView.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;How to create a Basic List View&amp;nbsp;&lt;/h2&gt;&lt;br /&gt;Your Activity may look like the following &lt;b&gt;activity_main.xml&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[15,16,17,18,19,20,21,22]"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    xmlns:tools="http://schemas.android.com/tools"&lt;br /&gt;    android:layout_width="match_parent"&lt;br /&gt;    android:layout_height="match_parent"&lt;br /&gt;    tools:context=".MainActivity"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;TextView&lt;br /&gt;        android:layout_width="match_parent"&lt;br /&gt;        android:layout_height="50dp"&lt;br /&gt;        android:text="Planet List"&lt;br /&gt;        android:textAlignment="center"&lt;br /&gt;        android:textSize="24dp"&lt;br /&gt;        /&amp;gt;&lt;br /&gt;    &amp;lt;ListView&lt;br /&gt;        android:id="@+id/list_view_drawer"&lt;br /&gt;        android:layout_marginTop="50dp"&lt;br /&gt;        android:layout_width="match_parent"&lt;br /&gt;        android:layout_height="wrap_content"&lt;br /&gt;        android:dividerHeight="1dp"&lt;br /&gt;        android:divider="@android:color/holo_blue_light"&lt;br /&gt;        xmlns:android="http://schemas.android.com/apk/res/android" /&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Your item may look like the following &lt;b&gt;list_view_item.xml&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[]"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;TextView&lt;br /&gt;    android:layout_height="50dp"&lt;br /&gt;    android:textAlignment="gravity"&lt;br /&gt;    android:textColor="@android:color/holo_blue_dark"&lt;br /&gt;    android:paddingLeft="15dp"&lt;br /&gt;    android:layout_centerVertical="true"&lt;br /&gt;    android:layout_centerHorizontal="true"&lt;br /&gt;    android:gravity="center_vertical"&lt;br /&gt;    android:layout_width="wrap_content"&lt;br /&gt;    xmlns:android="http://schemas.android.com/apk/res/android" /&amp;gt;&lt;/pre&gt;&lt;br /&gt;Your activity may look like the following&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[19,20,21,23,25,26]"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;import android.support.v7.app.ActionBarActivity;&lt;br /&gt;import android.os.Bundle;&lt;br /&gt;import android.widget.ArrayAdapter;&lt;br /&gt;import android.widget.ListAdapter;&lt;br /&gt;import android.widget.ListView;&lt;br /&gt;&lt;br /&gt;import com.ekiras.app2.fragment.BuzzListFragment;&lt;br /&gt;&lt;br /&gt;public class MainActivity extends ActionBarActivity{&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void onCreate(Bundle savedInstanceState) {&lt;br /&gt;        super.onCreate(savedInstanceState);&lt;br /&gt;        setContentView(R.layout.activity_main);&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        String [] planets = new String[]{&lt;br /&gt;          "Mercury","Mars","Earth","Jupitor","Mars","Venus","Pluto"&lt;br /&gt;        };&lt;br /&gt;&lt;br /&gt;        ArrayAdapter adapter = new ArrayAdapter&amp;lt;String&amp;gt;(this, R.layout.list_view_item, planets);&lt;br /&gt;&lt;br /&gt;        ListView listView = (ListView) findViewById(R.id.list_view_drawer);&lt;br /&gt;        listView.setAdapter(adapter);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Your Application will look as shown in the image&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-GP1LDshiA3c/VhcMwylJE1I/AAAAAAAAAyw/-skhPRaBqA8/s1600/lv-1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="http://2.bp.blogspot.com/-GP1LDshiA3c/VhcMwylJE1I/AAAAAAAAAyw/-skhPRaBqA8/s400/lv-1.png" width="253" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2157943288181396525/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-create-basic-list-view.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2157943288181396525'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2157943288181396525'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-create-basic-list-view.html' title='Android : How to create a Basic List View '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-GP1LDshiA3c/VhcMwylJE1I/AAAAAAAAAyw/-skhPRaBqA8/s72-c/lv-1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1380518073816630040</id><published>2015-10-08T04:08:00.000+05:30</published><updated>2015-10-08T04:08:08.300+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to change ActionBar/ ToolBar color</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can just override the &lt;b&gt;primary_material_dark&lt;/b&gt;&amp;nbsp;in the &lt;b&gt;colorx.xml&lt;/b&gt; file in &lt;b&gt;values&lt;/b&gt; folder.&lt;br /&gt;&lt;h2&gt;How to change ActionBar/ ToolBar color&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We will create a new file &lt;b&gt;colors.xml&lt;/b&gt;if it does not exist.&lt;/li&gt;&lt;li&gt;Override the Primary color of the theme&amp;nbsp;&lt;b&gt;Theme.AppCompat.Light.DarkActionBar&lt;/b&gt;&lt;/li&gt;&lt;li&gt;See the results&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;resources&amp;gt;&lt;br /&gt;    &amp;lt;color name="primary_material_dark"&amp;gt;#1B5891&amp;lt;/color&amp;gt;&lt;br /&gt;&amp;lt;/resources&amp;gt;&lt;/pre&gt;&lt;br /&gt;Your styles.xml file may look like the following &lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;resources&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- Base application theme. --&amp;gt;&lt;br /&gt;    &amp;lt;style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"&amp;gt;&lt;br /&gt;        &amp;lt;!-- Customize your theme here. --&amp;gt;&lt;br /&gt;    &amp;lt;/style&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/resources&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;and the AndroidManifest.xml may look like following &lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    package="com.ekiras.demo" &amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;application&lt;br /&gt;        android:allowBackup="true"&lt;br /&gt;        android:icon="@mipmap/ic_launcher"&lt;br /&gt;        android:label="@string/app_name"&lt;br /&gt;        android:supportsRtl="true"&lt;br /&gt;        android:theme="@style/AppTheme" &amp;gt;&lt;br /&gt;        &amp;lt;activity&lt;br /&gt;            android:name=".MainActivity"&lt;br /&gt;            android:label="@string/app_name" &amp;gt;&lt;br /&gt;            &amp;lt;intent-filter&amp;gt;&lt;br /&gt;                &amp;lt;action android:name="android.intent.action.MAIN" /&amp;gt;&lt;br /&gt;&lt;br /&gt;                &amp;lt;category android:name="android.intent.category.LAUNCHER" /&amp;gt;&lt;br /&gt;            &amp;lt;/intent-filter&amp;gt;&lt;br /&gt;        &amp;lt;/activity&amp;gt;&lt;br /&gt;    &amp;lt;/application&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/manifest&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1380518073816630040/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-change-action-bar-tool-bar-color.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1380518073816630040'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1380518073816630040'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-change-action-bar-tool-bar-color.html' title='Android : How to change ActionBar/ ToolBar color'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2111320474594752501</id><published>2015-10-06T02:00:00.001+05:30</published><updated>2015-10-06T02:09:03.295+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : Add Action Icon / Action button on Action Bar</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to create a file in &lt;b&gt;res &amp;gt; menu &amp;gt; menu.xml&lt;/b&gt;&lt;/li&gt;&lt;li&gt;You can use showAsAction property to decide if to show the action icon on action bar or not.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Adding Action Icon Action button on Action Bar&lt;/h2&gt;&lt;br /&gt;You can choose either of the following  &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;pre&gt;app:showAsAction="never"&lt;/pre&gt;This will show the action in the list view when menu icon is pressed. &lt;/li&gt;&lt;li&gt;&lt;pre&gt;app:showAsAction="ifRoom"&lt;/pre&gt;This will show the action in the action bar if the amount of space required to show the action is available on the Action bar. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre class="brush:xml;highlight:[7,10,13,16]"&gt;&amp;lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;    xmlns:app="http://schemas.android.com/apk/res-auto"&lt;br /&gt;    xmlns:tools="http://schemas.android.com/tools"&lt;br /&gt;    tools:context=".HomeActivity"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;item&lt;br /&gt;        android:id="@+id/action_settings"&lt;br /&gt;        android:orderInCategory="100"&lt;br /&gt;        android:title="#Settings"&lt;br /&gt;        app:showAsAction="never" /&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;item&lt;br /&gt;        android:id="@+id/app_search"&lt;br /&gt;        android:orderInCategory="99"&lt;br /&gt;        android:title="#Search"&lt;br /&gt;        app:showAsAction="ifRoom" /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/menu&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;Line 7 and 13 tells how to order them in the list.&lt;br /&gt;Line 10 and 16 tells how to show the action in the action bar.&lt;br /&gt;&lt;br /&gt;Output will look the following&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-IX_lNDamwB0/VhLdzVjoroI/AAAAAAAAAfA/Wgi-pdyrIxk/s1600/and2.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-IX_lNDamwB0/VhLdzVjoroI/AAAAAAAAAfA/Wgi-pdyrIxk/s1600/and2.png" /&gt;&lt;/a&gt;&lt;a href="http://1.bp.blogspot.com/-2ykmgVADAaE/VhLdoNvIwjI/AAAAAAAAAe4/LkubcOPqjHc/s1600/and1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-2ykmgVADAaE/VhLdoNvIwjI/AAAAAAAAAe4/LkubcOPqjHc/s1600/and1.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2111320474594752501/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-add-action-icon-action-button-on-action-bar.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2111320474594752501'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2111320474594752501'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-add-action-icon-action-button-on-action-bar.html' title='Android : Add Action Icon / Action button on Action Bar'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-IX_lNDamwB0/VhLdzVjoroI/AAAAAAAAAfA/Wgi-pdyrIxk/s72-c/and2.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-787396385706979976</id><published>2015-10-01T00:24:00.002+05:30</published><updated>2015-10-01T00:27:07.242+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Android'/><title type='text'>Android : How to change application icon</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Android saves the Application level Settings like App Icon, App Label etc in the &lt;b&gt;AndroidManifest.xml&lt;/b&gt; file. &lt;br /&gt;Add your icon image as &lt;b&gt;icon.png&lt;/b&gt;&amp;nbsp;in the drawable folder.&lt;br /&gt;&lt;h2&gt;How to change application icon&lt;/h2&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Your Application structure looks like the following.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-mqX--bDLdh0/Vgwu0hTcFAI/AAAAAAAAAeo/cbLMPSSyjtk/s1600/icon.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://3.bp.blogspot.com/-mqX--bDLdh0/Vgwu0hTcFAI/AAAAAAAAAeo/cbLMPSSyjtk/s320/icon.png" width="209" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Add the&lt;b&gt; icon.png &lt;/b&gt;folder in the &lt;b&gt;drawable&lt;/b&gt;&amp;nbsp;folder&lt;/li&gt;&lt;li&gt;Open the &lt;b&gt;Application &amp;gt; manifests &amp;gt; AndroidManifests.xml&lt;/b&gt;&amp;nbsp;file&lt;/li&gt;&lt;li&gt;Add &lt;pre&gt;android:icon="@drawable/icon"&lt;/pre&gt;in the application root.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;Your AndroidManifests.xml file should look like following &lt;br /&gt;&lt;pre class="brush:xml;highlight:[7]"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;br /&gt;&amp;lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;package="com.ekiras.activity" &amp;gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;application&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;android:allowBackup="true"&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;android:icon="@drawable/icon"&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;android:label="@string/app_name"&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;android:theme="@style/AppTheme" &amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Your activities are declared here&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;activity&amp;gt;&amp;lt;/activity&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/application&amp;gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;lt;/manifest&amp;gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;After this you will be able to see the icon image as the application icon.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/787396385706979976/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-change-application-icon.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/787396385706979976'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/787396385706979976'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/10/android-how-to-change-application-icon.html' title='Android : How to change application icon'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-mqX--bDLdh0/Vgwu0hTcFAI/AAAAAAAAAeo/cbLMPSSyjtk/s72-c/icon.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1779538158762623245</id><published>2015-09-29T22:50:00.000+05:30</published><updated>2015-09-29T22:50:57.309+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : Make a field Non Updatable in an Entity</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;By default all the fields in the Hibernate Entity are updatable and insertable. To make a field non updatable in hibernate you nee to add the annotation&amp;nbsp;&lt;b&gt;@Column(updatable = false)&lt;/b&gt;&lt;br /&gt;&lt;h2&gt;Make a field Non Updatable in an Hibernate Entity&lt;/h2&gt;Suppose you have a User class and you want to make email as a non updatable field, all you need to do is add the&amp;nbsp;&lt;b&gt;@Column(updatable = false)&lt;/b&gt;&amp;nbsp;annotation as shown in the example below.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[8]"&gt;@Entity&lt;br /&gt;public class User {&lt;br /&gt;&lt;br /&gt;    @Id&lt;br /&gt;    @GeneratedValue(strategy = GenerationType.AUTO)&lt;br /&gt;    private Long id;&lt;br /&gt;&lt;br /&gt;    @Column(name = "email",updatable = false, nullable = false, unique = true)&lt;br /&gt;    private String email;&lt;br /&gt;&lt;br /&gt;    // GETTERS and SETTERS&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;Note : &lt;b&gt;This only puts a hibernate level constraint&lt;/b&gt;, however you can still manually go and change the value of email by using db level queries.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1779538158762623245/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-make-field-non-updatable-in-an-entity.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1779538158762623245'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1779538158762623245'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-make-field-non-updatable-in-an-entity.html' title='Hibernate : Make a field Non Updatable in an Entity'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5600921841052825616</id><published>2015-09-24T04:04:00.000+05:30</published><updated>2015-09-24T04:08:05.660+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='Jackson'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Lazy Loading'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>How to Send Rest Response For Lazy fetched Hibernate Objects with Jackson</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to Send Rest Response For Lazy fetched Hibernate Objects with Jackson&lt;/h2&gt;Just add the following class to your application and your jackson will be configured to send the JSON response for the LAZY fetched domain objects.&lt;br /&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;You need to add the dependency&amp;nbsp; &lt;b&gt;compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:2.6.1")&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:java;"&gt;@Configuration&lt;br /&gt;@EnableWebMvc&lt;br /&gt;public class HibernateAwareObjectMapper extends WebMvcConfigurerAdapter {&lt;br /&gt;&lt;br /&gt;    //More configuration....&lt;br /&gt;&lt;br /&gt;    /* Here we register the Hibernate4Module into an ObjectMapper, then set this custom-configured ObjectMapper&lt;br /&gt;     * to the MessageConverter and return it to be added to the HttpMessageConverters of our application*/&lt;br /&gt;    public MappingJackson2HttpMessageConverter jacksonMessageConverter(){&lt;br /&gt;        MappingJackson2HttpMessageConverter messageConverter = new MappingJackson2HttpMessageConverter();&lt;br /&gt;&lt;br /&gt;        ObjectMapper mapper = new ObjectMapper();&lt;br /&gt;        //Registering Hibernate4Module to support lazy objects&lt;br /&gt;        mapper.registerModule(new Hibernate4Module());&lt;br /&gt;&lt;br /&gt;        messageConverter.setObjectMapper(mapper);&lt;br /&gt;        return messageConverter;&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void configureMessageConverters(List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converters) {&lt;br /&gt;        //Here we add our custom-configured HttpMessageConverter&lt;br /&gt;        converters.add(jacksonMessageConverter());&lt;br /&gt;        super.configureMessageConverters(converters);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    //More configuration....&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;With this class in class path you will be able to send the rest response for the LAZY fetched Hibernate Entities.&amp;nbsp;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5600921841052825616/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/how-to-send-rest-response-for-lazy-fetched-hibernate-objects-jackson.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5600921841052825616'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5600921841052825616'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/how-to-send-rest-response-for-lazy-fetched-hibernate-objects-jackson.html' title='How to Send Rest Response For Lazy fetched Hibernate Objects with Jackson'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4883436716357621095</id><published>2015-09-21T15:15:00.000+05:30</published><updated>2016-06-28T16:53:53.195+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Spring Profiles'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Environment'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring : How to get Current Profiles in Spring Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can use the &lt;b&gt;&lt;a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/env/Environment.html" target="_blank"&gt;Environment&lt;/a&gt; interface&lt;/b&gt;&amp;nbsp;in package &lt;b&gt;org.springframework.core.env&lt;/b&gt; to get the current profiles in spring application.&lt;br /&gt;&lt;br /&gt;You can make use of the following methods to get the information about the profiles.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;acceptsProfiles(String ...profiles)&lt;/b&gt;&amp;nbsp;- returns if the profiles given in input is active.&lt;/li&gt;&lt;li&gt;&lt;b&gt;getActiveProfiles()&lt;/b&gt;&amp;nbsp;- Gives a list of profiles explicitly made active for this enviornment.&lt;/li&gt;&lt;li&gt;&lt;b&gt;getDefaultProfiles()&lt;/b&gt;&amp;nbsp;- gives a set of profiles to be active by default if no active profile is set explicitly.&lt;/li&gt;&lt;/ul&gt;&lt;a href="http:/#" target="_blank"&gt;See how to set and configure profiles in spring.&lt;/a&gt;&lt;br /&gt;&lt;a href="http:/#" target="_blank"&gt;&lt;br /&gt;&lt;/a&gt;&lt;a href="http://www.ekiras.com/2016/06/springboot-what-are-profiles-in-spring.html" target="_blank"&gt;Must Read :: What are profiles in Spring boot.&lt;/a&gt;&lt;br /&gt;&lt;h2&gt;How to get Active Profiles in an Environment&lt;/h2&gt;All you need to do is&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;autowire&lt;/b&gt;&amp;nbsp;the Environmnet bean.&lt;/li&gt;&lt;li&gt;call the getActiveProfiles method of the bean.&lt;/li&gt;&lt;/ul&gt;&lt;pre class="brush:java;highlight:[5,10,13,14,15];"&gt;package com.ekiras.config;&lt;br /&gt;&lt;br /&gt;import org.springframework.stereotype.Component;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.core.env.Environment;&lt;br /&gt;&lt;br /&gt;@Component&lt;br /&gt;class Test {&lt;br /&gt;&lt;br /&gt;  @Autowired private Environment environment;&lt;br /&gt;&lt;br /&gt;  public void test(){&lt;br /&gt;     for(String profile : environment.getActiveProfiles()){&lt;br /&gt;            System.out.println("&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;"+profile);&lt;br /&gt;        }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;When the above method is called it will give the following output.&lt;br /&gt;&lt;pre class="output"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;dev&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4883436716357621095/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/spring-how-to-get-current-profiles-in-spring-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4883436716357621095'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4883436716357621095'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/spring-how-to-get-current-profiles-in-spring-application.html' title='Spring : How to get Current Profiles in Spring Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6811876665326318918</id><published>2015-09-19T04:12:00.000+05:30</published><updated>2015-09-19T04:12:53.266+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Ajax'/><category scheme='http://www.blogger.com/atom/ns#' term='CORS'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : CORs Allow Custom Headers in Ajax calls</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Add the comma separated Headers (standard and Custom headers)&lt;br /&gt;&lt;h2&gt;CORs Allow Custom Headers in Ajax calls&lt;/h2&gt;&lt;pre class="brush:js;"&gt;&lt;br /&gt;$.ajax({&lt;br /&gt;  method : 'POST',&lt;br /&gt;  url    : 'url',&lt;br /&gt;  headers: {'Custom-Header-1':'h1','Custom-Header-2':'h2'},&lt;br /&gt;  success: function(data){},&lt;br /&gt;  error  : function(error){}&lt;br /&gt;&lt;br /&gt;});&lt;br /&gt;&lt;/pre&gt;&lt;pre class="brush:java;highlight:[]9" style="text-align: left;"&gt;@Component&lt;br /&gt;public class CorsFilter implements Filter {&lt;br /&gt;&lt;br /&gt;    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {&lt;br /&gt;        HttpServletResponse response = (HttpServletResponse) res;&lt;br /&gt;        response.setHeader("Access-Control-Allow-Origin", "*");&lt;br /&gt;        response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");&lt;br /&gt;        response.setHeader("Access-Control-Max-Age", "3600");&lt;br /&gt;        response.setHeader("Access-Control-Allow-Headers", "x-requested-with, Custom-Header-1 , Custom-Header-2, X-Auth-Token");&lt;br /&gt;        chain.doFilter(req, res);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void init(FilterConfig filterConfig) {}&lt;br /&gt;&lt;br /&gt;    public void destroy() {}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Add the above filter in your spring boot application.&lt;/li&gt;&lt;li&gt;Add the comma separated headers at line 9 (highlighted)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6811876665326318918/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/springboot-cors-allow-custom-headers-in-ajax-calls.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6811876665326318918'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6811876665326318918'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/springboot-cors-allow-custom-headers-in-ajax-calls.html' title='SpringBoot : CORs Allow Custom Headers in Ajax calls'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3929693465887172137</id><published>2015-09-16T02:55:00.002+05:30</published><updated>2015-09-16T02:57:04.340+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Ajax'/><category scheme='http://www.blogger.com/atom/ns#' term='CORS'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>SpringBoot : How to allow cross origin ajax calls to Spring application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to allow cross origin ajax calls to Spring application&lt;/h2&gt;Add the following class to your Spring or Spring Boot application. After adding this class you will be able to make ajax calls to your application.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[10,14,15,16,17]"&gt;package com.ekiras.filter;&lt;br /&gt;&lt;br /&gt;import org.springframework.stereotype.Component;&lt;br /&gt;&lt;br /&gt;import javax.servlet.*;&lt;br /&gt;import javax.servlet.http.HttpServletResponse;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;&lt;br /&gt;@Component&lt;br /&gt;public class CorsFilter implements Filter {&lt;br /&gt;&lt;br /&gt;    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {&lt;br /&gt;        HttpServletResponse response = (HttpServletResponse) res;&lt;br /&gt;        response.setHeader("Access-Control-Allow-Origin", "*");&lt;br /&gt;        response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE");&lt;br /&gt;        response.setHeader("Access-Control-Max-Age", "3600");&lt;br /&gt;        response.setHeader("Access-Control-Allow-Headers", "x-requested-with");&lt;br /&gt;        chain.doFilter(req, res);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void init(FilterConfig filterConfig) {}&lt;br /&gt;&lt;br /&gt;    public void destroy() {}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Now you can hit the ajax calls like following&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:js"&gt;$.ajax({&lt;br /&gt;   method:'GET',&lt;br /&gt;   url:'http://someurl',&lt;br /&gt;   success:function(data){&lt;br /&gt;       console.log(data);&lt;br /&gt;   },&lt;br /&gt;   error:function(error){&lt;br /&gt;       console.log(error);&lt;br /&gt;   }&lt;br /&gt;})&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3929693465887172137/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/springboot-how-to-allow-cross-origin-ajax-calls-to-spring-rest-mvc-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3929693465887172137'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3929693465887172137'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/springboot-how-to-allow-cross-origin-ajax-calls-to-spring-rest-mvc-application.html' title='SpringBoot : How to allow cross origin ajax calls to Spring application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8894476375088623754</id><published>2015-09-16T00:13:00.002+05:30</published><updated>2015-09-16T00:15:06.359+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='GradleTask'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><title type='text'>Gradle : Task to add selected files to jar</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;You can create local variable in gradle with the type def, e.g &lt;b&gt;def jarName = "ekiras"&lt;/b&gt;&lt;/li&gt;&lt;li&gt;You can print variable with help of &lt;b&gt;println&lt;/b&gt;&amp;nbsp;e.g println "jar name is -&amp;gt; &lt;b&gt;$jarName&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;span style="font-weight: normal;"&gt;Gradle task declaration syntax is&amp;nbsp;&lt;/span&gt;&lt;b&gt;task taskName(type: taskType){}&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Task to add selected files to jar&lt;/h2&gt;We will be writing two tasks for this&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;First task -&amp;nbsp;&lt;b&gt;compileFiles&lt;/b&gt;&amp;nbsp;-&amp;gt; this will compile all the files in the project and then save them to the &lt;b&gt;build/classes/&lt;/b&gt;&amp;nbsp;folder of the project&lt;/li&gt;&lt;li&gt;Second Task - &lt;b&gt;makeJar&lt;/b&gt;&amp;nbsp;-&amp;gt; this will take all the compile files from the base folder and make a jar of these files in &lt;b&gt;build/lib/&lt;/b&gt;&amp;nbsp;folder of the project.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[1,9]"&gt;task compileFiles(type: JavaCompile) {&lt;br /&gt;    println '&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; start compiling'&lt;br /&gt;    source = sourceSets.main.java.srcDirs&lt;br /&gt;    classpath = sourceSets.main.compileClasspath&lt;br /&gt;    destinationDir = sourceSets.main.output.classesDir&lt;br /&gt;    println '&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; end compiling '&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task makeJar(type: Jar,dependsOn : 'compileFiles') {&lt;br /&gt;    println '&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; start making Jar'&lt;br /&gt;    baseName = "ekiras"&lt;br /&gt;    def baseFolder = "com/ekiras"&lt;br /&gt;    def destFolder = "build/classes/main/com/ekiras"&lt;br /&gt;    from("$destFolder/folder1"){into("$baseFolder/folder1")}&lt;br /&gt;    from("$destFolder/folder2"){into("$baseFolder/folder2")}&lt;br /&gt;    from("$destFolder/folder3"){into("$baseFolder/folder3")}&lt;br /&gt;    println '&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; end making Jar'&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can run the tasks individually using the following commands.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Task 1 - compile all files in project&lt;pre&gt;gradle compileFiles&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Task 2 - copy all compiled files from folders(folder1, folder2, folder3) to jar.&lt;pre&gt;gradle makeJar&lt;/pre&gt;This task will run the task &lt;b&gt;compileFiles&lt;/b&gt; before executing this task. &lt;b&gt;baseName&lt;/b&gt;&amp;nbsp;in the task defines the name of the jar that will be created.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;So the above task &lt;b&gt;makeJar&lt;/b&gt; when run will make a jar by name &lt;b&gt;ekiras.jar&lt;/b&gt; in the folder &lt;b&gt;build/lib/&lt;/b&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8894476375088623754/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/gradle-task-to-add-selected-files-to-jar.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8894476375088623754'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8894476375088623754'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/gradle-task-to-add-selected-files-to-jar.html' title='Gradle : Task to add selected files to jar'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5736412211102612067</id><published>2015-09-10T03:10:00.004+05:30</published><updated>2015-09-10T03:10:38.366+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Criteria Query'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : How to get List of records of an Entity</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to get List of records in Hibernate&lt;/h2&gt;&lt;pre class="brush:java;highlight:[1,7,13,21]"&gt;    // List all records&lt;br /&gt;    public List&amp;lt;User&amp;gt; list(){&lt;br /&gt;        return sessionFactory.getCurrentSession()&lt;br /&gt;                .createCriteria(User.class).list(); // List all records&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    // List records based on MAX&lt;br /&gt;    public List&amp;lt;User&amp;gt; list(Integer max){&lt;br /&gt;        return sessionFactory.getCurrentSession().createCriteria(User.class)&lt;br /&gt;                .setMaxResults(max).list(); &lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    // List records with MAX records and OFFSET&lt;br /&gt;    public List&amp;lt;User&amp;gt; list(Integer max, Integer offset){&lt;br /&gt;        return sessionFactory.getCurrentSession().createCriteria(User.class)&lt;br /&gt;                .setMaxResults(max) &lt;br /&gt;                .setFirstResult(offset)&lt;br /&gt;                .list();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    // List records with MAX records and OFFSET and ORDER by id field of User class&lt;br /&gt;    public List&amp;lt;User&amp;gt; list(Integer max, Integer offset){&lt;br /&gt;        return sessionFactory.getCurrentSession().createCriteria(User.class)&lt;br /&gt;                .setMaxResults(max) &lt;br /&gt;                .setFirstResult(offset)&lt;br /&gt;                .addOrder(Order.asc("id"))&lt;br /&gt;                .list();&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5736412211102612067/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-get-list-of-records-of.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5736412211102612067'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5736412211102612067'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-get-list-of-records-of.html' title='Hibernate : How to get List of records of an Entity'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-914960367331855012</id><published>2015-09-04T15:21:00.001+05:30</published><updated>2015-09-10T02:37:11.888+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : How to use @Temporal annotation</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;@Temporal annotation must be used with the persistent fields or properties of type&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;java.util.Date&amp;nbsp;&lt;/li&gt;&lt;li&gt;java.util.Calendar&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to use @Temporal annotation&lt;/h2&gt;@Temporal Annotation is defined as following&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;@Target({ METHOD, FIELD })&lt;br /&gt;@Retention(RUNTIME)&lt;br /&gt;public @interface Temporal {&lt;br /&gt; /**&lt;br /&gt;  * The type used in mapping &amp;lt;code&amp;gt;java.util.Date&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;java.util.Calendar&amp;lt;/code&amp;gt;.&lt;br /&gt;  */&lt;br /&gt; TemporalType value();&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So the TemporalType is an Enum and looks like following  &lt;br /&gt;&lt;pre class="brush:java"&gt;public enum TemporalType {&lt;br /&gt; DATE,&lt;br /&gt; TIME,&lt;br /&gt; TIMESTAMP&lt;br /&gt;}&lt;/pre&gt;So &lt;b&gt;@Temporal&lt;/b&gt; annotation can take three values &lt;b&gt;DATE, TIME and TIMESTAMP&lt;/b&gt;. And it will create the following database ddl type. &lt;br /&gt;&lt;br /&gt;&lt;div class="table-responsive"&gt;&lt;table class="table table-bordered table-stripped"&gt; &lt;tbody&gt;&lt;tr class="active"&gt;&lt;th&gt;TemporalType&lt;/th&gt;&lt;th&gt;Database DDL Type&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DATE&lt;/td&gt;&lt;td&gt;date&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TIMESTAMP&lt;/td&gt;&lt;td&gt;datetime&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TIME&lt;/td&gt;&lt;td&gt;time&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;If we the following class as Hibernate Entity &lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domian;&lt;br /&gt;&lt;br /&gt;import javax.persistence.*;&lt;br /&gt;import java.util.Date;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;public class User {&lt;br /&gt;&lt;br /&gt;    @Id&lt;br /&gt;    @SequenceGenerator(name = "test")&lt;br /&gt;    @GeneratedValue(strategy = GenerationType.AUTO, generator = "test")&lt;br /&gt;    private Long id;&lt;br /&gt;&lt;br /&gt;    @Temporal(value = TemporalType.DATE)&lt;br /&gt;    private Date dateCreated1;&lt;br /&gt;&lt;br /&gt;    @Temporal(value = TemporalType.TIMESTAMP)&lt;br /&gt;    private Date dateCreated2;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    @Temporal(value = TemporalType.TIME)&lt;br /&gt;    private Date dateCreated3;&lt;br /&gt;&lt;br /&gt;    // GETTERS and SETTERS&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;It will create the output as shown in the image below.  &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-7luNmikYgag/Velo3mXpskI/AAAAAAAAAeQ/Bn2EZIQ-8Z8/s1600/bh13.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="198" src="http://4.bp.blogspot.com/-7luNmikYgag/Velo3mXpskI/AAAAAAAAAeQ/Bn2EZIQ-8Z8/s640/bh13.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If we try to add @Temporal annotation to any other field other than of type Date and Calender we will get the following exception&lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;Caused by: org.hibernate.AnnotationException: @Temporal should only be set on a java.util.Date or java.util.Calendar property: com.ekiras.domian.User.name&lt;br /&gt; at org.hibernate.cfg.annotations.SimpleValueBinder.setType(SimpleValueBinder.java:182)&lt;br /&gt; at org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(Propertyjava:195)&lt;br /&gt; at org.hibernate.cfg.annotations.PropertyBinder.makePropertyValueAndBind(PropertyBinder.java:216)&lt;br /&gt; at org.hibernate.cfg.AnnotationBinder.processElementAnnotations(AnnotationBinder.java:2241)&lt;br /&gt; at org.hibernate.cfg.AnnotationBinder.processIdPropertiesIfNotAlready(AnnotationBinder.java:963)&lt;br /&gt; at org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:796)&lt;br /&gt; at org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:3845)&lt;br /&gt; at org.hibernate.cfg.Configuration$MetadataSourceQueue.processMetadata(Configuration.java:3799)&lt;br /&gt; at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1412)&lt;br /&gt; at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1846)&lt;br /&gt; at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:857)&lt;br /&gt; ... 23 more&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/914960367331855012/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-temporal-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/914960367331855012'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/914960367331855012'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-temporal-annotation.html' title='Hibernate : How to use @Temporal annotation'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-7luNmikYgag/Velo3mXpskI/AAAAAAAAAeQ/Bn2EZIQ-8Z8/s72-c/bh13.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5235195379249966300</id><published>2015-09-04T11:08:00.000+05:30</published><updated>2015-09-04T11:08:48.821+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : How to use @GeneratedValue annotation</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-generatedvalue-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5235195379249966300'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5235195379249966300'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2727900241756208954</id><published>2015-09-04T01:03:00.001+05:30</published><updated>2015-09-10T02:38:03.984+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : How to use @Column Annotation</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;@Column annotation is used to define the &lt;b&gt;column name, type, constraints.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;It should be used with the fields either &lt;b&gt;above&lt;/b&gt; the &lt;b&gt;getter&lt;/b&gt; or above &lt;b&gt;field declaration.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;The&amp;nbsp;@Column annotation can take the following configuration.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="table-responsive"&gt;&lt;table class="table table-bordered table-hover"&gt;&lt;tbody&gt;&lt;tr class="info"&gt;&lt;th&gt;Property&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;name&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;""&lt;/td&gt;&lt;td&gt;The name of the column. Defaults to the property or field name&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;unique&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;Whether the column is a unique key.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;nullable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;Whether the database column is nullable.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;insertable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;Whether the column is included in SQL INSERT statements generated by the persistence provider.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;updatable&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;true&lt;/td&gt;&lt;td&gt;Whether the column is included in SQL UPDATE statements generated by the persistence provider.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;columnDefinition&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;""&lt;/td&gt;&lt;td&gt;The SQL fragment that is used when generating the DDL for the column.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;table&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;""&lt;/td&gt;&lt;td&gt;The name of the table that contains the column. If absent the column is assumed to be in the primary table.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;length&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;td&gt;The column length. (Applies only if a string-valued column is used.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;precision&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;The precision for a decimal (exact numeric) column. (Applies only if a decimal column is used.)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;scale&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Optional&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;The scale for a decimal (exact numeric) column (Applies only if a decimal column is used.)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;How to use @Column Annotation in Hibernate&lt;/h2&gt;We will we taking the &lt;a href="http://www.ekiras.com/2015/09/hibernate-how-to-use-entity-annotation.html" target="_blank"&gt;example of @Entity annotation&lt;/a&gt; to show the changes made by&amp;nbsp;&lt;b&gt;@Column annotation&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[15,18,21,27]"&gt;package com.ekiras.domian;&lt;br /&gt;&lt;br /&gt;import com.ekiras.enums.Gender;&lt;br /&gt;&lt;br /&gt;import javax.persistence.*;&lt;br /&gt;import java.util.Date;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;public class User {&lt;br /&gt;&lt;br /&gt;    @Id&lt;br /&gt;    @GeneratedValue(strategy = GenerationType.AUTO)&lt;br /&gt;    private Long id;&lt;br /&gt;&lt;br /&gt;    @Column(name = "name",length = 100)&lt;br /&gt;    private String name;&lt;br /&gt;    &lt;br /&gt;    @Column(name = "current_age")&lt;br /&gt;    private Integer age;&lt;br /&gt;&lt;br /&gt;    @Column(name = "address",columnDefinition = "text")&lt;br /&gt;    private String address;&lt;br /&gt;    &lt;br /&gt;    @Column&lt;br /&gt;    private Gender gender;&lt;br /&gt;&lt;br /&gt;    @Column(name = "email",updatable = false, nullable = false, unique = true)&lt;br /&gt;    private String email;&lt;br /&gt;&lt;br /&gt;    private Long mobile;&lt;br /&gt;&lt;br /&gt;    @Temporal(value = TemporalType.DATE)&lt;br /&gt;    private Date dateCreated;&lt;br /&gt;&lt;br /&gt;   // GETTERS AND SETTERS&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The above Entity definition will create the output as shown in the image below.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-qqG-0Z0qZZ4/VeijMBlwzjI/AAAAAAAAAd8/g_STWc9TCuI/s1600/hb12.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="270" src="http://2.bp.blogspot.com/-qqG-0Z0qZZ4/VeijMBlwzjI/AAAAAAAAAd8/g_STWc9TCuI/s640/hb12.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;What&amp;nbsp;&lt;b&gt;@Column&lt;/b&gt; annotation did is&lt;/h3&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;mapped &lt;b&gt;age&lt;/b&gt; to &lt;b&gt;current_age&lt;/b&gt;&amp;nbsp;in database.&lt;/li&gt;&lt;li&gt;changed &lt;b&gt;address&lt;/b&gt; ddl type &lt;b&gt;to text.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;added&amp;nbsp;&lt;b&gt;nullable&lt;/b&gt; and&amp;nbsp;&lt;b&gt;unique&lt;/b&gt; constraints to field&amp;nbsp;&lt;b&gt;email&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;changes &lt;b&gt;name&lt;/b&gt; ddl &lt;b&gt;from varchar(255) to varchar(100)&lt;/b&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Also read about the following&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;See the use of&amp;nbsp;@Temporal annotation in hibernate.&lt;/li&gt;&lt;li&gt;See the how to use columnDefinition property of&amp;nbsp;@Column annotation.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2727900241756208954/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-column-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2727900241756208954'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2727900241756208954'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-column-annotation.html' title='Hibernate : How to use @Column Annotation'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-qqG-0Z0qZZ4/VeijMBlwzjI/AAAAAAAAAd8/g_STWc9TCuI/s72-c/hb12.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2971197775097794050</id><published>2015-09-03T01:59:00.001+05:30</published><updated>2015-09-03T02:00:47.051+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : How to use @Id annotation </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points to remember&lt;/h2&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;There should be only one&amp;nbsp;@Id annotation in a hibernate entity class.&lt;/li&gt;&lt;li&gt;There should be at least one field specified as primary id.&lt;/li&gt;&lt;li&gt;You can use different approaches for creating primary id using these&amp;nbsp;&lt;a href="http://www.ekiras.com/2014/08/hibernate-id-generation-strategies.html" target="_blank"&gt;Primary Key Generation Strategies.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h2&gt;How to use @Id annotation in Hibernate&lt;/h2&gt;Taking the example in the &lt;a href="http://www.ekiras.com/2015/09/hibernate-how-to-use-entity-annotation.html" target="_blank"&gt;previous example&lt;/a&gt;.&amp;nbsp;&lt;b&gt;@Id&lt;/b&gt;&amp;nbsp;annotation tells the hibernate to  &lt;br /&gt;&lt;br /&gt;&lt;b&gt;@Id annotation tells the hibernate that this field will be the primary key of the table.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;@Id annotation class looks like the following&lt;br /&gt;&lt;pre class="brush:java"&gt;@Target({METHOD, FIELD})&lt;br /&gt;@Retention(RUNTIME)&lt;br /&gt;&lt;br /&gt;public @interface Id {&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;If we do not add&amp;nbsp;@Id annotation on any of the fields in Hibernate entity then you will get the following error.&lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;Caused by: javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory&lt;br /&gt; at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1249)&lt;br /&gt; at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.access$600(EntityManagerFactoryBuilderImpl.java:120)&lt;br /&gt; at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:860)&lt;br /&gt; at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:850)&lt;br /&gt; at org.hibernate.boot.registry.classloading.internal.ClassLoaderServiceImpl.withTccl(ClassLoaderServiceImpl.java:425)&lt;br /&gt; at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:849)&lt;br /&gt; at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:60)&lt;br /&gt; at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:343)&lt;br /&gt; at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:318)&lt;br /&gt; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1633)&lt;br /&gt; at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1570)&lt;br /&gt; ... 15 more&lt;br /&gt;&amp;nbsp;Caused by: org.hibernate.AnnotationException: No identifier specified for entity: com.ekiras.domian.User&lt;br /&gt; at org.hibernate.cfg.InheritanceState.determineDefaultAccessType(InheritanceState.java:277)&lt;br /&gt; at org.hibernate.cfg.InheritanceState.getElementess(InheritanceState.java:224)&lt;br /&gt; at org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:775)&lt;br /&gt; at org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:3845)&lt;br /&gt; at org.hibernate.cfg.Configuration$MetadataSourceQueue.processMetadata(Configuration.java:3799)&lt;br /&gt; at org.hibernate.cfg.Configuration.secondPassCompile(Configuration.java:1412)&lt;br /&gt; at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1846)&lt;br /&gt; at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl$4.perform(EntityManagerFactoryBuilderImpl.java:857)&lt;br /&gt; ... 23 common frames omitted&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2971197775097794050/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-id-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2971197775097794050'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2971197775097794050'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-id-annotation.html' title='Hibernate : How to use @Id annotation '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2376428089869451817</id><published>2015-09-03T01:45:00.002+05:30</published><updated>2015-09-10T02:38:45.654+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : How to use @Entity annotation</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to use @Entity annotation in Hibernate&lt;/h2&gt;Suppose we want to make a &lt;b&gt;User&lt;/b&gt;&amp;nbsp;domain with the following fields&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Id&lt;/li&gt;&lt;li&gt;Name&lt;/li&gt;&lt;li&gt;Age&lt;/li&gt;&lt;li&gt;Address&lt;/li&gt;&lt;li&gt;Gender&lt;/li&gt;&lt;li&gt;Email&lt;/li&gt;&lt;li&gt;Mobile&lt;/li&gt;&lt;/ul&gt;We can create tell the hibernate to register this Domain class as a &lt;b&gt;Hibernate Entity object by adding&amp;nbsp;@Entity annotation&lt;/b&gt;&amp;nbsp;at the class level.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[6]"&gt;package com.ekiras.domian;&lt;br /&gt;&lt;br /&gt;import com.ekiras.enums.Gender;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;public class User {&lt;br /&gt;&lt;br /&gt;    @Id&lt;br /&gt;    @GeneratedValue(strategy = GenerationType.AUTO)&lt;br /&gt;    private Long id;&lt;br /&gt;    private String name;&lt;br /&gt;    private Integer age;&lt;br /&gt;    private String address;&lt;br /&gt;    private Gender gender;&lt;br /&gt;    private String email;&lt;br /&gt;    private Long mobile;&lt;br /&gt;&lt;br /&gt;    // GETTERS and SETTERS&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So what the above line means is that, hibernate treats the class &lt;b&gt;User&lt;/b&gt; as a &lt;b&gt;Hibernate Persistence Entity. &lt;/b&gt;We will look at the&amp;nbsp;&lt;b&gt;@Id&lt;/b&gt; and&amp;nbsp;&lt;b&gt;@GeneratedValue&lt;/b&gt; annotations in a short while.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;@Entity &lt;/b&gt;annotation looks like the following   &lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;@Documented&lt;br /&gt;@Target(TYPE)&lt;br /&gt;@Retention(RUNTIME)&lt;br /&gt;public @interface Entity {&lt;br /&gt;   String name() default "";&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;Here the &lt;b&gt;name&lt;/b&gt; field &lt;b&gt;is&lt;/b&gt; &lt;b&gt;optional&lt;/b&gt;&amp;nbsp;and the can be used for the following&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;(Optional) The entity name. Defaults to the unqualified name of the entity class. This name is used to refer to the entity in queries. The name must not be a reserved literal in the Java Persistence query language.&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So hibernate will create a table in&lt;b&gt; Mysql &lt;/b&gt;like following&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-XXB9WJxi5ew/VedYhWh05jI/AAAAAAAAAds/8owg6Rjpqbw/s1600/hb11.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="252" class="img-responsive" src="http://3.bp.blogspot.com/-XXB9WJxi5ew/VedYhWh05jI/AAAAAAAAAds/8owg6Rjpqbw/s640/hb11.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2376428089869451817/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-entity-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2376428089869451817'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2376428089869451817'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/09/hibernate-how-to-use-entity-annotation.html' title='Hibernate : How to use @Entity annotation'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-XXB9WJxi5ew/VedYhWh05jI/AAAAAAAAAds/8owg6Rjpqbw/s72-c/hb11.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5255804659445356698</id><published>2015-08-26T02:30:00.001+05:30</published><updated>2015-08-26T02:31:43.043+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><category scheme='http://www.blogger.com/atom/ns#' term='Maven'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>How to run Spring boot Application </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to run a Spring Boot Application using Maven/ Gradle&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If you are using &lt;b&gt;Maven&lt;/b&gt; as a build tool you can the project as&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;mvn spring:run&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;If you are using &lt;b&gt;Gradle&lt;/b&gt; as a build tool you can the project as&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;gradle bootRun&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5255804659445356698/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/how-to-run-spring-boot-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5255804659445356698'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5255804659445356698'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/how-to-run-spring-boot-application.html' title='How to run Spring boot Application '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-631254640757075200</id><published>2015-08-21T00:33:00.000+05:30</published><updated>2015-08-21T00:33:56.628+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to find all Permutations and Combinations of a String</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Algorithm Used&lt;/h2&gt;We will be using the following algorithm to find all the permutations of a string&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Take the first letter as a prefix and find all the permutations of the remaining string.&lt;/li&gt;&lt;li&gt;Each of the prefix will also be a permutation itself.&lt;/li&gt;&lt;li&gt;If you want to find all the permutations of string with same length as the original string then skip the prefix's as the combination.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;public class Permute {&lt;br /&gt;&lt;br /&gt; static String codes = "eki";&lt;br /&gt; static int count;&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  permute("", codes);&lt;br /&gt;  System.out.println("&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;" + count);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public static void permute(String prefix, String str) {&lt;br /&gt;  System.out.println(prefix);&lt;br /&gt;  count++;&lt;br /&gt;  int n = str.length();&lt;br /&gt;  if (n == 0) {&lt;br /&gt;   System.out.println(prefix);&lt;br /&gt;  } else {&lt;br /&gt;   for (int i = 0; i &amp;lt; n; i++)&lt;br /&gt;   permute(prefix + str.charAt(i), str.substring(0, i) + str.substring(i + 1, n));&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;The above code will give the following output &lt;br /&gt;&lt;pre class="output"&gt;e&lt;br /&gt;ek&lt;br /&gt;eki&lt;br /&gt;eki&lt;br /&gt;ei&lt;br /&gt;eik&lt;br /&gt;eik&lt;br /&gt;k&lt;br /&gt;ke&lt;br /&gt;kei&lt;br /&gt;kei&lt;br /&gt;ki&lt;br /&gt;kie&lt;br /&gt;kie&lt;br /&gt;i&lt;br /&gt;ie&lt;br /&gt;iek&lt;br /&gt;iek&lt;br /&gt;ik&lt;br /&gt;ike&lt;br /&gt;ike&lt;br /&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;16&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/631254640757075200/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/how-to-find-all-permutations-and-combinations-of-string-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/631254640757075200'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/631254640757075200'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/how-to-find-all-permutations-and-combinations-of-string-in-java.html' title='How to find all Permutations and Combinations of a String'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-529435453847387567</id><published>2015-08-18T23:57:00.000+05:30</published><updated>2015-08-19T00:07:32.576+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Maven'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='pom.xml'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Boot Maven Dependencies to create basic CRUD application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Spring Boot Maven to create basic CRUD application.&lt;/h2&gt;You need to add the following dependencies to the &lt;b&gt;pom.xml&lt;/b&gt; to make the basic CRUD application&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;spring-boot-starter-data-jpa&lt;/li&gt;&lt;li&gt;spring-boot-starter-jdbc&lt;/li&gt;&lt;li&gt;spring-boot-starter-web&lt;/li&gt;&lt;li&gt;jstl&lt;/li&gt;&lt;li&gt;mysql-connector-java&lt;/li&gt;&lt;li&gt;spring-boot-starter-tomcat&lt;/li&gt;&lt;li&gt;tomcat-embed-jasper&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;So your &lt;b&gt;pom.xml&lt;/b&gt; may look like the following&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;pom.xml&lt;/h3&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;&lt;br /&gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;com.ekiras&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;springboot&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br /&gt;    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;name&amp;gt;springboot&amp;lt;/name&amp;gt;&lt;br /&gt;    &amp;lt;description&amp;gt;Basic Springboot CRUD application&amp;lt;/description&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;parent&amp;gt;&lt;br /&gt;        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br /&gt;        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&lt;br /&gt;        &amp;lt;version&amp;gt;1.2.5.RELEASE&amp;lt;/version&amp;gt;&lt;br /&gt;        &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&lt;br /&gt;    &amp;lt;/parent&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;properties&amp;gt;&lt;br /&gt;        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;br /&gt;        &amp;lt;java.version&amp;gt;1.7&amp;lt;/java.version&amp;gt;&lt;br /&gt;    &amp;lt;/properties&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;dependencies&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-jpa&amp;lt;/artifactId&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.apache.tomcat.embed&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;tomcat-embed-jasper&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;8.0.24&amp;lt;/version&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;/dependencies&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;build&amp;gt;&lt;br /&gt;        &amp;lt;plugins&amp;gt;&lt;br /&gt;            &amp;lt;plugin&amp;gt;&lt;br /&gt;                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br /&gt;                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;/plugin&amp;gt;&lt;br /&gt;        &amp;lt;/plugins&amp;gt;&lt;br /&gt;    &amp;lt;/build&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;br /&gt;&lt;/pre&gt;View the full Project on Git hub link below or &lt;a href="http://www.ekiras.com/2015/08/spring-boot-mvc-gradle-sample-crud-project-setup.html"&gt;this blog&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/spring-boot-gradle-mvc"&gt;Download from GitHub &lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Run the code using the following command &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;mvn spring-boot:run&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/529435453847387567/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-sample-maven-dependencies-to-create-basic-crud-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/529435453847387567'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/529435453847387567'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-sample-maven-dependencies-to-create-basic-crud-application.html' title='Spring Boot Maven Dependencies to create basic CRUD application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6814880025652243581</id><published>2015-08-18T02:26:00.000+05:30</published><updated>2015-08-19T00:25:03.924+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='JPA'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Gradle'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Boot Gradle MVC sample CRUD project</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This is a sample Spring Boot Application that uses&amp;nbsp; &lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;JDBC&lt;/li&gt;&lt;li&gt;Mysql&lt;/li&gt;&lt;li&gt;JPA&lt;/li&gt;&lt;li&gt;MVC&lt;/li&gt;&lt;li&gt;Gradle&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Create Basic CRUD for Person Entity with JPA and Mysql&lt;/h2&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/spring-boot-gradle-mvc"&gt;Download from GitHub &lt;/a&gt;&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-ou1HrIqpZZo/VdJL44aQ96I/AAAAAAAAAco/5S4XTp6OBuk/s1600/sb-mvc-1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" class="img-responsive" height="400" src="http://1.bp.blogspot.com/-ou1HrIqpZZo/VdJL44aQ96I/AAAAAAAAAco/5S4XTp6OBuk/s400/sb-mvc-1.png" width="286" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Project Structure&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;h3&gt;build.gradle&lt;/h3&gt;&lt;br /&gt;&lt;h4&gt;&lt;a href="http://www.ekiras.com/2015/08/spring-boot-sample-maven-dependencies-to-create-basic-crud-application.html"&gt;View Maven Dependencies (pom.xml) here.&lt;/a&gt;&lt;/h4&gt;&lt;pre class="brush:java" style="text-align: left;"&gt;buildscript {&lt;br /&gt;    ext {&lt;br /&gt;        springBootVersion = '1.2.5.RELEASE'&lt;br /&gt;    }&lt;br /&gt;    repositories {&lt;br /&gt;        maven { url "http://repo.spring.io/libs-milestone" }&lt;br /&gt;        mavenCentral()&lt;br /&gt;    }&lt;br /&gt;    dependencies {&lt;br /&gt;        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") &lt;br /&gt;        classpath("io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE")&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;apply plugin: 'java'&lt;br /&gt;apply plugin: 'eclipse-wtp'&lt;br /&gt;apply plugin: 'idea'&lt;br /&gt;apply plugin: 'spring-boot' &lt;br /&gt;apply plugin: 'io.spring.dependency-management' &lt;br /&gt;apply plugin: 'war'&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;war {&lt;br /&gt;    baseName = 'springboot'&lt;br /&gt;    version = '0.0.1-SNAPSHOT'&lt;br /&gt;}&lt;br /&gt;sourceCompatibility = 1.7&lt;br /&gt;targetCompatibility = 1.7&lt;br /&gt;&lt;br /&gt;repositories {&lt;br /&gt;    mavenCentral()&lt;br /&gt;    maven { url "http://repo.spring.io/libs-milestone" }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;configurations {&lt;br /&gt;    providedRuntime&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;dependencies {&lt;br /&gt;    compile("org.springframework.boot:spring-boot-starter-data-jpa")&lt;br /&gt;    compile("javax.servlet:jstl:1.2")&lt;br /&gt;    runtime("mysql:mysql-connector-java")&lt;br /&gt;    compile("org.springframework.boot:spring-boot-starter-jdbc")&lt;br /&gt;    compile ("org.springframework.boot:spring-boot-starter-web")&lt;br /&gt;    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")&lt;br /&gt;    providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;eclipse {&lt;br /&gt;    classpath {&lt;br /&gt;         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')&lt;br /&gt;         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;task wrapper(type: Wrapper) {&lt;br /&gt;    gradleVersion = '2.3'&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;AppConfig.java&lt;/h3&gt;&lt;pre class="brush:java" style="text-align: left;"&gt;package com.ekiras.config;&lt;br /&gt;&lt;br /&gt;import org.springframework.context.annotation.Bean;&lt;br /&gt;import org.springframework.context.annotation.Configuration;&lt;br /&gt;import org.springframework.context.annotation.Import;&lt;br /&gt;import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;&lt;br /&gt;import org.springframework.web.servlet.config.annotation.EnableWebMvc;&lt;br /&gt;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;&lt;br /&gt;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;&lt;br /&gt;import org.springframework.web.servlet.view.InternalResourceViewResolver;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 12/7/15.&lt;br /&gt; */&lt;br /&gt;@Configuration&lt;br /&gt;public class AppConfiguration extends WebMvcConfigurerAdapter{&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {&lt;br /&gt;        configurer.enable();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Bean&lt;br /&gt;    public InternalResourceViewResolver viewResolver() {&lt;br /&gt;        InternalResourceViewResolver resolver = new InternalResourceViewResolver();&lt;br /&gt;        resolver.setViewClass(org.springframework.web.servlet.view.JstlView.class);&lt;br /&gt;        resolver.setPrefix("/WEB-INF/views/");&lt;br /&gt;        resolver.setSuffix(".jsp");&lt;br /&gt;        return resolver;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;Person.java&lt;/h3&gt;&lt;pre class="brush:java" style="text-align: left;"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 12/7/15.&lt;br /&gt; */&lt;br /&gt;@Entity&lt;br /&gt;public class Person {&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public String toString(){&lt;br /&gt;        return this.name;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Id&lt;br /&gt;    @GeneratedValue&lt;br /&gt;    @Column(name = "id")&lt;br /&gt;    private Long id;&lt;br /&gt;&lt;br /&gt;    @Column(name = "name")&lt;br /&gt;    private String name;&lt;br /&gt;&lt;br /&gt;    @Column(name = "email", nullable = false, unique = true)&lt;br /&gt;    private String email;&lt;br /&gt;&lt;br /&gt;    @Column(name = "password")&lt;br /&gt;    private String password;&lt;br /&gt;&lt;br /&gt;    @Column(name = "mobile")&lt;br /&gt;    private String mobile;&lt;br /&gt;&lt;br /&gt;    private transient String confirmPassword;&lt;br /&gt;&lt;br /&gt;    // Getters and Setters&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;PersonRepository.java&lt;/h3&gt;&lt;pre class="brush:java" style="text-align: left;"&gt;package com.ekiras.repository;&lt;br /&gt;&lt;br /&gt;import com.ekiras.domain.Person;&lt;br /&gt;import org.springframework.data.repository.CrudRepository;&lt;br /&gt;import org.springframework.stereotype.Repository;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 14/7/15.&lt;br /&gt; */&lt;br /&gt;@Repository&lt;br /&gt;public interface PersonRepository extends CrudRepository&amp;lt;Person,Long&amp;gt; {&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;PersonService.java&lt;/h3&gt;&lt;pre class="brush:java" style="text-align: left;"&gt;package com.ekiras.service;&lt;br /&gt;&lt;br /&gt;import com.ekiras.dao.PersonDAO;&lt;br /&gt;import com.ekiras.domain.Person;&lt;br /&gt;import com.ekiras.repository.PersonRepository;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Service;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 13/7/15.&lt;br /&gt; */&lt;br /&gt;@Service&lt;br /&gt;public class PersonService {&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    private PersonDAO personDAO;&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    private PersonRepository personRepository;&lt;br /&gt;&lt;br /&gt;    public Object findAll(){&lt;br /&gt;        return personRepository.findAll();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public Person findById(Long id){&lt;br /&gt;        return personRepository.findOne(id);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public Person save(Person person){&lt;br /&gt;        return personRepository.save(person);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;PersonController.java&lt;/h3&gt;&lt;pre class="brush:java"&gt;package com.ekiras.controller;&lt;br /&gt;&lt;br /&gt;import com.ekiras.domain.Person;&lt;br /&gt;import com.ekiras.service.PersonService;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Controller;&lt;br /&gt;import org.springframework.ui.Model;&lt;br /&gt;import org.springframework.web.bind.annotation.PathVariable;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 12/7/15.&lt;br /&gt; */&lt;br /&gt;&lt;br /&gt;@Controller&lt;br /&gt;@RequestMapping(value = {"","/person"})&lt;br /&gt;public class PersonController {&lt;br /&gt;&lt;br /&gt;    @Autowired&lt;br /&gt;    private PersonService personService;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = {"/","index"})&lt;br /&gt;    public String index(Model model){&lt;br /&gt;        System.out.println(personService.findAll());&lt;br /&gt;        model.addAttribute("persons", personService.findAll());&lt;br /&gt;        return "person/index";&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = "create")&lt;br /&gt;    public String create(){&lt;br /&gt;        return "person/create";&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = "save", method = RequestMethod.POST)&lt;br /&gt;    public String save(Person person){&lt;br /&gt;        personService.save(person);&lt;br /&gt;        return "redirect:index";&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = "edit/{id}")&lt;br /&gt;    public String edit(@PathVariable Long id, Model model){&lt;br /&gt;        model.addAttribute("person",personService.findById(id));&lt;br /&gt;        return "person/edit";&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = "update",method = RequestMethod.POST)&lt;br /&gt;    public String update(Person person){&lt;br /&gt;        personService.save(person);&lt;br /&gt;        return "redirect:index";&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    @RequestMapping(value = "/test")&lt;br /&gt;    public String test(){&lt;br /&gt;        return " hello world";&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;With all the above configurations your code is ready to do the CRUD on Person Entity.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Run the following command to run the project.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;gradle bootRun&lt;/pre&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-GRoVCNoOSgU/VdJM-gGJoFI/AAAAAAAAAc0/xpRULSiV9jQ/s1600/sb-mvc-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="305" src="http://1.bp.blogspot.com/-GRoVCNoOSgU/VdJM-gGJoFI/AAAAAAAAAc0/xpRULSiV9jQ/s640/sb-mvc-2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-kLu0Of5zc5U/VdJNa5yRlJI/AAAAAAAAAc8/1yNVWKOrcNo/s1600/sb-mvc-3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="234" src="http://3.bp.blogspot.com/-kLu0Of5zc5U/VdJNa5yRlJI/AAAAAAAAAc8/1yNVWKOrcNo/s640/sb-mvc-3.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/spring-boot-gradle-mvc"&gt;Download from GitHub &lt;/a&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6814880025652243581/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-mvc-gradle-sample-crud-project-setup.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6814880025652243581'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6814880025652243581'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-mvc-gradle-sample-crud-project-setup.html' title='Spring Boot Gradle MVC sample CRUD project'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-ou1HrIqpZZo/VdJL44aQ96I/AAAAAAAAAco/5S4XTp6OBuk/s72-c/sb-mvc-1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-543875221505228046</id><published>2015-08-10T10:42:00.003+05:30</published><updated>2015-08-10T10:42:47.668+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reviews'/><title type='text'>Get free Airtel 4G sim by tweeting #GetAirtel4G</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;"&gt;&lt;div dir="ltr" style="text-align: left;"&gt;&lt;h2 style="text-align: left;"&gt;Wow! you can get an &lt;a href="http://www.airtel.in/4G" target="_blank"&gt;Airtel 4G Sim&lt;/a&gt;&amp;nbsp;totally free. Here is how?&lt;/h2&gt;If you are an Airtel user and you have the required 4G handset with you, you just have to tweet #GetAirtel4G to get a 4G sim delivered to your home for &lt;strong&gt;TOTALLY FREE&lt;/strong&gt;.&lt;br /&gt;&amp;nbsp; &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.airtel.in/4g/images/what-is-4g-lte.jpg" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img src="http://www.airtel.in/4g/images/what-is-4g-lte.jpg" style="height: 387px; width: 640px;" /&gt;&lt;/a&gt;&lt;/div&gt;&amp;nbsp;  &lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Steps to get your Airtel 4g SIM&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Tweet with &lt;a href="https://twitter.com/hashtag/GetAirtel4G?src=hash"&gt;#GetAirtel4G&lt;/a&gt; on twitter,&amp;nbsp;&lt;/li&gt;&lt;li&gt;Get the reply from Official Airtel&amp;nbsp;India handle &lt;a href="https://twitter.com/airtelindia"&gt;@AirtelIndia&lt;/a&gt; to fill details&lt;/li&gt;&lt;li&gt;Fill your details and address where you want your sim to be delivered.&lt;/li&gt;&lt;li&gt;You are done.&lt;/li&gt;&lt;/ul&gt;You will get your Airtel 4g Sim within hours to a day or two at max. &lt;strong&gt;I got my sim in just 4 hours.&lt;/strong&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Why should I go for 4G services from Airtel&lt;/h3&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;It is much faster than 3G services&lt;/li&gt;&lt;li&gt;It does not cost your anything&lt;/li&gt;&lt;li&gt;You get super fast speed for a great browsing experience&lt;/li&gt;&lt;li&gt;You can always flaunt your 4G network among your group.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;ol&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Lets Take a look what is so special about Airtel 4g.&lt;/h2&gt;India's top telecom service provider Bharti Airtel on Thursday said it has commercially launched its fourth generation (4G) communications services in 296 towns across the country.  &lt;br /&gt;&lt;ul&gt;&lt;li&gt;Experience the high speed wireless broadband and you can get super high speed for&amp;nbsp;  &lt;ul&gt;&lt;li&gt;streaming videos,&lt;/li&gt;&lt;li&gt;super fast uploading and downloading.&lt;/li&gt;&lt;li&gt;Awesome surfing experience.&lt;/li&gt;&lt;li&gt;Uninterrupted movies and music&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The company is offering 4G at 3G data prices with packs starting at Rs 25. In addition, with every 4G SIM swap&lt;/li&gt;&lt;li&gt;&lt;strong&gt;You can get your 4G sim by just tweeting on twitter and filling your details.&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;It &lt;strong&gt;does not cost you anything to you.&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;a href="http://www.airtel.in/4g/index#!plans-and-devices/for-home"&gt;Get the&amp;nbsp;'Infinity Plans' starting at Rs 999. See the best plans on airtel site.&lt;/a&gt;&lt;br /&gt;To opt for Airtel 4G, customers have to switch to a 4G SIM.&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &lt;br /&gt;&lt;div&gt;Following are a few tweets from Twitter for the speed test as posted by other users on Twitter&lt;/div&gt;So why wait? go and grab a 4G sim which is just a tweet away. you got my 4G review right? Forget not to tweet with a hash tag #GetAirtel4G.&lt;br /&gt;&lt;br /&gt;With all this said, &lt;strong&gt;I would&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;strongly &lt;/strong&gt;&lt;strong&gt;recommend you to be an early adopter of the 4g services provided by Airtel, since a great internet surfing experience is all that we want these days&amp;nbsp;&lt;/strong&gt;&lt;/div&gt;&lt;img class="bm-blog-post" style="padding: 0;border: 0;" src="https://www.blogmint.com/frontendUtil/openPage?page=blog-post-read&amp;oId=f7880240b4ff4711bd7dcb3fc4b38f3c&amp;uId=3e88d804df6c4572abbf5436460f8a6f&amp;count=1&amp;image=one-pixel.png"/&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/543875221505228046/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/get-free-airtel-4g-sim-by-tweeting.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/543875221505228046'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/543875221505228046'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/get-free-airtel-4g-sim-by-tweeting.html' title='Get free Airtel 4G sim by tweeting #GetAirtel4G'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2572964030833040466</id><published>2015-08-08T00:03:00.001+05:30</published><updated>2015-08-08T00:04:53.288+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Boot Making CLI Application using Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can make the cli application without writing any configurations or xml's that you needed to do in traditional spring framework.&lt;br /&gt;&lt;b&gt;Spring boot automatically adds the boiler plate code to the application that may look like this&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=""&gt;// import org.springframework.web.bind.annotation.Controller&lt;br /&gt;// other imports ...&lt;br /&gt;// @Grab("org.springframework.boot:spring-boot-web-starter:0.5.0")&lt;br /&gt;// @EnableAutoConfiguration&lt;br /&gt;&lt;br /&gt;@RestController&lt;br /&gt;@RequestMapping("/")&lt;br /&gt;class Hello {&lt;br /&gt;&lt;br /&gt; @RequestMapping(value="/hello")&lt;br /&gt;  public String index(){&lt;br /&gt;    return "&amp;lt;h1&amp;gt;Hello World !! Today's date is " + new Date() + "&amp;lt;/h1&amp;gt;";&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;// public static void main(String[] args) {&lt;br /&gt;// SpringApplication.run(Example.class, args);&lt;br /&gt;// }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;The following code is a self sufficient code to run in a servlet container.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Hello.java&lt;/h3&gt;&lt;pre class="brush:java"&gt;import java.util.Date;&lt;br /&gt;&lt;br /&gt;@RestController&lt;br /&gt;@RequestMapping(value="/")&lt;br /&gt;class Hello{&lt;br /&gt; &lt;br /&gt;  @RequestMapping(value="/hello")&lt;br /&gt;  public String index(){&lt;br /&gt;    return "&amp;lt;h1&amp;gt;Hello World !! Today's date is " + new Date() + "&amp;lt;/h1&amp;gt;";&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;Run the above code using the command &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;spring run Hello.java&lt;/pre&gt;&lt;br /&gt;You will be able to see the result in the browser as shown in the image below &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-YrEY_DjnK64/VcTv4us0nHI/AAAAAAAAAcU/gOf0RwLxJdY/s1600/CLI1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="345" src="http://4.bp.blogspot.com/-YrEY_DjnK64/VcTv4us0nHI/AAAAAAAAAcU/gOf0RwLxJdY/s640/CLI1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-fbdtcVNBTPI/VcTvnYRZT7I/AAAAAAAAAcE/oRRfJlYgNjM/s1600/cli-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="184" src="http://1.bp.blogspot.com/-fbdtcVNBTPI/VcTvnYRZT7I/AAAAAAAAAcE/oRRfJlYgNjM/s640/cli-2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2572964030833040466/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-making-cli-application-using-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2572964030833040466'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2572964030833040466'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-making-cli-application-using-java.html' title='Spring Boot Making CLI Application using Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-YrEY_DjnK64/VcTv4us0nHI/AAAAAAAAAcU/gOf0RwLxJdY/s72-c/CLI1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4956196085565580818</id><published>2015-08-07T23:56:00.000+05:30</published><updated>2015-08-07T23:57:52.002+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Boot Making CLI Application using Groovy</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can make the cli application without writing any configurations or xml's that you needed to do in traditional spring framework.&lt;br /&gt;&lt;b&gt;Spring boot automatically adds the boiler plate code to the application that may look like this&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class=""&gt;// import org.springframework.web.bind.annotation.Controller&lt;br /&gt;// other imports ...&lt;br /&gt;// @Grab("org.springframework.boot:spring-boot-web-starter:0.5.0")&lt;br /&gt;// @EnableAutoConfiguration&lt;br /&gt;&lt;br /&gt;@RestController&lt;br /&gt;@RequestMapping("/")&lt;br /&gt;class Hello {&lt;br /&gt;&lt;br /&gt; @RequestMapping(value="/hello")&lt;br /&gt;  public String index(){&lt;br /&gt;    return "&amp;lt;h1&amp;gt;Hello World !! Today's date is " + new Date() + "&amp;lt;/h1&amp;gt;";&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;// public static void main(String[] args) {&lt;br /&gt;// SpringApplication.run(Example.class, args);&lt;br /&gt;// }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;The following code is a self sufficient code to run in a servlet container.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Hello.groovy&lt;/h3&gt;&lt;pre class="brush:java"&gt;import java.util.Date;&lt;br /&gt;&lt;br /&gt;@RestController&lt;br /&gt;@RequestMapping(value="/")&lt;br /&gt;class Hello{&lt;br /&gt; &lt;br /&gt;  @RequestMapping(value="/hello")&lt;br /&gt;  public String index(){&lt;br /&gt;    return "&amp;lt;h1&amp;gt;Hello World !! Today's date is " + new Date() + "&amp;lt;/h1&amp;gt;";&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;Run the above code using the command &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;spring run Hello.groovy&lt;/pre&gt;&lt;br /&gt;You will be able to see the result in the browser as shown in the image below &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-YrEY_DjnK64/VcTv4us0nHI/AAAAAAAAAcU/gOf0RwLxJdY/s1600/CLI1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="345" src="http://4.bp.blogspot.com/-YrEY_DjnK64/VcTv4us0nHI/AAAAAAAAAcU/gOf0RwLxJdY/s640/CLI1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-fbdtcVNBTPI/VcTvnYRZT7I/AAAAAAAAAcE/oRRfJlYgNjM/s1600/cli-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="184" src="http://1.bp.blogspot.com/-fbdtcVNBTPI/VcTvnYRZT7I/AAAAAAAAAcE/oRRfJlYgNjM/s640/cli-2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4956196085565580818/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-making-cli-application-using-groovy.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4956196085565580818'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4956196085565580818'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/spring-boot-making-cli-application-using-groovy.html' title='Spring Boot Making CLI Application using Groovy'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-YrEY_DjnK64/VcTv4us0nHI/AAAAAAAAAcU/gOf0RwLxJdY/s72-c/CLI1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6466135638529589286</id><published>2015-08-07T04:01:00.002+05:30</published><updated>2015-08-07T12:06:24.425+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : @Table Annotation </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;@Table Annotation is an annotation that is used to give the table level information. It can be uesd to specify the following&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Table &lt;b&gt;name&lt;/b&gt;&amp;nbsp;(optional,default ="")- to set the name of the table in database&lt;/li&gt;&lt;li&gt;Table &lt;b&gt;schema&lt;/b&gt;&amp;nbsp;(optional,default ="")- to set the schema of the table in database&lt;/li&gt;&lt;li&gt;Table &lt;b&gt;catalog&lt;/b&gt;&amp;nbsp;(optional,default ="")&amp;nbsp;-to set the catalog of the table&lt;/li&gt;&lt;li&gt;Table &lt;b&gt;Constraints&lt;/b&gt;&amp;nbsp;(optional,default = [])&amp;nbsp;to set the constraints on the table.&lt;/li&gt;&lt;/ul&gt;It belongs to the package &lt;b&gt;javax.persistence.Table&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[1,2,3,4,5]"&gt;@Table(&lt;br /&gt;name="person",&lt;br /&gt;schema="ekiras",&lt;br /&gt;uniqueConstraints = {@UniqueConstraint(columnNames = {"id","email"})}&lt;br /&gt;)&lt;br /&gt;public class Person {&lt;br /&gt;  private Long id;&lt;br /&gt;  private String name;&lt;br /&gt;  private String email;&lt;br /&gt;  // code&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;If you do not define the &lt;b&gt;name&lt;/b&gt;&amp;nbsp;property of the&amp;nbsp;&lt;b&gt;@Table&lt;/b&gt; annotation then the hibernate would have created table by name &lt;b&gt;Person&amp;nbsp;&lt;/b&gt;but now it will create the table by name &lt;b&gt;person&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;The &lt;b&gt;person&lt;/b&gt;&amp;nbsp;table will have the unique constraints on the columns &lt;b&gt;&amp;nbsp;id&lt;/b&gt; and &lt;b&gt;email&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;The &lt;b&gt;person&lt;/b&gt; table &amp;nbsp;will belong to the schema "&lt;b&gt;ekiras"&lt;/b&gt;.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6466135638529589286/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/hibernate-table-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6466135638529589286'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6466135638529589286'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/hibernate-table-annotation.html' title='Hibernate : @Table Annotation '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-652555111510587110</id><published>2015-08-03T13:16:00.000+05:30</published><updated>2015-08-04T01:36:24.294+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Exceptions'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Exception in thread java.util.ConcurrentModificationException</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;ConcurrentModificationException&lt;/b&gt;&amp;nbsp;occurs when the you you try to modify the collection you are using or iterating.&lt;/li&gt;&lt;li&gt;It can be prevented if you create a new object of that collection and do operations on that and then assign it back to the original object.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;java.util.ConcurrentModificationException&lt;/h2&gt;In the following code we will be iterating on the list and trying to remove the null objects from the list.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlight:[11]"&gt;import java.util.*;&lt;br /&gt;public class Demo {&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  // create an array of string objs&lt;br /&gt;  String init[] = {&lt;br /&gt;   "One", "Two", null, null, "One", "Two", null, "Three", "Four", "Two", null&lt;br /&gt;  };&lt;br /&gt;  // create two lists&lt;br /&gt;  List&amp;lt;String&amp;gt; list = new ArrayList(Arrays.asList(init));&lt;br /&gt;  for (String str: list) {&lt;br /&gt;   if (str == null) list.remove(str);&lt;br /&gt;  }&lt;br /&gt;  System.out.println("List value: " + list);&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;The above code will throw the following Exception &lt;br /&gt;&lt;pre class="output"&gt;Exception in thread "main" java.util.ConcurrentModificationException&lt;br /&gt; at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)&lt;br /&gt; at java.util.ArrayList$Itr.next(ArrayList.java:831)&lt;br /&gt; at Demo.main(Demo.java:10)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The reason for this is that &lt;b&gt;you are trying to modify the list you are iterating, &lt;/b&gt;or on a broader term &lt;b&gt;&amp;nbsp;you are trying to modifying a collection you are using.&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;So to remove this kind of exception can be removed by taking another local list( or any collection you are using) to do operations and then assign it back to the list( or collection).&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java;highlistL:[11]"&gt;import java.util.*;&lt;br /&gt;public class Demo {&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  // create an array of string objs&lt;br /&gt;  String init[] = {&lt;br /&gt;   "One", "Two", null, null, "One", "Two", null, "Three", "Four", "Two", null&lt;br /&gt;  };&lt;br /&gt;  // create two lists&lt;br /&gt;  List&amp;lt;String&amp;gt; list = new ArrayList(Arrays.asList(init));&lt;br /&gt;  List&amp;lt;String&amp;gt; temp = new ArrayList&amp;lt;String&amp;gt;();&lt;br /&gt;  for (String str: list) {&lt;br /&gt;   if (str != null) temp.add(str);&lt;br /&gt;  }&lt;br /&gt;  list = temp;&lt;br /&gt;  System.out.println("List value: " + list);&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;The above code will give the following output&lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;List value: [One, Two, One, Two, Three, Four, Two]&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/652555111510587110/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/exception-in-thread-java-util-concurrent-modification-exception.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/652555111510587110'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/652555111510587110'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/exception-in-thread-java-util-concurrent-modification-exception.html' title='Exception in thread java.util.ConcurrentModificationException'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4094104958835225033</id><published>2015-08-03T11:47:00.000+05:30</published><updated>2015-08-03T12:42:45.075+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to remove all nulls from a Collection in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to remove nulls from a List in Java&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;One way is to iterate the objects from the Collection ( like List, Array, Map etc) and remove null objects.&lt;/li&gt;&lt;li&gt;Remove a particular object from List, Array or Map by searching the object and then removing it.&lt;/li&gt;&lt;li&gt;Using the &lt;b&gt;Collections.singleton(T o)&lt;/b&gt;&amp;nbsp;method from the &lt;b&gt;java.util&lt;/b&gt;&amp;nbsp;package and then it will remove all the objects from the collection.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Removing Objects in Traditional Way.&lt;/h2&gt;We will be taking the following list of String for all our Examples &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;String init[] = { "One", "Two", "One", "Three", "One", "Two", "Three","Four", "Two" };&lt;/pre&gt;&lt;br /&gt;Here we will remove the objects by finding it from the Collection.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;List list = new ArrayList(Arrays.asList(init));&lt;br /&gt;list.remove("One");&lt;br /&gt;System.out.println("List value: "+list);&lt;br /&gt;list.remove("Two");&lt;br /&gt;System.out.println("List value: "+list);&lt;br /&gt;list.remove("Three");&lt;br /&gt;System.out.println("List value: "+list);&lt;br /&gt;&lt;/pre&gt;Output of the above program will be as follows. &lt;br /&gt;&lt;pre class="output"&gt;List value: [Two, One, Three, One, Two, Three, Four, Two]&lt;br /&gt;List value: [One, Three, One, Two, Three, Four, Two]&lt;br /&gt;List value: [One, One, Two, Three, Four, Two]&lt;/pre&gt;&lt;h2&gt;Removing objects from Collection using Collections.singleton() method&lt;/h2&gt;&lt;pre class="brush:java"&gt;String init[] = { "One", "Two", "One", "Three", "One", "Two", "Three","Four", "Two" };&lt;/pre&gt;&lt;br /&gt;Here we will remove the objects by finding it from the Collection.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;List list = new ArrayList(Arrays.asList(init));&lt;br /&gt;list.removeAll(Collections.singleton("One"));&lt;br /&gt;System.out.println("List value: "+list);&lt;br /&gt;list.removeAll(Collections.singleton("Two"));&lt;br /&gt;System.out.println("List value: "+list);&lt;br /&gt;list.removeAll(Collections.singleton("Three"));&lt;br /&gt;System.out.println("List value: "+list);&lt;br /&gt;&lt;/pre&gt;Output of the above program will be as follows. &lt;br /&gt;&lt;pre class="output"&gt;List value: [Two, Three, Two, Three, Four, Two]&lt;br /&gt;List value: [Three, Three, Four]&lt;br /&gt;List value: [Four]&lt;br /&gt;&lt;/pre&gt;&lt;h2&gt;Removing nulls from the Collection List&lt;/h2&gt;We will be using the following list for the following programs.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;String init[] = {  "One", "Two", null, "One", "Three",null, "One", "Two",null, "Three","Four", "Two", null }; &lt;/pre&gt;&lt;pre class="brush:java"&gt;import java.util.*;&lt;br /&gt;public class Demo {&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  // create an array of string objs&lt;br /&gt;  String init[] = {&lt;br /&gt;   "One", "Two", null, "One", "Three", null, "One", "Two", null, "Three", "Four", "Two", null&lt;br /&gt;  };&lt;br /&gt;  // create two lists&lt;br /&gt;  List &amp;lt; String &amp;gt; list = new ArrayList(Arrays.asList(init));&lt;br /&gt;  List &amp;lt; String &amp;gt; listNew = new ArrayList &amp;lt; String &amp;gt; ();&lt;br /&gt;  for (String str: list) {&lt;br /&gt;   if (str != null) listNew.add(str);&lt;br /&gt;  }&lt;br /&gt;  System.out.println("List value: " + listNew);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Output of the above program will be as follows. &lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;List value: [One, Two, One, Three, One, Two, Three, Four, Two]&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The above code may not very efficient as it creates two list objects. &lt;br /&gt;&lt;h2&gt;Remove all null values using Collectiosn.singleton()&lt;/h2&gt;&lt;pre class="brush:java"&gt;import java.util.*;&lt;br /&gt;public class Demo {&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  // create an array of string objs&lt;br /&gt;  String init[] = {&lt;br /&gt;   "One", "Two", null, "One", "Three", null, "One", "Two", null, "Three", "Four", "Two", null&lt;br /&gt;  };&lt;br /&gt;  // create two lists&lt;br /&gt;  List &amp;lt; String &amp;gt; list = new ArrayList(Arrays.asList(init));&lt;br /&gt;  list.removeAll(Collections.singleton(null));&lt;br /&gt;  System.out.println("List value: " + list);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Output of the above program will be as follows. &lt;br /&gt;&lt;br /&gt;&lt;pre class="output"&gt;List value: [One, Two, One, Three, One, Two, Three, Four, Two]&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4094104958835225033/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/08/how-to-remove-all-nulls-from-collection-in.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4094104958835225033'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4094104958835225033'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/08/how-to-remove-all-nulls-from-collection-in.html' title='How to remove all nulls from a Collection in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4494566833353601122</id><published>2015-07-29T02:33:00.002+05:30</published><updated>2015-11-19T16:51:25.163+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Config'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SpringBoot'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring Boot Reading Properties File</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can use&amp;nbsp;&lt;complete id="goog_403613465"&gt;&lt;b&gt;@PropertySource&lt;/b&gt;&amp;nbsp;annotation to load the properties file from classpath.&lt;/complete&gt;&lt;/li&gt;&lt;li&gt;&lt;complete&gt;Keep your properties file under the &lt;b&gt;resources&lt;/b&gt; folder.&lt;/complete&gt;&lt;/li&gt;&lt;li&gt;&lt;complete&gt;Use&amp;nbsp;&lt;b&gt;@Value&lt;/b&gt;&amp;nbsp;annotation to load the values from property file with &lt;b&gt;"${key}"&lt;/b&gt;&amp;nbsp;as key.&lt;/complete&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Load Properties file from classpath in Spring boot.&lt;/h2&gt;Your properties file look like following.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;spring.data1=sampleData1&lt;br /&gt;spring.data2=sampleData2&lt;br /&gt;spring.data3=sampleData3&lt;/pre&gt;&lt;br /&gt;You can load the properties using the following two approaches&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;In this approach you can specify a prefix with which your config starts in the properties file&lt;br /&gt;&lt;pre class="brush:java"&gt;@Component&lt;br /&gt;@PropertySource("sample.properties")&lt;br /&gt;@ConfigurationProperties(prefix = "spring")&lt;br /&gt;public class SampleConfig {&lt;br /&gt;&lt;br /&gt;    private String data1;&lt;br /&gt;    private String data2;&lt;br /&gt;    private String data3;&lt;br /&gt;   &lt;br /&gt;    // GETTERS and SETTERS&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;In this approach you need to specify the whole key to read the value from the properties file.&lt;br /&gt;&lt;pre class="brush:java"&gt;@Component&lt;br /&gt;@PropertySource(value = "sample.properties")&lt;br /&gt;public class SampleConfig {&lt;br /&gt;&lt;br /&gt;    @Value("${spring.data1}")&lt;br /&gt;    private String data1;&lt;br /&gt;&lt;br /&gt;    @Value("${spring.data2}")&lt;br /&gt;    private String data2;&lt;br /&gt;&lt;br /&gt;    @Value("${spring.data3}")&lt;br /&gt;    private String data3;&lt;br /&gt;&lt;br /&gt;    // GETTERS and SETTERS&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div class="alert alert-info"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If your properties file is under &lt;b&gt;resources&lt;/b&gt; folder, then you so not need to use &lt;b&gt;@PropertySource&lt;/b&gt; annotation.&lt;/li&gt;&lt;li&gt;To read the file and assign value you need to use&amp;nbsp;&lt;b&gt;${}&lt;/b&gt;&amp;nbsp;delimiter. Without this your values will not be assigned to the class property.&lt;/li&gt;&lt;li&gt;&lt;b&gt;These values cannot be assigned to the static fields.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Both of the above methods can be used and can be autowired to get the values from the properties file corresponding to the keys. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4494566833353601122/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/07/spring-boot-reading-properties-file.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4494566833353601122'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4494566833353601122'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/07/spring-boot-reading-properties-file.html' title='Spring Boot Reading Properties File'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8003043509218087301</id><published>2015-07-28T21:40:00.002+05:30</published><updated>2015-07-29T20:35:09.757+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><category scheme='http://www.blogger.com/atom/ns#' term='ngRoute'/><title type='text'>Angularjs RouteParams with ngRoute</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You should pass the params separated by &lt;b&gt;"/"&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;You can pass the params to the controller and pass them to the templates or apply logic.&lt;/li&gt;&lt;li&gt;You need to add $routeParams input to your controller function to get these params.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to pass Params from one state to another in AngularJs using ngRoute.&lt;/h2&gt;You need to add the route params along with the url e.g you can send the params as follows &lt;br /&gt;&lt;br /&gt;&lt;pre&gt; #url/param1/param2&lt;/pre&gt;&lt;br /&gt;&lt;div class="well"&gt;&lt;iframe allowfullscren="allowfullscren" frameborder="0" src="http://embed.plnkr.co/TgE7SzhC90o9x53wXm0M/index.html" style="height: 450px; width: 100%;"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;This is how you can update your &lt;b&gt;$routeProvider&lt;/b&gt; to use these route params. &lt;br /&gt; &lt;div class="well"&gt;&lt;iframe allowfullscren="allowfullscren" frameborder="0" src="http://embed.plnkr.co/TgE7SzhC90o9x53wXm0M/script.js" style="height: 450px; width: 100%;"&gt;&lt;/iframe&gt;&lt;/div&gt;Finally, access the params in the controller and pass them to the template.&lt;br /&gt;&lt;div class="well"&gt;&lt;iframe allowfullscren="allowfullscren" frameborder="0" src="http://embed.plnkr.co/TgE7SzhC90o9x53wXm0M/template.html" style="height: 100px; width: 100%;"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br/&gt; Putting everything together the code will work as shown in the plunk below. &lt;div class="well"&gt;&lt;iframe allowfullscren="allowfullscren" frameborder="0" src="http://embed.plnkr.co/TgE7SzhC90o9x53wXm0M/" style="height: 400px; width: 100%;background:#ffffff"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br/&gt;   &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8003043509218087301/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/07/angularjs-routeparams-with-ngroute.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8003043509218087301'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8003043509218087301'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/07/angularjs-routeparams-with-ngroute.html' title='Angularjs RouteParams with ngRoute'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6608671852281201317</id><published>2015-07-28T20:31:00.002+05:30</published><updated>2015-07-28T20:33:26.128+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Environment'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Get Current Environment in Grails </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;How to create custom Environments in GRAILS.&lt;/h2&gt;This is how you can specify the environments in your grails application. Below we have made five environments.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;production&lt;/li&gt;&lt;li&gt;uat (custom)&lt;/li&gt;&lt;li&gt;qa (custom)&lt;/li&gt;&lt;li&gt;development&lt;/li&gt;&lt;li&gt;test&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;environments {&lt;br /&gt;    production {&lt;br /&gt;        grails.serverURL = "http://www.ekiras.com/"&lt;br /&gt;    }&lt;br /&gt;    uat {&lt;br /&gt;        grails.serverURL = "http://uat.ekiras.com:8080/"&lt;br /&gt;    }&lt;br /&gt;    qa {&lt;br /&gt;        grails.serverURL = "http://qa.ekiras.com:8080/"&lt;br /&gt;    }&lt;br /&gt;    development {&lt;br /&gt;        grails.serverURL = "http://localhost:8080/${appName}"&lt;br /&gt;    }&lt;br /&gt;    test {&lt;br /&gt;        grails.serverURL = "http://localhost:8080/${appName}"&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;b&gt;There are Five predefined environments in grails.&lt;/b&gt;&lt;/h3&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;APPLICATION&lt;/li&gt;&lt;li&gt;CUSTOM&lt;/li&gt;&lt;li&gt;DEVELOPMENT&lt;/li&gt;&lt;li&gt;PRODUCTION&lt;/li&gt;&lt;li&gt;TEST&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;How to get Execute a particular Environment in GRAILS&lt;/h2&gt;&lt;div&gt;To run a particular environment in grails you can do the following&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush:java"&gt;grails -Denv=qa -Dserver.port=8080 run-app&lt;/pre&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;How to get Current Environment in Grails Controller&lt;/h2&gt;You can get current environment in grails as follows&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;Environment.current&lt;/pre&gt;&lt;br /&gt;The above will give either of the above mentioned &lt;b&gt;grails environment.&lt;/b&gt;&amp;nbsp;To get the name of the&lt;br /&gt;environment you can do the following&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;Environment.current.name&lt;/pre&gt;&lt;br /&gt;and you can do environment specific tasks as follows &lt;br /&gt;&lt;br /&gt;&lt;pre&gt;switch(Environment.current.name){&lt;br /&gt;            case "development":&lt;br /&gt;                //do your stuff 1&lt;br /&gt;                break;&lt;br /&gt;            case "test":&lt;br /&gt;                //do your stuff 2&lt;br /&gt;                break;&lt;br /&gt;            case "production":&lt;br /&gt;                //do your stuff 3&lt;br /&gt;                break;&lt;br /&gt;            case "qa":  // for custom environment : qa&lt;br /&gt;                //todo:&lt;br /&gt;                break;&lt;br /&gt;            case "uat":  // for custom environment : uat&lt;br /&gt;                //todo:&lt;br /&gt;                break;&lt;br /&gt;        }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;How to get Current Environment in Grails View i.e gsp's&lt;/h2&gt;&lt;pre class="brush:java"&gt;&amp;lt;g:if env="development"&amp;gt;&lt;br /&gt;    We are in Development Mode&lt;br /&gt;&amp;lt;/g:if&amp;gt;&lt;br /&gt;&amp;lt;g:if env="production"&amp;gt;&lt;br /&gt;    We are in Production Mode&lt;br /&gt;&amp;lt;/g:if&amp;gt;&lt;br /&gt;&amp;lt;g:if env="test"&amp;gt;&lt;br /&gt;    We are in Test Mode&lt;br /&gt;&amp;lt;/g:if&amp;gt;&lt;br /&gt;&amp;lt;g:if env="qa"&amp;gt;&lt;br /&gt;    We are in Test Mode&lt;br /&gt;&amp;lt;/g:if&amp;gt;&lt;br /&gt;&amp;lt;g:if env="uat"&amp;gt;&lt;br /&gt;    We are in Test Mode&lt;br /&gt;&amp;lt;/g:if&amp;gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6608671852281201317/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/07/how-to-get-current-environment-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6608671852281201317'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6608671852281201317'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/07/how-to-get-current-environment-in-grails.html' title='Get Current Environment in Grails '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2790097274492851039</id><published>2015-07-22T00:00:00.000+05:30</published><updated>2015-07-22T09:50:19.735+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Exceptions'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Exception Handling'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Spring MVC handle Exceptions in Controller using @ExceptionHandler</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can handle all types of runtime exceptions and custom exceptions using&amp;nbsp;&lt;b&gt;@ExceptionHandler&lt;/b&gt;&amp;nbsp;annotation.&amp;nbsp;&lt;/li&gt;&lt;li&gt;You just need to define the class to the annotation to handle exceptions of that class.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Spring MVC handle Exceptions in Controller&lt;/h2&gt;Here we have a simple Spring MVC application with the following.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;HomeController wih three actions&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;throw1&lt;/b&gt; - throws Custom exception&lt;/li&gt;&lt;li&gt;&lt;b&gt;throw2&lt;/b&gt; - throws Custom exception&lt;/li&gt;&lt;li&gt;&lt;b&gt;throw3&lt;/b&gt; - throws Runtime exception&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Home Controller&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java, highlight:[40,46,51,57,63]"&gt;package com.ekiras.controller;&lt;br /&gt;&lt;br /&gt;import java.text.DateFormat;&lt;br /&gt;import java.util.Date;&lt;br /&gt;import java.util.Locale;&lt;br /&gt;&lt;br /&gt;import org.slf4j.Logger;&lt;br /&gt;import org.slf4j.LoggerFactory;&lt;br /&gt;import org.springframework.stereotype.Controller;&lt;br /&gt;import org.springframework.ui.Model;&lt;br /&gt;import org.springframework.web.bind.annotation.ExceptionHandler;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMethod;&lt;br /&gt;import org.springframework.web.bind.annotation.ResponseBody;&lt;br /&gt;&lt;br /&gt;import com.ekiras.exception.MyException;&lt;br /&gt;import com.ekiras.exception.MyGlobalException;&lt;br /&gt;&lt;br /&gt;@Controller&lt;br /&gt;public class HomeController {&lt;br /&gt; &lt;br /&gt; private static final Logger logger = LoggerFactory.getLogger(HomeController.class);&lt;br /&gt; &lt;br /&gt; @RequestMapping(value = "/", method = RequestMethod.GET)&lt;br /&gt; public String home(Locale locale, Model model) {&lt;br /&gt;  logger.info("Welcome home! The client locale is {}.", locale);&lt;br /&gt;  &lt;br /&gt;  Date date = new Date();&lt;br /&gt;  DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);&lt;br /&gt;  &lt;br /&gt;  String formattedDate = dateFormat.format(date);&lt;br /&gt;  &lt;br /&gt;  model.addAttribute("serverTime", formattedDate );&lt;br /&gt;  &lt;br /&gt;  return "home";&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @RequestMapping(value="/throw1")&lt;br /&gt; public String throw1(){&lt;br /&gt;  throw new MyException();&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;&lt;br /&gt; @RequestMapping(value="/throw2")&lt;br /&gt; public String throw2(){&lt;br /&gt;  throw new MyGlobalException();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @RequestMapping(value="/throw3")&lt;br /&gt; public String throw3(){&lt;br /&gt;  throw new RuntimeException();&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;&lt;br /&gt; &lt;br /&gt; @ResponseBody&lt;br /&gt; @ExceptionHandler(MyException.class)&lt;br /&gt; public String myException(MyException exception){&lt;br /&gt;  return "exception caught message="+ exception.getMessage();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @ResponseBody&lt;br /&gt; @ExceptionHandler(MyGlobalException.class)&lt;br /&gt; public String myGlobalException(MyGlobalException exception){&lt;br /&gt;  return "exception caught message="+ exception.getMessage();&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-bVieYZcT_ek/Va6O6MPZgZI/AAAAAAAAAbg/09EScNxpPOg/s1600/ex1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="320" src="http://3.bp.blogspot.com/-bVieYZcT_ek/Va6O6MPZgZI/AAAAAAAAAbg/09EScNxpPOg/s640/ex1.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-1DFlVVyctPk/Va6O57uqPTI/AAAAAAAAAbY/ASaeQ6Zw3GE/s1600/ex2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="320" src="http://4.bp.blogspot.com/-1DFlVVyctPk/Va6O57uqPTI/AAAAAAAAAbY/ASaeQ6Zw3GE/s640/ex2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-Y1ak6tmJAa8/Va6O5yYMHkI/AAAAAAAAAbc/qzKEFe-sxuE/s1600/ex3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="320" src="http://4.bp.blogspot.com/-Y1ak6tmJAa8/Va6O5yYMHkI/AAAAAAAAAbc/qzKEFe-sxuE/s640/ex3.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-qWkcNRXYUww/Va6O7Au4nPI/AAAAAAAAAbw/PcLcAtiiZB4/s1600/ex4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="388" src="http://3.bp.blogspot.com/-qWkcNRXYUww/Va6O7Au4nPI/AAAAAAAAAbw/PcLcAtiiZB4/s640/ex4.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The above code will not catch any &amp;nbsp;Exception of class RuntimeException. &amp;nbsp;If you want to catch it you can add another method like following to your code.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;&lt;br /&gt; @ResponseBody&lt;br /&gt; @ExceptionHandler(Exception.class)&lt;br /&gt; public String myGlobalException(Exception exception){&lt;br /&gt;  return "exception caught message="+ exception.getMessage();&lt;br /&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Now, after adding the above code to your controller. Your controller will handle all types of Exceptions.&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2790097274492851039/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/07/spring-mvc-handle-exceptions-in-controllers.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2790097274492851039'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2790097274492851039'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/07/spring-mvc-handle-exceptions-in-controllers.html' title='Spring MVC handle Exceptions in Controller using @ExceptionHandler'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-bVieYZcT_ek/Va6O6MPZgZI/AAAAAAAAAbg/09EScNxpPOg/s72-c/ex1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3143262267027098675</id><published>2015-07-03T00:31:00.000+05:30</published><updated>2015-07-03T00:31:54.267+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='JavaScript'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Ajax'/><category scheme='http://www.blogger.com/atom/ns#' term='Jquery'/><title type='text'>Send JSON object as data in Ajax POST/ GET call</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Send JSON object as data in Ajax call.&lt;/h2&gt;Suppose you have &amp;nbsp;a JSON object associated with a variable say &lt;b&gt;json &lt;/b&gt;&amp;nbsp;in our case, you can send this json value as data in the ajax call as follows.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:html; highlight:[1,7,8]"&gt;var json = [{'id':1,'name':'user1'},{'id':2,'name':'user2'},{'id':3,'name':'user3'},{'id':4,'name':'user4'}]&lt;br /&gt;&lt;br /&gt;function demo(url){&lt;br /&gt;    $.ajax({&lt;br /&gt;        method : 'POST',&lt;br /&gt;        url : url,&lt;br /&gt;        dataType: 'json',&lt;br /&gt;        data : { objects :JSON.stringify(json)},&lt;br /&gt;        success : function(data){&lt;br /&gt;            console.log(data);&lt;br /&gt;        },&lt;br /&gt;        error : function(error){&lt;br /&gt;            alert('OOps Something went wrong, please contact admin');&lt;br /&gt;        }&lt;br /&gt;    });&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;JSON.stringify()&lt;/b&gt;&amp;nbsp;method will parse the json object and convert it to a string format that can be sent as data in the Ajax call.&lt;br /&gt;&lt;br /&gt;you can also send other data with the json as follows &lt;br /&gt;&lt;pre class="brush:html; highlight:[1,7,8]"&gt;var json = [{'id':1,'name':'user1'},{'id':2,'name':'user2'},{'id':3,'name':'user3'},{'id':4,'name':'user4'}]&lt;br /&gt;&lt;br /&gt;function demo(url){&lt;br /&gt;    $.ajax({&lt;br /&gt;        method : 'POST',&lt;br /&gt;        url : url,&lt;br /&gt;        dataType: 'json',&lt;br /&gt;        data : { 'objects' :JSON.stringify(json), 'otherData' : 'value'},&lt;br /&gt;        success : function(data){&lt;br /&gt;            console.log(data);&lt;br /&gt;        },&lt;br /&gt;        error : function(error){&lt;br /&gt;            alert('OOps Something went wrong, please contact admin');&lt;br /&gt;        }&lt;br /&gt;    });&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3143262267027098675/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/07/send-json-object-as-data-in-ajax-post-get-call.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3143262267027098675'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3143262267027098675'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/07/send-json-object-as-data-in-ajax-post-get-call.html' title='Send JSON object as data in Ajax POST/ GET call'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1603895719956991354</id><published>2015-06-30T20:21:00.000+05:30</published><updated>2015-06-30T20:24:32.438+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reviews'/><category scheme='http://www.blogger.com/atom/ns#' term='Mobiles'/><title type='text'>Why ASUS ZENPHONE 2 should be in everyone's pocket</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;span style="font-family: inherit;"&gt;When I was looking for a cheap and best smartphone, then Asus Zenphone 2 is the one that comes in choice which comes in half the price of all top-tier smart phones and luckily nowhere near half the quality.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div class="separator" style="text-align: center;"&gt;&lt;img border="0" class="" src="http://img6a.flixcart.com/image/mobile/r/g/g/asus-zenfone-5-a501cg-a501cg-2a508wwe-400x400-imae3hyqpsekzaxz.jpeg" height="400" width="196" /&gt;&lt;img border="0" class="" src="http://img6a.flixcart.com/image/mobile/r/g/g/asus-zenfone-5-a501cg-a501cg-2a508wwe-400x400-imae3hyqmckkgkea.jpeg" height="400" width="196" /&gt;&lt;/div&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;There are many features that makes this phone desirable like:&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;1) Design:&amp;nbsp;&lt;/h2&gt;The luxurious ultra thin lollipop based Asus phone featured a hard plastic chassis available in multiple colors that make the phone even more desirable for me.&amp;nbsp;the 72 % screen to body ratio and 1920 x 1080 full HD IPS display maximises the viewing experience.&lt;/div&gt;&lt;div&gt;The removable back-panel gives access to a couple of micro-SIM slots and microSD slot. However, the battery is not user accessible.&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;2) 4 Gb RAM:&amp;nbsp;&lt;/h2&gt;This ASUS Zenphone 2 comes with 4gb ram that makes this phone super fast . This also help me in &lt;b&gt;watching movies, play games, video streaming and browsing much much faster&lt;/b&gt; as compare to other devices.&lt;br /&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;3) Processor &lt;/h2&gt;The Zenfone runs on a &lt;b&gt;64-bit Intel Quadcore Z3580 processor that tops out at 2.3 GHz&lt;/b&gt; - a little slower than the HTC One M8, but much faster than the iPhone 6. It's a phone that will accomplish most of your business and personal tasks with ease.&lt;/div&gt;&lt;img class="bm-blog-post" src="https://www.blogmint.com/frontendUtil/openPage?page=blog-post-read&amp;amp;oId=5879777a422e48ce9cbbdaf6344e08ac&amp;amp;uId=3e88d804df6c4572abbf5436460f8a6f&amp;amp;count=1&amp;amp;image=one-pixel.png" style="border: 0; padding: 0;" /&gt;&lt;br /&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;4) Camera:&lt;/h2&gt;All photographer's there will surely going to love its &lt;b&gt;13&amp;nbsp;megapixel camera with Asus' PixelMaster technology&lt;/b&gt;. This pixel master captures stunning high resolution pictures with no shutter lags. This helps in also clicking moving objects just on the go. Even &lt;b&gt;it's low light performance is really good&lt;/b&gt;. This even give me high resolution pictures on low light, so now for clicking pictures I need not check for lighting conditions. It also has &lt;b&gt;5 MP rear camera and has a 85-degree wide angle lens to give you those great selfies.&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;5) Battery&lt;/span&gt;&lt;/h2&gt;&lt;span style="font-family: inherit;"&gt;The Asus Zenfone2 comes with the &lt;b&gt;3000 mAh battery&lt;/b&gt; with fast charging technology that is capable of running your phone up to 24 hrs very easily.&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: inherit;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Thus, Zenfone2 gives a lot of features into one speedy little device. It looks attractive, with a great touch that provide features to save space and time that make it zoy to use. Its fast-charging battery won't leave you in a lurch on getaways.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;So i think everybody should want this Zenphone2 in there possession without any delay because these are only few of many reasons.&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1603895719956991354/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/06/asus-zenphone-2-reviews-and-specifications.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1603895719956991354'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1603895719956991354'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/06/asus-zenphone-2-reviews-and-specifications.html' title='Why ASUS ZENPHONE 2 should be in everyone&apos;s pocket'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6256974432540717227</id><published>2015-06-03T04:41:00.000+05:30</published><updated>2015-06-03T04:47:19.473+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><title type='text'>How to delete a Folder in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Before deleting the file you need to check if&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;you have permission to delete file using method &lt;b&gt;canWrite()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;file specified exists &lt;b&gt;exists()&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Deleting the file in Java&lt;/h2&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Test.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;import java.io.*;&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt;   public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;     File file = new File("/home/ekansh/test");&lt;br /&gt;     if(file.isDirectory()){&lt;br /&gt;        if(file.delete())&lt;br /&gt;     System.out.println("Success ! Folder deleted.");&lt;br /&gt;        else&lt;br /&gt;     System.out.println("Failure ! Folder not deleted.");&lt;br /&gt;     }else&lt;br /&gt; System.out.println("FOLDER DOES NOT EXIST");&lt;br /&gt;      &lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="output"&gt;Success ! Folder deleted.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6256974432540717227/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/06/how-to-delete-folder-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6256974432540717227'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6256974432540717227'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/06/how-to-delete-folder-in-java.html' title='How to delete a Folder in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6864848464183503859</id><published>2015-06-02T22:42:00.001+05:30</published><updated>2015-06-02T22:45:21.402+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><title type='text'>How to create Nested folders in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You need to check the following things fro creating the nested folders&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If it is a directory by method &lt;b&gt;isDirectory()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;If it exists by method &lt;b&gt;exists()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;You might need to check if you have write permissions to create folder by method&amp;nbsp;&lt;b&gt;canWrite()&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;How to create Nested Folders/Directories in Java&lt;/h2&gt;This is how yo can create the nested folders in java.&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;CreateNestedFolders.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;import java.io.*;&lt;br /&gt;&lt;br /&gt;class CreateNestedFolders{&lt;br /&gt;&lt;br /&gt;   public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;     File file = new File("/home/ekansh/test/1/2/3/abc");&lt;br /&gt;     if(!file.canWrite()){ // check if user have write permissions&lt;br /&gt;       if(!(file.exists() &amp;amp;&amp;amp; file.isDirectory())){&lt;br /&gt;            if(file.mkdirs())&lt;br /&gt;          System.out.println("Success ! Folders created.");&lt;br /&gt;            else&lt;br /&gt;          System.out.println("Failure ! Folders not created.");&lt;br /&gt;       }&lt;br /&gt;     }else{&lt;br /&gt; System.out.println("PERMISSION DENIED");&lt;br /&gt;      }&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="output"&gt;Success ! Folders created. &lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6864848464183503859/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/06/how-to-create-nested-folders-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6864848464183503859'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6864848464183503859'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/06/how-to-create-nested-folders-in-java.html' title='How to create Nested folders in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4069098646328147515</id><published>2015-06-01T02:36:00.002+05:30</published><updated>2015-06-01T02:36:54.507+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Server'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Nginx'/><title type='text'>Getting started with Nginx</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Nginx is pronounced as &lt;b&gt;Engine-x&lt;/b&gt;&lt;/li&gt;&lt;li&gt;It is open source&lt;/li&gt;&lt;li&gt;It is a &lt;b&gt;High performance HTTP server and Reverse proxy&lt;/b&gt;&lt;/li&gt;&lt;li&gt;It &lt;b&gt;does not rely on thread to handle requests.&lt;/b&gt;&amp;nbsp;Thus it can serve thousands of concurrent requests.&lt;/li&gt;&lt;li&gt;It works on scalable event driven (asynchronous) architecture.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Getting started with NGINX&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;Install nginx &lt;pre&gt;sudo apt-get install nginx&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Check the status of the server &lt;pre&gt;sudo service nginx status&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Start the &lt;b&gt;nginx&lt;/b&gt; server &lt;pre&gt;sudo service nginx start &lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;Go to the browser and enter the &lt;b&gt;url http://localhost&lt;/b&gt;&amp;nbsp;you will see the following screen.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-X61YECrEuG0/VWsvoqwogQI/AAAAAAAAAVw/KB49DozMjd8/s1600/nginx.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="362" src="http://1.bp.blogspot.com/-X61YECrEuG0/VWsvoqwogQI/AAAAAAAAAVw/KB49DozMjd8/s640/nginx.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;Our nginx server is up and running.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Viewing the NGINX configuration files.&lt;/h2&gt;&lt;div&gt;You can go to the folder&amp;nbsp;&lt;b&gt;/etc/nginx&lt;/b&gt;&amp;nbsp;to view the Nginx configuration files.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-1kW3VTRV6b8/VWswnbHQjKI/AAAAAAAAAV4/8PiVXsSngt8/s1600/n2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" height="231" src="http://2.bp.blogspot.com/-1kW3VTRV6b8/VWswnbHQjKI/AAAAAAAAAV4/8PiVXsSngt8/s640/n2.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The image above shows how the nginx files looks like.&lt;br /&gt;&lt;br /&gt;For getting started the important files you should be familiar to are&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;mime.types&lt;/b&gt;&amp;nbsp;it includes all the mime types the the ngnix server will support.&lt;/li&gt;&lt;li&gt;&lt;b&gt;nginx.conf&lt;/b&gt;&amp;nbsp;it contains most of the configuration that is required for a normal application. It contains the following things &lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;events&lt;/b&gt;&amp;nbsp;block - it contains the number of connections to support&lt;/li&gt;&lt;li&gt;&lt;b&gt;http&lt;/b&gt;&amp;nbsp;block - it contains the&amp;nbsp;&amp;nbsp;server settings, logging settings and other basic settings.&lt;/li&gt;&lt;li&gt;&lt;b&gt;mail&lt;/b&gt; block - for pop/imap services&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;b&gt;sites-available -&lt;/b&gt;&amp;nbsp;This is where you define your server configurations for different sites/applications.&lt;/li&gt;&lt;li&gt;&lt;b&gt;sites-enabled- &lt;/b&gt;it contains the soft link to the sites/applications that are defined in sites-available.&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;How to Configure Nginx to serve a new Site&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Go to &lt;b&gt;/etc/hosts&lt;/b&gt;&amp;nbsp;create a new entry there e.g &lt;b&gt;site1.ekiras.com 127.0.0.1&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Create a new server configuration in &lt;b&gt;sites-available&lt;/b&gt; folder e.g&amp;nbsp;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;site1.ekiras.com&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre&gt;server{&lt;br /&gt; listen   80;&lt;br /&gt; server_name site1.ekiras.com;&lt;br /&gt; root  /home/ekansh/;&lt;br /&gt; index index.html;&lt;br /&gt; &lt;br /&gt; location / {&lt;br /&gt; } &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;Enable this site by adding a soft link to this file&lt;pre&gt;sudo ln -s /etc/nginx/sites-available/site1.ekiras.com site1.ekiras.com&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Now restart the nginx server using command &lt;pre&gt;sudo service nginx restart&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Go to the browser and open the url &lt;b&gt;http://site1.ekiras.com&lt;/b&gt;&amp;nbsp;you will be able to see the html page on the home directory by name &lt;b&gt;index.html&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4069098646328147515/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/06/getting-started-with-nginx.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4069098646328147515'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4069098646328147515'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/06/getting-started-with-nginx.html' title='Getting started with Nginx'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-X61YECrEuG0/VWsvoqwogQI/AAAAAAAAAVw/KB49DozMjd8/s72-c/nginx.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5077124516222205311</id><published>2015-05-22T02:14:00.001+05:30</published><updated>2015-05-22T02:42:33.550+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Threads'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to create/ schedule a Job or Thread to run at fixed intervals </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;TimerTask&lt;/b&gt; is a class that can run a Thread repeatedly after a specific period.&lt;/li&gt;&lt;li&gt;You can either implement your own class also by implementing &lt;b&gt;Runnable&lt;/b&gt; Interface.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Then you may need to put your thread to sleep and then resume the thread after a desired interval.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;b&gt;The TimerTask will do this more efficiently for you then implementing your own code.&lt;/b&gt;&lt;br /&gt;&lt;h2&gt;How to schedule a Thread to run after fixed interval&lt;/h2&gt;We will be using TimerTask to schedule the Thread after every 1 sec.&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;b&gt;TimerTask&lt;/b&gt; class in Java implements &lt;b&gt;Runnable&lt;/b&gt; interface and has the following methods.&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;cancel -&lt;/b&gt;&amp;nbsp;to cancel the timer task when needed.&lt;/li&gt;&lt;li&gt;&lt;b&gt;scheduledExecutionTime -&lt;/b&gt;&amp;nbsp;gives the time when the task was last executed successfully.&lt;/li&gt;&lt;li&gt;&lt;b&gt;run -&lt;/b&gt;&amp;nbsp;an abstract method that needs to be implemented.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;&lt;h3 class="panel-title"&gt;MyTask.java&lt;/h3&gt;&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;import java.util.TimerTask;&lt;br /&gt;import java.util.Date;&lt;br /&gt;&lt;br /&gt;class MyTask extends TimerTask {&lt;br /&gt;&lt;br /&gt; static int count = 0;&lt;br /&gt; &lt;br /&gt; @Override&lt;br /&gt; public void run(){&lt;br /&gt;  if(count &amp;lt; 5){&lt;br /&gt;     System.out.println(" MyTask called  ### count = "+ (++count));&lt;br /&gt;  }&lt;br /&gt;  else {&lt;br /&gt;     cancel(); &lt;br /&gt;     System.out.println("#########    TASK CANCELLED    #######");&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;&lt;h3 class="panel-title"&gt;TestTimerTask.java&lt;/h3&gt;&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;import java.util.TimerTask;&lt;br /&gt;import java.util.Timer;&lt;br /&gt;&lt;br /&gt;class TestTimerTask {&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;   TimerTask task = new MyTask();&lt;br /&gt;   Timer timer = new Timer();&lt;br /&gt;   timer.scheduleAtFixedRate(task,0,1000);&lt;br /&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="output"&gt;&amp;nbsp;MyTask called &amp;nbsp;### count = 1&lt;br /&gt;&amp;nbsp;MyTask called &amp;nbsp;### count = 2&lt;br /&gt;&amp;nbsp;MyTask called &amp;nbsp;### count = 3&lt;br /&gt;&amp;nbsp;MyTask called &amp;nbsp;### count = 4&lt;br /&gt;&amp;nbsp;MyTask called &amp;nbsp;### count = 5&lt;br /&gt;######### &amp;nbsp; &amp;nbsp;TASK CANCELLED &amp;nbsp; &amp;nbsp;#######&lt;/div&gt;&lt;br /&gt;So Thread goes on executing till it is stopped manually or till &lt;b&gt;cancel()&lt;/b&gt;&amp;nbsp;is called on the task.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5077124516222205311/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/05/how-to-create-schedule-job-or-thread-to-run-at-fixed-intervals-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5077124516222205311'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5077124516222205311'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/05/how-to-create-schedule-job-or-thread-to-run-at-fixed-intervals-in-java.html' title='How to create/ schedule a Job or Thread to run at fixed intervals '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8359027106741106751</id><published>2015-05-19T21:14:00.000+05:30</published><updated>2015-05-19T21:21:49.139+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><title type='text'>How to use AngularJs Expressions</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;div&gt;You can evaluate angular expressions by the following ways&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;using &lt;b&gt;interpolation&amp;nbsp;{{ }}&lt;/b&gt;&lt;/li&gt;&lt;li&gt;using &lt;b&gt;ng-bind&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Examples of AngularJs Expressions&lt;/h2&gt;Following are the ways you can use the angular expressions.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Mathematical calculations&amp;nbsp;&lt;/li&gt;&lt;li&gt;String operations&lt;/li&gt;&lt;li&gt;Json operation&lt;/li&gt;&lt;li&gt;Array operations&lt;/li&gt;&lt;/ul&gt;You may want to see &lt;b&gt;ng-init.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:html;highlight:[10,11,13,15,17,19,22,24]"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;head&amp;gt;&lt;br /&gt;    &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;&lt;br /&gt;    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;    &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;  &amp;lt;/head&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;body ng-app="" ng-init="firstName='Ekansh';lastName='Rastogi';json=[{'name':'user1','age':'18'},{'name':'user2','age':'24'}];array=[0,1,2,3,8]"&amp;gt;&lt;br /&gt;    &amp;lt;div ng-bind="firstName + ' ' + lastName"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;hr/&amp;gt;&lt;br /&gt;    &lt;br /&gt;    String operation -&amp;gt;{{"Hello" +" " + "World!" }}&amp;lt;hr/&amp;gt;&lt;br /&gt;    &lt;br /&gt;    Math operation -&amp;gt; {{2 * 5 }}&amp;lt;hr/&amp;gt;&lt;br /&gt;    &lt;br /&gt;    String &amp;amp;amp; Math operation -&amp;gt;{{"10 * 15 * 84  = "  + (10 * 15 * 84)}}&amp;lt;hr/&amp;gt;&lt;br /&gt;    &lt;br /&gt;    Json Operation -&amp;gt;{{'name = ' +json[0].name + ' age =' + json[0].age}}&amp;lt;br/&amp;gt;&lt;br /&gt;    &lt;br /&gt;    {{'name = ' +json[1].name + ' age =' + json[1].age}}&amp;lt;hr/&amp;gt;&lt;br /&gt;    &lt;br /&gt;    Array operation -&amp;gt; &amp;lt;span ng-bind="{{array}}"&amp;gt;&amp;lt;/span&amp;gt;&lt;br /&gt;  &amp;lt;/body&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The above code will give you the following output.&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen="allowfullscreen" frameborder="0" src="http://embed.plnkr.co/Mq1jJMQqiIur8L1u1tb0?t=code&amp;amp;f=index.html" style="border: 1px solid #999; height: 300px; width: 100%;"&gt;  Loading plunk... &lt;/iframe&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8359027106741106751/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/05/how-to-use-angularjs-expressions.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8359027106741106751'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8359027106741106751'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/05/how-to-use-angularjs-expressions.html' title='How to use AngularJs Expressions'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6929778079520969400</id><published>2015-05-19T16:48:00.000+05:30</published><updated>2015-05-19T16:55:57.226+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><title type='text'>Introduction to AngularJS</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Setting up AngularJS.&lt;/h2&gt;&lt;b&gt;All you need to do is&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Download the AngularJs script from&amp;nbsp;&lt;a href="https://angularjs.org/"&gt;https://angularjs.org/&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can use the AngularJs cdn &amp;nbsp;&lt;pre&gt;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Add the Angular Js &lt;b&gt;ng-app=""&lt;/b&gt; tag to initialize the angukar application.&lt;/li&gt;&lt;li&gt;Add the angularjs script to the Html page and you are good to go&lt;/li&gt;&lt;/ul&gt;&lt;pre class="brush:html"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;head&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;body ng-app=""&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;h1&amp;gt;{{"Hello" +" " + "World!" }}&amp;lt;/h1&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;br /&gt; The above code will give you the following output. &lt;iframe allowfullscreen="allowfullscreen" frameborder="0" src="http://embed.plnkr.co/bljA3hLUCdPhz25WnxHj?t=code&amp;f=index.html" style="border: 1px solid #999; height: 300px; width: 100%;"&gt;  Loading plunk... &lt;/iframe&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6929778079520969400/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/05/introduction-to-angularjs.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6929778079520969400'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6929778079520969400'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/05/introduction-to-angularjs.html' title='Introduction to AngularJS'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8160601485333765165</id><published>2015-05-06T12:01:00.000+05:30</published><updated>2015-05-06T12:04:40.680+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Htc'/><category scheme='http://www.blogger.com/atom/ns#' term='Reviews'/><category scheme='http://www.blogger.com/atom/ns#' term='Mobiles'/><title type='text'>Best HTC Mobiles under INR 15000</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Lets have a look at the top HTC mobile phones under Rs 15000.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;HTC Desire 816G Plus&amp;nbsp;&lt;/h2&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://img2.smartprix.com/mobiles/1101kz9z18l/n-1/htc_desire_816g_plus_octa_core.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;br /&gt;&lt;/a&gt;&lt;a href="http://img2.smartprix.com/mobiles/1101kz9z18l/n-1/htc_desire_816g_plus_octa_core.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;br /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;This is one of the most wanna be mobile that the company has produced and is available in the range 15000 INR.&lt;/div&gt;&lt;div&gt;&lt;a href="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2Fimg2.smartprix.com%2Fmobiles%2F1101kz9z18l%2Fn-1%2Fhtc_desire_816g_plus_octa_core.jpg&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://img2.smartprix.com/mobiles/1101kz9z18l/n-1/htc_desire_816g_plus_octa_core.jpg" /&gt;&lt;/a&gt;&lt;a href="http://www.mobipicker.com/wp-content/uploads/2014/11/HTC-Desire-816G-dual-sim-pic1.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://www.mobipicker.com/wp-content/uploads/2014/11/HTC-Desire-816G-dual-sim-pic1.jpg" height="292" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Lets see what makes this phone a great choice to buy.&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Octacore &amp;nbsp;1.7 Ghz processor&lt;/b&gt; that is fast enough to run all your games and applications simultaneously.&lt;/li&gt;&lt;li&gt;&lt;b&gt;5.5 inch screen multi touch screen&lt;/b&gt;&lt;/li&gt;&lt;li&gt;High resolution &lt;b&gt;720 x 1280&lt;/b&gt;&amp;nbsp;that will give you a great experience of viewing your videos and movies.&lt;/li&gt;&lt;li&gt;1 GB RAM and &lt;b&gt;16 GB internal memory.&lt;/b&gt;&amp;nbsp;So store all your apps and movies in the phone without the need of memory card.&lt;/li&gt;&lt;li&gt;&lt;b&gt;13 MP 4160x3120 px&lt;/b&gt; super awesome primary camera. So get ready to capture all those priceless moments of your life.&lt;/li&gt;&lt;li&gt;&lt;b&gt;5 MP rear camera&lt;/b&gt; to fit boost your&lt;b&gt; #selfie love.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;2600 mAh &lt;/b&gt;&amp;nbsp;battery that will last for a day.&lt;/li&gt;&lt;li&gt;Awesome audio quality with great beats.&lt;/li&gt;&lt;li&gt;Android , v4.4.2&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;So the verdict of the phone is that, if you are looking to buy a phone with a big screen and a great camera and sound than this phone is a great option for you. The video and audio quality of the phone is better than the other phone in the market in the same segment.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;HTC Desire 320&amp;nbsp;&lt;/h2&gt;&lt;a href="http://img2.smartprix.com/mobiles/1101mdjai3y/n-1/htc_desire_320.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://img2.smartprix.com/mobiles/1101mdjai3y/n-1/htc_desire_320.jpg" height="400" width="234" /&gt;&lt;/a&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Quad-core  1.3 Ghz processor&lt;/b&gt; More cores results in better parallelism, that is more number of simultaneous tasks.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;4.5 inch screen&lt;/b&gt; multi touch screen&amp;nbsp;&lt;/li&gt;&lt;li&gt;High resolution &lt;b&gt;720 x 1280&lt;/b&gt; that will give you a great experience of viewing your videos and movies.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;1 GB RAM and 4 GB internal memory&lt;/b&gt;. It has an extendable slot for memory card so that you can carry all your cool stuff with you.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;5 MP camera&lt;/b&gt;. It is good enough to get good quality pictures for taking sharp and clear photos.&amp;nbsp;&lt;/li&gt;&lt;li&gt;2100 mAh  battery that will last for a day. Awesome audio quality with support for all types of audio formats.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Android , v4.4.2&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;So if you are looking for a cool, sleek and good looking phone with some cool specs in a budget range than this phone is a must check out option. Another great feature of this phone is the different UI of android which will make it a bit different from the other android phones. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Also checkout other &lt;a href="http://www.askmebazaar.com/index.php?store_front_id=1608&amp;amp;amp;utm_source=Blogmint&amp;amp;amp;utm_campaign=technology&amp;amp;amp;utm_term=mobile"&gt;HTC Mobiles&lt;/a&gt; in this segment.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img class="bm-blog-post" src="https://www.blogmint.com/frontendUtil/openPage?page=blog-post-read&amp;amp;oId=d91b1ce326f6481e8f54eac4d58b0457&amp;amp;uId=3e88d804df6c4572abbf5436460f8a6f&amp;amp;count=3&amp;amp;image=one-pixel.png" style="border: 0; padding: 0;" /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8160601485333765165/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/05/best-htc-mobiles-under-inr-15000.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8160601485333765165'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8160601485333765165'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/05/best-htc-mobiles-under-inr-15000.html' title='Best HTC Mobiles under INR 15000'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3692065779720486799</id><published>2015-05-06T11:25:00.000+05:30</published><updated>2015-05-06T11:34:12.018+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reviews'/><category scheme='http://www.blogger.com/atom/ns#' term='Apple'/><category scheme='http://www.blogger.com/atom/ns#' term='Product'/><title type='text'>Trending Apple Products</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Apple is one of the best selling brands across the world. Some of the trending products of Apple in the year 2015 are.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Apple Watch&lt;/h2&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://store.storeimages.cdn-apple.com/4572/as-images.apple.com/is/image/AppleInc/aos/published/images/w/38/w38ss/sbwh/w38ss-sbwh-sel?wid=332&amp;amp;hei=392&amp;amp;fmt=jpeg&amp;amp;qlt=95&amp;amp;op_sharpen=0&amp;amp;resMode=bicub&amp;amp;op_usm=0.5,0.5,0,0&amp;amp;iccEmbed=0&amp;amp;layer=comp&amp;amp;.v=1427353741097" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://store.storeimages.cdn-apple.com/4572/as-images.apple.com/is/image/AppleInc/aos/published/images/w/38/w38ss/sbwh/w38ss-sbwh-sel?wid=332&amp;amp;hei=392&amp;amp;fmt=jpeg&amp;amp;qlt=95&amp;amp;op_sharpen=0&amp;amp;resMode=bicub&amp;amp;op_usm=0.5,0.5,0,0&amp;amp;iccEmbed=0&amp;amp;layer=comp&amp;amp;.v=1427353741097" height="320" width="270" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Some of the key features of the watch are&amp;nbsp;&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Stainless Steel case&lt;/li&gt;&lt;li&gt;Sapphire crystal&lt;/li&gt;&lt;li&gt;Ceramic back&lt;/li&gt;&lt;li&gt;Heart Rate sensor, Accelerometer and gyroscope&lt;/li&gt;&lt;li&gt;Requires iphone 5+ for operation.&lt;/li&gt;&lt;/ol&gt;&lt;h4 style="text-align: left;"&gt;Why to buy Apple watch&amp;nbsp;&lt;/h4&gt;The Apple Watch is coming in six different versions: there's the Apple Watch, the Apple Watch Sport and the Apple Watch Edition. And each of these comes in two sizes, for those that like a larger or smaller device for their wrist. &lt;br /&gt;&lt;br /&gt;Its neither a male watch nor a female watch. &lt;b&gt;Both men and women can waer this watch and flaunt the looks equally matched with the latest fashion.&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;The good integration of the Heart rate sensor and Accelerometer makes it a very good for all those health freaks.&lt;/b&gt;&amp;nbsp;Apple watch comes with the inbuilt workout application.&lt;br /&gt;During a dedicated cardio session, Apple Watch shows &lt;b&gt;real-time stats such as time, distance, calories, pace, and speed&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;Other in built applications of Apple watch are&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Messages&lt;/li&gt;&lt;li&gt;Calls&lt;/li&gt;&lt;li&gt;Mail&lt;/li&gt;&lt;li&gt;Calender&lt;/li&gt;&lt;li&gt;Maps&lt;/li&gt;&lt;li&gt;Music&lt;/li&gt;&lt;li&gt;Stocks&lt;/li&gt;&lt;li&gt;Stopwatch, timer and alarm&lt;/li&gt;&lt;/ul&gt;Built-in Apple apps, on the other hand, work far more smoothly. Maps allows for quick navigation and turn-by-turn directions that work well in tandem with the iPhone while paired to my car's Bluetooth audio: when driving, my wrist tapped and pinged to indicate left and right turns in advance of exit announcements, and quick glances always showed me the next turn, plus how far away it was.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Apple iPhone 6&lt;/h2&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://www.apple.com/in/iphone-6/overview/images/security_large.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" height="320" src="https://www.apple.com/in/iphone-6/overview/images/security_large.png" width="268" /&gt;&lt;/a&gt;&lt;/div&gt;Some of the key features of iphone 6 are&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Quality customer service&lt;/li&gt;&lt;li&gt;Impressive hardware&lt;/li&gt;&lt;li&gt;Highly durable&lt;/li&gt;&lt;li&gt;4.7 inch screen that is big but not not too big&lt;/li&gt;&lt;li&gt;8 MP and 1.2 MP cameras that are too impressive as compared to other phones in segment&lt;/li&gt;&lt;li&gt;Awesome audio quality&lt;/li&gt;&lt;li&gt;Cool color to choose from&lt;/li&gt;&lt;/ul&gt;As always with Apple’s phones the iPhone 6 has superb balance, it feels right in the hand regardless of orientation. The comfy edges are also a lot easier on the palm than the sharper ones on the iPhone 5S and the 6.9mm thickness makes it feel sleek yet strong. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;See the &lt;a href="http://www.askmebazaar.com/index.php?store_front_id=1609&amp;amp;utm_source=Blogmint&amp;amp;utm_campaign=technology&amp;amp;utm_term=smartphones"&gt;Apple Phone&lt;/a&gt;&amp;nbsp;here and choose the best that suits your needs.&lt;br /&gt;&lt;img class="bm-blog-post" src="https://www.blogmint.com/frontendUtil/openPage?page=blog-post-read&amp;amp;oId=d91b1ce326f6481e8f54eac4d58b0457&amp;amp;uId=3e88d804df6c4572abbf5436460f8a6f&amp;amp;count=2&amp;amp;image=one-pixel.png" style="border: 0; padding: 0;" /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3692065779720486799/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/05/trending-apple-products.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3692065779720486799'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3692065779720486799'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/05/trending-apple-products.html' title='Trending Apple Products'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3452636918883812020</id><published>2015-05-03T13:06:00.003+05:30</published><updated>2015-05-03T14:20:43.317+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Data Binding'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><title type='text'>Different ways to bind Elements to Model in AngularJs</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Different ways to Bind Elements to Model/ Directives&lt;/h2&gt;You can bind the Angular Elements to the Model in the following ways.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:html"&gt;  &amp;lt;span ng-bind="name"&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;br /&gt;  &amp;lt;span ng:bind="name"&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;br /&gt;  &amp;lt;span ng_bind="name"&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;br /&gt;  &amp;lt;span data-ng-bind="name"&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;br /&gt;  &amp;lt;span x-ng-bind="name"&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;br/&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="alert alert-info" role="alert"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Remove the &lt;b&gt;x-&lt;/b&gt; or &lt;b&gt;data-&lt;/b&gt;&amp;nbsp;from the start of the element attributes.  &lt;br /&gt;e.g data-ng-bind and x-ng-bind can be written as ng-bind&lt;br /&gt;  &lt;/li&gt;&lt;li&gt;Convert the delimiters like &lt;b&gt;:, -, _&lt;/b&gt;&amp;nbsp;to &lt;b&gt;camelCase&lt;/b&gt;. &lt;br /&gt;Since the Html is case insensitive you can not use camelCase and you can use delimiters like &lt;b&gt;:, -, _&lt;/b&gt; to write your directives/angular . &lt;br /&gt; &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;So the above ways are&lt;br /&gt;Following example in the Plunk shows the various ways to write our angular directive.&lt;br /&gt;&lt;br /&gt;&lt;iframe allowfullscreen="allowfullscreen" frameborder="0" src="http://embed.plnkr.co/b1Bs8HMmTNkqKuUiaq8z/?t=code" style="border: 1px solid #999; height: 300px; width: 100%;"&gt;  Loading plunk... &lt;/iframe&gt;&lt;br /&gt;&lt;br /&gt;  &lt;br /&gt;Now most of the above code works perfectly with angular js but they may cause HTML validation to fail. So if you want your code to be Html validatable then you should use&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:html"&gt;&amp;nbsp;&amp;lt;span data-ng-bind="name"&amp;gt;&amp;lt;/span&amp;gt;&amp;nbsp;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3452636918883812020/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/05/different-ways-to-bind-elements-to-model-in-angular-js.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3452636918883812020'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3452636918883812020'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/05/different-ways-to-bind-elements-to-model-in-angular-js.html' title='Different ways to bind Elements to Model in AngularJs'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3179477205624304914</id><published>2015-05-01T18:14:00.000+05:30</published><updated>2015-05-01T18:28:51.596+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reviews'/><title type='text'>Best Acer Laptops</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Acer Laptops&lt;/h2&gt;&lt;div&gt;When we talk about the Laptops for beginners or entry level laptops some of the best brands that offer these are ACER, HP, Lenovo, Samsung.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Laptops are meant to give you a multifunctional computer. They have built-in Wi-Fi1 to give you the freedom to work and play wirelessly. Depending on the model, larger screen sizes, bigger hard drives and built-in DVD drives increase laptops' weight, which makes them less portable than netbooks but an excellent choice for your everyday computing needs. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: white; color: #2b2b2b; font-family: roboto, sans-serif; font-size: 15.3999996185303px; line-height: 23.0999984741211px;"&gt;And thankfully if you know where to look, it's possible to get a sleek and impressive laptop without blowing through your savings.&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #2b2b2b; font-family: roboto, sans-serif; font-size: 15.3999996185303px; line-height: 23.0999984741211px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #2b2b2b; font-family: roboto, sans-serif; font-size: 15.3999996185303px; line-height: 23.0999984741211px;"&gt;Some of the key Features of the Acer laptops are&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;1. Design&lt;/h2&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Design is essential in helping consumers choose a laptop and ACER provides some of the best and in class brand’s aesthetics, material choices and durability. &amp;nbsp;Another key factor to be noticed is the&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;benchmarks for Keyboard &amp;amp; Touchpads, Display and Audio category that the brand provides.&lt;/span&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;2. Technical Support&lt;/h2&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Acer is regarded as one of the best for its quality support. With Acer starting the online Tech support along with the traditional on call support has given it an edge over other key players in the market.&lt;/span&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;3. Keyboard and Touchpad.&lt;/h2&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Acer’s keyboards and touchpads are as varied as its notebook lineup, with some models providing comfortable, accurate results and others feeling flat. While the keyboards on the Aspire E15 Touch and Aspire Switch 10 offer deep travel and a snappy feel.&lt;/span&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;4. Audio&amp;nbsp;&lt;/h2&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Loud is not always good. Acer laptops are equipped with some good quality speakers and Audio profiles. Some of the Acer laptops also come with&amp;nbsp;&lt;/span&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Dolby Digital Plus, which lets you choose from multiple sound profiles to customize what you hear.&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;5. Storage&lt;/h2&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Acer’s Cloud app and the Clear.fi software suite have been replaced by the company’s Build Your Own Cloud (BYOC) software, which comes with all Acer notebooks. BYOC is different from Dropbox in that you directly access your device’s hard drive remotely. This means that the storage you get is pretty much up to you, and typically much more than cloud services offer for free. Along with this it also comes with 320GB,512GB and 1TB HDD's.&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="background-color: white; color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Some of the best Acer Laptops are listed in the list below with their Key Features&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;a href="http://static.acer.com/up/Resource/Acer/Professional/Product/Notebook/TravelMate%20P6/Image/20130724/P645_zoom_big.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://static.acer.com/up/Resource/Acer/Professional/Product/Notebook/TravelMate%20P6/Image/20130724/P645_zoom_big.png" height="320" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Acer Travelmate P645&lt;/h3&gt;&lt;ol style="text-align: left;"&gt;&lt;ul&gt;&lt;li&gt;Core i7 processor&lt;/li&gt;&lt;li&gt;Discrete graphics&lt;/li&gt;&lt;li&gt;9:46 of battery life&lt;/li&gt;&lt;li&gt;High Performance&lt;/li&gt;&lt;li&gt;&lt;span style="color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Strong security features&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www5.pcmag.com/media/images/332024-acer-aspire-s7-392-6411-angle.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://www5.pcmag.com/media/images/332024-acer-aspire-s7-392-6411-angle.jpg" height="219" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Acer Aspire S7-392  &lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Intel Core i5 processor&lt;/li&gt;&lt;li&gt;Super-slim&lt;/li&gt;&lt;li&gt;1080p touch-screen&lt;/li&gt;&lt;li&gt;Snow White color&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;span style="color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Bloatware-free&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="http://cdn.gottabemobile.com/wp-content/uploads/2014/08/Acer-Chromebook-13-CB5-311_closed-620x428.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://cdn.gottabemobile.com/wp-content/uploads/2014/08/Acer-Chromebook-13-CB5-311_closed-620x428.jpg" height="220" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Acer Chromebook 13&lt;/h3&gt;&lt;ol style="text-align: left;"&gt;&lt;ul&gt;&lt;li&gt;Cloud-based machine&lt;/li&gt;&lt;li&gt;1920 x 1080-pixel glare-resistant HD display&lt;/li&gt;&lt;li&gt;Tegra K1 processor&lt;/li&gt;&lt;li&gt;13" screen.&lt;/li&gt;&lt;li&gt;&lt;span style="color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Glare-resistant full HD screen&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="color: #494949; font-family: Arial, Helvetica, sans-serif; font-size: 16px; line-height: 25px;"&gt;Long battery life&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can also view the wide range of other ACER Laptops on the following link and choose the one that fits your needs the best.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So these are some of the Best Acer laptops that i would recommend. To know more and find a&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;a href="http://www.askmebazaar.com/index.php?store_front_id=1501&amp;amp;utm_source=Blogmint&amp;amp;utm_campaign=technology&amp;amp;utm_term=laptop"&gt;Best Entry Level Acer laptops Online&lt;/a&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt; &lt;img class="bm-blog-post" style="padding: 0;border: 0;" src="https://www.blogmint.com/frontendUtil/openPage?page=blog-post-read&amp;oId=d91b1ce326f6481e8f54eac4d58b0457&amp;uId=3e88d804df6c4572abbf5436460f8a6f&amp;count=1&amp;image=one-pixel.png"/&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3179477205624304914/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/05/acer-laptops-when-we-talk-about-laptops.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3179477205624304914'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3179477205624304914'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/05/acer-laptops-when-we-talk-about-laptops.html' title='Best Acer Laptops'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6890965842424673886</id><published>2015-04-24T00:17:00.000+05:30</published><updated>2015-04-24T00:17:32.548+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Criteria Query'/><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : Create Alias </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/hibernate-why-to-use-create-alias.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6890965842424673886'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6890965842424673886'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6876768039680046641</id><published>2015-04-22T19:37:00.000+05:30</published><updated>2015-04-22T19:37:21.563+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_19</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these packages contains abstract keyword? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;java.util&lt;/td&gt;    &lt;td class='optionB'&gt;java.io&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;java.system&lt;/td&gt;    &lt;td class='optionD'&gt;java.lang&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;A subclass of an abstract class can also be abstract if&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;It is instantiated&lt;/td&gt;    &lt;td class='optionB'&gt;The static class is declared in the parent class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;It does not define all the abstract methods in the parent class&lt;/td&gt;    &lt;td class='optionD'&gt;All of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the name of the class that is the ancestor to every other class in Java?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Object&lt;/td&gt;    &lt;td class='optionB'&gt;Class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;root&lt;/td&gt;    &lt;td class='optionD'&gt;java&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;In Java by default all the classes extend Object class directly or indirectly. A class declaration without the extends clause, implicitly extends the object class.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following is a method having same name as that of its class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;finalize&lt;/td&gt;    &lt;td class='optionB'&gt;delete&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;class&lt;/td&gt;    &lt;td class='optionD'&gt;constructor&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;A constructor is a method that initializes an object immediately upon creation. It has the same name as that of class in which it resides&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords is used to define interfaces in Java? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;interface&lt;/td&gt;    &lt;td class='optionB'&gt;Interface&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;intf&lt;/td&gt;    &lt;td class='optionD'&gt;Intf&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; import java.io.*;&lt;br /&gt;    class Chararrayinput {&lt;br /&gt;        public static void main(String[] args) {&lt;br /&gt;     String obj  = "abcdefgh";&lt;br /&gt;            int length = obj.length();&lt;br /&gt;            char c[] = new char[length];&lt;br /&gt;            obj.getChars(0, length, c, 0);&lt;br /&gt;            CharArrayReader input1 = new CharArrayReader(c);&lt;br /&gt;            CharArrayReader input2 = new CharArrayReader(c, 1, 4);&lt;br /&gt;            int i;&lt;br /&gt;            int j;&lt;br /&gt;            try {&lt;br /&gt;  while((i = input1.read()) == (j = input2.read())) {&lt;br /&gt;                    System.out.print((char)i);&lt;br /&gt;                }&lt;br /&gt;            } &lt;br /&gt;            catch (IOException e) {&lt;br /&gt;                e.printStackTrace();&lt;br /&gt;     }&lt;br /&gt; }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;abc&lt;/td&gt;    &lt;td class='optionB'&gt;abcd&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;abcde&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these packages contain all the collection classes? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;java.lang&lt;/td&gt;    &lt;td class='optionB'&gt;java.util&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;java.net&lt;/td&gt;    &lt;td class='optionD'&gt;java.awt&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of the following code: &lt;pre class='brush:java'&gt;abstract class Shape&lt;br /&gt;{&lt;br /&gt;       void display()&lt;br /&gt;       {&lt;br /&gt;       }   &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Circle extends Shape&lt;br /&gt;{&lt;br /&gt;       void display()&lt;br /&gt;       {&lt;br /&gt;              System.out.println("You are using circle class");&lt;br /&gt;       }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Rectangle extends Shape&lt;br /&gt;{&lt;br /&gt;       void display()&lt;br /&gt;       {&lt;br /&gt;              System.out.println("You are using rectangle class");&lt;br /&gt;       }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Triangle extends Shape&lt;br /&gt;{&lt;br /&gt;       void display()&lt;br /&gt;       {&lt;br /&gt;              System.out.println("You are using triangle class");&lt;br /&gt;       }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class AbstractClassDemo&lt;br /&gt;{&lt;br /&gt;       public static void main(String args[])&lt;br /&gt;       {&lt;br /&gt;               Shape sObj = new Circle();&lt;br /&gt;               sobj.display();&lt;br /&gt;               &lt;br /&gt;               sObj = new Rectangle();&lt;br /&gt;               sobj.display();&lt;br /&gt;&lt;br /&gt;               sObj = new Triangle();&lt;br /&gt;               sobj.display();&lt;br /&gt;       }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;You are using triangle class You are using rectangle class You are using circle class&lt;/td&gt;    &lt;td class='optionB'&gt;You are using rectangle class You are using circle class You are using triangle class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;You are using circle class You are using triangle class You are using rectangle class &lt;/td&gt;    &lt;td class='optionD'&gt;You are using circle class You are using rectangle class You are using triangle class&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;String in Java is a? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;class&lt;/td&gt;    &lt;td class='optionB'&gt;object&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;variable&lt;/td&gt;    &lt;td class='optionD'&gt;character array&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these access specifiers must be used for main() method? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;private&lt;/td&gt;    &lt;td class='optionB'&gt;public&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;protected&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt; main() method must be specified public as it called by Java run time system, outside of the program. If no access specifier is used then by default member is public within its own package &amp; cannot be accessed by Java run time system.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6876768039680046641/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-19.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6876768039680046641'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6876768039680046641'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-19.html' title='Test : Java_19'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6801220735822017654</id><published>2015-04-22T19:36:00.000+05:30</published><updated>2015-04-22T19:36:08.024+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_18</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method of Thread class is used to find out the priority given to a thread? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;get()&lt;/td&gt;    &lt;td class='optionB'&gt;ThreadPriority()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;getPriority()&lt;/td&gt;    &lt;td class='optionD'&gt;getThreadPriority()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;In the following example, which class must be abstract: &lt;pre class='brush:java'&gt;abstract class X implements Y {&lt;br /&gt;  // implements all but one method of Y&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class XX extends X {&lt;br /&gt;  // implements the remaining method in Y&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Class x&lt;/td&gt;    &lt;td class='optionB'&gt;Class xx&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Both&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What will be the content of array variable table after executing the following code?  &lt;pre class='brush:java'&gt;for(int i = 0; i &lt; 3; i + +)&lt;br /&gt;for(int j = 0; j &lt; 3; j + +)&lt;br /&gt;if(j = i) table[i][j] = 1;&lt;br /&gt;else table[i][j] = 0;&lt;/pre&gt; &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0 0 0 0 0 0 0 0 0 &lt;/td&gt;    &lt;td class='optionB'&gt;1 0 0 1 1 0 1 1 1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;1 0 0 0 1 0 0 0 1&lt;/td&gt;    &lt;td class='optionD'&gt;0 0 1 0 1 0 1 0 0&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these interface is not a part of Java?s collection framework? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;List&lt;/td&gt;    &lt;td class='optionB'&gt;Set&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;SortedMap&lt;/td&gt;    &lt;td class='optionD'&gt;SortedList&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;SortedList is not a part of collection framework.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords is used by a class to use an interface defined previously? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;import&lt;/td&gt;    &lt;td class='optionB'&gt;Import&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;implememnts&lt;/td&gt;    &lt;td class='optionD'&gt;Implememnts&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method wakes up all the threads? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;wakeAll()&lt;/td&gt;    &lt;td class='optionB'&gt;notify()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;start()&lt;/td&gt;    &lt;td class='optionD'&gt;notifyAll()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class newthread extends Thread {&lt;br /&gt; Thread t;&lt;br /&gt; String name;&lt;br /&gt; newthread(String threadname) {&lt;br /&gt;     name = threadname;&lt;br /&gt;     t = new Thread(this,name);&lt;br /&gt;     t.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;        }&lt;br /&gt; &lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;     newthread obj1 =   new newthread("one");&lt;br /&gt;     newthread obj2 =  new newthread("two");&lt;br /&gt;            try {&lt;br /&gt;                 System.out.print(obj1.t.equals(obj2.t));&lt;br /&gt;            }&lt;br /&gt;            catch(Exception e) {&lt;br /&gt;     System.out.print("Main thread interrupted");&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true&lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;&lt;/td&gt;    &lt;td class='optionD'&gt;&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is a super class of all exceptional type classes? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;String&lt;/td&gt;    &lt;td class='optionB'&gt;RuntimeExceptions&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Throwable&lt;/td&gt;    &lt;td class='optionD'&gt;Cachable&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the value stored in x in following lines of code? int x, y, z; x = 0; y = 1; x = y = z = 8;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;9&lt;/td&gt;    &lt;td class='optionD'&gt;8&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is correct way of inheriting class A by class B? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;class B + class A {}&lt;/td&gt;    &lt;td class='optionB'&gt;class B inherits class A {}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;class B extends A {}&lt;/td&gt;    &lt;td class='optionD'&gt;class B extends class A {}&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6801220735822017654/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-18.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6801220735822017654'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6801220735822017654'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-18.html' title='Test : Java_18'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8243393659293901902</id><published>2015-04-22T19:34:00.003+05:30</published><updated>2015-04-22T19:34:52.626+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_17</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int i, sum;&lt;br /&gt;                sum = 10;&lt;br /&gt;                for (i = -1; i &lt; 3 ;++i)&lt;br /&gt;                    sum = (sum / i);&lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {&lt;br /&gt;         System.out.print("0");         &lt;br /&gt;            } &lt;br /&gt;            System.out.print(sum);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;05&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error &lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;import java.util.*;&lt;br /&gt;    class vector {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Vector obj = new Vector(4,2);&lt;br /&gt;            obj.addElement(new Integer(3));&lt;br /&gt;            obj.addElement(new Integer(2));&lt;br /&gt;            obj.addElement(new Integer(5));&lt;br /&gt;            obj.removeAll(obj);&lt;br /&gt;            System.out.println(obj.isEmpty());&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;True&lt;/td&gt;    &lt;td class='optionD'&gt;False&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt; firstly elements 3, 2, 5 are entered in the vector obj, but when obj.removeAll(obj); is executed all the elements are deleted and vector is empty, hence obj.isEmpty() returns true. Output: $ javac vector.java $ java vector true&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method of class String is used to compare two String objects for their equality? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;equals()&lt;/td&gt;    &lt;td class='optionB'&gt;Equals()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;isequal()&lt;/td&gt;    &lt;td class='optionD'&gt;Isequal()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt; Which of these handles the exception when no catch is used? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Default handler&lt;/td&gt;    &lt;td class='optionB'&gt;throw handler&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;finally&lt;/td&gt;    &lt;td class='optionD'&gt;Java run time system&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following is a method having same name as that of its class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;finalize&lt;/td&gt;    &lt;td class='optionB'&gt;delete&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;constructor&lt;/td&gt;    &lt;td class='optionD'&gt;class&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is Collection in Java? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;A group of objects&lt;/td&gt;    &lt;td class='optionB'&gt;A group of classes&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;A group of interfaces&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;A collection is a group of objects, it is similar to String Template Library (STL) of C++ programming language.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these statements are incorrect? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Equal to operator has least precedence.&lt;/td&gt;    &lt;td class='optionB'&gt;Brackets () have highest precedence.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Division operator, /, has higher precedence than multiplication operator.&lt;/td&gt;    &lt;td class='optionD'&gt;Addition operator, +, and subtraction operator have equal precedence&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method of String class is used to obtain character at specified index? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;char()&lt;/td&gt;    &lt;td class='optionB'&gt;Charat()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;charat()&lt;/td&gt;    &lt;td class='optionD'&gt;charAt()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is synchronization in reference to a thread? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Its a process of handling situations when two or more threads need access to a shared resource.&lt;/td&gt;    &lt;td class='optionB'&gt;Its a process by which many thread are able to access same shared resource simultaneously.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Its a process by which a method is able to access many different threads simultaneously.&lt;/td&gt;    &lt;td class='optionD'&gt;Its a method that allow to many threads to access any information the require.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class ternary_operator {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;             int x = 3;&lt;br /&gt;             int y = ~ x;&lt;br /&gt;             int z;&lt;br /&gt;             z = x &gt; y ? x : y;&lt;br /&gt;             System.out.print(z);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;3&lt;/td&gt;    &lt;td class='optionD'&gt;-4&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8243393659293901902/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-17.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8243393659293901902'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8243393659293901902'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-17.html' title='Test : Java_17'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3339526708993759899</id><published>2015-04-22T19:34:00.000+05:30</published><updated>2015-04-22T19:34:00.306+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_16</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;        int volume;&lt;br /&gt;        box() {&lt;br /&gt;            width = 5;&lt;br /&gt;            height = 5;&lt;br /&gt;            length = 6;&lt;br /&gt;        }&lt;br /&gt;        void volume() {&lt;br /&gt;             volume = width*height*length;&lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class constructor_output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            box obj = new box();&lt;br /&gt;            obj.volume();&lt;br /&gt;            System.out.println(obj.volume);        } &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;100&lt;/td&gt;    &lt;td class='optionB'&gt;150&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;200&lt;/td&gt;    &lt;td class='optionD'&gt;250&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these have highest precedence? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;()&lt;/td&gt;    &lt;td class='optionB'&gt;++&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;*&lt;/td&gt;    &lt;td class='optionD'&gt;&gt;&gt;&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class operators {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {    &lt;br /&gt;             int x = 8;&lt;br /&gt;             System.out.println(++x * 3 + " " + x);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;24 8&lt;/td&gt;    &lt;td class='optionB'&gt;25 9 &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;27 4&lt;/td&gt;    &lt;td class='optionD'&gt;27 9&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following operators can operate on a boolean variable? 1. &amp;&amp; 2. == 3. ?: 4. += &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;3 &amp; 2&lt;/td&gt;    &lt;td class='optionB'&gt;1 &amp; 4&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;1, 2 &amp; 4&lt;/td&gt;    &lt;td class='optionD'&gt;1, 2 &amp; 3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Given the code String s1 = "yes"; String s2 = "yes"; String s3 = new String(s1); Which of the following would equate to true? (A) s1 == s2 (B) s1 = s2 (C) s3 == s1 (D) s1.equals(s2) (E) s3.equals(s1)&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(A), (C) &amp; (E)&lt;/td&gt;    &lt;td class='optionB'&gt;(A), (B) &amp; (C)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(A), (D) &amp; (E)&lt;/td&gt;    &lt;td class='optionD'&gt;(D) &amp; (E) &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these lines will give an error  line 1 :int a=1; line 2 :float f=2; line 3 :double d=2.9;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;line 1 &lt;/td&gt;    &lt;td class='optionB'&gt;line 2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;line 3&lt;/td&gt;    &lt;td class='optionD'&gt;none of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;no error since float can take integer value&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class equality {&lt;br /&gt;        int x;&lt;br /&gt;        int y;&lt;br /&gt;        boolean isequal() {&lt;br /&gt;            return(x == y);  &lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            equality obj = new equality();&lt;br /&gt;            obj.x = 5;&lt;br /&gt;            obj.y = 5;&lt;br /&gt;            System.out.println(obj.isequal);        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;True&lt;/td&gt;    &lt;td class='optionB'&gt;False &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;0&lt;/td&gt;    &lt;td class='optionD'&gt;1&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class A {&lt;br /&gt;        int i;&lt;br /&gt;        void display() {&lt;br /&gt;            System.out.println(i);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        int j;&lt;br /&gt;        void display() {&lt;br /&gt;            System.out.println(j);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class method_overriding {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.i=1;&lt;br /&gt;            obj.j=2;   &lt;br /&gt;            obj.display();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;2&lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;interface calculate {&lt;br /&gt;        int VAR = 0;&lt;br /&gt;        void cal(int item);&lt;br /&gt;    }&lt;br /&gt;    class display implements calculate {&lt;br /&gt;        int x;&lt;br /&gt;        void cal(int item) {&lt;br /&gt;            if (item &lt; 2)&lt;br /&gt;                x = VAR;&lt;br /&gt;            else&lt;br /&gt;                x = item * item;            &lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    class interfaces {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            display arr[] = new display[3];&lt;br /&gt;            arr[0].cal(0);    &lt;br /&gt;            arr[1].cal(1);&lt;br /&gt;            arr[2].cal(2);&lt;br /&gt;            System.out.print(arr[0].x + " " + arr[1].x + " " + arr[2].x);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0 1 2&lt;/td&gt;    &lt;td class='optionB'&gt;0 2 4&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;0 0 4&lt;/td&gt;    &lt;td class='optionD'&gt;0 1 4&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;&lt;pre class='brush:java'&gt; class A {&lt;br /&gt;        int i;&lt;br /&gt;        void display() {&lt;br /&gt;            System.out.println(i);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        int j;&lt;br /&gt;        void display() {&lt;br /&gt;            System.out.println(j);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class inheritance_demo {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.i=1;&lt;br /&gt;            obj.j=2;   &lt;br /&gt;            obj.display();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;2&lt;/td&gt;    &lt;td class='optionD'&gt;3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;This is a case of method overriding or dynamic polymorphism. Here the method display of class A gets overridden by the display method of class B. Thus when the call for display method is made, method of class B gets executed.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3339526708993759899/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-16.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3339526708993759899'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3339526708993759899'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-16.html' title='Test : Java_16'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7545360892463274155</id><published>2015-04-22T19:14:00.002+05:30</published><updated>2015-04-22T19:14:38.937+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_15</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method is used to avoid polling in Java? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;wait()&lt;/td&gt;    &lt;td class='optionB'&gt;notify()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;notifyAll()&lt;/td&gt;    &lt;td class='optionD'&gt;All of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int a, b;&lt;br /&gt;                b = 0;&lt;br /&gt;                a = 5 / b;&lt;br /&gt;                System.out.print("A");&lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {&lt;br /&gt;         System.out.print("B");         &lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;A&lt;/td&gt;    &lt;td class='optionB'&gt;B&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error &lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these access specifier must be used for class so that it can be inherited by another sub class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;public&lt;/td&gt;    &lt;td class='optionB'&gt;private&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;both a &amp; b&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;what will be the output int i=10; System.out.println(i++);&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;9&lt;/td&gt;    &lt;td class='optionB'&gt;10&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;11&lt;/td&gt;    &lt;td class='optionD'&gt;12&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;i++ will first use the value and then increment it by one. &lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class Output {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {    &lt;br /&gt;             boolean a = true;&lt;br /&gt;             boolean b = false;&lt;br /&gt;             boolean c = a ^ b;&lt;br /&gt;             System.out.println(!b);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true&lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;0&lt;/td&gt;    &lt;td class='optionD'&gt;1&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the priority of the thread in output of this program? &lt;pre class='brush:java'&gt;  class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Thread t = Thread.currentThread();&lt;br /&gt;            t.setName("New Thread");&lt;br /&gt;            System.out.println(t.getName());        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;main &lt;/td&gt;    &lt;td class='optionB'&gt;Thread&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;New Thread&lt;/td&gt;    &lt;td class='optionD'&gt;Thread[New Thread,5,main]&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the folowing stements are incorrect? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Default constructor is called at the time of declaration of the object if a constructor has not been defined.&lt;/td&gt;    &lt;td class='optionB'&gt;Constructor can be parameterized.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;finalize() method is called when a object goes out of scope and is no longer needed.&lt;/td&gt;    &lt;td class='optionD'&gt;finalize() method must be declared protected.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these class is used to make a thread? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;String&lt;/td&gt;    &lt;td class='optionB'&gt;System&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Thread&lt;/td&gt;    &lt;td class='optionD'&gt;Runnable&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these interface is not a part of Java?s collection framework? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;List&lt;/td&gt;    &lt;td class='optionB'&gt;Set&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;SortedMap &lt;/td&gt;    &lt;td class='optionD'&gt;SortedList&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the value returned by unction compareTo() if the invoking string is less than the string compared? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;zero&lt;/td&gt;    &lt;td class='optionB'&gt;value less than zero&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;value greater than zero&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7545360892463274155/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-15.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7545360892463274155'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7545360892463274155'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-15.html' title='Test : Java_15'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-94128134699590161</id><published>2015-04-22T19:13:00.002+05:30</published><updated>2015-04-22T19:13:44.881+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_14</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these interface is implemented by Thread class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Runnable&lt;/td&gt;    &lt;td class='optionB'&gt;Connections&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Set&lt;/td&gt;    &lt;td class='optionD'&gt;MapConnections&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class area {&lt;br /&gt;        int width;&lt;br /&gt;        int length;&lt;br /&gt;        int area;&lt;br /&gt;        void area(int width, int length) {&lt;br /&gt;            this.width = width;&lt;br /&gt;            this.length = length;&lt;br /&gt;        }&lt;br /&gt; &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            area obj = new area();&lt;br /&gt;            obj.area(5 , 6);&lt;br /&gt;            System.out.println(obj.length + " " + obj.width);        &lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0 0&lt;/td&gt;    &lt;td class='optionB'&gt;5 5&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;5 6&lt;/td&gt;    &lt;td class='optionD'&gt;6 5&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What should be expression1 evaluate to in using ternary operator as in this line? expression1 ? expression2 : expression3 &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Integer&lt;/td&gt;    &lt;td class='optionB'&gt;Floating ? point numbers&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Boolean&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these interface handle sequences? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Set&lt;/td&gt;    &lt;td class='optionB'&gt;List&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Comparator&lt;/td&gt;    &lt;td class='optionD'&gt;Collection&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is an incorrect form of using method max() to obtain maximum element? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;max(Collection c)&lt;/td&gt;    &lt;td class='optionB'&gt;max(Collection c, Comparator comp)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;max(Comparator comp)&lt;/td&gt;    &lt;td class='optionD'&gt;max(List c)&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class string_class {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            String obj = "hello";&lt;br /&gt;            String obj1 = "world";   &lt;br /&gt;            String obj2 = obj;&lt;br /&gt;            obj2 = " world";&lt;br /&gt;            System.out.println(obj + " " + obj2);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;hello hello &lt;/td&gt;    &lt;td class='optionB'&gt;world world&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;hello world&lt;/td&gt;    &lt;td class='optionD'&gt;world hello&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these operators can be used to get run time information about an object? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;getInfo&lt;/td&gt;    &lt;td class='optionB'&gt;Info&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;instanceof&lt;/td&gt;    &lt;td class='optionD'&gt;getinfoof&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords is used to make a class?  &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;class&lt;/td&gt;    &lt;td class='optionB'&gt;struct&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;int&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method of class String is used to check weather a given object starts with a particular string literal? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;startsWith()&lt;/td&gt;    &lt;td class='optionB'&gt;endsWith()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Starts()&lt;/td&gt;    &lt;td class='optionD'&gt;ends()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;             String chars[] = {"a", "b", "c", "a", "c"};&lt;br /&gt;             for (int i = 0; i &lt; chars.length; ++i)&lt;br /&gt;                 for (int j = i + 1; j &lt; chars.length; ++j)&lt;br /&gt;                     if(chars[i].compareTo(chars[j]) == 0)&lt;br /&gt;                         System.out.print(chars[j]); &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;ac&lt;/td&gt;    &lt;td class='optionB'&gt;ca&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;ab&lt;/td&gt;    &lt;td class='optionD'&gt;ba&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/94128134699590161/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-14.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/94128134699590161'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/94128134699590161'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-14.html' title='Test : Java_14'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-709248964441450405</id><published>2015-04-22T19:12:00.000+05:30</published><updated>2015-04-22T19:12:49.917+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_13</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the folowing stements are incorrect?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Default constructor is called at the time of declaration of the object if a constructor has not been defined.&lt;/td&gt;    &lt;td class='optionB'&gt;Constructor can be parameterized.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;finalize() method is called when a object goes out of scope and is no longer needed.&lt;/td&gt;    &lt;td class='optionD'&gt;finalize() method must be declared protected.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;finalize() method is called just prior to garbage collection. it is not called when object goes out of scope.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these operators is used to allocate memory for an object? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;malloc&lt;/td&gt;    &lt;td class='optionB'&gt;alloc&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;new&lt;/td&gt;    &lt;td class='optionD'&gt;give&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the return type of Constructors? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;int&lt;/td&gt;    &lt;td class='optionB'&gt;float&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;void&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these operators can skip evaluating right hand operand?  &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;!&lt;/td&gt;    &lt;td class='optionB'&gt;|&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;&amp;&lt;/td&gt;    &lt;td class='optionD'&gt;&amp;&amp;&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords is used to manually throw an exception? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;try&lt;/td&gt;    &lt;td class='optionB'&gt;finally&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;throw&lt;/td&gt;    &lt;td class='optionD'&gt;catch&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these class is used to make a thread? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;String&lt;/td&gt;    &lt;td class='optionB'&gt;System&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Thread&lt;/td&gt;    &lt;td class='optionD'&gt;Runnable&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;    } &lt;br /&gt;    class mainclass {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;            box obj = new box();&lt;br /&gt;            System.out.println(obj);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime error &lt;/td&gt;    &lt;td class='optionD'&gt;Garbage value&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which powerful construct is used to solve the problem of multiple inheritance in abstract class&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Pointers&lt;/td&gt;    &lt;td class='optionB'&gt;Interfaces&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Abstract superclass&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is an invalid declaration of char  line 1 :char c1='A'; line 2 :char c2=25; line 3 :char c3=2.9;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;line 1 &lt;/td&gt;    &lt;td class='optionB'&gt;line 2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;line 3&lt;/td&gt;    &lt;td class='optionD'&gt;line 2 &amp; line 3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;line 3 will give an error since it can not take decimal values&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these interface is implemented by Thread class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Runnable&lt;/td&gt;    &lt;td class='optionB'&gt;Connections&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Set&lt;/td&gt;    &lt;td class='optionD'&gt;MapConnections&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/709248964441450405/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-13.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/709248964441450405'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/709248964441450405'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-13.html' title='Test : Java_13'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5415303736679629128</id><published>2015-04-22T19:05:00.002+05:30</published><updated>2015-04-22T19:05:59.752+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_12</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements are incorrect? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;public members of class can be accessed by any code in the program.&lt;/td&gt;    &lt;td class='optionB'&gt;private members of class can only be accessed by other members of the class.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;protected members of a class can be inherited by a sub class, and become private members of the sub class.&lt;/td&gt;    &lt;td class='optionD'&gt;private members of class can be inherited by a sub class, and become protected members in sub class.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; interface calculate {&lt;br /&gt;        void cal(int item);&lt;br /&gt;    }&lt;br /&gt;    class display implements calculate {&lt;br /&gt;        int x;&lt;br /&gt;        void cal(int item) {&lt;br /&gt;            x = item * item;            &lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    class interfaces {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            display arr = new display;&lt;br /&gt;            arr.x = 0;      &lt;br /&gt;            arr.cal(2);&lt;br /&gt;            System.out.print(arr.x);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;4&lt;/td&gt;    &lt;td class='optionD'&gt;6&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class A {&lt;br /&gt;        public int i;&lt;br /&gt;        public int j;&lt;br /&gt;        A() {&lt;br /&gt;            i = 1;&lt;br /&gt;            j = 2;&lt;br /&gt; }&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        int a;&lt;br /&gt;        B() {&lt;br /&gt;            super(ob);&lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class super_use {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            System.out.println(obj.i + " " + obj.j)     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1 2&lt;/td&gt;    &lt;td class='optionB'&gt;2 1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime Error &lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following package stores all the standard java classes? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;lang&lt;/td&gt;    &lt;td class='optionB'&gt;java&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;util&lt;/td&gt;    &lt;td class='optionD'&gt;java.packages&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which function of pre defined class Thread is used to check weather current thread being checked is still running? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Join()&lt;/td&gt;    &lt;td class='optionB'&gt;isAlive()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;isRunning()&lt;/td&gt;    &lt;td class='optionD'&gt;Alive()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;&lt;pre class='brush:java'&gt;class Base { int x = 10; }&lt;br /&gt;class Derived extends Base&lt;br /&gt;{ int x = 20; }&lt;br /&gt;&lt;br /&gt;Base b = new Base();&lt;br /&gt;Derived d = new Derived ( );&lt;br /&gt;Base bd = new Derived();&lt;br /&gt;The statement&lt;br /&gt;System.out.println(b.x + " " + d.x + " " + bd.x);&lt;/pre&gt; The output is:&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;10 20 10&lt;/td&gt;    &lt;td class='optionB'&gt;10 20 20&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;20 10 20&lt;/td&gt;    &lt;td class='optionD'&gt;20 20 10&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; interface calculate {&lt;br /&gt;        void cal(int item);&lt;br /&gt;    }&lt;br /&gt;    class displayA implements calculate {&lt;br /&gt;        int x;&lt;br /&gt;        void cal(int item) {&lt;br /&gt;            x = item * item;            &lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    class displayB implements calculate {&lt;br /&gt;        int x;&lt;br /&gt;        void cal(int item) {&lt;br /&gt;            x = item / item;            &lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    class interfaces {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            displayA arr1 = new displayA;&lt;br /&gt;            displayB arr2 = new displayB;&lt;br /&gt;            arr1.x = 0;&lt;br /&gt;            arr2.x = 0;      &lt;br /&gt;            arr1.cal(2);&lt;br /&gt;            arr2.cal(2);&lt;br /&gt;            System.out.print(arr1.x + " " + arr2.x);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0 0&lt;/td&gt;    &lt;td class='optionB'&gt;2 2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;4 1&lt;/td&gt;    &lt;td class='optionD'&gt;1 4&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; abstract class A {&lt;br /&gt;        int i;&lt;br /&gt;        abstarct void display();&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        int j;&lt;br /&gt;        void display() {&lt;br /&gt;            System.out.println(j);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class Abstract_demo {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.j=1;&lt;br /&gt;            obj.display();    &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;2&lt;/td&gt;    &lt;td class='optionD'&gt;3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which function is used to perform some action when the object is to be destroyed? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;delete()&lt;/td&gt;    &lt;td class='optionB'&gt;finalize()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;main()&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;  class string_class {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            String obj = "I LIKE JAVA";   &lt;br /&gt;            System.out.println(obj.length());&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;9&lt;/td&gt;    &lt;td class='optionB'&gt;10&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;11&lt;/td&gt;    &lt;td class='optionD'&gt;12&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5415303736679629128/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-12.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5415303736679629128'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5415303736679629128'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-12.html' title='Test : Java_12'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8914645951772754534</id><published>2015-04-22T19:04:00.002+05:30</published><updated>2015-04-22T19:04:43.056+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java 11</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which keyword is used by method to refer to the object that invoked it? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;import&lt;/td&gt;    &lt;td class='optionB'&gt;catch&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;abstract&lt;/td&gt;    &lt;td class='optionD'&gt;this&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;The methods wait() and notify() are defined in   &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;java.lang.String &lt;/td&gt;    &lt;td class='optionB'&gt;java.lang.Runnable &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;java.lang.Thread&lt;/td&gt;    &lt;td class='optionD'&gt;java.lang.Object&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords is used to refer to member of base class from a sub class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;upper&lt;/td&gt;    &lt;td class='optionB'&gt;super&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;this&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Thread t = Thread.currentThread();&lt;br /&gt;            t.setName("New Thread");&lt;br /&gt;            System.out.println(t);        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Thread[5,main]  &lt;/td&gt;    &lt;td class='optionB'&gt;Thread[New Thread,5]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Thread[New Thread,5,main]&lt;/td&gt;    &lt;td class='optionD'&gt;Thread[main,5,main]&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class newthread extends Thread {&lt;br /&gt; Thread t;&lt;br /&gt; String name;&lt;br /&gt; newthread(String threadname) {&lt;br /&gt;     name = threadname;&lt;br /&gt;     t = new Thread(this,name);&lt;br /&gt;     t.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;        }&lt;br /&gt; &lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;     newthread obj1 =   new newthread("one");&lt;br /&gt;     newthread obj2 =  new newthread("two");&lt;br /&gt;            try {&lt;br /&gt;                obj1.t.wait(); &lt;br /&gt;                System.out.print(obj1.t.isAlive());&lt;br /&gt;            }&lt;br /&gt;            catch(Exception e) {&lt;br /&gt;     System.out.print("Main thread interrupted");&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true &lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Main thread interrupted &lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;public class Test  {      public void foo()      {         assert false; /* Line 5 */         assert false; /* Line 6 */     }      public void bar()     {         while(true)         {             assert false; /* Line 12 */         }          assert false;  /* Line 14 */     }  } What causes compilation to fail?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Line 5  &lt;/td&gt;    &lt;td class='optionB'&gt;Line 6&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Line 12&lt;/td&gt;    &lt;td class='optionD'&gt;Line 14&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;Option D is correct. Compilation fails because of an unreachable statement at line 14. It is a compile-time error if a statement cannot be executed because it is unreachable. The question is now, why is line 20 unreachable? If it is because of the assert then surely line 6 would also be unreachable. The answer must be something other than assert.  Examine the following:  A while statement can complete normally if and only if at least one of the following is true:  - The while statement is reachable and the condition expression is not a constant expression with value true.  -There is a reachable break statement that exits the while statement.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of relational operators? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Integer&lt;/td&gt;    &lt;td class='optionB'&gt;Boolean&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Characters&lt;/td&gt;    &lt;td class='optionD'&gt;Double&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What will be the output of the program? &lt;pre class='brush:java'&gt;public class Test &lt;br /&gt;{&lt;br /&gt;    public static int y;&lt;br /&gt;    public static void foo(int x) &lt;br /&gt;    {&lt;br /&gt;        System.out.print("foo ");&lt;br /&gt;        y = x;&lt;br /&gt;    }&lt;br /&gt;    public static int bar(int z) &lt;br /&gt;    {&lt;br /&gt;        System.out.print("bar ");&lt;br /&gt;        return y = z;&lt;br /&gt;    }&lt;br /&gt;    public static void main(String [] args ) &lt;br /&gt;    {&lt;br /&gt;        int t = 0;&lt;br /&gt;        assert t &gt; 0 : bar(7);&lt;br /&gt;        assert t &gt; 1 : foo(8); /* Line 18 */&lt;br /&gt;        System.out.println("done ");&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;bar  &lt;/td&gt;    &lt;td class='optionB'&gt;bar done&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;foo done&lt;/td&gt;    &lt;td class='optionD'&gt;Compilation fails&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;The foo() method returns void. It is a perfectly acceptable method, but because it returns void it cannot be used in an assert statement, so line 18 will not compile.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;        int volume;&lt;br /&gt;        box() {&lt;br /&gt;            width = 5;&lt;br /&gt;            height = 5;&lt;br /&gt;            length = 6;&lt;br /&gt;        }&lt;br /&gt;        void volume() {&lt;br /&gt;             volume = width*height*length;&lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class constructor_output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            box obj = new box();&lt;br /&gt;            obj.volume();&lt;br /&gt;            System.out.println(obj.volume);        } &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;100&lt;/td&gt;    &lt;td class='optionB'&gt;150&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;200&lt;/td&gt;    &lt;td class='optionD'&gt;250&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class Relational_operator {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            int var1 = 5; &lt;br /&gt;            int var2 = 6;&lt;br /&gt;            System.out.print(var1 &gt; var2);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;false&lt;/td&gt;    &lt;td class='optionD'&gt;true&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8914645951772754534/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java11.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8914645951772754534'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8914645951772754534'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java11.html' title='Test : Java 11'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7118386138510305096</id><published>2015-04-22T18:58:00.002+05:30</published><updated>2015-04-22T18:58:47.370+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_10</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements are false in the concept of abstract classes: &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Can b instantiated&lt;/td&gt;    &lt;td class='optionB'&gt;It may or may not include abstract methods&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;It can be subclassed&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is static variable defined in Collections? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;EMPTY_SET&lt;/td&gt;    &lt;td class='optionB'&gt;EMPTY_LIST&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;EMPTY_MAP&lt;/td&gt;    &lt;td class='optionD'&gt;All of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements are incorrect? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;private members of class can only be accessed by other members of the class&lt;/td&gt;    &lt;td class='optionB'&gt;private members of class can be inherited by a sub class, and become protected members in sub class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;protected members of a class can be inherited by a sub class, and become private members of the sub class&lt;/td&gt;    &lt;td class='optionD'&gt;public members of class can be accessed by any code in the program&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; import java.util.*;&lt;br /&gt;    class Bitset {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            BitSet obj = new BitSet(5);&lt;br /&gt;            for (int i = 0; i &lt; 5; ++i)&lt;br /&gt;                obj.set(i);&lt;br /&gt;            obj.clear(2);&lt;br /&gt;            System.out.print(obj);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;{0, 1, 3, 4} &lt;/td&gt;    &lt;td class='optionB'&gt;{0, 1, 2, 4}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;{0, 1, 2, 3, 4}&lt;/td&gt;    &lt;td class='optionD'&gt;{0, 0, 0, 3, 4}&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;what will be the output int a=2; System.out.println(a&lt;&lt;2);&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;8&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;6&lt;/td&gt;    &lt;td class='optionD'&gt;none of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;binary representation of 2 =10 now &lt;&lt; operator will shift digits 2 places to left, therefore new number=1000 1000 =8&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is used as default for a member of a class if no access specifier is used for it? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;private&lt;/td&gt;    &lt;td class='optionB'&gt;public&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;public, within its own package&lt;/td&gt;    &lt;td class='optionD'&gt;protected&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt; When we pass an argument by call-by-value a copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have no effect on original argument, they remain the same.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is not a correct statement? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Every class containing abstract method must be declared abstract.&lt;/td&gt;    &lt;td class='optionB'&gt;Abstract class defines only the structure of the class not its implementation. &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Abstract class can be initiated by new operator.&lt;/td&gt;    &lt;td class='optionD'&gt;Abstract class can be inherited.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements are incorrect? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;String is a class.&lt;/td&gt;    &lt;td class='optionB'&gt;Strings in java are mutable&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Every string is an object of class String.&lt;/td&gt;    &lt;td class='optionD'&gt;Java defines a peer class of String, called StringBuffer, which allows string to be altered&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            char ch;&lt;br /&gt;            ch = "hello".charAt(1);&lt;br /&gt;            System.out.println(ch);&lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;h&lt;/td&gt;    &lt;td class='optionB'&gt;e&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;l&lt;/td&gt;    &lt;td class='optionD'&gt;o&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Difference between == and equals method?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;both behaves same&lt;/td&gt;    &lt;td class='optionB'&gt;== compares the references whereas equals compares the contents&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;== compares the contents whereas equals compares the references&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;== operator always compares the references of the objects and equals method compares the contents of the object.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7118386138510305096/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-10.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7118386138510305096'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7118386138510305096'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-10.html' title='Test : Java_10'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7445225481853677424</id><published>2015-04-22T18:57:00.002+05:30</published><updated>2015-04-22T18:57:33.665+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_9</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class access{&lt;br /&gt;        public int x;&lt;br /&gt;  private int y;&lt;br /&gt;        void cal(int a, int b){&lt;br /&gt;            x =  a + 1;&lt;br /&gt;            y =  b;&lt;br /&gt;        }   &lt;br /&gt;        void print() {&lt;br /&gt;            system.out.println(" " + y);     &lt;br /&gt;        } &lt;br /&gt;    }   &lt;br /&gt;    class access_specifier {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            access obj = new access();   &lt;br /&gt;            obj.cal(2, 3);&lt;br /&gt;            System.out.println(obj.x);&lt;br /&gt;            obj.print();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;2 3&lt;/td&gt;    &lt;td class='optionB'&gt;3 3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime Error &lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What will be the output of the program (when you run with the -ea option) ? &lt;pre class='brush:java'&gt;public class Test &lt;br /&gt;{  &lt;br /&gt;    public static void main(String[] args) &lt;br /&gt;    {&lt;br /&gt;        int x = 0;  &lt;br /&gt;        assert (x &gt; 0) : "assertion failed"; /* Line 6 */&lt;br /&gt;        System.out.println("finished"); &lt;br /&gt;    } &lt;br /&gt;}&lt;br /&gt;   &lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;finished  &lt;/td&gt;    &lt;td class='optionB'&gt;Compilation fails.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;An AssertionError is thrown.&lt;/td&gt;    &lt;td class='optionD'&gt;An AssertionError is thrown and finished is output.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;An assertion Error is thrown as normal giving the output "assertion failed". The word "finished" is not printed (ensure you run with the -ea option)  Assertion failures are generally labeled in the stack trace with the file and line number from which they were thrown, and also in this case with the error's detail message "assertion failed". The detail message is supplied by the assert statement in line 6.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the correct format of declaration of abstract class &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;class abstract clsName {       // body of class }&lt;/td&gt;    &lt;td class='optionB'&gt;abstract class clsName; {       // body of class }&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;abstract class clsName {       // body of class }&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;By which method a class can be abstracted&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Private&lt;/td&gt;    &lt;td class='optionB'&gt;Public&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Protected&lt;/td&gt;    &lt;td class='optionD'&gt;All of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these methods is used to compare a specific region inside a string with another specific region in another string? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;regionMatch()&lt;/td&gt;    &lt;td class='optionB'&gt;match()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;RegionMatches()&lt;/td&gt;    &lt;td class='optionD'&gt;regionMatches()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class bool_operator {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {    &lt;br /&gt;             boolean a = true;&lt;br /&gt;             boolean b = !true;&lt;br /&gt;             boolean c = a | b;&lt;br /&gt;       boolean d = a &amp; b;&lt;br /&gt;             boolean e = d ? b : c;&lt;br /&gt;             System.out.println(d + " " + e);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;truefalse&lt;/td&gt;    &lt;td class='optionB'&gt;falsetrue&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;truetrue&lt;/td&gt;    &lt;td class='optionD'&gt;falsefalse&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords must be used to handle the exception thrown by try block in some rational manner? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;try&lt;/td&gt;    &lt;td class='optionB'&gt;finally&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;throw&lt;/td&gt;    &lt;td class='optionD'&gt;catch&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords must be used to monitor for exceptions? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;try&lt;/td&gt;    &lt;td class='optionB'&gt;finally&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;throw&lt;/td&gt;    &lt;td class='optionD'&gt;catch&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of interface contains all the methods used for handling thread related operations in Java? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Runnable interface&lt;/td&gt;    &lt;td class='optionB'&gt;ThreadHandling interface&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Math interface&lt;/td&gt;    &lt;td class='optionD'&gt;System interface&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following classes are available in the java.lang package? (A) Stack (B) Object (C) Math (D) Random (E) String (F) StringBuffer (G) Vector&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(B), (C) &amp; (E) &lt;/td&gt;    &lt;td class='optionB'&gt;(B), (C), (E) &amp; (F)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(B), (E) &amp; (F) &lt;/td&gt;    &lt;td class='optionD'&gt;(A), (B), (C), (E) &amp; (F) &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7445225481853677424/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-9.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7445225481853677424'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7445225481853677424'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-9.html' title='Test : Java_9'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3094218376553110919</id><published>2015-04-22T18:56:00.000+05:30</published><updated>2015-04-22T18:56:34.031+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_8</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class newthread extends Thread {&lt;br /&gt; Thread t;&lt;br /&gt; newthread() {&lt;br /&gt;     t1 = new Thread(this,"Thread_1");&lt;br /&gt;     t2 = new Thread(this,"Thread_2");&lt;br /&gt;     t1.start();&lt;br /&gt;     t2.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;     t2.setPriority(Thread.MAX_PRIORITY); &lt;br /&gt;     System.out.print(t1.equals(t2));&lt;br /&gt;        }    &lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            new newthread();        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true&lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;truefalse&lt;/td&gt;    &lt;td class='optionD'&gt;falsefalse&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these classes is not part of Java?s collection framework? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Maps&lt;/td&gt;    &lt;td class='optionB'&gt;Array&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Stack&lt;/td&gt;    &lt;td class='optionD'&gt;Queue&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt; Queue is not a part of collection framework&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these statement is correct? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true and false are numeric values 1 and 0.&lt;/td&gt;    &lt;td class='optionB'&gt;true and false are numeric values 0 and 1.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;true is any non zero value and false is 0.&lt;/td&gt;    &lt;td class='optionD'&gt;true and false are non numeric values.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;When does a finally block get executed ?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;When an exception is thrown in a try block&lt;/td&gt;    &lt;td class='optionB'&gt;When the method in which finally block is present is about to return. &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;When an unhandled exception is thrown in a try block.&lt;/td&gt;    &lt;td class='optionD'&gt;After execution has left a try catch block, no matter exception occurs or not.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;The finally block is executed after the try catch block has completed the execution. Whether an exception occurs or not, finally block is always executed. Hence, finally block can be used to do some common cleanup under normal or exceptional conditions.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;import java.util.*;&lt;br /&gt;    class vector {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Vector obj = new Vector(4,2);&lt;br /&gt;            obj.addElement(new Integer(3));&lt;br /&gt;            obj.addElement(new Integer(2));&lt;br /&gt;            obj.addElement(new Integer(5));&lt;br /&gt;            obj.removeAll(obj);&lt;br /&gt;            System.out.println(obj.isEmpty());&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;True&lt;/td&gt;    &lt;td class='optionD'&gt;False&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt; firstly elements 3, 2, 5 are entered in the vector obj, but when obj.removeAll(obj); is executed all the elements are deleted and vector is empty, hence obj.isEmpty() returns true. Output: $ javac vector.java $ java vector true&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Consider the following code &lt;pre class='brush:java'&gt;int number[] = new int[5];&lt;/pre&gt; After execution of this statement, which of the following are true?  (A) number[0] is undefined (B) number[5] is undefined (C) number[4] is null (D) number[2] is 0 (E) number.length() is 5  &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(B), (D) &amp; (E)&lt;/td&gt;    &lt;td class='optionB'&gt;(A) &amp; (E)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(C) &amp; (E) &lt;/td&gt;    &lt;td class='optionD'&gt;(E)&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class main_class {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            int x = 9;&lt;br /&gt;            if (x == 9) { &lt;br /&gt;                int x = 8;&lt;br /&gt;                System.out.println(x);&lt;br /&gt;            }&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;    &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;9&lt;/td&gt;    &lt;td class='optionB'&gt;8&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation error &lt;/td&gt;    &lt;td class='optionD'&gt;Runtime error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these interface declares core method that all collections will have? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;set&lt;/td&gt;    &lt;td class='optionB'&gt;EventListner&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Comparator&lt;/td&gt;    &lt;td class='optionD'&gt;Collection&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;Collection interfaces defines core methods that all the collections like set, map, arrays etc will have.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class newthread implements Runnable {&lt;br /&gt; Thread t;&lt;br /&gt;        newthread() {&lt;br /&gt;            t1 = new Thread(this,"Thread_1");&lt;br /&gt;            t2 = new Thread(this,"Thread_2");&lt;br /&gt;            t1.start();&lt;br /&gt;            t2.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;            t2.setPriority(Thread.MAX_PRIORITY); &lt;br /&gt;     System.out.print(t1.equals(t2));&lt;br /&gt;        }    &lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            new newthread();        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true&lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;truefalse&lt;/td&gt;    &lt;td class='optionD'&gt;falsefalse&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class Output {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {    &lt;br /&gt;             int x , y = 1;&lt;br /&gt;             x = 10;&lt;br /&gt;             if (x != 10 &amp;&amp; x / 0 == 0)&lt;br /&gt;                 System.out.println(y);&lt;br /&gt;             else&lt;br /&gt;                 System.out.println(++y);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1&lt;/td&gt;    &lt;td class='optionB'&gt;2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime error owing to division by zero in if condition. &lt;/td&gt;    &lt;td class='optionD'&gt;Unpredictable behavior of program.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3094218376553110919/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-8.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3094218376553110919'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3094218376553110919'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-8.html' title='Test : Java_8'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4767483428688137000</id><published>2015-04-22T18:54:00.000+05:30</published><updated>2015-04-22T18:54:53.593+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_7</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What will be the output of the program? &lt;pre class='brush:java'&gt;public class Test &lt;br /&gt;{  &lt;br /&gt;    public static void main(String[] args) &lt;br /&gt;    { &lt;br /&gt;        int x = 0;  &lt;br /&gt;        assert (x &gt; 0) ? "assertion failed" : "assertion passed" ; &lt;br /&gt;        System.out.println("finished");  &lt;br /&gt;    } &lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;finished  &lt;/td&gt;    &lt;td class='optionB'&gt;Compiliation fails.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;An AssertionError is thrown and finished is output.&lt;/td&gt;    &lt;td class='optionD'&gt;An AssertionError is thrown with the message "assertion failed."&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;Compilation Fails. You can't use the Assert statement in a similar way to the ternary operator. Don't confuse.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method is used to tell the calling thread to give up monitor and go to sleep until some other thread enters the same monitor? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;wait()&lt;/td&gt;    &lt;td class='optionB'&gt;notify()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;notifyAll()&lt;/td&gt;    &lt;td class='optionD'&gt;sleep()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords is used to refer to member of base class from a sub class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;upper&lt;/td&gt;    &lt;td class='optionB'&gt;super&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;this&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method of Thread class is used to Suspend a thread for a period of time? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;terminate()&lt;/td&gt;    &lt;td class='optionB'&gt;suspend()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;stop()&lt;/td&gt;    &lt;td class='optionD'&gt;sleep()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is true about unmodifiableCollection() method? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;unmodifiableCollection() returns a collection that cannot be modified.&lt;/td&gt;    &lt;td class='optionB'&gt;unmodifiableCollection() method is available only for List and Set.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;unmodifiableCollection() is defined in Collection class.&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the length of the application box made by this program? &lt;pre class='brush:java'&gt;import java.awt.*;&lt;br /&gt;    import java.applet.*;&lt;br /&gt;    public class myapplet extends Applet {&lt;br /&gt;        public void paint(Graphics g) {&lt;br /&gt;            g.drawString("A Simple Applet", 20, 20);    &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;20&lt;/td&gt;    &lt;td class='optionB'&gt;50&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;100&lt;/td&gt;    &lt;td class='optionD'&gt;System Dependent&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Suppose that s1 and s2 are two strings. Which of the statements or expressions are valid?  (A) String s3 = s1 + s2; (B) String s3 = s1 - s2; (C) s1 &lt;= s2 (D) s1.compareTo(s2); (E) int m = s1.length();&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(A), (C) &amp; (E) &lt;/td&gt;    &lt;td class='optionB'&gt;(D) &amp; (E)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(C), (D) &amp; (E) &lt;/td&gt;    &lt;td class='optionD'&gt;(A), (D) &amp; (E)&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;toRadian() and toDegree() methods were added by which version of Java? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Java 1.0&lt;/td&gt;    &lt;td class='optionB'&gt;Java 1.5&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Java 2.0&lt;/td&gt;    &lt;td class='optionD'&gt;Java 3.0&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;A class member declared protected becomes member of subclass of which type? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;public member&lt;/td&gt;    &lt;td class='optionB'&gt;private member&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;protected member&lt;/td&gt;    &lt;td class='optionD'&gt;static member&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class newthread implements Runnable {&lt;br /&gt; Thread t;&lt;br /&gt;        newthread() {&lt;br /&gt;            t = new Thread(this,"My Thread");&lt;br /&gt;            t.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;     System.out.println(t);&lt;br /&gt; }&lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            new newthread();        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;My Thread &lt;/td&gt;    &lt;td class='optionB'&gt;Thread[My Thread,5,main]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error&lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4767483428688137000/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-7.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4767483428688137000'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4767483428688137000'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-7.html' title='Test : Java_7'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6045165772640634277</id><published>2015-04-22T18:50:00.002+05:30</published><updated>2015-04-22T18:50:53.770+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_6</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Given the class definitions &lt;pre class='brush:java'&gt;System.out.print(b.display() + " ");&lt;br /&gt;System.out.print(d.display() + " ");&lt;br /&gt;System.out.print(bd.display() + " ");&lt;br /&gt;System.out.println();&lt;/pre&gt;will display:&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Base Derived Derived&lt;/td&gt;    &lt;td class='optionB'&gt;Base Base Derived  &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Base Derived Base &lt;/td&gt;    &lt;td class='optionD'&gt;Derived Derived Derived &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following keywords are used to control access to a class member? (A) default (B) abstract (C) protected (D) interface (E) public&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(C) &amp; (E)  &lt;/td&gt;    &lt;td class='optionB'&gt;(A), (C) &amp; (E)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(B), (C) &amp; (E)&lt;/td&gt;    &lt;td class='optionD'&gt;All of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which operator is used by Java run time implementations to free the memory of an object when it is no longer needed? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;delete&lt;/td&gt;    &lt;td class='optionB'&gt;free&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;new&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;Java handles deallocation of memory automatically, we do not need to explicitly delete an element. Garbage collection only occurs during execution of the program. When no references to the object exist, that object is assumed to be no longer needed, and the memory occupied by the object can be reclaimed.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class string_demo {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            String obj = "I" + "like" + "Java";   &lt;br /&gt;            System.out.println(obj);     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;l&lt;/td&gt;    &lt;td class='optionB'&gt;like&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;likajava&lt;/td&gt;    &lt;td class='optionD'&gt;llikejava&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keyword must be used to inherit a class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;super&lt;/td&gt;    &lt;td class='optionB'&gt;this&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;extent&lt;/td&gt;    &lt;td class='optionD'&gt;extends&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;An interface can only contain abstract methods. True or False?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;True&lt;/td&gt;    &lt;td class='optionB'&gt;False&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;&lt;/td&gt;    &lt;td class='optionD'&gt;&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class ternary_operator {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;             int x = 3;&lt;br /&gt;             int y = ~ x;&lt;br /&gt;             int z;&lt;br /&gt;             z = x &gt; y ? x : y;&lt;br /&gt;             System.out.print(z);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;3&lt;/td&gt;    &lt;td class='optionD'&gt;-4&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following defines a legal abstract class? &lt;pre class='brush:java'&gt;(A)class Vehicle {&lt;br&gt;&lt;br /&gt;              abstract void display(); } &lt;br /&gt;(B)abstract class Vehicle {&lt;br&gt;&lt;br /&gt;              abstract void display(); }&lt;br /&gt;(C)abstract Vehicle {&lt;br&gt;&lt;br /&gt;              abstract void display(); } &lt;br /&gt;(D)class abstract Vehicle {&lt;br&gt;&lt;br /&gt;              abstract void display(); } &lt;br /&gt;              System.out.println("Car"); }} &lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;ol start="1" class="dp-cpp"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span class="keyword"&gt;class&lt;/span&gt;&lt;span&gt; Vehicle {  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;  &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;              abstract &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; display(); }   &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;textarea style="display:none;" class="originalCode"&gt;class Vehicle {&lt;br&gt;              abstract void display(); } &lt;/textarea&gt;&lt;/div&gt;&lt;/td&gt;    &lt;td class='optionB'&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;ol start="1" class="dp-cpp"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span&gt;abstract &lt;/span&gt;&lt;span class="keyword"&gt;class&lt;/span&gt;&lt;span&gt; Vehicle {  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;  &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;              abstract &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; display(); }  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;textarea style="display:none;" class="originalCode"&gt;abstract class Vehicle {&lt;br&gt;              abstract void display(); }&lt;/textarea&gt;&lt;/div&gt;&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;ol start="1" class="dp-cpp"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span&gt;abstract Vehicle {  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;  &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;              abstract &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; display(); }   &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;textarea style="display:none;" class="originalCode"&gt;abstract Vehicle {&lt;br&gt;              abstract void display(); } &lt;/textarea&gt;&lt;/div&gt;&lt;/td&gt;    &lt;td class='optionD'&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;ol start="1" class="dp-cpp"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span class="keyword"&gt;class&lt;/span&gt;&lt;span&gt; abstract Vehicle {  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;  &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;              abstract &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; display(); }   &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;textarea style="display:none;" class="originalCode"&gt;class abstract Vehicle {&lt;br&gt;              abstract void display(); } &lt;/textarea&gt;&lt;/div&gt;&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class newthread implements Runnable {&lt;br /&gt; Thread t;&lt;br /&gt;        newthread() {&lt;br /&gt;            t = new Thread(this,"My Thread");&lt;br /&gt;            t.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;     System.out.println(t.getName());&lt;br /&gt; }&lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            new newthread();        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;My Thread &lt;/td&gt;    &lt;td class='optionB'&gt;Thread[My Thread,5,main]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error&lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these methods can convert an object into a List? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;SetList()&lt;/td&gt;    &lt;td class='optionB'&gt;ConvertList()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;singletonList()&lt;/td&gt;    &lt;td class='optionD'&gt;CopyList()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt; singletonList() returns the object as an immutable List. This is a easy way to convert a single object into a list. This was added by Java 2.0.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6045165772640634277/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-6.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6045165772640634277'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6045165772640634277'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-6.html' title='Test : Java_6'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2567164089875443972</id><published>2015-04-22T18:01:00.000+05:30</published><updated>2015-04-22T18:01:20.873+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_5</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;    } &lt;br /&gt;    class mainclass {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;             box obj = new box();&lt;br /&gt;             obj.widht = 10;&lt;br /&gt;             obj.height = 2;&lt;br /&gt;             obj.length = 10;&lt;br /&gt;             int y = obj.widht * obj.height * obj.length; &lt;br /&gt;             System.out.print(y);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;12&lt;/td&gt;    &lt;td class='optionB'&gt;200&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;400&lt;/td&gt;    &lt;td class='optionD'&gt;100&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What will be the output of the following code: &lt;pre class='brush:java'&gt;public class Point extends Shape {&lt;br /&gt;&lt;br /&gt; static int x, y;&lt;br /&gt; public Point() {&lt;br /&gt;  x = 0;&lt;br /&gt;  y = 0;&lt;br /&gt; }&lt;br /&gt; public double area() {&lt;br /&gt;  return 0;&lt;br /&gt; }&lt;br /&gt; public double perimeter() {&lt;br /&gt;  return 0;&lt;br /&gt; }&lt;br /&gt; public static void print() {&lt;br /&gt;  System.out.println("point: " + x + "," + y);&lt;br /&gt; }&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  Point p = new Point();&lt;br /&gt;  p.print();&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;None&lt;/td&gt;    &lt;td class='optionB'&gt;point: 0, 0&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;point: 1, 1&lt;/td&gt;    &lt;td class='optionD'&gt;point: 0, 1&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method of String class can be used to test to strings for equality? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;isequal()&lt;/td&gt;    &lt;td class='optionB'&gt;isequals()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;equal()&lt;/td&gt;    &lt;td class='optionD'&gt;equals()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        { &lt;br /&gt;           String s1 = "Hello";&lt;br /&gt;           String s2 = new String(s1);&lt;br /&gt;           String s3 = "HELLO";&lt;br /&gt;           System.out.println(s1.equals(s2) + " " + s2.equals(s3));&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true true&lt;/td&gt;    &lt;td class='optionB'&gt;false false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;true false&lt;/td&gt;    &lt;td class='optionD'&gt;false true&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these lines will give an error  line 1. int a=1,b=2; line 2. float c=2.0F; line 3. System.out.println((a==c)+""+(c==b)); &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;line 2 &amp; line 3&lt;/td&gt;    &lt;td class='optionB'&gt;line 3 only&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;line 2 only&lt;/td&gt;    &lt;td class='optionD'&gt;none of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;it will compile and run successfully falsetrue&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is an abstract class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Thread&lt;/td&gt;    &lt;td class='optionB'&gt;Runnable&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Multithread&lt;/td&gt;    &lt;td class='optionD'&gt;System&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class A {&lt;br /&gt;        public int i;&lt;br /&gt;        protected int j;&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        int j;&lt;br /&gt;        void display() {&lt;br /&gt;            super.j = 3;&lt;br /&gt;            System.out.println(i + " " + j);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.i=1;&lt;br /&gt;            obj.j=2;   &lt;br /&gt;            obj.display();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1 2&lt;/td&gt;    &lt;td class='optionB'&gt;2 1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;3 1&lt;/td&gt;    &lt;td class='optionD'&gt;1 3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method of Thread class is used to suspend a thread for a period of time? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;sleep()&lt;/td&gt;    &lt;td class='optionB'&gt;terminate()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;suspend()&lt;/td&gt;    &lt;td class='optionD'&gt;stop()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the return type of Constructors? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;int&lt;/td&gt;    &lt;td class='optionB'&gt;float&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;void&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;Constructors does not have any return type, not even void.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class area {&lt;br /&gt;        int width;&lt;br /&gt;        int length;&lt;br /&gt;        int area;&lt;br /&gt;        void area(int width, int length) {&lt;br /&gt;            this.width = width;&lt;br /&gt;            this.length = length;&lt;br /&gt;        }&lt;br /&gt; &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            area obj = new area();&lt;br /&gt;            obj.area(5 , 6);&lt;br /&gt;            System.out.println(obj.length + " " + obj.width);        &lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0 0&lt;/td&gt;    &lt;td class='optionB'&gt;5 6&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;6 5&lt;/td&gt;    &lt;td class='optionD'&gt;6 6&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2567164089875443972/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-5.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2567164089875443972'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2567164089875443972'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-5.html' title='Test : Java_5'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2052497238292337959</id><published>2015-04-22T18:00:00.000+05:30</published><updated>2015-04-22T18:00:08.336+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_4</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;&lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;ol start="1" class="dp-j"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span&gt;Class A  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;   {  &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;    &lt;span class="keyword"&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="keyword"&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; main(String a1[])  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;    {  &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;      String s1= ?Hello?;  &lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;      StringBuffer s2= &lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span&gt; StringBuffer(?Hello?);  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;      s1 = s1 + ?World?;  &lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;      s2.append(?World?);  &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;   }  &lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;In the above code how many String and StringBuffer objects are created?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1 &amp; 1&lt;/td&gt;    &lt;td class='optionB'&gt;2 &amp; 1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;2 &amp; 2&lt;/td&gt;    &lt;td class='optionD'&gt;1 &amp; 2&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;Difference between String and StringBuffer object is immutable and mutable respectively. Code  s1+ ?World? will create a new  String object ?HelloWorld? with new reference is assigned to s1 and looses ?Hello? String object reference. So two String object is created from the above code.In the case of StringBuffer s2.append(?World?) will modify the existing object s2 and creates only one object because it is mutable.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int a, b;&lt;br /&gt;                b = 0;&lt;br /&gt;                a = 5 / b;&lt;br /&gt;                System.out.print("A");&lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {&lt;br /&gt;         System.out.print("B");         &lt;br /&gt;            }&lt;br /&gt;            finally {&lt;br /&gt;             System.out.print("C");&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;A&lt;/td&gt;    &lt;td class='optionB'&gt;B&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;AC&lt;/td&gt;    &lt;td class='optionD'&gt;BC&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these method wakes up the first thread that called wait()? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;wake()&lt;/td&gt;    &lt;td class='optionB'&gt;notify()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;start()&lt;/td&gt;    &lt;td class='optionD'&gt;notifyAll()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements is correct? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Public method can be accessed by calling object of the public class.&lt;/td&gt;    &lt;td class='optionB'&gt;Public method is accessible only to subclasses of its parent class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Public method can only be called by object of its class.&lt;/td&gt;    &lt;td class='optionD'&gt;Public method is accessible to all other classes in the hierarchy&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords is not a part of exception handling? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;try&lt;/td&gt;    &lt;td class='optionB'&gt;finally&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;thrown&lt;/td&gt;    &lt;td class='optionD'&gt;catch&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is used to access member of class before object of that class is created? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;public&lt;/td&gt;    &lt;td class='optionB'&gt;private&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;static&lt;/td&gt;    &lt;td class='optionD'&gt;protected&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements are true? (A) An abstract class may not have any final methods. (B) A final class may not have any abstract methods. (C) An inner class may be declared with any accessibility keyword. (D) Transient variables must be static.&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;B) &amp; (C)  &lt;/td&gt;    &lt;td class='optionB'&gt;(A) &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(A) &amp; (C) &lt;/td&gt;    &lt;td class='optionD'&gt;(D) &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords are used to define an abstract class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;abst&lt;/td&gt;    &lt;td class='optionB'&gt;abstract&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Abstract&lt;/td&gt;    &lt;td class='optionD'&gt;abstract class&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following are the wrapper classes? (A) Random (B) Byte (C) Vector (D) Integer (E) Short (F) Double (G) String&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(B), (D) &amp; (F)  &lt;/td&gt;    &lt;td class='optionB'&gt;(A), (B), (D), (E) &amp; (F)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(B), (D), (E) &amp; (F)&lt;/td&gt;    &lt;td class='optionD'&gt;(D), (E) &amp; (F) &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following is correct way of implementing an interface salary by class manager? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;class manager extends salary {}&lt;/td&gt;    &lt;td class='optionB'&gt;class manager implements salary {}&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;class manager imports salary {}&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2052497238292337959/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-4.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2052497238292337959'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2052497238292337959'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-4.html' title='Test : Java_4'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8271300955178348816</id><published>2015-04-22T17:57:00.002+05:30</published><updated>2015-04-22T17:57:56.606+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_3</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these lines will give an error  line 1 :int a=1; line 2 :char c=25; line 3 :double d=2.9;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;line 1 &lt;/td&gt;    &lt;td class='optionB'&gt;line 2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;line 3&lt;/td&gt;    &lt;td class='optionD'&gt;none of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;no error since character can take integer value&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Following code prints ? &lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;ol start="1" class="dp-j"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;span&gt; a=&lt;/span&gt;&lt;span class="number"&gt;5&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;System.out.println(a -= a+ = a -= a += a);  &lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;5&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;-5&lt;/td&gt;    &lt;td class='optionD'&gt;none of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;It is evaluated as  a -= (a += ( a -= (a += 5) )) a -= (a += ( a -= 10 )) The value of a is still 5 a -= (a += -5 ) a -= 0 which is 5&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;If a class inheriting an abstract class does not define all of its function then it will be known as? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;abstract&lt;/td&gt;    &lt;td class='optionB'&gt;A simple class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Static class&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class A {&lt;br /&gt;        public int i;&lt;br /&gt;        private int j;&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        void display() {&lt;br /&gt;            super.j = super.i + 1;&lt;br /&gt;            System.out.println(super.i + " " + super.j);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class inheritance {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.i=1;&lt;br /&gt;            obj.j=2;   &lt;br /&gt;            obj.display();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;2 2&lt;/td&gt;    &lt;td class='optionB'&gt;2 3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime Error &lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;&lt;pre class='brush:java'&gt;public class Test2 &lt;br /&gt;{&lt;br /&gt;    public static int x;&lt;br /&gt;    public static int foo(int y) &lt;br /&gt;    {&lt;br /&gt;        return y * 2;&lt;br /&gt;    }&lt;br /&gt;    public static void main(String [] args) &lt;br /&gt;    {&lt;br /&gt;        int z = 5;&lt;br /&gt;        assert z &gt; 0; /* Line 11 */&lt;br /&gt;        assert z &gt; 2: foo(z); /* Line 12 */&lt;br /&gt;        if ( z &lt; 7 )&lt;br /&gt;            assert z &gt; 4; /* Line 14 */&lt;br /&gt;&lt;br /&gt;        switch (z) &lt;br /&gt;        {&lt;br /&gt;            case 4: System.out.println("4 ");&lt;br /&gt;            case 5: System.out.println("5 ");&lt;br /&gt;            default: assert z &lt; 10;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        if ( z &lt; 10 )&lt;br /&gt;            assert z &gt; 4: z++; /* Line 22 */&lt;br /&gt;        System.out.println(z);&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Line 11 &lt;/td&gt;    &lt;td class='optionB'&gt;Line 12&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Line 14&lt;/td&gt;    &lt;td class='optionD'&gt;Line 22&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;Assert statements should not cause side effects. Line 22 changes the value of z if the assert statement is false.  Option A is fine; a second expression in an assert statement is not required.  Option B is fine because it is perfectly acceptable to call a method with the second expression of an assert statement.  Option C is fine because it is proper to call an assert statement conditionally.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the biggest disadvantage of using inheritance&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Can be implemented in point class&lt;/td&gt;    &lt;td class='optionB'&gt;Pointers can't be used&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Multiple inheritance can't be used&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;When a class extends an abstract class, it can?t extend any other class.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Consider the following two classes: &lt;pre class='brush:java'&gt;public class ClassA {&lt;br /&gt;    public void methodOne(int i) {&lt;br /&gt;    }&lt;br /&gt;    public void methodTwo(int i) {&lt;br /&gt;    }&lt;br /&gt;    public static void methodThree(int i) {&lt;br /&gt;    }&lt;br /&gt;    public static void methodFour(int i) {&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class ClassB extends ClassA {&lt;br /&gt;    public static void methodOne(int i) {&lt;br /&gt;    }&lt;br /&gt;    public void methodTwo(int i) {&lt;br /&gt;    }&lt;br /&gt;    public void methodThree(int i) {&lt;br /&gt;    }&lt;br /&gt;    public static void methodFour(int i) {&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; Which method hides a method in the superclass?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;MethodOne&lt;/td&gt;    &lt;td class='optionB'&gt;MethodTwo&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;MethodThree&lt;/td&gt;    &lt;td class='optionD'&gt;MethodFour&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; import java.util.*;&lt;br /&gt;    class stack {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Stack obj = new Stack();&lt;br /&gt;            obj.push(new Integer(3));&lt;br /&gt;            obj.push(new Integer(2));&lt;br /&gt;            obj.pop();&lt;br /&gt;            obj.push(new Integer(5));&lt;br /&gt;          System.out.println(obj);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;[3, 5] &lt;/td&gt;    &lt;td class='optionB'&gt;[3, 2]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;[3, 2, 5]&lt;/td&gt;    &lt;td class='optionD'&gt;[3, 5, 2]&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;push() and pop() are standard functions of the class stack, push() inserts in the stack and pop removes from the stack. 3 &amp; 2 are inserted using push() the pop() is used which removes 2 from the stack then again push is used to insert 5 hence stack contains elements 3 &amp; 5. Output: $ javac stack.java $ java stack [3, 5]&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these can be used to fully abstract a class from its implementation? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Objects&lt;/td&gt;    &lt;td class='optionB'&gt;Packages&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Interfaces&lt;/td&gt;    &lt;td class='optionD'&gt;None of the Mentioned.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;what will be the output int i=10; System.out.println(i++ + ++i);&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;20&lt;/td&gt;    &lt;td class='optionB'&gt;21&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;22&lt;/td&gt;    &lt;td class='optionD'&gt;23&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;i++ will first use the value and then increment it by one, ++i will increment value first Therefore i++ + ++i= 10 + 12 =22 &lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8271300955178348816/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-3.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8271300955178348816'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8271300955178348816'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-3.html' title='Test : Java_3'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8923431473957834974</id><published>2015-04-22T17:56:00.000+05:30</published><updated>2015-04-22T17:56:46.547+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_2</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;    } &lt;br /&gt;    class mainclass {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;            box obj1 = new box();&lt;br /&gt;            box obj2 = new box();&lt;br /&gt;            obj1.height = 1;&lt;br /&gt;            obj1.length = 2;&lt;br /&gt;            obj1.width = 1;&lt;br /&gt;            obj2 = obj1;&lt;br /&gt;            System.out.println(obj2.height);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1&lt;/td&gt;    &lt;td class='optionB'&gt;2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime error &lt;/td&gt;    &lt;td class='optionD'&gt;Garbage value&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class A {&lt;br /&gt;        int i;&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        int j;&lt;br /&gt;        void display() {&lt;br /&gt;            super.i = j + 1;&lt;br /&gt;            System.out.println(j + " " + i);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class inheritance {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.i=1;&lt;br /&gt;            obj.j=2;   &lt;br /&gt;            obj.display();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;2 2&lt;/td&gt;    &lt;td class='optionB'&gt;2 3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;3 2&lt;/td&gt;    &lt;td class='optionD'&gt;3 3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements are true? (A) A Java monitor must either extend Thread or implement Runnable. (B) The sleep() method should be enclosed in try ... catch block. (C) The yield() method should be enclosed in try ... catch block. (D) A thread can be temporarily suspended from running by using the wait() method. (E) A suspended thread using suspend() method can be revived using the resume() method. &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(A), (B), (D) &amp; (E&lt;/td&gt;    &lt;td class='optionB'&gt;(D) &amp; (E) &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(A), (B) &amp; (D)&lt;/td&gt;    &lt;td class='optionD'&gt;(B), (D) &amp; (E)&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the result of attempting to compile and run the program? &lt;div class="dp-highlighter"&gt;&lt;div class="bar"&gt;&lt;/div&gt;&lt;ol start="1" class="dp-j"&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span class="keyword"&gt;class&lt;/span&gt;&lt;span&gt; BaseException &lt;/span&gt;&lt;span class="keyword"&gt;extends&lt;/span&gt;&lt;span&gt; Exception {}  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;   &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span class="keyword"&gt;class&lt;/span&gt;&lt;span&gt; SubException &lt;/span&gt;&lt;span class="keyword"&gt;extends&lt;/span&gt;&lt;span&gt; BaseException {}  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;   &lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;&lt;span class="keyword"&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="keyword"&gt;class&lt;/span&gt;&lt;span&gt; TestClass {  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;    &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; method1() &lt;/span&gt;&lt;span class="keyword"&gt;throws&lt;/span&gt;&lt;span&gt; BaseException {&lt;/span&gt;&lt;span class="keyword"&gt;throw&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span&gt; SubException();}  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;    &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; method2() &lt;/span&gt;&lt;span class="keyword"&gt;throws&lt;/span&gt;&lt;span&gt; SubException {}  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;    &lt;span class="keyword"&gt;public&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="keyword"&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span&gt; main (String[] args) {  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;        TestClass objTest = &lt;span class="keyword"&gt;new&lt;/span&gt;&lt;span&gt; TestClass();  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;        &lt;span class="keyword"&gt;int&lt;/span&gt;&lt;span&gt; i,j,k,l;   &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;        i = j = k = l = &lt;span class="number"&gt;10&lt;/span&gt;&lt;span&gt;;  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;        &lt;span class="keyword"&gt;try&lt;/span&gt;&lt;span&gt; {objTest.method1(); i++;} &lt;/span&gt;&lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;span&gt; (BaseException e) {j++;}  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;        &lt;span class="keyword"&gt;try&lt;/span&gt;&lt;span&gt; {objTest.method2(); k++;} &lt;/span&gt;&lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;span&gt; (SubException e) {l++;}  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;        System.out.print(i+&lt;span class="string"&gt;","&lt;/span&gt;&lt;span&gt;+j+&lt;/span&gt;&lt;span class="string"&gt;","&lt;/span&gt;&lt;span&gt;+k+&lt;/span&gt;&lt;span class="string"&gt;","&lt;/span&gt;&lt;span&gt;+l);  &lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;span&gt;    }  &lt;/span&gt;&lt;/li&gt;&lt;li class=""&gt;&lt;span&gt;}  &lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Prints: 10,11,10,10&lt;/td&gt;    &lt;td class='optionB'&gt;Prints: 11,11,10,10&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Prints: 10,11,11,10&lt;/td&gt;    &lt;td class='optionD'&gt;Prints: 11,11,11,10&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;Initially all the variables i, j, k, l are initialized to 10. On execution of "method1", an exception of type "SubException" is thrown. Since "SubException" is a "BaseException", "j++" will get executed and "j" gets incremented to 11. On execution of "method2", no exception is thrown and hence method2 returns normally and "k++" will get executed and "k" gets incremented to 11. The catch(SubException e) block is not executed and hence "l" remains 10. Hence the output printed is 10,11,11,10.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class A {&lt;br /&gt;        public int i;&lt;br /&gt;        protected int j;&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        int j;&lt;br /&gt;        void display() {&lt;br /&gt;            super.j = 3;&lt;br /&gt;            System.out.println(i + " " + j);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.i=1;&lt;br /&gt;            obj.j=2;   &lt;br /&gt;            obj.display();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;2 1&lt;/td&gt;    &lt;td class='optionB'&gt;1 2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;3 1&lt;/td&gt;    &lt;td class='optionD'&gt;1 3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class string_class {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            String obj = "hello";&lt;br /&gt;            String obj1 = "world";   &lt;br /&gt;            String obj2 = "hello";&lt;br /&gt;            System.out.println(obj.equals(obj1) + " " + obj.equals(obj2));&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true true&lt;/td&gt;    &lt;td class='optionB'&gt;false false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;true false&lt;/td&gt;    &lt;td class='optionD'&gt;false true&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;what will be the output int a=2; int b=3; System.out.println(a+""+b);&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;2 3&lt;/td&gt;    &lt;td class='optionB'&gt;3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;5&lt;/td&gt;    &lt;td class='optionD'&gt;23&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;a+""+b will be treated as a string Therefore 2+""+3 will give 23 &lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class newthread implements Runnable {&lt;br /&gt; Thread t;&lt;br /&gt;        newthread() {&lt;br /&gt;            t = new Thread(this,"My Thread");&lt;br /&gt;            t.start();&lt;br /&gt; }&lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            new newthread();        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;My Thread &lt;/td&gt;    &lt;td class='optionB'&gt;Thread[My Thread,5,main]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error&lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class newthread extends Thread {&lt;br /&gt; Thread t;&lt;br /&gt; String name;&lt;br /&gt; newthread(String threadname) {&lt;br /&gt;     name = threadname;&lt;br /&gt;     t = new Thread(this,name);&lt;br /&gt;     t.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;        }&lt;br /&gt; &lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;     newthread obj1 =   new newthread("one");&lt;br /&gt;     newthread obj2 =  new newthread("two");&lt;br /&gt;            try {&lt;br /&gt;                Thread.sleep(1000); &lt;br /&gt;                System.out.print(obj1.t.isAlive());&lt;br /&gt;            }&lt;br /&gt;            catch(InterruptedException e) {&lt;br /&gt;     System.out.print("Main thread interrupted");&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true&lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;&lt;/td&gt;    &lt;td class='optionD'&gt;&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these methods is a part of Abstract Window Toolkit (AWT) ? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;display()&lt;/td&gt;    &lt;td class='optionB'&gt;print()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;transient()&lt;/td&gt;    &lt;td class='optionD'&gt;drawString()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8923431473957834974/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-2.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8923431473957834974'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8923431473957834974'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-2.html' title='Test : Java_2'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8733650398284364587</id><published>2015-04-22T17:55:00.000+05:30</published><updated>2015-04-22T17:55:12.736+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_1</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What was the original name of Java&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Oak&lt;/td&gt;    &lt;td class='optionB'&gt;Pok&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;James&lt;/td&gt;    &lt;td class='optionD'&gt;Coffee&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;Java was initially named as Oak&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Who is know as the father of Java&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Ken Arnold&lt;/td&gt;    &lt;td class='optionB'&gt;David Holmes&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;James Gosling&lt;/td&gt;    &lt;td class='optionD'&gt;Peter Dibble&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;James Arthur Gosling, OC (born May 19, 1955) is a Canadian computer scientist, best known as the father of the Java programming language&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Java Source Code is compiled into which format&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;.java&lt;/td&gt;    &lt;td class='optionB'&gt;.class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;.exe&lt;/td&gt;    &lt;td class='optionD'&gt;.bytecode&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;Java Source code in .java format is compiled by the compiler to form .class file&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which tool is used to compile Java Code&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;java&lt;/td&gt;    &lt;td class='optionB'&gt;javac&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;javah&lt;/td&gt;    &lt;td class='optionD'&gt;javacpl&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;javac FileName.java is the command to compile the java Source Code and javac is the Compiler that compile the code&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is byte code in the context of Java ?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;The type of code generated by a Java compiler&lt;/td&gt;    &lt;td class='optionB'&gt;The type of code generated by a Java Virtual Machine&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;It is another name for a Java source file&lt;/td&gt;    &lt;td class='optionD'&gt;It is the code written within the instance methods of a class&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;The type of code generated by a Java compiler is called byte code. It is in .class format&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;    } &lt;br /&gt;    class mainclass {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;            box obj1 = new box();&lt;br /&gt;            box obj2 = new box();&lt;br /&gt;            obj1.height = 1;&lt;br /&gt;            obj1.length = 2;&lt;br /&gt;            obj1.width = 1;&lt;br /&gt;            obj2 = obj1;&lt;br /&gt;            System.out.println(obj2.height);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1&lt;/td&gt;    &lt;td class='optionB'&gt;2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;4&lt;/td&gt;    &lt;td class='optionD'&gt;6&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;    } &lt;br /&gt;    class mainclass {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;            box obj = new box();&lt;br /&gt;            System.out.println(obj);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime error &lt;/td&gt;    &lt;td class='optionD'&gt;Garbage value&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these functions is called to display the output of an applet? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;display()&lt;/td&gt;    &lt;td class='optionB'&gt;print()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;displayApplet()&lt;/td&gt;    &lt;td class='optionD'&gt;PrintApplet()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these methods can be used to output a sting in an applet? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;display()&lt;/td&gt;    &lt;td class='optionB'&gt;print()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;drawString()&lt;/td&gt;    &lt;td class='optionD'&gt;transient()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What does AWT stands for? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;All Window Tools&lt;/td&gt;    &lt;td class='optionB'&gt;All Writing Tools&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Abstract Window Toolkit&lt;/td&gt;    &lt;td class='optionD'&gt;Abstract Writing Toolkit&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8733650398284364587/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-1.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8733650398284364587'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8733650398284364587'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-1.html' title='Test : Java_1'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4857006528405099210</id><published>2015-04-22T17:34:00.002+05:30</published><updated>2015-04-22T17:34:27.916+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_20</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following is incorrect statement about packages? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Interfaces specifies what class must do but not how it does.&lt;/td&gt;    &lt;td class='optionB'&gt;Interfaces are specified public if they are to be accessed by any code in the program.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;All variables in interface are implicitly final and static.&lt;/td&gt;    &lt;td class='optionD'&gt;All variables are static and methods are public if interface is defined pubic.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class Output {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {    &lt;br /&gt;             int x , y = 1;&lt;br /&gt;             x = 10;&lt;br /&gt;             if (x != 10 &amp;&amp; x / 0 == 0)&lt;br /&gt;                 System.out.println(y);&lt;br /&gt;             else&lt;br /&gt;                 System.out.println(++y);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime error owing to division by zero in if condition. &lt;/td&gt;    &lt;td class='optionD'&gt;Unpredictable behavior of program.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int i, sum;&lt;br /&gt;                sum = 10;&lt;br /&gt;                for (i = -1; i &lt; 3 ;++i)&lt;br /&gt;                    sum = (sum / i);&lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {&lt;br /&gt;         System.out.print("0");         &lt;br /&gt;            } &lt;br /&gt;            System.out.print(sum);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;05&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;50&lt;/td&gt;    &lt;td class='optionD'&gt;55&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these class is related to all the exceptions that can be caught by using catch? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Error&lt;/td&gt;    &lt;td class='optionB'&gt;Exception&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;RuntimeExecption&lt;/td&gt;    &lt;td class='optionD'&gt;All of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these keywords are used to implement synchronization?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;sunchronize&lt;/td&gt;    &lt;td class='optionB'&gt;syn&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;synch&lt;/td&gt;    &lt;td class='optionD'&gt;synchronized&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these is returned by greater than, &lt;, and equal to, ==, operator?&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Integers&lt;/td&gt;    &lt;td class='optionB'&gt;Floating - point numbers&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Boolean&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        { &lt;br /&gt;           String s1 = "Hello i love java";&lt;br /&gt;           String s2 = new String(s1);&lt;br /&gt;           System.out.println((s1 == s2) + " " + s1.equals(s2));&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true true&lt;/td&gt;    &lt;td class='optionB'&gt;false false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;true false&lt;/td&gt;    &lt;td class='optionD'&gt;false true&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; import java.util.*;&lt;br /&gt;    class hashtable {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Hashtable obj = new Hashtable();&lt;br /&gt;            obj.put("A", new Integer(3));&lt;br /&gt;            obj.put("B", new Integer(2));&lt;br /&gt;            obj.put("C", new Integer(8));&lt;br /&gt;            obj.remove(new String("A"));&lt;br /&gt;            System.out.print(obj);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;{C=8, B=2} &lt;/td&gt;    &lt;td class='optionB'&gt;[C=8, B=2]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;{A=3, C=8, B=2}&lt;/td&gt;    &lt;td class='optionD'&gt;[A=3, C=8, B=2]&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is synchronization in reference to a thread? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Its a process of handling situations when two or more threads need access to a shared resource.&lt;/td&gt;    &lt;td class='optionB'&gt;Its a process by which many thread are able to access same shared resource simultaneously.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Its a process by which a method is able to access many different threads simultaneously.&lt;/td&gt;    &lt;td class='optionD'&gt;Its a method that allow to many threads to access any information the require.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int a[] = {1, 2,3 , 4, 5};&lt;br /&gt;                for (int i = 0; i &lt; 5; ++i) &lt;br /&gt;                    System.out.print(a[i]);&lt;br /&gt;                int x = 1/0;&lt;br /&gt;            }&lt;br /&gt;            catch(ArrayIndexOutOfBoundsException e) {&lt;br /&gt;         System.out.print("A");         &lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {      &lt;br /&gt;                System.out.print("B");&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;12345&lt;/td&gt;    &lt;td class='optionB'&gt;12345A&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;12345B&lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4857006528405099210/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-20.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4857006528405099210'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4857006528405099210'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-20.html' title='Test : Java_20'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8192580569535308746</id><published>2015-04-22T17:32:00.002+05:30</published><updated>2015-04-22T17:32:41.779+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_21</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which keyword can be used to prevent a class from being subclassed&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;init&lt;/td&gt;    &lt;td class='optionB'&gt;equals&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;final&lt;/td&gt;    &lt;td class='optionD'&gt;clone&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;import java.util.*;&lt;br /&gt;    class Array {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            int array[] = new int [5];&lt;br /&gt;            for (int i = 5; i &gt; 0; i--)&lt;br /&gt;                array[5-i] = i;&lt;br /&gt;            Arrays.fill(array, 1, 4, 8);&lt;br /&gt;            for (int i = 0; i &lt; 5 ; i++)&lt;br /&gt;                System.out.print(array[i]);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;12885  &lt;/td&gt;    &lt;td class='optionB'&gt;12845&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;58881&lt;/td&gt;    &lt;td class='optionD'&gt;54881&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt; array was containing 5,4,3,2,1 but when method Arrays.fill(array, 1, 4, 8) is called it fills the index location starting with 1 to 4 by value 8 hence array becomes 5,8,8,8,1. Output: $ javac Array.java $ java Array 58881&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;When does Exceptions in Java arises in code sequence? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Run Time&lt;/td&gt;    &lt;td class='optionB'&gt;Compilation Time&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Can Occur Any Time &lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;  class newthread implements Runnable {&lt;br /&gt; Thread t;&lt;br /&gt;        newthread() {&lt;br /&gt;            t = new Thread(this,"New Thread");&lt;br /&gt;            t.start();&lt;br /&gt; }&lt;br /&gt; public void run() {&lt;br /&gt;            t.setPriority(Thread.MAX_PRIORITY); &lt;br /&gt;            System.out.println(t);&lt;br /&gt; }&lt;br /&gt;    }&lt;br /&gt;    class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            new newthread();        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Thread[New Thread,0,main]  &lt;/td&gt;    &lt;td class='optionB'&gt;Thread[New Thread,1,main]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Thread[New Thread,5,main]&lt;/td&gt;    &lt;td class='optionD'&gt;Thread[New Thread,10,main]&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which function is used to perform some action when the object is to be destroyed? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;finalize()&lt;/td&gt;    &lt;td class='optionB'&gt;delete()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;main()&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these class is related to all the exceptions that cannot be caught? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Error&lt;/td&gt;    &lt;td class='optionB'&gt;Exception&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;RuntimeExecption&lt;/td&gt;    &lt;td class='optionD'&gt;All of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these methods sets every element of a List to a specified object? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;set()&lt;/td&gt;    &lt;td class='optionB'&gt;fill()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Complete()&lt;/td&gt;    &lt;td class='optionD'&gt;add()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which keyword is used by method to refer to the object that invoked it? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;import&lt;/td&gt;    &lt;td class='optionB'&gt;catch&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;abstract&lt;/td&gt;    &lt;td class='optionD'&gt;this&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these lines will give an error  line 1. int a=1,b=2; line 2. float c=2.0; line 3. System.out.println((a==c)+""+(c==b)); &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;line 1&lt;/td&gt;    &lt;td class='optionB'&gt;line 2&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;line 2 &amp; line 3&lt;/td&gt;    &lt;td class='optionD'&gt;line 3&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;Line 2 will give an error because it is an invalid declaration. Correct declaration would be float c=2.0F;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                System.out.print("Hello" + " " + 1 / 0);&lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {&lt;br /&gt;         System.out.print("World");         &lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Hello &lt;/td&gt;    &lt;td class='optionB'&gt;World&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;HelloWorld&lt;/td&gt;    &lt;td class='optionD'&gt;Hello World&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8192580569535308746/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-21.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8192580569535308746'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8192580569535308746'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-21.html' title='Test : Java_21'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7442684066276051775</id><published>2015-04-22T17:29:00.000+05:30</published><updated>2015-04-22T17:29:17.390+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_22</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt; Which of these keywords is used to manually throw an exception? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;catch&lt;/td&gt;    &lt;td class='optionB'&gt;finally&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;throw&lt;/td&gt;    &lt;td class='optionD'&gt;try&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class access{&lt;br /&gt;        public int x;&lt;br /&gt;  private int y;&lt;br /&gt;        void cal(int a, int b){&lt;br /&gt;            x =  a + 1;&lt;br /&gt;            y =  b;&lt;br /&gt;        }        &lt;br /&gt;    }    &lt;br /&gt;    class access_specifier {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            access obj = new access();   &lt;br /&gt;            obj.cal(2, 3);&lt;br /&gt;            System.out.println(obj.x + " " + obj.y);     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;3 3&lt;/td&gt;    &lt;td class='optionB'&gt;2 3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime Error &lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Given the code String s = new String("abc"); Which of the following calls are valid? (A) s.trim() (B) s.replace('a', 'A') (C) s.substring(3) (D) s.toUppercase() (E) s.setCharAt(1,'A') (F) s.append("xyz") &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(A), (C), (D) &amp; (E)&lt;/td&gt;    &lt;td class='optionB'&gt;(A), (B) &amp; (C) &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(A), (B), (C) &amp; (D)&lt;/td&gt;    &lt;td class='optionD'&gt;(C), (D) &amp; (E) &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these statement is incorrect? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Applets do not require a main() method at all.&lt;/td&gt;    &lt;td class='optionB'&gt;Every class must contain a main() method.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;There can be only one main() method in a program.&lt;/td&gt;    &lt;td class='optionD'&gt;main() method must be made public.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;what will be the output int i=20; System.out.println(++i + ++i);&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;40&lt;/td&gt;    &lt;td class='optionB'&gt;42&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;43&lt;/td&gt;    &lt;td class='optionD'&gt;44&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;++i will increment value first then use Therefore i++ + ++i= 21 + 22 =43 &lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of interface contains all the methods used for handling thread related operations in Java? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Runnable interface&lt;/td&gt;    &lt;td class='optionB'&gt;ThreadHandling interface&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Math interface&lt;/td&gt;    &lt;td class='optionD'&gt;System interface&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class static_out {&lt;br /&gt;        static int x;&lt;br /&gt;  static int y;&lt;br /&gt;        int add(int a, int b){&lt;br /&gt;            x = a + b;&lt;br /&gt;            y = x + b;&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class static_use {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            static_out obj1 = new static_out();&lt;br /&gt;            static_out obj2 = new static_out();   &lt;br /&gt;            int a = 2;&lt;br /&gt;            obj1.add(a, a + 1);&lt;br /&gt;            obj2.add(5, a);&lt;br /&gt;            System.out.println(obj1.x + " " + obj2.y);     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;7 7&lt;/td&gt;    &lt;td class='optionB'&gt;6 7&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;7 9&lt;/td&gt;    &lt;td class='optionD'&gt;9 7&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these methods deletes all the elements from invoking collection? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;clear()&lt;/td&gt;    &lt;td class='optionB'&gt;reset()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;delete()&lt;/td&gt;    &lt;td class='optionD'&gt;refresh()&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;clear() method removes all the elements from invoking collection.&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these access specifiers can be used for an interface? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Public&lt;/td&gt;    &lt;td class='optionB'&gt;Protected&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;private&lt;/td&gt;    &lt;td class='optionD'&gt;All of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        { &lt;br /&gt;           String c = "Hello i love java";&lt;br /&gt;           boolean var;&lt;br /&gt;           var = c.startsWith("hello");&lt;br /&gt;           System.out.println(var);&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true&lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;0&lt;/td&gt;    &lt;td class='optionD'&gt;1&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7442684066276051775/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-22.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7442684066276051775'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7442684066276051775'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-22.html' title='Test : Java_22'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3267288286495855650</id><published>2015-04-22T17:27:00.000+05:30</published><updated>2015-04-22T17:27:16.556+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_23</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these lines of code will give better performance? 1. a | 4 + c &gt;&gt; b &amp; 7; 2. (a | ((( 4 * c ) &gt;&gt; b ) &amp; 7 ))&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1 will give better performance as it has no parentheses.&lt;/td&gt;    &lt;td class='optionB'&gt;2 will give better performance as it has parentheses.&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Both 1 &amp; 2 will give equal performance.&lt;/td&gt;    &lt;td class='optionD'&gt;Dependent on the computer system.&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;        int volume;&lt;br /&gt;        void finalize() {&lt;br /&gt;            volume = width*height*length;&lt;br /&gt;            System.out.println(volume);&lt;br /&gt;        }&lt;br /&gt;        protected void volume() {&lt;br /&gt;            volume = width*height*length;&lt;br /&gt;            System.out.println(volume);&lt;br /&gt;       } &lt;br /&gt;    }    &lt;br /&gt;    class Output { &lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            box obj = new box();&lt;br /&gt;            obj.volume();&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;150&lt;/td&gt;    &lt;td class='optionB'&gt;200&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime error &lt;/td&gt;    &lt;td class='optionD'&gt;Compilation error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following is a valid declaration of an object of class Box? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Box obj = new Box();&lt;/td&gt;    &lt;td class='optionB'&gt;Box obj = new Box;&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;obj = new Box();&lt;/td&gt;    &lt;td class='optionD'&gt;new Box obj;&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class A {&lt;br /&gt;        public int i;&lt;br /&gt;        private int j;&lt;br /&gt;    }    &lt;br /&gt;    class B extends A {&lt;br /&gt;        void display() {&lt;br /&gt;            super.j = super.i + 1;&lt;br /&gt;            System.out.println(super.i + " " + super.j);&lt;br /&gt;        }&lt;br /&gt;    }    &lt;br /&gt;    class inheritance {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            B obj = new B();&lt;br /&gt;            obj.i=1;&lt;br /&gt;            obj.j=2;   &lt;br /&gt;            obj.display();     &lt;br /&gt;        }&lt;br /&gt;   }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;2 2&lt;/td&gt;    &lt;td class='optionB'&gt;2 3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Runtime Error &lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int a[] = {1, 2,3 , 4, 5};&lt;br /&gt;                for (int i = 0; i &lt; 7; ++i) &lt;br /&gt;                    System.out.print(a[i]);&lt;br /&gt;            }&lt;br /&gt;            catch(ArrayIndexOutOfBoundsException e) {&lt;br /&gt;         System.out.print("0");         &lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;12345 &lt;/td&gt;    &lt;td class='optionB'&gt;123450&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;1234500&lt;/td&gt;    &lt;td class='optionD'&gt;Compilation Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the name of the thread in output of this program? &lt;pre class='brush:java'&gt;class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Thread t = Thread.currentThread();&lt;br /&gt;            System.out.println(t.isAlive());        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;true&lt;/td&gt;    &lt;td class='optionD'&gt;false&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class operators {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            int var1 = 5; &lt;br /&gt;            int var2 = 6;&lt;br /&gt;            int var3;&lt;br /&gt;            var3 = ++ var2 * var1 / var2 + var2;&lt;br /&gt;            System.out.print(var2);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;10&lt;/td&gt;    &lt;td class='optionB'&gt;11&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;12&lt;/td&gt;    &lt;td class='optionD'&gt;56&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the stored in the object obj in following lines of code? box obj; &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Memory address of allocated memory of object.&lt;/td&gt;    &lt;td class='optionB'&gt;NULL&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Any arbitrary pointer&lt;/td&gt;    &lt;td class='optionD'&gt;Garbage&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following contain error? (A) int x[] = int[10]; (B) int[] y = new int[5]; (C) float d[] = &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(A)&lt;/td&gt;    &lt;td class='optionB'&gt;(B)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(A) &amp; (C)&lt;/td&gt;    &lt;td class='optionD'&gt;(B) &amp; (C)&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these modifiers can be used for a variable so that it can be accessed from any thread or parts of a program? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;transient&lt;/td&gt;    &lt;td class='optionB'&gt;volatile&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;global&lt;/td&gt;    &lt;td class='optionD'&gt;No modifier is needed&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3267288286495855650/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-23.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3267288286495855650'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3267288286495855650'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-23.html' title='Test : Java_23'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6281336196599271831</id><published>2015-04-22T17:23:00.000+05:30</published><updated>2015-04-22T17:23:04.566+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MCQ&apos;s'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_24</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the order of precedence (highest to lowest) of following operators? 1. &amp; 2. ^ 3. ?: &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;1 -&gt; 2 -&gt; 3&lt;/td&gt;    &lt;td class='optionB'&gt;2 -&gt; 1 -&gt; 3&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;3 -&gt; 2 -&gt; 1&lt;/td&gt;    &lt;td class='optionD'&gt;2 -&gt; 3 -&gt; 1&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the process by which we can control what parts of a program can access the members of a class? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Recursion&lt;/td&gt;    &lt;td class='optionB'&gt;Polymorphism&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Abstraction&lt;/td&gt;    &lt;td class='optionD'&gt;Encapsulation&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class ternary_operator {&lt;br /&gt;        public static void main(String args[]) &lt;br /&gt;        {        &lt;br /&gt;             int x = 3;&lt;br /&gt;             int y = ~ x;&lt;br /&gt;             int z;&lt;br /&gt;             z = x &gt; y ? x : y;&lt;br /&gt;             System.out.print(z);&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;3&lt;/td&gt;    &lt;td class='optionD'&gt;-4&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following statements about abstract methods/classes in Java are true?  (A)An abstract class cannot be instantiated.  (B)Constructors cannot be abstract.  (C)All sub classes of an abstract class must override the abstract methods.  (D)Static methods may be declared abstract.&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;(A) &amp; (B)&lt;/td&gt;    &lt;td class='optionB'&gt;(B) &amp; (C)&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;(C) &amp; (D)&lt;/td&gt;    &lt;td class='optionD'&gt;(A) &amp; (D)&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;what will be the output of  int i=12; System.out.println(++i);&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;11&lt;/td&gt;    &lt;td class='optionB'&gt;12&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;13&lt;/td&gt;    &lt;td class='optionD'&gt;14&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;++i will first increment the value of i then use it  Therefore ++i=12+1 =13&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the Message is displayed in the applet made by this program? &lt;pre class='brush:java'&gt;import java.awt.*;&lt;br /&gt;    import java.applet.*;&lt;br /&gt;    public class myapplet extends Applet {&lt;br /&gt;        public void paint(Graphics g) {&lt;br /&gt;            g.drawString("A Simple Applet", 20, 20);    &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;A Simple Applet &lt;/td&gt;    &lt;td class='optionB'&gt;A Simple Applet 20 20&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error&lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt;class box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;        int volume;&lt;br /&gt;        void finalize() {&lt;br /&gt;            volume = width*height*length;&lt;br /&gt;            System.out.println(volume);&lt;br /&gt;        }&lt;br /&gt;        protected void volume() {&lt;br /&gt;            volume = width*height*length;&lt;br /&gt;            System.out.println(volume);&lt;br /&gt;       } &lt;br /&gt;    }    &lt;br /&gt;    class Output { &lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            box obj = new box();&lt;br /&gt;            obj.volume();&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Runtime error &lt;/td&gt;    &lt;td class='optionB'&gt;Compilation error&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;150&lt;/td&gt;    &lt;td class='optionD'&gt;200&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of these class is used to make a thread? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;String&lt;/td&gt;    &lt;td class='optionB'&gt;System&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Thread&lt;/td&gt;    &lt;td class='optionD'&gt;Runnable&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which operator is used by Java run time implementations to free the memory of an object when it is no longer needed? &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;delete&lt;/td&gt;    &lt;td class='optionB'&gt;new&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;free&lt;/td&gt;    &lt;td class='optionD'&gt;None of the mentioned&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                System.out.print("Hello" + " " + 1 / 0);&lt;br /&gt;            }&lt;br /&gt;            finally {&lt;br /&gt;         System.out.print("World");         &lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;A&lt;/td&gt;    &lt;td class='optionB'&gt;B&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error &lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6281336196599271831/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-24.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6281336196599271831'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6281336196599271831'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-24.html' title='Test : Java_24'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4168082547413516251</id><published>2015-04-22T17:18:00.000+05:30</published><updated>2015-04-22T17:18:24.821+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Test : Java_25</title><content type='html'>&lt;div id='test-controller'&gt; &lt;div class='info'&gt;  This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.  &lt;br /&gt;  Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;  &lt;h3&gt;Select Test Type&lt;/h3&gt;  &lt;button class='timed-test' onclick='startTest("timed");'&gt;Timed Test&lt;/button&gt;  &lt;button class='untimed-test' onclick='startTest("untimed");'&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div class='hidden' id='test-container'&gt;  &lt;div id='instructions'&gt;   &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;   &lt;div class='test-timer-container'&gt;    &lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;   &lt;/div&gt;  &lt;/div&gt;  &lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Which of the following methods belong to the String class? 1. length()  2. compareTo()  3. equals()  4. substring()  &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Length(), &amp; compareTo()&lt;/td&gt;    &lt;td class='optionB'&gt;Equals()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;All of these&lt;/td&gt;    &lt;td class='optionD'&gt;None of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the length of the application box made by this program? &lt;pre class='brush:java'&gt; import java.awt.*;&lt;br /&gt;    import java.applet.*;&lt;br /&gt;    public class myapplet extends Applet {&lt;br /&gt;        Graphic g;&lt;br /&gt;        g.drawString("A Simple Applet", 20, 20);    &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;20&lt;/td&gt;    &lt;td class='optionB'&gt;Default value &lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Compilation Error&lt;/td&gt;    &lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class string_class {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            String obj = "I LIKE JAVA";   &lt;br /&gt;            System.out.println(obj.charAt(3));&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;I&lt;/td&gt;    &lt;td class='optionB'&gt;L&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;K&lt;/td&gt;    &lt;td class='optionD'&gt;E&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;Objects of a super class cannot always be assigned to a subclass reference. This can only happen if they are in&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;Interference&lt;/td&gt;    &lt;td class='optionB'&gt;Abstract Class&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;Inheritance&lt;/td&gt;    &lt;td class='optionD'&gt;None of the above&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the name of the thread in output of this program? &lt;pre class='brush:java'&gt; class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Thread t = Thread.currentThread();&lt;br /&gt;            System.out.println(t.getPriority());        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;0&lt;/td&gt;    &lt;td class='optionB'&gt;1&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;4&lt;/td&gt;    &lt;td class='optionD'&gt;5&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;D&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int i, sum;&lt;br /&gt;                sum = 10;&lt;br /&gt;                for (i = -1; i &lt; 3 ;++i) {&lt;br /&gt;                    sum = (sum / i);&lt;br /&gt;                System.out.print(i);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {      &lt;br /&gt;                System.out.print("0");&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;-1&lt;/td&gt;    &lt;td class='optionB'&gt;-101&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;-10&lt;/td&gt;    &lt;td class='optionD'&gt;0&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;When we implement the Runnable interface, we must define the method &lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;start()&lt;/td&gt;    &lt;td class='optionB'&gt;run()&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;main()&lt;/td&gt;    &lt;td class='optionD'&gt;init() &lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;B&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; class equality {&lt;br /&gt;        int x;&lt;br /&gt;        int y;&lt;br /&gt;        boolean isequal() {&lt;br /&gt;            return(x == y);  &lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            equality obj = new equality();&lt;br /&gt;            obj.x = 5;&lt;br /&gt;            obj.y = 5;&lt;br /&gt;            System.out.println(obj.isequal);        } &lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;true&lt;/td&gt;    &lt;td class='optionB'&gt;false&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;0&lt;/td&gt;    &lt;td class='optionD'&gt;1&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;What is the output of this program? &lt;pre class='brush:java'&gt; import java.util.*;&lt;br /&gt;    class Maps {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            TreeMap obj = new TreeMap();&lt;br /&gt;            obj.put("A", new Integer(1));&lt;br /&gt;            obj.put("B", new Integer(2));&lt;br /&gt;            obj.put("C", new Integer(3));&lt;br /&gt;            System.out.println(obj.entrySet());&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;[A=1, B=2, C=3]&lt;/td&gt;    &lt;td class='optionB'&gt;[1, 2, 3]&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;[A, B, C]&lt;/td&gt;    &lt;td class='optionD'&gt;{A=1, B=2, C=3}&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;A&lt;/div&gt;   &lt;div class='explanation'&gt;&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt; &lt;div class='question'&gt;what will be the output int a=0x0055; System.out.println(a);&lt;/div&gt; &lt;input name='gvnAnswer' type='hidden' /&gt; &lt;table cellspacing='1' style='width:100%;'&gt;  &lt;tbody&gt;   &lt;tr&gt;    &lt;td class='optionA'&gt;5&lt;/td&gt;    &lt;td class='optionB'&gt;55&lt;/td&gt;   &lt;/tr&gt;   &lt;tr&gt;    &lt;td class='optionC'&gt;85&lt;/td&gt;    &lt;td class='optionD'&gt;none of these&lt;/td&gt;   &lt;/tr&gt;  &lt;/tbody&gt; &lt;/table&gt; &lt;div class='handle hidden'&gt;  &lt;div class='view-solution'&gt;&lt;/div&gt;  &lt;div class='solution collapse'&gt;   &lt;div class='answer'&gt;C&lt;/div&gt;   &lt;div class='explanation'&gt;0x represents a hexadecimal number, therefore 0x0055 =16&lt;sup&gt;1&lt;/sup&gt;x5 + 16&lt;sup&gt;0&lt;/sup&gt;x5                  =80+5                  =85&lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='test-finish'&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4168082547413516251/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-25.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4168082547413516251'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4168082547413516251'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/test-java-25.html' title='Test : Java_25'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-420312296591184170</id><published>2015-04-14T11:44:00.000+05:30</published><updated>2015-04-14T11:44:35.785+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><title type='text'>How to restore dump of single database from Dump in MYSQL</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;Suppose you have a dump of more than one databases in a single dump file, then you can restore one or all the databases.&lt;/div&gt;&lt;br /&gt;&lt;pre class="brush:sql"&gt;mysql -u root -p --one-database DBNAME &amp;lt; DUMPFILE.SQL&lt;/pre&gt;&lt;br /&gt;You should take care of a few things when you take the dump.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Create a database by that name in mysql if it does not exist.&lt;/li&gt;&lt;li&gt;Switch to the database you want to restore, this will help restore the database properly.&lt;/li&gt;&lt;li&gt;You need to be outside mysql environment to run this command.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;For more specific restoration of databases from a dump file you can try &lt;b&gt;&lt;a href="http://kedar.nitty-witty.com/blog/mydumpsplitter-extract-tables-from-mysql-dump-shell-script" target="_blank"&gt;mydumpsplitter.&lt;/a&gt;&lt;/b&gt;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/420312296591184170/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/how-to-restore-dump-of-single-database-from-dump-in-mysql.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/420312296591184170'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/420312296591184170'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/how-to-restore-dump-of-single-database-from-dump-in-mysql.html' title='How to restore dump of single database from Dump in MYSQL'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2330013737971378881</id><published>2015-04-12T00:53:00.000+05:30</published><updated>2015-04-12T00:53:04.462+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Criteria Query'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>How to use IN List in hibernate Criteria Query</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/how-to-use-in-list-in-hibernate.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2330013737971378881'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2330013737971378881'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8283683956813141627</id><published>2015-04-07T15:32:00.003+05:30</published><updated>2015-04-07T15:32:57.288+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>How to execute a SQL query in grails</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to inject the&amp;nbsp;&lt;b&gt;SessionFactory&lt;/b&gt;&amp;nbsp;object in the service or the controller, where you want to use it.&lt;/li&gt;&lt;li&gt;Get the current session from the session factory and execute the query in this session using&amp;nbsp;&lt;b&gt;sessionFactory.getCurrentSession().&lt;/b&gt;&lt;/li&gt;&lt;li&gt;You can also execute the query in a new session by using&amp;nbsp;&lt;b&gt;sessionFactory.openSession().&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Executing SQL query in grails&lt;/h2&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Person.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.grails;&lt;br /&gt;&lt;br /&gt;class Person{&lt;br /&gt;&lt;br /&gt; String username&lt;br /&gt; String email&lt;br /&gt; String password&lt;br /&gt;&lt;br /&gt; static mapping = {&lt;br /&gt;        &lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt; static constraints = {&lt;br /&gt;        username nullable: true&lt;br /&gt;        password nullable: false, blank: false&lt;br /&gt;        email nullable: false, blank: false&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;PersonService.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.grails;&lt;br /&gt;&lt;br /&gt;import org.hibernate.SessionFactory;&lt;br /&gt;import grails.transaction.Transactional&lt;br /&gt;&lt;br /&gt;import com.ekiras.grails.Person;&lt;br /&gt;&lt;br /&gt;@Transactional&lt;br /&gt;class PersonService{&lt;br /&gt;&lt;br /&gt; SessionFactory sessionFactory;&lt;br /&gt;&lt;br /&gt; def listPersons(){&lt;br /&gt;  String query = "select distinct username from person";&lt;br /&gt;  def personList = sessionFactory.getCurrentSession().createSQLQuery(query).list();&lt;br /&gt;  return personList;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; boolean deletePerson(Person person){&lt;br /&gt;  String query = "delete from person where username=${person.username}";&lt;br /&gt;  Integer rowsEffected = sessionFactory.getCurrentSession().createSQLQuery(query).executeUpdate();&lt;br /&gt;  if(rowsEffected == 1);&lt;br /&gt;    return true;&lt;br /&gt;  else&lt;br /&gt;    return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  Person updatePerson(Person person){&lt;br /&gt;  String query = "update person set username=${person.username} where id={person.id}";&lt;br /&gt;  Integer rowsEffected = sessionFactory.getCurrentSession().createSQLQuery(query).executeUpdate();&lt;br /&gt;  if(rowsEffected == 1);&lt;br /&gt;    return person;&lt;br /&gt;  else&lt;br /&gt;    // throw new Exception();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;This is how you can execute the simple SQL queries in Grails using hibernate sessionFactory.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8283683956813141627/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/04/how-to-execute-sql-query-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8283683956813141627'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8283683956813141627'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/04/how-to-execute-sql-query-in-grails.html' title='How to execute a SQL query in grails'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3568092802143948970</id><published>2015-03-26T21:44:00.000+05:30</published><updated>2015-03-26T21:44:46.434+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><title type='text'>How to deploy static website on Tomcat</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-deploy-static-website-on-apache-tomcat.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3568092802143948970'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3568092802143948970'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8248801827953769816</id><published>2015-03-26T01:09:00.002+05:30</published><updated>2015-03-27T10:23:40.360+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='AngularJs'/><title type='text'>How to escape Html in Angular js</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to use &lt;b&gt;SCE&lt;/b&gt;&amp;nbsp;to render html as it is on the page.&lt;/li&gt;&lt;li&gt;There are two ways to use &lt;b&gt;sce&lt;/b&gt;&amp;nbsp;either you use it in the angular controller to prevent escape html or you can create a filter to do this where ever you need it.&lt;/li&gt;&lt;li&gt;Using it with a filter is a much better way to do so, if you need to do it at multiple places.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3&gt;Following Plunker example shows how you can prevent escaping of Html&lt;/h3&gt;&lt;br/&gt;&lt;iframe style="border: 1px solid #999;width: 100%; height: 300px"         src="http://embed.plnkr.co/jC8Fnu73UBMbXGqrvEh5/?t=readme" frameborder="0"         allowfullscreen="allowfullscreen"&gt;  Loading plunk... &lt;/iframe&gt;&lt;br/&gt;&lt;br/&gt;&lt;h2&gt;Prevent Escape Html from angularjs Controllers&lt;/h2&gt;&lt;pre class="brush:html;highlight: [7,8,13,21,22]"&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;body ng-app="demo"&amp;gt;&lt;br /&gt;&amp;lt;div ng-controller="home"&amp;gt;&lt;br /&gt;  Original Text : {{text}}&amp;lt;br/&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&lt;br /&gt;  EscapedText   : &amp;lt;span ng-bind-html="text"&amp;gt;&amp;lt;/span&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;script&amp;gt;&lt;br /&gt;var app = angular.module("demo",[]);&lt;br /&gt;&lt;br /&gt;app.controller('home', function ($scope, $sce) {&lt;br /&gt;    $scope.text = $sce.trustAsHtml("hi this is a &amp;lt;b&amp;gt;demo text&amp;lt;/b&amp;gt; &amp;lt;br&amp;gt; &amp;lt;a href='#'&amp;gt;This is a link&amp;lt;/a&amp;gt;");&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;br /&gt;Using this method you can prevent escape any value and display it as html.&lt;br /&gt;&lt;div class="well"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-bgC_iQo-XPM/VRLUSdfPrbI/AAAAAAAAAPY/xeg5VXr-NOs/s1600/angular-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" src="http://3.bp.blogspot.com/-bgC_iQo-XPM/VRLUSdfPrbI/AAAAAAAAAPY/xeg5VXr-NOs/s1600/angular-2.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Prevent Escaping Html using angularjs Filter&lt;/h2&gt;&lt;pre class="brush:html;highlight: [13,20,21,22,23,27,28]"&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;body ng-app="demo"&amp;gt;&lt;br /&gt;&amp;lt;div ng-controller="home"&amp;gt;&lt;br /&gt;  Original Text : {{text}}&amp;lt;br/&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&lt;br /&gt;  EscapedText   : &amp;lt;span ng-bind-html="text | escapeHtml"&amp;gt;&amp;lt;/span&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;script&amp;gt;&lt;br /&gt;var app = angular.module("demo",[]);&lt;br /&gt;&lt;br /&gt;app.filter('escapeHtml', function($sce) {&lt;br /&gt;    return function(val) {&lt;br /&gt;        return $sce.trustAsHtml(val);&lt;br /&gt;    };&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;app.controller('home', function ($scope) {&lt;br /&gt;    $scope.text = "hi this is a &amp;lt;b&amp;gt;demo text&amp;lt;/b&amp;gt; &amp;lt;br&amp;gt; &amp;lt;a href='#'&amp;gt;This is a link&amp;lt;/a&amp;gt; ";&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;br /&gt;The above code will give the following output.&lt;br /&gt;&lt;div class="well"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-bgC_iQo-XPM/VRLUSdfPrbI/AAAAAAAAAPY/xeg5VXr-NOs/s1600/angular-2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" src="http://3.bp.blogspot.com/-bgC_iQo-XPM/VRLUSdfPrbI/AAAAAAAAAPY/xeg5VXr-NOs/s1600/angular-2.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;Using this method you can show the render the html using the filter &lt;b&gt;escapeHtml&lt;/b&gt;&amp;nbsp;wherever needed.&amp;nbsp;  &lt;br /&gt;&lt;div class="download"&gt;&lt;a href="http://plnkr.co/edit/jC8Fnu73UBMbXGqrvEh5?p=preview" target="_blank"&gt;View and Download from Plunker&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8248801827953769816/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-escape-html-in-angular-js.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8248801827953769816'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8248801827953769816'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-escape-html-in-angular-js.html' title='How to escape Html in Angular js'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-bgC_iQo-XPM/VRLUSdfPrbI/AAAAAAAAAPY/xeg5VXr-NOs/s72-c/angular-2.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1983019216679088599</id><published>2015-03-24T01:15:00.000+05:30</published><updated>2015-04-20T12:00:37.665+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Criteria Query'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate : fetch results using Orderby in Criteria Query</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Syntax to use OrderBy in Hibernate Criteria Query&lt;/h2&gt;The order can be specified using &lt;b&gt;addOrder&lt;/b&gt; on a &lt;b&gt;Criteria Object &lt;/b&gt;&lt;br /&gt;&lt;pre&gt;criteria.addOrder(Order.asc("propertyName"))&lt;br /&gt;criteria.addOrder(Order.desc("propertyName"))&lt;/pre&gt;&lt;h2&gt;Order results according to an order in Hibernate&amp;nbsp;&lt;/h2&gt;Suppose we have a class  &lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Category.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.OneToMany;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name="category")&lt;br /&gt;public class Category {&lt;br /&gt;&lt;br /&gt; public Category(){}&lt;br /&gt; public Category(Long id){&lt;br /&gt;  this.id = id;&lt;br /&gt; }&lt;br /&gt; public Category(Long id, String name){&lt;br /&gt;  this.id = id;&lt;br /&gt;  this.name = name;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @Id&lt;br /&gt; @Column(nullable=false, name="id")&lt;br /&gt; @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt; private Long id;&lt;br /&gt; &lt;br /&gt; @Column(nullable=false, name="name")&lt;br /&gt; private String name;&lt;br /&gt;&lt;br /&gt;       // Getters and Setters&lt;br /&gt;&lt;br /&gt;   }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;So if we need to order the results of this class according to a given order we can do it like following &lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Order by propertyName id in ascending order&lt;br /&gt; &lt;pre class="brush:java"&gt;sessionFactory.getCurrentSession()&lt;br /&gt;              .createCriteria(Catgeory.class)&lt;br /&gt;              .addOrder(Order.asc("id"))&lt;br /&gt;              .list();&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Order by propertyName name in descending order&lt;br /&gt; &lt;pre class="brush:java"&gt;sessionFactory.getCurrentSession()&lt;br /&gt;              .createCriteria(Catgeory.class)&lt;br /&gt;              .addOrder(Order.desc("name"))&lt;br /&gt;              .list();&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Order by propertyName name in random order&lt;br /&gt; &lt;pre class="brush:java"&gt;sessionFactory.getCurrentSession()&lt;br /&gt;              .createCriteria(Catgeory.class)&lt;br /&gt;              criteria.add(Restrictions.sqlRestriction("1=1 order by rand()"));&lt;br /&gt;              .list();&lt;/pre&gt;The above code will return the list of Category domain objects in a random order. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1983019216679088599/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/hibernate-fetch-results-using-orderby-in-criteria-query.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1983019216679088599'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1983019216679088599'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/03/hibernate-fetch-results-using-orderby-in-criteria-query.html' title='Hibernate : fetch results using Orderby in Criteria Query'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5809276195996426003</id><published>2015-03-21T01:13:00.001+05:30</published><updated>2015-03-24T01:48:45.332+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Criteria Query'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate Criteria Query to find List of Domain class.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Syntax to get List of domain Object&lt;/h2&gt;&lt;div&gt;&lt;b&gt;list&lt;/b&gt; can be used on the &lt;b&gt;Criteria object&lt;/b&gt; as shown below. &lt;br /&gt;&lt;pre&gt;criteria.list()&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;How to get a List of a Domain class using Hibernate's Criteria Query.&lt;/h2&gt;If we have a domain class &lt;b&gt;Category&lt;/b&gt;&amp;nbsp;as shown below.&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Catgeory.class&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.OneToMany;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name="category")&lt;br /&gt;public class Category {&lt;br /&gt;&lt;br /&gt; public Category(){}&lt;br /&gt; public Category(Long id){&lt;br /&gt;  this.id = id;&lt;br /&gt; }&lt;br /&gt; public Category(Long id, String name){&lt;br /&gt;  this.id = id;&lt;br /&gt;  this.name = name;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @Id&lt;br /&gt; @Column(nullable=false, name="id")&lt;br /&gt; @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt; private Long id;&lt;br /&gt; &lt;br /&gt; @Column(nullable=false, name="name")&lt;br /&gt; private String name;&lt;br /&gt;&lt;br /&gt;       // Getters and Setters&lt;br /&gt;&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;We can get the list of all the categories using Criteria Query in the following ways  &lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Simplest way to get a list of a Domain class (Category) in our example is &lt;br /&gt;&lt;pre class="brush:java"&gt;sessionFactory.getCurrentSession().createCriteria(Category.class).list();&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;You can use pagination in the following way with &lt;b&gt;list()&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;@SuppressWarnings("unchecked")&lt;br /&gt; public List&amp;lt;Category&amp;gt;; list(Integer offset){&lt;br /&gt;  return sessionFactory.getCurrentSession()&lt;br /&gt;   .createCriteria(Category.class)&lt;br /&gt;   .setFirstResult(offset!=null?offset:0)&lt;br /&gt;   .setMaxResults(10)&lt;br /&gt;   .list();&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Use this method as a generic method to get a list of all the records of a domain in the database.&lt;br /&gt;&lt;pre class="brush:java"&gt;@SuppressWarnings("rawtypes")&lt;br /&gt; public List list(Class clazz){  &lt;br /&gt;  return (List)getSession().createCriteria(clazz).list();&lt;br /&gt; }&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;You can &lt;b&gt;Order&lt;/b&gt; your list according to any property like &lt;br /&gt; &lt;pre class="brush:java"&gt;public List&amp;lt;Category&amp;gt; list(Integer offset){&lt;br /&gt;  return getSession()&lt;br /&gt;   .createCriteria(Category.class)&lt;br /&gt;   .addOrder(Order.desc("id"))&lt;br /&gt;   .list();&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5809276195996426003/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/hibernate-criteria-query-to-find-list-of-domain-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5809276195996426003'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5809276195996426003'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/03/hibernate-criteria-query-to-find-list-of-domain-class.html' title='Hibernate Criteria Query to find List of Domain class.'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8793609507429756639</id><published>2015-03-14T12:57:00.001+05:30</published><updated>2015-03-14T12:57:19.431+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Spring Security : Create a Custom Authentication Provider  </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Make sure you have added the Spring Security Core plugin in the &lt;b&gt;BuildConfig.groovy&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Create a new class in &lt;b&gt;src&lt;/b&gt; folder and register it as a spring bean in &lt;b&gt;resources.groovy&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Add the class name in the authentication providers arrays in Config.groovy.&lt;/li&gt;&lt;li&gt;Custom Authentication Provider must implement&amp;nbsp;&lt;b&gt;AuthenticationProvider &lt;/b&gt;interface.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Custom Authentication Provider&lt;/h2&gt;Here we will create a custom authentication provider for our spring security and will authenticate the user using this authentication provider.&lt;br /&gt;&lt;br /&gt;We create a class MyAuthenticationProvider which &lt;b&gt;implements&lt;/b&gt; the &lt;b&gt;AuthenticationProvider&lt;/b&gt; &lt;b&gt;interface&lt;/b&gt;. Thus this class must override two methods&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;authenticate ( This will return an Authentication object &amp;nbsp;)&lt;/li&gt;&lt;li&gt;supports ( This returns if the Authentication Class is supported )&lt;/li&gt;&lt;/ol&gt;The steps of authentication are as follows&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Whenever an authentication request is done. It first goes to the delegation filter chain.&lt;/li&gt;&lt;li&gt;The filter then &lt;b&gt;creates&lt;/b&gt; an &lt;b&gt;Authentication&lt;/b&gt; token &lt;b&gt;and send&lt;/b&gt; it &lt;b&gt;to&lt;/b&gt; the &lt;b&gt;AuthenticationProvider&lt;/b&gt;.&amp;nbsp;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Authentication&lt;/b&gt; token &lt;b&gt;contains&lt;/b&gt; the &lt;b&gt;principal&lt;/b&gt; , &lt;b&gt;credentials and isAuthenticated.&lt;/b&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Principal contains the user information.&lt;/li&gt;&lt;li&gt;Credentials contains the user credentials i.e. passwords&lt;/li&gt;&lt;li&gt;isAuthenticated is a boolean flag that tells if the the user is authenticated.&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;First the request goes to the &lt;b&gt;supports()&lt;/b&gt;&amp;nbsp;method. If the class of the Authentication token matches with the class of the of your custom token then it must return false.&amp;nbsp;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;If you have not created your custom Authentication token then this method must return true.&lt;/li&gt;&lt;li&gt;By default the &amp;nbsp;Authentication token is&amp;nbsp;UsernamePasswordAuthenticationToken.&lt;/li&gt;&lt;li&gt;If this method returns true then the request goes to method&amp;nbsp;&lt;b&gt;authenticate().&lt;/b&gt;&amp;nbsp;This method actually is responsible for authenticating the user based on any business logic.&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;In standard flow, authenticate() method calls the &lt;b&gt;userDetailsService&lt;/b&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/spring-security-grails-create-custom-authentication-provider.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8793609507429756639'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8793609507429756639'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1745972271551087026</id><published>2015-03-13T01:14:00.002+05:30</published><updated>2015-03-13T02:40:32.814+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Csv'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='File'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>How to Upload and Read a Csv in Grails</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Add the plugin Csv Grails plugin .&lt;/li&gt;&lt;li&gt;You can do it manually without the plugin if the you have a uniform structure of the csv file.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Upload a Csv&amp;nbsp;&lt;/h2&gt;You need to add the dependency for the &lt;b&gt;csv file reader&lt;/b&gt; in BUildConfig.groovy as shown below &lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;BuildConfig.groovy &lt;br /&gt;&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;compile ":csv:0.3.1"&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;And you have a csv file like the following.  &lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-OXRWzUg3e9I/VQH_qpDfCFI/AAAAAAAAAPE/tq9oqAN3jCE/s1600/Screenshot%2Bfrom%2B2015-03-13%2B02%3A32%3A06.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img class="img-responsive" border="0" src="http://3.bp.blogspot.com/-OXRWzUg3e9I/VQH_qpDfCFI/AAAAAAAAAPE/tq9oqAN3jCE/s1600/Screenshot%2Bfrom%2B2015-03-13%2B02%3A32%3A06.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;upload.jsp&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;&amp;lt;g:uploadForm action="upload"&amp;gt;&lt;br /&gt;    &amp;lt;input type="file" name="file"&amp;gt;&lt;br /&gt;    &amp;lt;g:submitButton name="file" value="Upload"/&amp;gt;&lt;br /&gt;&amp;lt;/g:uploadForm&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;When the above form is submitted then the request will be handled by the controller action as shown below&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;UploadController.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;def upload() {&lt;br /&gt;        MultipartFile file = request.getFile( 'file' )&lt;br /&gt;        file.inputStream.eachCsvLine { row -&amp;gt;&lt;br /&gt;            String name = row[1] ?: "NA";&lt;br /&gt;            String email = row[2] ?: "NA";&lt;br /&gt;&lt;br /&gt;            // Business Logic here&lt;br /&gt;        }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Now you can do your business logic in the space provided. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1745972271551087026/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-upload-and-read-csv-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1745972271551087026'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1745972271551087026'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-upload-and-read-csv-in-grails.html' title='How to Upload and Read a Csv in Grails'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-OXRWzUg3e9I/VQH_qpDfCFI/AAAAAAAAAPE/tq9oqAN3jCE/s72-c/Screenshot%2Bfrom%2B2015-03-13%2B02%3A32%3A06.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2765339483768500862</id><published>2015-03-09T22:18:00.000+05:30</published><updated>2015-03-09T22:18:35.754+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Pagination'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Pagination in Grails Gorm</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can use &lt;b&gt;offset and max&lt;/b&gt; in Grails Gorm to paginate.&lt;/li&gt;&lt;li&gt;You can use it with dynamic finders, Criteria Queries and HQL as well.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Paginate in Grails&lt;/h2&gt;this is body. &lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Person.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;class Person{&lt;br /&gt;&lt;br /&gt; enum Gender{&lt;br /&gt;    MALE,&lt;br /&gt;    FEMALE&lt;br /&gt; }&lt;br /&gt; String name;&lt;br /&gt; Gender gender;&lt;br /&gt; Integer age;&lt;br /&gt;&lt;br /&gt; static constraints = {}&lt;br /&gt; static mapping = {}&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;How  &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/pagination-in-grails-gorm.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2765339483768500862'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2765339483768500862'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-60214221008391525</id><published>2015-03-08T21:53:00.002+05:30</published><updated>2015-03-08T22:45:17.022+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Criteria Query'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Pagination'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Pagination in Spring Hibernate Mvc application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/03/how-to-create-pagination-taglib-in-java-spring-for-bootstrap.html" target="_blank"&gt;Create a Pagination Taglib using this example&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Add Bootstrap css and js in the jsp you want to do pagination and include the taglib in the jsp.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Pagination in Spring Hibernate Application using Bootstrap&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Create a Domain &lt;b&gt;Person.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Create a Service &lt;b&gt;PersonService&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Create a Dao &lt;b&gt;PersonDao&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Create a Controller &lt;b&gt;PersonController&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Create a Taglib &lt;b&gt;PaginationTaglib.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-ToygZfLpiwU/VPx3M_slB2I/AAAAAAAAAOo/HxWJAkoJjgs/s1600/paginate_1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" src="http://4.bp.blogspot.com/-ToygZfLpiwU/VPx3M_slB2I/AAAAAAAAAOo/HxWJAkoJjgs/s1600/paginate_1.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Person.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name="person")&lt;br /&gt;public class Person {&lt;br /&gt;&lt;br /&gt; public Person(){};&lt;br /&gt; public Person(String name,Integer age){&lt;br /&gt;  this.name = name;&lt;br /&gt;  this.age  = age;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt; @Id&lt;br /&gt; @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt; @Column(name="id")&lt;br /&gt; private Long id;&lt;br /&gt; &lt;br /&gt; @Column(name="name")&lt;br /&gt; private String name;&lt;br /&gt; &lt;br /&gt; @Column(name="age")&lt;br /&gt; private Integer age;&lt;br /&gt;&lt;br /&gt;       // GETTERS and SETTERS&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;PersonService.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.service;&lt;br /&gt;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Service;&lt;br /&gt;&lt;br /&gt;import com.ekiras.dao.PersonDAO;&lt;br /&gt;import com.ekiras.domain.Person;&lt;br /&gt;&lt;br /&gt;@Service&lt;br /&gt;public class PersonService {&lt;br /&gt;&lt;br /&gt; @Autowired&lt;br /&gt; private PersonDAO personDAO;&lt;br /&gt; &lt;br /&gt; &lt;br /&gt; public List&amp;lt;Person&amp;gt; list(Integer offset, Integer maxResults){&lt;br /&gt;  return personDAO.list(offset, maxResults);&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; public Long count(){&lt;br /&gt;  return personDAO.count();&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; public void save(){&lt;br /&gt;  personDAO.save();&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;PersonDAO.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.dao;&lt;br /&gt;&lt;br /&gt;import java.util.List;&lt;br /&gt;&lt;br /&gt;import org.hibernate.SessionFactory;&lt;br /&gt;import org.hibernate.criterion.Projections;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Repository;&lt;br /&gt;import org.springframework.transaction.annotation.Transactional;&lt;br /&gt;&lt;br /&gt;import com.ekiras.domain.Person;&lt;br /&gt;&lt;br /&gt;@Repository&lt;br /&gt;@Transactional&lt;br /&gt;public class PersonDAO {&lt;br /&gt;&lt;br /&gt; @Autowired &lt;br /&gt; private SessionFactory sessionFactory;&lt;br /&gt; &lt;br /&gt; @SuppressWarnings("unchecked")&lt;br /&gt; @Transactional&lt;br /&gt; public List&amp;lt;Person&amp;gt; list(Integer offset, Integer maxResults){&lt;br /&gt;  return sessionFactory.openSession()&lt;br /&gt;    .createCriteria(Person.class)&lt;br /&gt;    .setFirstResult(offset!=null?offset:0)&lt;br /&gt;    .setMaxResults(maxResults!=null?maxResults:10)&lt;br /&gt;    .list();&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt; public Long count(){&lt;br /&gt;  return (Long)sessionFactory.openSession()&lt;br /&gt;    .createCriteria(Person.class)&lt;br /&gt;    .setProjection(Projections.rowCount())&lt;br /&gt;    .uniqueResult();&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt; public void save(){&lt;br /&gt;  for(int itr=1;itr &amp;lt;= 100 ; itr++){&lt;br /&gt;   Person person = new Person("Person_"+itr,Math.max(25, (itr%2)*35));&lt;br /&gt;   sessionFactory.openSession()&lt;br /&gt;   .save(person);&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;  &lt;br /&gt;  &lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;PersonController.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.controller;&lt;br /&gt;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Controller;&lt;br /&gt;import org.springframework.ui.Model;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br /&gt;&lt;br /&gt;import com.ekiras.service.PersonService;&lt;br /&gt;&lt;br /&gt;@Controller&lt;br /&gt;@RequestMapping(value="/person")&lt;br /&gt;public class PersonController {&lt;br /&gt;&lt;br /&gt; @Autowired&lt;br /&gt; private PersonService personService;&lt;br /&gt; &lt;br /&gt; @RequestMapping(value="/list")&lt;br /&gt; public String list(Model model, Integer offset, Integer maxResults){&lt;br /&gt;  model.addAttribute("persons", personService.list(offset, maxResults));&lt;br /&gt;  model.addAttribute("count", personService.count());&lt;br /&gt;  model.addAttribute("offset", offset);&lt;br /&gt;  return "/person/list";&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @RequestMapping(value="/save")&lt;br /&gt; public String save(){&lt;br /&gt;  personService.save();&lt;br /&gt;  return "/person/list";&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;PaginationTaglib.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.taglib;&lt;br /&gt;&lt;br /&gt;import java.io.Writer;&lt;br /&gt;&lt;br /&gt;import javax.servlet.jsp.JspException;&lt;br /&gt;import javax.servlet.jsp.JspWriter;&lt;br /&gt;import javax.servlet.jsp.tagext.SimpleTagSupport;&lt;br /&gt;&lt;br /&gt;public class PaginationTaglib extends SimpleTagSupport {&lt;br /&gt; private String uri;&lt;br /&gt; private int offset;&lt;br /&gt; private int count;&lt;br /&gt; private int max = 10;&lt;br /&gt; private int steps = 10;&lt;br /&gt; private String previous = "Previous";&lt;br /&gt; private String next = "Next";&lt;br /&gt;&lt;br /&gt; private Writer getWriter() {&lt;br /&gt;  JspWriter out = getJspContext().getOut();&lt;br /&gt;  return out;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void doTag() throws JspException {&lt;br /&gt;  Writer out = getWriter();&lt;br /&gt;&lt;br /&gt;  try {&lt;br /&gt;   out.write("&amp;lt;nav&amp;gt;");&lt;br /&gt;   out.write("&amp;lt;ul class=\"pagination\"&amp;gt;");&lt;br /&gt;   &lt;br /&gt;   if(offset&amp;lt;steps)&lt;br /&gt;    out.write(constructLink(1, previous, "disabled", true));&lt;br /&gt;   else&lt;br /&gt;    out.write(constructLink(offset-steps, previous, null, false));&lt;br /&gt;   &lt;br /&gt;   for(int itr=0;itr&amp;lt;count;itr+=steps) {&lt;br /&gt;    if(offset==itr)&lt;br /&gt;     out.write(constructLink((itr/10+1)-1 *steps, String.valueOf(itr/10+1), "active", true));&lt;br /&gt;    else&lt;br /&gt;     out.write(constructLink(itr/10*steps, String.valueOf(itr/10+1), null , false));&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   if(offset+steps&amp;gt;=count)&lt;br /&gt;    out.write(constructLink(offset+steps, next, "disabled", true));&lt;br /&gt;   else&lt;br /&gt;    out.write(constructLink(offset+steps, next, null , false));&lt;br /&gt;   &lt;br /&gt;   &lt;br /&gt;   out.write("&amp;lt;/ul&amp;gt;");&lt;br /&gt;   out.write("&amp;lt;/nav&amp;gt;");&lt;br /&gt;  } catch (java.io.IOException ex) {&lt;br /&gt;   throw new JspException("Error in Paginator tag", ex);&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; private String constructLink(int page, String text, String className, boolean disabled) {&lt;br /&gt;  StringBuilder link = new StringBuilder("&amp;lt;li");&lt;br /&gt;  if (className != null) {&lt;br /&gt;   link.append(" class=\"");&lt;br /&gt;   link.append(className);&lt;br /&gt;   link.append("\"");&lt;br /&gt;  }&lt;br /&gt;  if(disabled)&lt;br /&gt;   link.append("&amp;gt;").append("&amp;lt;a href=\"#\"&amp;gt;"+text+"&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;");&lt;br /&gt;  else&lt;br /&gt;   link.append("&amp;gt;").append("&amp;lt;a href=\""+uri+"?offset="+page + "\"&amp;gt;"+text+"&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;");&lt;br /&gt;  return link.toString();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getUri() {&lt;br /&gt;  return uri;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setUri(String uri) {&lt;br /&gt;  this.uri = uri;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getOffset() {&lt;br /&gt;  return offset;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setOffset(int offset) {&lt;br /&gt;  this.offset = offset;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getCount() {&lt;br /&gt;  return count;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setCount(int count) {&lt;br /&gt;  this.count = count;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getMax() {&lt;br /&gt;  return max;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setMax(int max) {&lt;br /&gt;  this.max = max;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getPrevious() {&lt;br /&gt;  return previous;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setPrevious(String previous) {&lt;br /&gt;  this.previous = previous;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getNext() {&lt;br /&gt;  return next;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setNext(String next) {&lt;br /&gt;  this.next = next;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getSteps() {&lt;br /&gt;  return steps;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setSteps(int steps) {&lt;br /&gt;  this.steps = steps;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;list.jsp&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java;highlight: [3,91,92]"&gt;&amp;lt;%@ page language="java" contentType="text/html; charset=UTF-8"&lt;br /&gt; pageEncoding="UTF-8"%&amp;gt;&lt;br /&gt;&amp;lt;%@ taglib prefix="tag" uri="/WEB-INF/taglibs/customTaglib.tld"%&amp;gt;&lt;br /&gt;&amp;lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&amp;gt;&lt;br /&gt;&amp;lt;link rel="stylesheet" type="text/css" href="/css/bootstrap.css" /&amp;gt;&lt;br /&gt;&amp;lt;link rel="stylesheet" type="text/css" href="/css/bootstrap.min.css" /&amp;gt;&lt;br /&gt;&amp;lt;link rel="stylesheet" type="text/css" href="/css/font-awesome.min.css" /&amp;gt;&lt;br /&gt;&amp;lt;title&amp;gt;| Ekiras&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt; &amp;lt;nav class="navbar navbar-default"&amp;gt;&lt;br /&gt; &amp;lt;div class="container-fluid"&amp;gt;&lt;br /&gt;  &amp;lt;!-- Brand and toggle get grouped for better mobile display --&amp;gt;&lt;br /&gt;  &amp;lt;div class="navbar-header"&amp;gt;&lt;br /&gt;   &amp;lt;button type="button" class="navbar-toggle collapsed"&lt;br /&gt;    data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"&amp;gt;&lt;br /&gt;    &amp;lt;span class="sr-only"&amp;gt;Toggle navigation&amp;lt;/span&amp;gt; &amp;lt;span&lt;br /&gt;     class="icon-bar"&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class="icon-bar"&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&lt;br /&gt;     class="icon-bar"&amp;gt;&amp;lt;/span&amp;gt;&lt;br /&gt;   &amp;lt;/button&amp;gt;&lt;br /&gt;   &amp;lt;a class="navbar-brand" href="#"&amp;gt;Brand&amp;lt;/a&amp;gt;&lt;br /&gt;  &amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- Collect the nav links, forms, and other content for toggling --&amp;gt;&lt;br /&gt;  &amp;lt;div class="collapse navbar-collapse"&lt;br /&gt;   id="bs-example-navbar-collapse-1"&amp;gt;&lt;br /&gt;   &amp;lt;ul class="nav navbar-nav"&amp;gt;&lt;br /&gt;    &amp;lt;li class="active"&amp;gt;&amp;lt;a href="#"&amp;gt;Link &amp;lt;span class="sr-only"&amp;gt;(current)&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;    &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;    &amp;lt;li class="dropdown"&amp;gt;&amp;lt;a href="#" class="dropdown-toggle"&lt;br /&gt;     data-toggle="dropdown" role="button" aria-expanded="false"&amp;gt;Dropdown&lt;br /&gt;      &amp;lt;span class="caret"&amp;gt;&amp;lt;/span&amp;gt;&lt;br /&gt;    &amp;lt;/a&amp;gt;&lt;br /&gt;     &amp;lt;ul class="dropdown-menu" role="menu"&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Action&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Another action&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Something else here&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li class="divider"&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Separated link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li class="divider"&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;One more separated link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;     &amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;   &amp;lt;/ul&amp;gt;&lt;br /&gt;   &amp;lt;form class="navbar-form navbar-left" role="search"&amp;gt;&lt;br /&gt;    &amp;lt;div class="form-group"&amp;gt;&lt;br /&gt;     &amp;lt;input type="text" class="form-control" placeholder="Search"&amp;gt;&lt;br /&gt;    &amp;lt;/div&amp;gt;&lt;br /&gt;    &amp;lt;button type="submit" class="btn btn-default"&amp;gt;Submit&amp;lt;/button&amp;gt;&lt;br /&gt;   &amp;lt;/form&amp;gt;&lt;br /&gt;   &amp;lt;ul class="nav navbar-nav navbar-right"&amp;gt;&lt;br /&gt;    &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;    &amp;lt;li class="dropdown"&amp;gt;&amp;lt;a href="#" class="dropdown-toggle"&lt;br /&gt;     data-toggle="dropdown" role="button" aria-expanded="false"&amp;gt;Dropdown&lt;br /&gt;      &amp;lt;span class="caret"&amp;gt;&amp;lt;/span&amp;gt;&lt;br /&gt;    &amp;lt;/a&amp;gt;&lt;br /&gt;     &amp;lt;ul class="dropdown-menu" role="menu"&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Action&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Another action&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Something else here&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li class="divider"&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;      &amp;lt;li&amp;gt;&amp;lt;a href="#"&amp;gt;Separated link&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;     &amp;lt;/ul&amp;gt;&amp;lt;/li&amp;gt;&lt;br /&gt;   &amp;lt;/ul&amp;gt;&lt;br /&gt;  &amp;lt;/div&amp;gt;&lt;br /&gt;  &amp;lt;!-- /.navbar-collapse --&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;!-- /.container-fluid --&amp;gt; &amp;lt;/nav&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;div class="container"&amp;gt;&lt;br /&gt;  &amp;lt;div class="well"&amp;gt;&lt;br /&gt;   &amp;lt;strong&amp;gt;List of Persons&amp;lt;/strong&amp;gt;&lt;br /&gt;  &amp;lt;/div&amp;gt;&lt;br /&gt;  &amp;lt;table class="table table-stripped"&amp;gt;&lt;br /&gt;   &amp;lt;tr&amp;gt;&lt;br /&gt;    &amp;lt;th&amp;gt;S.No&amp;lt;/th&amp;gt;&lt;br /&gt;    &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;&lt;br /&gt;    &amp;lt;th&amp;gt;Age&amp;lt;/th&amp;gt;&lt;br /&gt;   &amp;lt;/tr&amp;gt;&lt;br /&gt;   &amp;lt;c:forEach items="${persons}" var="person" varStatus="itr"&amp;gt;&lt;br /&gt;    &amp;lt;tr&amp;gt;&lt;br /&gt;     &amp;lt;td&amp;gt;${offset + itr.index +1 }&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;td&amp;gt;${person.name }&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;td&amp;gt;${person.age }&amp;lt;/td&amp;gt;&lt;br /&gt;    &amp;lt;/tr&amp;gt;&lt;br /&gt;   &amp;lt;/c:forEach&amp;gt;&lt;br /&gt;  &amp;lt;/table&amp;gt;&lt;br /&gt;  &amp;lt;tag:paginate max="15" offset="${offset}" count="${count}"&lt;br /&gt;   uri="/person/list" next="&amp;amp;raquo;" previous="&amp;amp;laquo;" /&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;script type="text/javascript" src="/js/jquery.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt; &amp;lt;script type="text/javascript" src="/js/bootstrap.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-KoAlp0suMlA/VPx3b7cDvbI/AAAAAAAAAOw/uVf4VZ9PjP0/s1600/paginate_2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" src="http://1.bp.blogspot.com/-KoAlp0suMlA/VPx3b7cDvbI/AAAAAAAAAOw/uVf4VZ9PjP0/s1600/paginate_2.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This is how you can do pagination using bootstrap style in spring hibernate mvc application. &lt;br /&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Spring-Hibernate-Bootstrap-Pagination" target="_blank"&gt;Download this example from Github.&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/60214221008391525/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/pagination-in-spring-hibernate-mvc-application-using-criteria-query.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/60214221008391525'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/60214221008391525'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/03/pagination-in-spring-hibernate-mvc-application-using-criteria-query.html' title='Pagination in Spring Hibernate Mvc application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-ToygZfLpiwU/VPx3M_slB2I/AAAAAAAAAOo/HxWJAkoJjgs/s72-c/paginate_1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8721476494358516759</id><published>2015-03-08T14:16:00.000+05:30</published><updated>2015-03-08T14:16:16.949+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>How to keep database properties in Properties file in Spring Hibernate MVC project</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;this is body. &lt;br /&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-keep-database-properties-in-properties-file-in-spring-hibernate-mvc.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8721476494358516759'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8721476494358516759'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3131211721411533662</id><published>2015-03-04T16:47:00.001+05:30</published><updated>2015-03-04T16:54:45.692+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Pagination'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>How to get results from a fixed position in Hibernate Criteria Query</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Offset may be required to do pagination or get the results after a particular result from the database.&lt;/li&gt;&lt;li&gt;Using offset you can define the first result to be included in the result set from the database.&amp;nbsp;&lt;/li&gt;&lt;li&gt;You can use &lt;b&gt;setFirstResult&lt;/b&gt;&amp;nbsp;on the &lt;b&gt;CriteriaQuery&lt;/b&gt;&amp;nbsp;to set the first result that you want.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Using offset to get the results&lt;/h2&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;SampleDAO.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;@SuppressWarnings("unchecked")&lt;br /&gt;public List&amp;lt;Person&amp;gt; getCategories(Integer offset){&lt;br /&gt;  return getSession()&lt;br /&gt;   .createCriteria(Person.class)&lt;br /&gt;   .setFirstResult(offset!=null?offset:0)&lt;br /&gt;   .setMaxResults(10)&lt;br /&gt;   .list();&lt;br /&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;This is how you can set the first result you want to fetch from the database. In this example we have set the first result and the maximum number of records that we need to fetch.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3131211721411533662/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-get-results-from-fixed-position-in-hibernate-criteria-query.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3131211721411533662'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3131211721411533662'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-get-results-from-fixed-position-in-hibernate-criteria-query.html' title='How to get results from a fixed position in Hibernate Criteria Query'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5207228900983201216</id><published>2015-03-04T01:51:00.002+05:30</published><updated>2015-03-04T01:52:55.198+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Pagination'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><category scheme='http://www.blogger.com/atom/ns#' term='Taglib'/><category scheme='http://www.blogger.com/atom/ns#' term='Bootstrap'/><title type='text'>How to create Pagination Taglib in Java, Spring</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Bootstrap is one of the major UI componnet used worldwide, So you may want to implemnt pagination using bootstrap in java , j2ee or spring application. So all you need to do is&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Create a Class that will behave like a taglib.&lt;/li&gt;&lt;li&gt;Create a Tld file that will map the tablib class with the jsp's.&lt;/li&gt;&lt;li&gt;Use the taglib on jsp using the tld file.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h2&gt;Create Pagination Taglib for Jsp with Bootstrap.&lt;/h2&gt;Following is an example of the a custom taglib built for &lt;b&gt;Bootstrap&lt;/b&gt;. This taglib takes in&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;uri&lt;/b&gt; -&amp;gt; action to be hit when clicked.&lt;/li&gt;&lt;li&gt;&lt;b&gt;offset&lt;/b&gt; -&amp;gt; the offset of pagination.&lt;/li&gt;&lt;li&gt;&lt;b&gt;count&lt;/b&gt; -&amp;gt; total number of elements to be shown.&lt;/li&gt;&lt;li&gt;&lt;b&gt;max&lt;/b&gt; -&amp;gt; maximum number of pages to be shown in the pagination bar.&lt;/li&gt;&lt;li&gt;&lt;b&gt;steps&lt;/b&gt; -&amp;gt; maximum number of elements to be shown per page.&lt;/li&gt;&lt;li&gt;&lt;b&gt;previous&lt;/b&gt; -&amp;gt; text to be shown for previous page link.&lt;/li&gt;&lt;li&gt;&lt;b&gt;next&lt;/b&gt; -&amp;gt; text to be shown for next page link.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;PaginationTaglib.java&lt;/div&gt;&lt;div class="panel-body"&gt;This is a java class that will behave like a taglib on jsp's.&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.taglib;&lt;br /&gt;&lt;br /&gt;import java.io.Writer;&lt;br /&gt;&lt;br /&gt;import javax.servlet.jsp.JspException;&lt;br /&gt;import javax.servlet.jsp.JspWriter;&lt;br /&gt;import javax.servlet.jsp.tagext.SimpleTagSupport;&lt;br /&gt;&lt;br /&gt;public class PaginationTaglib extends SimpleTagSupport {&lt;br /&gt; private String uri;&lt;br /&gt; private int offset;&lt;br /&gt; private int count;&lt;br /&gt; private int max = 10;&lt;br /&gt; private int steps = 10;&lt;br /&gt; private String previous = "Previous";&lt;br /&gt; private String next = "Next";&lt;br /&gt;&lt;br /&gt; private Writer getWriter() {&lt;br /&gt;  JspWriter out = getJspContext().getOut();&lt;br /&gt;  return out;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void doTag() throws JspException {&lt;br /&gt;  Writer out = getWriter();&lt;br /&gt;&lt;br /&gt;  try {&lt;br /&gt;   out.write("&amp;lt;nav&amp;gt;");&lt;br /&gt;   out.write("&amp;lt;ul class=\"pagination\"&amp;gt;");&lt;br /&gt;   &lt;br /&gt;   if(offset&amp;lt;steps)&lt;br /&gt;    out.write(constructLink(1, previous, "disabled", true));&lt;br /&gt;   else&lt;br /&gt;    out.write(constructLink(offset-steps, previous, null, false));&lt;br /&gt;   &lt;br /&gt;   for(int itr=0;itr&amp;lt;count;itr+=steps) {&lt;br /&gt;    if(offset==itr)&lt;br /&gt;     out.write(constructLink((itr/10+1)-1 *steps, String.valueOf(itr/10+1), "active", true));&lt;br /&gt;    else&lt;br /&gt;     out.write(constructLink(itr/10*steps, String.valueOf(itr/10+1), null , false));&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   if(offset+steps&amp;gt;count)&lt;br /&gt;    out.write(constructLink(offset+steps, next, "disabled", true));&lt;br /&gt;   else&lt;br /&gt;    out.write(constructLink(offset+steps, next, null , false));&lt;br /&gt;   &lt;br /&gt;   &lt;br /&gt;   out.write("&amp;lt;/ul&amp;gt;");&lt;br /&gt;   out.write("&amp;lt;/nav&amp;gt;");&lt;br /&gt;  } catch (java.io.IOException ex) {&lt;br /&gt;   throw new JspException("Error in Paginator tag", ex);&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; private String constructLink(int page, String text, String className, boolean disabled) {&lt;br /&gt;  StringBuilder link = new StringBuilder("&amp;lt;li");&lt;br /&gt;  if (className != null) {&lt;br /&gt;   link.append(" class=\"");&lt;br /&gt;   link.append(className);&lt;br /&gt;   link.append("\"");&lt;br /&gt;  }&lt;br /&gt;  if(disabled)&lt;br /&gt;   link.append("&amp;gt;").append("&amp;lt;a href=\"#\"&amp;gt;"+text+"&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;");&lt;br /&gt;  else&lt;br /&gt;   link.append("&amp;gt;").append("&amp;lt;a href=\""+uri+"?offset="+page + "\"&amp;gt;"+text+"&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;");&lt;br /&gt;  return link.toString();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getUri() {&lt;br /&gt;  return uri;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setUri(String uri) {&lt;br /&gt;  this.uri = uri;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getOffset() {&lt;br /&gt;  return offset;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setOffset(int offset) {&lt;br /&gt;  this.offset = offset;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getCount() {&lt;br /&gt;  return count;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setCount(int count) {&lt;br /&gt;  this.count = count;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getMax() {&lt;br /&gt;  return max;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setMax(int max) {&lt;br /&gt;  this.max = max;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getPrevious() {&lt;br /&gt;  return previous;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setPrevious(String previous) {&lt;br /&gt;  this.previous = previous;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getNext() {&lt;br /&gt;  return next;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setNext(String next) {&lt;br /&gt;  this.next = next;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int getSteps() {&lt;br /&gt;  return steps;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setSteps(int steps) {&lt;br /&gt;  this.steps = steps;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;customTaglib.tld&lt;/div&gt;&lt;div class="panel-body"&gt;This is the .tld file that defines how to use the java class as a taglib in jsp's&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;taglib version="2.1" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-jsptaglibrary_2_1.xsd"&amp;gt;&lt;br /&gt;  &amp;lt;tlib-version&amp;gt;1.0&amp;lt;/tlib-version&amp;gt;&lt;br /&gt;  &amp;lt;short-name&amp;gt;paginator&amp;lt;/short-name&amp;gt;&lt;br /&gt;  &amp;lt;uri&amp;gt;/WEB-INF/taglibs/customTaglib.tld&amp;lt;/uri&amp;gt;&lt;br /&gt; &lt;br /&gt;  &amp;lt;tag&amp;gt;&lt;br /&gt;    &amp;lt;name&amp;gt;paginate&amp;lt;/name&amp;gt;&lt;br /&gt;    &amp;lt;tag-class&amp;gt;com.ekiras.taglib.PaginationTaglib&amp;lt;/tag-class&amp;gt;&lt;br /&gt;    &amp;lt;body-content&amp;gt;empty&amp;lt;/body-content&amp;gt;&lt;br /&gt;    &lt;br /&gt;    &amp;lt;attribute&amp;gt;&lt;br /&gt;      &amp;lt;name&amp;gt;next&amp;lt;/name&amp;gt;&lt;br /&gt;      &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&lt;br /&gt;      &amp;lt;type&amp;gt;java.lang.String&amp;lt;/type&amp;gt;&lt;br /&gt;    &amp;lt;/attribute&amp;gt;&lt;br /&gt;    &amp;lt;attribute&amp;gt;&lt;br /&gt;      &amp;lt;name&amp;gt;previous&amp;lt;/name&amp;gt;&lt;br /&gt;      &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&lt;br /&gt;      &amp;lt;type&amp;gt;java.lang.String&amp;lt;/type&amp;gt;&lt;br /&gt;    &amp;lt;/attribute&amp;gt;&lt;br /&gt;    &amp;lt;attribute&amp;gt;&lt;br /&gt;      &amp;lt;name&amp;gt;uri&amp;lt;/name&amp;gt;&lt;br /&gt;      &amp;lt;required&amp;gt;true&amp;lt;/required&amp;gt;&lt;br /&gt;      &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&lt;br /&gt;      &amp;lt;type&amp;gt;java.lang.String&amp;lt;/type&amp;gt;&lt;br /&gt;    &amp;lt;/attribute&amp;gt;&lt;br /&gt;    &amp;lt;attribute&amp;gt;&lt;br /&gt;      &amp;lt;name&amp;gt;offset&amp;lt;/name&amp;gt;&lt;br /&gt;      &amp;lt;required&amp;gt;true&amp;lt;/required&amp;gt;&lt;br /&gt;      &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&lt;br /&gt;      &amp;lt;type&amp;gt;int&amp;lt;/type&amp;gt;&lt;br /&gt;    &amp;lt;/attribute&amp;gt;&lt;br /&gt;    &amp;lt;attribute&amp;gt;&lt;br /&gt;      &amp;lt;name&amp;gt;count&amp;lt;/name&amp;gt;&lt;br /&gt;      &amp;lt;required&amp;gt;true&amp;lt;/required&amp;gt;&lt;br /&gt;      &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&lt;br /&gt;      &amp;lt;type&amp;gt;int&amp;lt;/type&amp;gt;&lt;br /&gt;    &amp;lt;/attribute&amp;gt;&lt;br /&gt;    &amp;lt;attribute&amp;gt;&lt;br /&gt;      &amp;lt;name&amp;gt;max&amp;lt;/name&amp;gt;&lt;br /&gt;      &amp;lt;rtexprvalue&amp;gt;true&amp;lt;/rtexprvalue&amp;gt;&lt;br /&gt;      &amp;lt;type&amp;gt;int&amp;lt;/type&amp;gt;&lt;br /&gt;    &amp;lt;/attribute&amp;gt;&lt;br /&gt;  &amp;lt;/tag&amp;gt;&lt;br /&gt;&amp;lt;/taglib&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Well that's all that you need to do do create a custom taglib and use it in your jsp's.&lt;br /&gt;&lt;pre class="brush:java"&gt;&amp;lt;%@ taglib prefix="tag" uri="/WEB-INF/taglibs/customTaglib.tld"%&amp;gt;&lt;/pre&gt;You can use this taglib in jsp by including it as mentioned above and use it like shown below.&lt;br /&gt;&lt;pre class="brush:java"&gt;&amp;lt;tag:paginate max="15" offset="${offset}" count="${count}" uri="${uri}"&lt;br /&gt;  next="&amp;amp;raquo;" previous="&amp;amp;laquo;" /&amp;gt;&lt;/pre&gt;So this when used in the application may give u an output as shown in image below.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-4KrVu3vnM6M/VPYXvbgE2TI/AAAAAAAAAOU/zK61J73QSas/s1600/pagination.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" src="http://2.bp.blogspot.com/-4KrVu3vnM6M/VPYXvbgE2TI/AAAAAAAAAOU/zK61J73QSas/s1600/pagination.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5207228900983201216/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-create-pagination-taglib-in-java-spring-for-bootstrap.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5207228900983201216'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5207228900983201216'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/03/how-to-create-pagination-taglib-in-java-spring-for-bootstrap.html' title='How to create Pagination Taglib in Java, Spring'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-4KrVu3vnM6M/VPYXvbgE2TI/AAAAAAAAAOU/zK61J73QSas/s72-c/pagination.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2921029460944708061</id><published>2015-02-21T18:09:00.002+05:30</published><updated>2015-02-21T18:11:24.314+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>How to do Versioning Controllers in Grails Example</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Versioning &amp;nbsp;of Controllers can be done in grails with the help of UrlMappings and Namespaces.&lt;/li&gt;&lt;li&gt;We can have two or more &lt;b&gt;controllers with the same name&lt;/b&gt; as long as they are in &lt;b&gt;different packages&amp;nbsp;and different namespaces&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;You can map these controllers in &lt;b&gt;UrlMappings&lt;/b&gt;&amp;nbsp;like&amp;nbsp;&lt;b&gt;/$namespace/$controller/$action&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Versioning of Grails Controllers&amp;nbsp;&lt;/h2&gt;The easiest way of versioning the grails controllers is to do it with the help of namespaces. So in this example we will try to do versioning of the controllers on the basis of namespaces.&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Test.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.versioning.v1&lt;br /&gt;&lt;br /&gt;class TestController {&lt;br /&gt;&lt;br /&gt;    static namespace = "v1"&lt;br /&gt;&lt;br /&gt;    def index() {&lt;br /&gt;        render "Hi, This is version 1"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Test.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.versioning.v2&lt;br /&gt;&lt;br /&gt;class TestController {&lt;br /&gt;&lt;br /&gt;    static namespace = "v2"&lt;br /&gt;&lt;br /&gt;    def index() {&lt;br /&gt;        render "Hi, This is version 2"&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;UrlMappings&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;class UrlMappings {&lt;br /&gt;&lt;br /&gt; static mappings = {&lt;br /&gt;&lt;br /&gt;        "/$namespace/$controller/$action?/$id?(.$format)?"{&lt;br /&gt;            constraints {&lt;br /&gt;                // apply constraints here&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        "/$controller/$action?/$id?(.$format)?"{&lt;br /&gt;            constraints {&lt;br /&gt;                // apply constraints here&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        "/"(view:"/index")&lt;br /&gt;        "500"(view:'/error')&lt;br /&gt;//        Other Mappings&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;So now we can call the two different controllers with the same name but different namespaces.&lt;br /&gt;For example, if we run our app at root context at port 8080, then we can access these like following&lt;br /&gt;&lt;br /&gt;&lt;div class="well well-lg flat"&gt;http://localhost:8080/v1/test&lt;br /&gt;http://localhost:8080/v2/test&lt;/div&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Grails-Versioining"&gt;Download the example from Github&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2921029460944708061/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-do-versioning-in-controllers-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2921029460944708061'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2921029460944708061'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-do-versioning-in-controllers-in-grails.html' title='How to do Versioning Controllers in Grails Example'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2290302246299867274</id><published>2015-02-16T01:14:00.000+05:30</published><updated>2015-02-16T01:22:59.223+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What is NoClassDefFoundException in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ol style="background-color: white; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; line-height: 19.600000381469727px; margin-bottom: 10px; margin-top: 0px;"&gt;&lt;li style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px;"&gt;NoClassDefFoundException is an Exception that occurs when a class is not found at runtime but was available at compile time.&lt;/li&gt;&lt;li style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px;"&gt;This exception is different from ClassNotFoundException. &lt;a href="http://www.ekiras.com/2014/10/difference-between-classnotfoundexception-and-noclassdeffounderror.html" target="_blank"&gt;See the differences here&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Example : Creating a NoClassDefFoundException&lt;/h2&gt;Suppose we have two classes A and Test. We just make an object of class A in Test class.&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;A.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;class A{&lt;br /&gt;   public A(){&lt;br /&gt;      System.out.println("This is class A");&lt;br /&gt;   }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Test.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;class Test{&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;    System.out.println("This is Test Class");&lt;br /&gt;    A obj = new A();&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;The output of the program will be as follows &lt;br /&gt;&lt;div class="output"&gt;This is Test Class&lt;br /&gt;This is class A&lt;/div&gt;Now Suppose if you delete the class &lt;b&gt;A.class&lt;/b&gt; from the current path and run the Test class you will get the following output &lt;br /&gt;&lt;div class="output"&gt;This is Test Class&lt;br /&gt;Exception in thread "main" java.lang.NoClassDefFoundError: A&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at Test.main(Test.java:12)&lt;br /&gt;Caused by: java.lang.ClassNotFoundException: A&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at java.net.URLClassLoader$1.run(URLClassLoader.java:366)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at java.net.URLClassLoader$1.run(URLClassLoader.java:355)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at java.security.AccessController.doPrivileged(Native Method)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at java.net.URLClassLoader.findClass(URLClassLoader.java:354)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at java.lang.ClassLoader.loadClass(ClassLoader.java:425)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;at java.lang.ClassLoader.loadClass(ClassLoader.java:358)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt;	&lt;/span&gt;... 1 more&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;This is the how NoClassDefFoundException is caused. So if you get this exception in your application, it means that some of the classes that were there at compile time are missing at runtime.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2290302246299867274/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/what-is-noclassdeffoundexception-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2290302246299867274'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2290302246299867274'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/what-is-noclassdeffoundexception-in-java.html' title='What is NoClassDefFoundException in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2187478208760689910</id><published>2015-02-15T21:07:00.003+05:30</published><updated>2015-02-15T21:26:36.215+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Exceptions'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Exception Handling'/><title type='text'>How to create Nested Custom Exceptions in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;h2 style="text-align: left;"&gt;Points To Rememeber&lt;/h2&gt;When you have to create a nested or a group of similar Exceptions in your application then&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;First create a &lt;b&gt;ParentException&lt;/b&gt; class and this class should either extend &lt;b&gt;Exception&lt;/b&gt;&amp;nbsp;class or &lt;b&gt;RuntimeException&lt;/b&gt; class.&amp;nbsp;&lt;/li&gt;&lt;li&gt;All the nested Exceptions will extend the ParentException and thus will lie in a hierarchy.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Scenario&lt;/h2&gt;There may be times when you want to have your own hierarchy of Custom Exception so that you can manage your application in a better way.&lt;br /&gt;&lt;br /&gt;Suppose we have a &lt;b&gt;Quiz application&lt;/b&gt; where we want to show questions based on a Topic and display questions&lt;br /&gt;&lt;h2&gt;Creating Nested Custom Exceptions&amp;nbsp;&lt;/h2&gt;So we have created three exception classes here.&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;QuixException&lt;/li&gt;&lt;li&gt;InvalidQuestionIdException&lt;/li&gt;&lt;li&gt;InvalidAnswerException&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Here Quiz Exception is the Parent of all the other Exceptions. QuizException can catch all the nested Exceptions so that we do not have to catch each of them separately. &amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;class QuizException extends Exception {&lt;br /&gt;&lt;br /&gt; public QuizException(String message) {&lt;br /&gt;  super(message);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class InvalidQuestionIdException extends QuizException {&lt;br /&gt;&lt;br /&gt; public InvalidQuestionIdException() {&lt;br /&gt;  super("invalid question id provided");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class InvalidAnswerException extends QuizException {&lt;br /&gt;&lt;br /&gt; public InvalidAnswerException() {&lt;br /&gt;  super("invalid answer is provided");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;class Question {&lt;br /&gt; public String getQuestion(Integer id) throws InvalidQuestionIdException{&lt;br /&gt;  switch (id) {&lt;br /&gt;  case 1:&lt;br /&gt;   return "This is question 1";&lt;br /&gt;  case 2:&lt;br /&gt;   return "This is question 2";&lt;br /&gt;  default:&lt;br /&gt;   throw new InvalidQuestionIdException();&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class Answer{&lt;br /&gt; public String getAnswer(Integer ans)throws InvalidAnswerException{&lt;br /&gt;  switch(ans){&lt;br /&gt;  case 1:&lt;br /&gt;   return "right answer";&lt;br /&gt;  case 2:&lt;br /&gt;   return "wrong answer";&lt;br /&gt;  default:&lt;br /&gt;   throw new InvalidAnswerException();&lt;br /&gt;  }&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class Test {&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  try {&lt;br /&gt;   System.out.println(new Question().getQuestion(1));&lt;br /&gt;   System.out.println(new Question().getQuestion(5));&lt;br /&gt;  } catch (QuizException e) {&lt;br /&gt;   e.printStackTrace();&lt;br /&gt;  }&lt;br /&gt;  try {&lt;br /&gt;   System.out.println(new Answer().getAnswer(1));&lt;br /&gt;   System.out.println(new Answer().getAnswer(3));&lt;br /&gt;  } catch (QuizException e) {&lt;br /&gt;   e.printStackTrace();&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;Output of the above example is as follows&lt;br /&gt;&lt;div class="output"&gt;This is question 1&lt;br /&gt;InvalidQuestionIdException: invalid question id provided&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;at Question.getQuestion(Test.java:32)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;at Test.main(Test.java:59)&lt;br /&gt;right answer&lt;br /&gt;InvalidAnswerException: invalid answer is provided&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;at Answer.getAnswer(Test.java:47)&lt;br /&gt;&lt;span class="Apple-tab-span" style="white-space: pre;"&gt; &lt;/span&gt;at Test.main(Test.java:65)&lt;/div&gt;This is how you create Nested Custom Exceptions in java. When you want to create hierarchy of Exception you can keep extending the QuizException or any other Exception that extend Quiz Exception.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2187478208760689910/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-nested-custom-exceptions-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2187478208760689910'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2187478208760689910'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-nested-custom-exceptions-in-java.html' title='How to create Nested Custom Exceptions in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8326970521785086889</id><published>2015-02-15T20:37:00.000+05:30</published><updated>2015-02-15T20:40:41.044+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Exceptions'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Exception Handling'/><title type='text'>How to create a Custom Exception in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;All the custom Exceptions &lt;b&gt;must implement the Exception class or any of its subclass&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;There are &lt;b&gt;four types of Constructors&lt;/b&gt; that you can use while defining your Custom Exception.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Ex 1 : Basic Custom Exception&lt;/h2&gt;In this case we will just created a Custom Exception where we define a Custom Exception and throw it with a message. This message is visible in the stacktrace. &lt;br /&gt;&lt;pre class="brush:java"&gt;class CustomException extends Exception {&lt;br /&gt;&lt;br /&gt; public CustomException(String message) {&lt;br /&gt;  super(message);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class Test {&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  try {&lt;br /&gt;   throw new CustomException("Throwing Custom Exception");&lt;br /&gt;  } catch (CustomException e) {&lt;br /&gt;   e.printStackTrace();&lt;br /&gt;  }&lt;br /&gt;  try {&lt;br /&gt;   throw new CustomException(" ThrowingAnother Custom Exception");&lt;br /&gt;  } catch (CustomException e) {&lt;br /&gt;   e.printStackTrace();&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;The output of the above example is   &lt;br /&gt;&lt;div class="output"&gt;CustomException: Throwing Custom Exception&lt;br /&gt;at Test.main(Test.java:12)&lt;br /&gt;CustomException:  ThrowingAnother Custom Exception&lt;br /&gt;at Test.main(Test.java:17) &lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Ex 2 : Custom Exception with same Message&lt;/h2&gt;Suppose we have a Custom Exception and we know that it will occur only because of a particular reason that we can throw the Exception without the Constructor Parameter like the following.&lt;br /&gt;&lt;pre class="brush:java"&gt;class CustomException extends Exception {&lt;br /&gt;&lt;br /&gt; public CustomException() {&lt;br /&gt;  super("Custom Exception has Occured");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class Test {&lt;br /&gt; public static void main(String args[]) {&lt;br /&gt;  try {&lt;br /&gt;   throw new CustomException();&lt;br /&gt;  } catch (CustomException e) {&lt;br /&gt;   e.printStackTrace();&lt;br /&gt;  }&lt;br /&gt;  try {&lt;br /&gt;   throw new CustomException();&lt;br /&gt;  } catch (CustomException e) {&lt;br /&gt;   e.printStackTrace();&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;div class="output"&gt;CustomException: Custom Exception has Occured&lt;br /&gt;at Test.main(Test.java:12)&lt;br /&gt;CustomException: Custom Exception has Occured&lt;br /&gt;at Test.main(Test.java:17)&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;This is a small example how you can define your own Custom Exceptions in java&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8326970521785086889/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-custom-exception-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8326970521785086889'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8326970521785086889'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-custom-exception-in-java.html' title='How to create a Custom Exception in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-9038879663691930344</id><published>2015-02-11T00:03:00.001+05:30</published><updated>2015-02-11T00:15:33.317+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Youtube'/><category scheme='http://www.blogger.com/atom/ns#' term='Oauth'/><category scheme='http://www.blogger.com/atom/ns#' term='Authentication'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><category scheme='http://www.blogger.com/atom/ns#' term='Youtube Data Api v3'/><title type='text'>Youtube Data Api v3 : Authenticate User</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;You must have a project created in Developers console to use Youtube data api and other api's.&lt;/li&gt;&lt;li&gt;You should &lt;b&gt;save the youtube refresh token in a database or file&lt;/b&gt; where you can save it for a long time and use it.&lt;/li&gt;&lt;li&gt;Youtube &lt;b&gt;refresh token is generated only once&lt;/b&gt;, so if you want to regenerate it go to &lt;a href="https://myaccount.google.com/u/1/" target="_blank"&gt;google accounts page&lt;/a&gt;&amp;nbsp;and revoke access to your project and then re authenticate.&lt;/li&gt;&lt;li&gt;To revoke access, go to &lt;b&gt;Connected Apps and Sites&lt;/b&gt;&amp;nbsp;in the above mentioned url and click on your project and then click revoke access to revoke access to the app.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h2&gt;Steps to Use Youtube Data Api v3&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;You need to create a new Project in your at&amp;nbsp;&lt;a href="https://console.developers.google.com/project" target="_blank"&gt;Developers Console&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;After creating a project you need to go to&amp;nbsp;&lt;b&gt;Project -&amp;gt; Api &amp;amp; auth -&amp;gt; Credentials&lt;/b&gt;&amp;nbsp;, and then create a new&amp;nbsp;&lt;b&gt;Client ID&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Go to&amp;nbsp;&lt;b&gt;Project -&amp;gt; Api &amp;amp; auth -&amp;gt;APIs&lt;/b&gt;&amp;nbsp;and enable&amp;nbsp;&lt;b&gt;Youtube Analytics API&lt;/b&gt;&amp;nbsp;and&amp;nbsp;&lt;b&gt;YouTube Data API v3&lt;/b&gt;. This will enable your project to use consume these api's.&lt;/li&gt;&lt;li&gt;For using these api's in your application you need to setup the callback url.&amp;nbsp;Go to&amp;nbsp;&lt;b&gt;Project -&amp;gt; Api &amp;amp; auth -&amp;gt;API -&amp;gt; Credentials&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;span style="font-weight: normal;"&gt;You are all ready to use the youtube data api.&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&amp;nbsp;In this tutorial we will see how to use the youtube data api in Grails. &lt;a href="http:/#" target="_blank"&gt;See how to use Youtube data api in Java example.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Add Rest Plugin to your project&lt;/h2&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;BuildConfig.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;Add the following dependency to your project BuildConfig to enable rest calls using HttpBuilder.&lt;br /&gt;&lt;pre class="brush:java"&gt;compile ":rest:0.8"&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Config.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;Save your data in the Config and use it in database, config used in this example is given below.     &lt;br /&gt;&lt;pre class="brush:java"&gt;youtube{&lt;br /&gt;&lt;br /&gt;    clientId="your_client_id"&lt;br /&gt;    clientSecret="your_client_secret"&lt;br /&gt;    scope ="https://gdata.youtube.com"&lt;br /&gt;    responseType ="code"&lt;br /&gt;    accessType="offline"&lt;br /&gt;    redirectUrl = "http://localhost:8085/youtube/callBack"&lt;br /&gt;&lt;br /&gt;    url{&lt;br /&gt;        auth =  "https://accounts.google.com/o/oauth2/auth"&lt;br /&gt;        token = "https://accounts.google.com/o/oauth2/token"&lt;br /&gt;        userInfo = "https://www.googleapis.com/oauth2/v2/userinfo"&lt;br /&gt;        dataApi = "https://www.googleapis.com/youtube/v3"&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Use Youtube Data Api v3&lt;/h2&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;YoutubeController.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;Use this controller to authenticate the user from the google account and use youtube api. You should implement the logic to save the response data i.e. refresh token in database.&lt;br /&gt;&lt;pre class="brush:java"&gt;class YoutubeController {&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    YoutubeAuthService youtubeAuthService&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    def auth(){&lt;br /&gt;        response.sendRedirect(youtubeAuthService.createAuthorizeRequest());&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    def callBack(String code){&lt;br /&gt;        // User did not rejected authorization of your project&lt;br /&gt;        if(!code)&lt;br /&gt;            redirect(action: 'Error Action') &lt;br /&gt;        def object = youtubeAuthService.getAccessToken(code)&lt;br /&gt;&lt;br /&gt;        // Save your Youtube Tokens to DB&lt;br /&gt;        // or hit data api to get User info using access token and then save&lt;br /&gt;       &amp;nbsp;&lt;br /&gt;        // chain the request to your success handler.&lt;br /&gt;        chain(controller: 'controller', action: 'action')&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;YoutubeAuthService.groovy&lt;/div&gt;&lt;div class="panel-body"&gt;Use this service to get the access token and refresh tokens&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.youtube&lt;br /&gt;&lt;br /&gt;import groovyx.net.http.HTTPBuilder&lt;br /&gt;import groovyx.net.http.Method&lt;br /&gt;&lt;br /&gt;import static groovyx.net.http.ContentType.URLENC&lt;br /&gt;&lt;br /&gt;class YoutubeAuthService {&lt;br /&gt;&lt;br /&gt;    def grailsApplication&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    String createAuthorizeRequest() {&lt;br /&gt;        String clientId = grailsApplication.config.youtube.clientId;&lt;br /&gt;        String authUrl = grailsApplication.config.youtube.url.auth;&lt;br /&gt;        String redirectUrl = grailsApplication.config.youtube.redirectUrl;&lt;br /&gt;        String scope = grailsApplication.config.youtube.scope;&lt;br /&gt;        String responseType = grailsApplication.config.youtube.responseType;&lt;br /&gt;        String accessType = grailsApplication.config.youtube.accessType;&lt;br /&gt;&lt;br /&gt;        String authRequest = authUrl + "?client_id=" + clientId + "&amp;amp;redirect_uri=" + redirectUrl + "&amp;amp;scope=" + scope + "&amp;amp;response_type=" + responseType +  "&amp;amp;access_type=" + accessType&lt;br /&gt;        return authRequest;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    def getAccessToken(String code){&lt;br /&gt;&lt;br /&gt;        String clientId = grailsApplication.config.youtube.clientId;&lt;br /&gt;        String clientSecret = grailsApplication.config.youtube.clientSecret;&lt;br /&gt;        String tokenRequestUrl = grailsApplication.config.youtube.url.token;&lt;br /&gt;        String redirectUrl = grailsApplication.config.youtube.redirectUrl;&lt;br /&gt;        String grantType = "authorization_code";&lt;br /&gt;&lt;br /&gt;        Map data = ['client_id':clientId,'client_secret':clientSecret,'code':code ,'redirect_uri':redirectUrl,'grant_type':grantType]&lt;br /&gt;        HTTPBuilder httpBuilder = new HTTPBuilder(tokenRequestUrl);&lt;br /&gt;&lt;br /&gt;        httpBuilder.request(Method.POST){&lt;br /&gt;            requestContentType = URLENC&lt;br /&gt;            body = data;&lt;br /&gt;            response.success = {resp, reader -&amp;gt;&lt;br /&gt;                // reader contains a access_token,token_type and expires_in&lt;br /&gt;                return reader &lt;br /&gt;            }&lt;br /&gt;            response.failure = {response, reader -&amp;gt;&lt;br /&gt;                return null&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="http:/#" target="_blank"&gt;See how to get access token from the refresh token.&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/9038879663691930344/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/youtube-data-api-v3-authenticate-user-and-get-user-info.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9038879663691930344'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9038879663691930344'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/youtube-data-api-v3-authenticate-user-and-get-user-info.html' title='Youtube Data Api v3 : Authenticate User'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-10680979751039536</id><published>2015-02-08T21:24:00.000+05:30</published><updated>2015-02-09T00:45:42.433+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Enumeration'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>How to use Enums in Hibernate Persistence</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Enums are special java classes that are used to declare constants and methods.&lt;/li&gt;&lt;li&gt;Enums have all the variables declared as public static final.&lt;/li&gt;&lt;li&gt;Enums variables can be compared using &lt;b&gt;==&lt;/b&gt;&amp;nbsp;operator.&lt;/li&gt;&lt;li&gt;End of a enum can be declared by a semi colon, but this is optional.&lt;/li&gt;&lt;li&gt;There are two ways to use Enums&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;ORDINAL (saves the enum values in integer format starting from 0.)&lt;/li&gt;&lt;li&gt;STRING (saves the enum value in String, takes the value of the field itself. )&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h2&gt;Use Enums in Hibernate&lt;/h2&gt;In this example we will be using Enums to save a value in database using hibernate.&lt;br /&gt;Suppose we have a Enum named &lt;b&gt;Level&lt;/b&gt;&amp;nbsp;and we want to save it in database using hibernate persistence.Then we can map this in the following way.&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Level.java&lt;/div&gt;&lt;div class="panel-body"&gt;This is an Enum that defines the level of difficulty of a question.&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.enums;&lt;br /&gt;&lt;br /&gt;public enum Level {&lt;br /&gt;&lt;br /&gt; LEVEL_ONE,&lt;br /&gt; LEVEL_TWO,&lt;br /&gt; LEVEL_THREE,&lt;br /&gt; LEVEL_FOUR,&lt;br /&gt; LEVEL_FIVE;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Qusetion.java&lt;/div&gt;&lt;div class="panel-body"&gt;This class contains the enum as a field that will be saved to the database.&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.EnumType;&lt;br /&gt;import javax.persistence.Enumerated;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;import com.ekiras.enums.Level;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name="question")&lt;br /&gt;public class Question {&lt;br /&gt;  &lt;br /&gt;        @Id&lt;br /&gt;        @Column(name="id")&lt;br /&gt;        @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt;        private Long id;&lt;br /&gt;&lt;br /&gt;        @Column(name="question")&lt;br /&gt;        private String question;&lt;br /&gt;&lt;br /&gt;        @Column(name="level")&lt;br /&gt;        @Enumerated(EnumType.ORDINAL)&lt;br /&gt;        private Level status = Level.LEVEL_ONE;&lt;br /&gt;  &lt;br /&gt;        // GETTERS and SETTERS&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;This will save the Enum in integer format, i.e it will save the int value of the enum. If you want to save the value in String format you need to add the following &lt;b&gt;Enumerated&lt;/b&gt; property to the field.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;        &lt;br /&gt; @Column(name="level")&lt;br /&gt; @Enumerated(EnumType.STRING)&lt;br /&gt; private Level status = Level.LEVEL_ONE;&lt;/pre&gt;&lt;br /&gt;This will save the value of the field in String format, i.e it will save LEVEL_ONE in database while &lt;b&gt;@Enumerated(EnumType.ORDINAL)&lt;/b&gt;&amp;nbsp;will save the values in integer format i.e it will save integer values for LEVEL_ONE &amp;nbsp;= 0 and so on(&lt;b&gt;it has nothing to do with the value of the enum, it always starts from zero and increments and is defined by the order in which they are defined.&lt;/b&gt; ).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/10680979751039536/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-use-enums-in-hibernate-persistence.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/10680979751039536'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/10680979751039536'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-use-enums-in-hibernate-persistence.html' title='How to use Enums in Hibernate Persistence'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1323913356540435293</id><published>2015-02-07T23:53:00.000+05:30</published><updated>2015-02-08T00:10:21.442+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='Sitemesh'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Maven Spring MVC Hibernate Sitemesh Project Setup</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You need to add the following dependencies to pom.xml&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;spring-core&lt;/li&gt;&lt;li&gt;spring-context&lt;/li&gt;&lt;li&gt;spring-web&lt;/li&gt;&lt;li&gt;spring-webmvc&lt;/li&gt;&lt;li&gt;spring-tx&lt;/li&gt;&lt;li&gt;spring-orm&lt;/li&gt;&lt;li&gt;mysql-connector-java&lt;/li&gt;&lt;li&gt;jstl&lt;/li&gt;&lt;li&gt;hibernate&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h2&gt;Create &amp;nbsp;Maven Spring Hibernate Sitemesh Annotation based Hello World project&lt;/h2&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;pom.xml&lt;/div&gt;&lt;div class="panel-body"&gt;pom.xml should contain the following dependencies&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt; xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;&lt;br /&gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt; &amp;lt;groupId&amp;gt;org.springframework.samples.service.service&amp;lt;/groupId&amp;gt;&lt;br /&gt; &amp;lt;artifactId&amp;gt;ekiras&amp;lt;/artifactId&amp;gt;&lt;br /&gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br /&gt; &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;properties&amp;gt;&lt;br /&gt;  &amp;lt;java.version&amp;gt;1.7&amp;lt;/java.version&amp;gt;&lt;br /&gt;  &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;br /&gt;  &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;br /&gt;  &amp;lt;spring.version&amp;gt;3.2.8.RELEASE&amp;lt;/spring.version&amp;gt;&lt;br /&gt;  &amp;lt;junit.version&amp;gt;4.11&amp;lt;/junit.version&amp;gt;&lt;br /&gt;  &amp;lt;sitemesh.version&amp;gt;3.0.0&amp;lt;/sitemesh.version&amp;gt;&lt;br /&gt;  &amp;lt;hibernate.version&amp;gt;4.2.1.Final&amp;lt;/hibernate.version&amp;gt;&lt;br /&gt;  &amp;lt;logback.version&amp;gt;1.0.13&amp;lt;/logback.version&amp;gt;&lt;br /&gt;  &amp;lt;slf4j.version&amp;gt;1.7.5&amp;lt;/slf4j.version&amp;gt;&lt;br /&gt;  &amp;lt;jsp.version&amp;gt;2.2&amp;lt;/jsp.version&amp;gt;&lt;br /&gt;  &amp;lt;jstl.version&amp;gt;1.2&amp;lt;/jstl.version&amp;gt;&lt;br /&gt;  &amp;lt;servlet.version&amp;gt;2.5&amp;lt;/servlet.version&amp;gt;&lt;br /&gt; &amp;lt;/properties&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;dependencies&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- Spring 3 dependencies --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-orm&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- MySQL --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;5.1.31&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- jstl for jsp page --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${jstl.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;servlet-api&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${servlet.version}&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;javax.servlet.jsp&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;jsp-api&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${jsp.version}&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- Sitemesh --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.sitemesh&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;sitemesh&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${sitemesh.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- Spring and Transactions --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- Logging with SLF4J &amp;amp; LogBack --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${logback.version}&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;!-- Hibernate --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;hibernate-entitymanager&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${hibernate.version}&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;  &lt;br /&gt;  &amp;lt;!-- Test Artifacts --&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;${junit.version}&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;spring-boot-starter-data-rest&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;1.0.0.RELEASE&amp;lt;/version&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;/dependencies&amp;gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;web.xml&lt;/div&gt;&lt;div class="panel-body"&gt;web.xml should contain the dispatcher servlet and other config files.&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="ISO-8859-1"?&amp;gt;&lt;br /&gt;&amp;lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt; xmlns="http://java.sun.com/xml/ns/javaee"&lt;br /&gt; xsi:schemaLocation="http://java.sun.com/xml/ns/javaee&lt;br /&gt;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&lt;br /&gt; id="WebApp_ID" version="2.5"&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;display-name&amp;gt;ekiras&amp;lt;/display-name&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- - Location of the XML file that defines the root application context. &lt;br /&gt;  - Applied by ContextLoaderListener. --&amp;gt;&lt;br /&gt; &amp;lt;context-param&amp;gt;&lt;br /&gt;  &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;br /&gt;  &amp;lt;param-value&amp;gt;&lt;br /&gt;   classpath:spring/application-config.xml,&lt;br /&gt;   /WEB-INF/conf/mvc-config.xml &lt;br /&gt;  &amp;lt;/param-value&amp;gt;&lt;br /&gt; &amp;lt;/context-param&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;listener&amp;gt;&lt;br /&gt;  &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;&lt;br /&gt; &amp;lt;/listener&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- ****************** Servlet Dispatcher ********************** --&amp;gt;&lt;br /&gt; &amp;lt;servlet&amp;gt;&lt;br /&gt;  &amp;lt;servlet-name&amp;gt;dispatcherServlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;  &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;&lt;br /&gt;  &amp;lt;init-param&amp;gt;&lt;br /&gt;   &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;&lt;br /&gt;   &amp;lt;param-value&amp;gt;/WEB-INF/conf/mvc-config.xml&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/init-param&amp;gt;&lt;br /&gt;  &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&lt;br /&gt; &amp;lt;/servlet&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet-name&amp;gt;dispatcherServlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;  &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;&lt;br /&gt; &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;  &amp;lt;url-pattern&amp;gt;/resources/css/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt; &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt; &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;  &amp;lt;url-pattern&amp;gt;/resources/js/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt; &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt; &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet-name&amp;gt;default&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;  &amp;lt;url-pattern&amp;gt;/resources/images/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt; &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- ****************** Sitemesh ********************** --&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;filter&amp;gt;&lt;br /&gt;  &amp;lt;filter-name&amp;gt;sitemesh&amp;lt;/filter-name&amp;gt;&lt;br /&gt;  &amp;lt;filter-class&amp;gt;org.sitemesh.config.ConfigurableSiteMeshFilter&amp;lt;/filter-class&amp;gt;&lt;br /&gt;  &amp;lt;!-- Changing default sitemsh xml file name and path --&amp;gt;&lt;br /&gt;  &amp;lt;init-param&amp;gt;&lt;br /&gt;   &amp;lt;param-name&amp;gt;configFile&amp;lt;/param-name&amp;gt;&lt;br /&gt;   &amp;lt;param-value&amp;gt;/WEB-INF/conf/sitemesh.xml&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/init-param&amp;gt;&lt;br /&gt; &amp;lt;/filter&amp;gt;&lt;br /&gt; &amp;lt;filter-mapping&amp;gt;&lt;br /&gt;  &amp;lt;filter-name&amp;gt;sitemesh&amp;lt;/filter-name&amp;gt;&lt;br /&gt;  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt; &amp;lt;/filter-mapping&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- ****************** ERROR PAGES ********************** --&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;400&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/400&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;404&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/404&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;500&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/500&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;503&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/503&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;&amp;lt;/web-app&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;mvc-config.xml&lt;/div&gt;&lt;div class="panel-body"&gt;mcv config should contain the configurations related to web properties and database properties.&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"&lt;br /&gt; xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"&lt;br /&gt; xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"&lt;br /&gt; xsi:schemaLocation="&lt;br /&gt; http://www.springframework.org/schema/mvc&lt;br /&gt; http://www.springframework.org/schema/mvc/spring-mvc.xsd&lt;br /&gt;  http://www.springframework.org/schema/beans&lt;br /&gt;  http://www.springframework.org/schema/beans/spring-beans.xsd&lt;br /&gt;  http://www.springframework.org/schema/context&lt;br /&gt;  http://www.springframework.org/schema/context/spring-context.xsd&lt;br /&gt;  http://www.springframework.org/schema/tx&lt;br /&gt;    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;context:property-placeholder location="/WEB-INF/conf/jdbc.properties" /&amp;gt;&lt;br /&gt; &amp;lt;context:component-scan base-package="com.ekiras" /&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;mvc:annotation-driven /&amp;gt;&lt;br /&gt; &amp;lt;tx:annotation-driven /&amp;gt;&lt;br /&gt; &amp;lt;bean id="transactionManager"&lt;br /&gt;  class="org.springframework.orm.hibernate4.HibernateTransactionManager"&amp;gt;&lt;br /&gt;  &amp;lt;property name="sessionFactory" ref="sessionFactory" /&amp;gt;&lt;br /&gt; &amp;lt;/bean&amp;gt;&lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &lt;br /&gt; &amp;lt;mvc:resources location="/resources/css/" mapping="/css/**" /&amp;gt;&lt;br /&gt; &amp;lt;mvc:resources location="/resources/js/" mapping="/js/**" /&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;bean id="jspViewResolver"&lt;br /&gt;  class="org.springframework.web.servlet.view.InternalResourceViewResolver"&amp;gt;&lt;br /&gt;  &amp;lt;property name="prefix" value="/WEB-INF/views/" /&amp;gt;&lt;br /&gt;  &amp;lt;property name="suffix" value=".jsp" /&amp;gt;&lt;br /&gt; &amp;lt;/bean&amp;gt;&lt;br /&gt; &amp;lt;!-- **************** HIBERNATE PROPERTIES ******************** --&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;bean id="dataSource"&lt;br /&gt;  class="org.springframework.jdbc.datasource.DriverManagerDataSource"&amp;gt;&lt;br /&gt;  &amp;lt;property name="driverClassName" value="${jdbc.driver}" /&amp;gt;&lt;br /&gt;  &amp;lt;property name="url" value="${jdbc.url}" /&amp;gt;&lt;br /&gt;  &amp;lt;property name="username" value="${jdbc.username}" /&amp;gt;&lt;br /&gt;  &amp;lt;property name="password" value="${jdbc.password}" /&amp;gt;&lt;br /&gt; &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;bean id="sessionFactory"&lt;br /&gt;  class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&amp;gt;&lt;br /&gt;  &amp;lt;property name="dataSource" ref="dataSource" /&amp;gt;&lt;br /&gt;  &amp;lt;property name="packagesToScan" value="com.ekiras.domain" /&amp;gt;&lt;br /&gt;  &amp;lt;property name="hibernateProperties"&amp;gt;&lt;br /&gt;   &amp;lt;props&amp;gt;&lt;br /&gt;    &amp;lt;prop key="hibernate.dialect"&amp;gt;org.hibernate.dialect.MySQLDialect&amp;lt;/prop&amp;gt;&lt;br /&gt;    &amp;lt;prop key="hibernate.show_sql"&amp;gt;true&amp;lt;/prop&amp;gt;&lt;br /&gt;    &amp;lt;prop key="hibernate.hbm2ddl.auto"&amp;gt;update&amp;lt;/prop&amp;gt;&lt;br /&gt;   &amp;lt;/props&amp;gt;&lt;br /&gt;  &amp;lt;/property&amp;gt;&lt;br /&gt; &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;!-- **************** END HIBERNATE PROPERTIES **************** --&amp;gt;&lt;br /&gt; &amp;lt;/beans&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;database.properties&lt;/div&gt;&lt;div class="panel-body"&gt;database.properties should contain all the database relates configurations&lt;br /&gt;&lt;pre class="brush:java"&gt;jdbc.driver=com.mysql.jdbc.Driver&lt;br /&gt;jdbc.url=jdbc:mysql://localhost:3306/test_db&lt;br /&gt;jdbc.username=root&lt;br /&gt;jdbc.password=password&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;All the other project structure is available in the downloadable example below. It contains the project structure based on best practices.&lt;br /&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Maven-Spring-Hibernate-Sitemesh" target="_blank"&gt;Maven Spring Hibernate Sitemesh Hellow World project setup.&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1323913356540435293/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/maven-spring-mvc-hibernate-sitemesh-hello-world-project.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1323913356540435293'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1323913356540435293'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/maven-spring-mvc-hibernate-sitemesh-hello-world-project.html' title='Maven Spring MVC Hibernate Sitemesh Project Setup'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5261866535784464705</id><published>2015-02-07T17:09:00.001+05:30</published><updated>2015-02-07T20:25:14.230+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Relational Mappings'/><title type='text'>Hibernate Many to Many relational Mapping</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Suppose we have two domains/ entities&amp;nbsp;&lt;b&gt;User&lt;/b&gt;&amp;nbsp;and&amp;nbsp;&lt;b&gt;Role&lt;/b&gt;&amp;nbsp;and we want to create a many to many relationship between them them, then we can do it like following in hibernate.&lt;br /&gt;&lt;h2&gt;Many to Many relationship between two Entities.&lt;/h2&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;User.java&lt;/div&gt;&lt;div class="panel-body"&gt;Create a User class as following&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import java.util.ArrayList;&lt;br /&gt;import java.util.Collection;&lt;br /&gt;&lt;br /&gt;import javax.persistence.CascadeType;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.ManyToMany;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name = "user")&lt;br /&gt;public class User {&lt;br /&gt;&lt;br /&gt; @Id&lt;br /&gt; @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt; @Column(name="id")&lt;br /&gt; private Long id;&lt;br /&gt; &lt;br /&gt; @Column(name="email")&lt;br /&gt; private String email;&lt;br /&gt;&lt;br /&gt; @Column(name="password")&lt;br /&gt; private String password;&lt;br /&gt; &lt;br /&gt; @Column(name="enabled")&lt;br /&gt; private boolean enabled;&lt;br /&gt;&lt;br /&gt; @ManyToMany(cascade=CascadeType.ALL)&lt;br /&gt; private Collection&amp;lt;Role&amp;gt; roles = new ArrayList&amp;lt;Role&amp;gt;();&lt;br /&gt; &lt;br /&gt; // GETTERS and SETTERS&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Role.java&lt;/div&gt;&lt;div class="panel-body"&gt;Create the Role class as follows&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import java.util.ArrayList;&lt;br /&gt;import java.util.Collection;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.ManyToMany;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name="role")&lt;br /&gt;public class Role {&lt;br /&gt;&lt;br /&gt; public Role(){}&lt;br /&gt; public Role(String authority){&lt;br /&gt;  this.authority=authority;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @Id&lt;br /&gt; @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt; @Column(name="id")&lt;br /&gt; private Long id;&lt;br /&gt; &lt;br /&gt; @Column(name="authority")&lt;br /&gt; private String authority;&lt;br /&gt;&lt;br /&gt; @ManyToMany(mappedBy="roles")&lt;br /&gt; private Collection&amp;lt;User&amp;gt; users = new ArrayList&amp;lt;User&amp;gt;();&lt;br /&gt;&lt;br /&gt; // GETTERS and SETTERS&lt;br /&gt;    &lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;What we have done here is&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We have created the User class and taken a Collection of Roles in User class, as a User can have multiple roles. This class will do the mapping for the User and Role relationship.&lt;/li&gt;&lt;li&gt;We have then created a class Role and taken a Collection of User, since a Role can be assigned to multiple users.&lt;/li&gt;&lt;li&gt;We have used property &lt;b&gt;mappedBy="roles"&lt;/b&gt;&amp;nbsp;in Role class, since our mapping has already been done by the users field of the User class.&lt;/li&gt;&lt;li&gt;If we do not specify &lt;b&gt;mappedBy&lt;/b&gt;&amp;nbsp;property in either of the class, then there will be two tables, one by User class and one by Role class.&lt;/li&gt;&lt;li&gt;In our case the extra table that will be created will be &lt;b&gt;user_role&lt;/b&gt;&amp;nbsp;if want to create the table other way round, then we have to set property &lt;b&gt;mappedBy="users"&lt;/b&gt;&amp;nbsp;in User class and remover &lt;b&gt;mappedBy&lt;/b&gt;&amp;nbsp;property from Role class.&lt;/li&gt;&lt;li&gt;The property&amp;nbsp;&lt;b&gt;cascade=CascadeType.ALL&lt;/b&gt;&amp;nbsp;is used to save nested objects, this way you do not need to save the nested objects separately. If you did not set this property then you will have to first save Role objects and then save User object or else it would give the following expection.&lt;pre&gt;org.hibernate.TransientPropertyValueException: object references an unsaved transient &lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;TestController.java&lt;/div&gt;&lt;div class="panel-body"&gt;Create the TestController class as follows&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.controller;&lt;br /&gt;&lt;br /&gt;import java.util.ArrayList;&lt;br /&gt;import java.util.Collection;&lt;br /&gt;&lt;br /&gt;import org.hibernate.Session;&lt;br /&gt;import org.hibernate.SessionFactory;&lt;br /&gt;import org.springframework.beans.factory.annotation.Autowired;&lt;br /&gt;import org.springframework.stereotype.Controller;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br /&gt;&lt;br /&gt;import com.ekiras.domain.Role;&lt;br /&gt;import com.ekiras.domain.User;&lt;br /&gt;&lt;br /&gt;@Controller&lt;br /&gt;@RequestMapping(value={"","/**"})&lt;br /&gt;public class TestController {&lt;br /&gt;&lt;br /&gt; @Autowired&lt;br /&gt; protected SessionFactory sessionFactory;&lt;br /&gt; &lt;br /&gt; @RequestMapping(value="/test")&lt;br /&gt; public String test(){&lt;br /&gt;&lt;br /&gt;     Role role1 = new Role("ROLE_ADMIN");&lt;br /&gt;     Role role2 = new Role("ROLE_USER");&lt;br /&gt;     &lt;br /&gt;     Collection&amp;lt;Role&amp;gt; roles = new ArrayList&amp;lt;Role&amp;gt;();&lt;br /&gt;     roles.add(role1);&lt;br /&gt;     roles.add(role2);&lt;br /&gt;     &lt;br /&gt;     User user = new User();&lt;br /&gt;     user.setEmail("ekansh@ekiras.com");&lt;br /&gt;     user.setPassword("password");&lt;br /&gt;     user.setEnabled(true);&lt;br /&gt;     user.setRoles(roles);&lt;br /&gt;  &lt;br /&gt;     &lt;br /&gt;     Session session = sessionFactory.openSession();&lt;br /&gt;     session.beginTransaction();&lt;br /&gt;     boolean result = (Long)session.save(user)!=0;&lt;br /&gt;     &lt;br /&gt;     session.getTransaction().commit();&lt;br /&gt;     session.close();&lt;br /&gt;     &lt;br /&gt;     System.out.println("User object saved = " + result);&lt;br /&gt;     &lt;br /&gt;     &lt;br /&gt;  return "/home";&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;This will save the user with two roles, the following image shows the data created by the test controller.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-OTNhuWuCW-I/VNX3KYkbjbI/AAAAAAAAAN0/5R_6k8gW9K0/s1600/many-to-many-mapping.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" src="http://1.bp.blogspot.com/-OTNhuWuCW-I/VNX3KYkbjbI/AAAAAAAAAN0/5R_6k8gW9K0/s1600/many-to-many-mapping.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/Hibernate-Many-to-many-Relationship-in-Spring-MVC/tree/master" target="_blank"&gt;Hibernate Many to Many relationship Example in Spring MVC project.&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5261866535784464705/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/hibernate-many-to-many-relational-mapping-by-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5261866535784464705'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5261866535784464705'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/hibernate-many-to-many-relational-mapping-by-annotation.html' title='Hibernate Many to Many relational Mapping'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-OTNhuWuCW-I/VNX3KYkbjbI/AAAAAAAAAN0/5R_6k8gW9K0/s72-c/many-to-many-mapping.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-642321498027368488</id><published>2015-02-07T03:22:00.000+05:30</published><updated>2015-02-07T03:22:10.764+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><title type='text'>How to restore the database from a dump</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can take restore a mysql dump file like &lt;b&gt;.sql&amp;nbsp;&lt;/b&gt;files and even from a comma separated &lt;b&gt;.csv&lt;/b&gt; file.&lt;br /&gt;&lt;h2&gt;Restore files from dump&lt;/h2&gt;First login to sql using command&amp;nbsp; &lt;br /&gt;&lt;pre class="brush:sql"&gt;mysql -u username -p&lt;/pre&gt;Enter the password and change the database. Now run the following command.&lt;br /&gt;&lt;pre class="brush:sql"&gt;source &lt;/pre&gt;1a &lt;br /&gt;&lt;pre class="brush:sql"&gt;sql&lt;/pre&gt;1a &lt;br /&gt;&lt;pre class="brush:sql"&gt;sql&lt;/pre&gt;1a/div&amp;gt;&lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-restore-database-from-dump.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/642321498027368488'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/642321498027368488'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7230997276239527459</id><published>2015-02-07T02:25:00.003+05:30</published><updated>2015-02-07T10:59:18.298+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><title type='text'>How to create a database dump in Mysql</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;You can take dump of Mysql using &lt;b&gt;mysqldump&lt;/b&gt;&amp;nbsp;in windows, linux or ubuntu operating systems.&lt;/li&gt;&lt;li&gt;You should reach to the location of mysql/bin in a windows platform to use mysqldump, you can use from any location in ubuntu and linux.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h2&gt;Taking dump of whole database&lt;/h2&gt;When you want to take the dump of the whole file, you can simply do it with the following command&lt;br /&gt;&lt;pre class="brush:sql"&gt;mysqldump -u db_username -p database_name &amp;gt; path/dump.sql&lt;/pre&gt;Here the &lt;b&gt;database_name&amp;nbsp;&lt;/b&gt;is your database name and path is absolute path where you want to create dump.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Taking dump of a table&lt;/h2&gt;When you want to take the dump of a single table you can do this by the following command.&lt;br /&gt;&lt;pre class="brush:sql"&gt;mysqldump -u db_username -p database_name tablename &amp;gt; path/dump.sql&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;Taking dump of a remote database&lt;/h2&gt;When you want to take a dump of a remote user you can do this by the following command.&lt;br /&gt;&lt;pre class="brush:sql"&gt;mysqldump -u &amp;lt;db_username&amp;gt; -h &amp;lt;db_host&amp;gt; -p database_name &amp;gt; path/dump.sql&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;Taking dump of a remote database table&lt;/h2&gt;When you want to take the dump of a single table from a remote database you can use the following command&lt;br /&gt;&lt;pre class="brush:sql"&gt;mysqldump -u &amp;lt;db_username&amp;gt; -h &amp;lt;db_host&amp;gt; -p database_name table_name &amp;gt; path/dump.s&lt;/pre&gt; &lt;a href="http://a/" target="_blank"&gt;How to restore the database from a dump file.&lt;/a&gt; &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7230997276239527459/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-database-dump-in-mysql.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7230997276239527459'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7230997276239527459'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-database-dump-in-mysql.html' title='How to create a database dump in Mysql'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8502289305826818783</id><published>2015-02-05T22:43:00.000+05:30</published><updated>2015-02-05T23:05:46.956+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><category scheme='http://www.blogger.com/atom/ns#' term='Relational Mappings'/><title type='text'>Many To Many Mapping in Hibernate Annotation</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;br /&gt;There are two ways to create hibernate many to many relational mappings in Hibernate. We will discuss both of them in detail here.&lt;br /&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;First one is to use default hibernate mapping to create and manage these relations.&lt;/li&gt;&lt;li&gt;By creating a new domain that will manage these relations for us.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Suppose we want to have a simple User and Role mapping where a user can have multiple roles and a role can be assigned to multiple users. Then we can create and manage these relations in the following ways.&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;Strategy 1 : Default Hibernate Mappings&lt;/h2&gt;You can use this strategy as applied like &lt;a href="http://ekiras.blogspot.in/2015/02/hibernate-many-to-many-relational-mapping-by-annotation.html" target="_blank"&gt;shown in this article&lt;/a&gt;. This will make the hibernate to deal with all the mappings and operations like save , update, fetch etc.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;i class="glyphicon glyphicon-ok"&gt;&lt;/i&gt;&lt;b&gt;Advantage &lt;/b&gt; : This will make hibernate responsible for the mapping and operations like save, fetch, update etc.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i class="glyphicon glyphicon-remove"&gt;&lt;/i&gt;&lt;b&gt;Disadvantage &lt;/b&gt; : You will not have control over the mapped relation. You will not be able to query the table it will create for mapping.&lt;/div&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Strategy 2 : Using Domain to Handle Mappings&lt;/h2&gt;This strategy can be applied like &lt;a href="http://ekiras.blogspot.in/2015/02/how-to-create-composite-key-in-hibernate-using-annotation.html" target="_blank"&gt;shown in this article&lt;/a&gt;&amp;nbsp;. So this will actually help us take control of the mappings and will give more control on how we manage and use this.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;i class="glyphicon glyphicon-ok"&gt;&lt;/i&gt;&lt;b&gt;Advantage &lt;/b&gt; : This approach can be used when you want to take control of the mapping from hibernate to your own hands or when you want to use the mappings with some additional data related to the mappings.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i class="glyphicon glyphicon-remove"&gt;&lt;/i&gt;&lt;b&gt;Disadvantage &lt;/b&gt; : In this approach you will have to make sure that you save the mappings on your own. Hibernate will not fetch or save these mappings on its own.&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8502289305826818783/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/many-to-many-mapping-in-hibernate-using-annotations.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8502289305826818783'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8502289305826818783'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/many-to-many-mapping-in-hibernate-using-annotations.html' title='Many To Many Mapping in Hibernate Annotation'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5848311801563875388</id><published>2015-02-05T04:15:00.001+05:30</published><updated>2015-07-22T09:48:31.329+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Exceptions'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Exception Handling'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring MVC'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Custom 404 Error Page in Spring MVC</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;You need to first add the errors in the &lt;b&gt;web.xml&lt;/b&gt;&amp;nbsp;and redirect them to a url.&lt;/li&gt;&lt;li&gt;Then you need to map these &lt;b&gt;url&lt;/b&gt; to controller to handle them and take necessary actions.&amp;nbsp;&lt;/li&gt;&lt;li&gt;You can either &lt;a href="http://www.ekiras.com/2015/07/spring-mvc-handle-exceptions-in-controllers.html"&gt;handle exceptions in your controllers&lt;/a&gt; as explained in the link.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Custom Error Pages&lt;/h2&gt;Here in this example we are going to create custom error pages in our spring mvc application. So will first of all configure the error codes in web.xml like the following.&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;web.xml&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:xml"&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;400&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/400&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;404&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/404&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;500&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/500.jsp&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;Now when we have configured the error codes and mapped then with the respective url's, we will now create a Controller that will map these error code url's like the following.&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;HTTPErrorHandler.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.util;&lt;br /&gt;&lt;br /&gt;import org.springframework.stereotype.Controller;&lt;br /&gt;import org.springframework.web.bind.annotation.RequestMapping;&lt;br /&gt;&lt;br /&gt;@Controller&lt;br /&gt;public class HTTPErrorHandler{&lt;br /&gt;&lt;br /&gt; String path = "/error";&lt;br /&gt; &lt;br /&gt; @RequestMapping(value="/400")&lt;br /&gt; public String error400(){&lt;br /&gt;  System.out.println("custom error handler");&lt;br /&gt;  return path+"/400";&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @RequestMapping(value="/404")&lt;br /&gt; public String error404(){&lt;br /&gt;  System.out.println("custom error handler");&lt;br /&gt;  return path+"/404";&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; @RequestMapping(value="/500")&lt;br /&gt; public String error500(){&lt;br /&gt;  System.out.println("custom error handler");&lt;br /&gt;  return path+"/500";&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;So now our Controller will handle the error code url's and will redirect them to the custom error page url's.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5848311801563875388/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/custom-error-404-error-page-in-spring-mvc.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5848311801563875388'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5848311801563875388'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/custom-error-404-error-page-in-spring-mvc.html' title='Custom 404 Error Page in Spring MVC'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8060898973504266922</id><published>2015-02-05T03:36:00.000+05:30</published><updated>2015-02-05T03:38:44.618+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>How to create Custom 404 page in Web Application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can define your custom error pages in &lt;b&gt;web.xml.&lt;/b&gt;&amp;nbsp;This is the best way to define custom 404 and other error pages.&lt;br /&gt;&lt;h2&gt;Configure Custom error pages&lt;/h2&gt;Many times we want to create custom error pages in our web applications like for a 404 error, resource not found, 500 internal server error and other errors that we see commonly. So we may want to redirect such errors to a better looking custom error page.&lt;br /&gt;&lt;br /&gt;If you want to redirect to custom error pages in a web application you can add these custom error pages in web.xml like following.&lt;br /&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;web.xml&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:xml"&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;400&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/error/400.html&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;404&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/error/404.html&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;500&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/error/500.html&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;error-page&amp;gt;&lt;br /&gt;  &amp;lt;error-code&amp;gt;503&amp;lt;/error-code&amp;gt;&lt;br /&gt;  &amp;lt;location&amp;gt;/error/503.html&amp;lt;/location&amp;gt;&lt;br /&gt; &amp;lt;/error-page&amp;gt;&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;You can define your error page location in the &amp;lt;location&amp;gt; tag.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8060898973504266922/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-custom-404-error-page-in-web-xml.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8060898973504266922'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8060898973504266922'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-custom-404-error-page-in-web-xml.html' title='How to create Custom 404 page in Web Application'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6151254099840439145</id><published>2015-02-05T01:26:00.000+05:30</published><updated>2015-02-05T01:29:24.602+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>How to create a Composite Key in Hibernate</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to create an Embedded Object to create a composite key in Hibernate.&lt;/li&gt;&lt;li&gt;You can create use an Embeddable Object as an EmbeddedId in class to make it a composite key.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Create a Composite Key in Hibernate&lt;/h2&gt;Suppose we have three classes &lt;b&gt;User, Role and UserRole&lt;/b&gt;. In class UserRole we want to have a composite id that will include &lt;b&gt;userId&lt;/b&gt; and &lt;b&gt;roleId&lt;/b&gt;. Then we will first create an embedded object and then using this we will create a composite key.&lt;br /&gt;&lt;br /&gt;Let us first create an Embeddable object and&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;User.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name = "user")&lt;br /&gt;public class User {&lt;br /&gt;&lt;br /&gt; @Id&lt;br /&gt; @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt; @Column(name="id")&lt;br /&gt; private Long id;&lt;br /&gt; &lt;br /&gt; @Column(name="email")&lt;br /&gt; private String email;&lt;br /&gt;&lt;br /&gt; @Column(name="password")&lt;br /&gt; private String password;&lt;br /&gt;&lt;br /&gt;        // GETTERS and SETTERS&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;Role.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.GeneratedValue;&lt;br /&gt;import javax.persistence.GenerationType;&lt;br /&gt;import javax.persistence.Id;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name="role")&lt;br /&gt;public class Role {&lt;br /&gt;&lt;br /&gt; @Id&lt;br /&gt; @GeneratedValue(strategy=GenerationType.AUTO)&lt;br /&gt; @Column(name="id")&lt;br /&gt; private Long id;&lt;br /&gt; &lt;br /&gt; @Column(name="authority")&lt;br /&gt; private String authority;&lt;br /&gt;&lt;br /&gt; // GETTERS and SETTERS&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;UserRoleEmbed.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.embeddeble;&lt;br /&gt;&lt;br /&gt;import java.io.Serializable;&lt;br /&gt;&lt;br /&gt;import javax.persistence.Column;&lt;br /&gt;import javax.persistence.Embeddable;&lt;br /&gt;&lt;br /&gt;@Embeddable&lt;br /&gt;public class UserRoleEmbed implements Serializable {&lt;br /&gt;&lt;br /&gt; private static final long serialVersionUID = 1L;&lt;br /&gt;&lt;br /&gt; @Column(name="user_id")&lt;br /&gt; private Long userId;&lt;br /&gt; &lt;br /&gt; @Column(name="role_id")&lt;br /&gt; private Long roleId;&lt;br /&gt;&lt;br /&gt; // GETTERS and SETTERS&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="panel panel-default"&gt;&lt;div class="panel-heading"&gt;UserRole.java&lt;/div&gt;&lt;div class="panel-body"&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain;&lt;br /&gt;&lt;br /&gt;import javax.persistence.EmbeddedId;&lt;br /&gt;import javax.persistence.Entity;&lt;br /&gt;import javax.persistence.Table;&lt;br /&gt;&lt;br /&gt;import com.ekiras.ekjam.embeddeble.UserRoleEmbed;&lt;br /&gt;&lt;br /&gt;@Entity&lt;br /&gt;@Table(name="user_role")&lt;br /&gt;public class UserRole {&lt;br /&gt;&lt;br /&gt; @EmbeddedId&lt;br /&gt; private UserRoleEmbed userRole;&lt;br /&gt;&lt;br /&gt; // GETTERS and SETTERS&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;So this will create the Composite key for class UserRole that we wanted and it will map &lt;b&gt;key={userId, roleId}&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-QfOpd2G868w/VNJ47o566_I/AAAAAAAAAMs/SArB5cGwH2Y/s1600/compositeKey.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" class="img-responsive" src="http://4.bp.blogspot.com/-QfOpd2G868w/VNJ47o566_I/AAAAAAAAAMs/SArB5cGwH2Y/s1600/compositeKey.png" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;The above image shows the database schema that the above code snippets created.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6151254099840439145/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-composite-key-in-hibernate-using-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6151254099840439145'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6151254099840439145'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/02/how-to-create-composite-key-in-hibernate-using-annotation.html' title='How to create a Composite Key in Hibernate'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-QfOpd2G868w/VNJ47o566_I/AAAAAAAAAMs/SArB5cGwH2Y/s72-c/compositeKey.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3884932265642501541</id><published>2015-01-30T19:48:00.000+05:30</published><updated>2015-01-30T19:57:12.498+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to convert the Base of a Decimal Number in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You can convert the number from decimal to any base by dividing the number by the base till the number is either 0 or less than the base it self and counting the remainders in a reverse order.&lt;br /&gt;&lt;h2&gt;Program : Convert the base of a Decimal Number&lt;/h2&gt;&lt;pre class="brush:java"&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class ConvertBase{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  &lt;br /&gt;   Scanner sc = new Scanner(System.in);&lt;br /&gt;&lt;br /&gt;   System.out.println("Enter the Original NUmber");&lt;br /&gt;   int originalNumber = sc.nextInt();&lt;br /&gt;&lt;br /&gt;   System.out.println("Enter the base for conversion");&lt;br /&gt;   int base = sc.nextInt();&lt;br /&gt;&lt;br /&gt;   String convertedNumber = new ConvertBase().convert(originalNumber,base);   &lt;br /&gt;&lt;br /&gt;   System.out.println("Original Number  = "+originalNumber);&lt;br /&gt;   System.out.println("Converted NUmber = "+convertedNumber);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; public String convert(int original, int base){&lt;br /&gt;   String number = "";&lt;br /&gt;   String converted ="";&lt;br /&gt;&lt;br /&gt;   while(original != 0){&lt;br /&gt;     int digit = original % base;&lt;br /&gt;     original /= base;&lt;br /&gt;     number += digit; &lt;br /&gt;   }&lt;br /&gt;   for(int itr=number.length()-1;itr&amp;gt;=0; itr--)&lt;br /&gt;    converted += number.charAt(itr);&lt;br /&gt;   return converted;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;The above program will give the following output &lt;br /&gt;&lt;div class="output"&gt;Enter the Original NUmber&lt;br /&gt;45&lt;br /&gt;Enter the base for conversion&lt;br /&gt;5&lt;br /&gt;Original Number &amp;nbsp;= 45&lt;br /&gt;Converted NUmber = 140&lt;br /&gt;&lt;/div&gt; You can convert a decimal number to any base with this code. &lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3884932265642501541/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-convert-decimal-number-to-any-base-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3884932265642501541'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3884932265642501541'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-convert-decimal-number-to-any-base-in-java.html' title='How to convert the Base of a Decimal Number in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8012896705989884039</id><published>2015-01-27T15:37:00.000+05:30</published><updated>2015-01-27T15:37:33.584+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Spring Security : Custom Authentication Entry Point</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You may need to define a custom authentication entry point when&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;You may want to do some pre-authentication work like count number of attempts.&lt;/li&gt;&lt;li&gt;You may want to authenticate from an external source e.g third party authentication.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;or for any other reason. In such cases you will need to define your own Authentication Entry point.&lt;/div&gt;&lt;br /&gt;&lt;h2&gt;Create custom Authentication Entry Point&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/spring-security-custom-authentication-entry-point-and-pre-authentication.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8012896705989884039'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8012896705989884039'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5499893064860817550</id><published>2015-01-27T15:13:00.000+05:30</published><updated>2015-01-27T15:27:53.911+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Spring Security : Custom UserDetailsService and Custom UserDetails </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You need to change the UserDetailsService, User Object of the spring security to achieve this.&lt;br /&gt;&lt;h2&gt;Add Custom User Details to Spring Security Authentication Object&lt;/h2&gt;First of all we nee to create a new User Object that will override the User class of the spring security in package&amp;nbsp;&lt;b&gt;org.springframework.security.core.userdetails.User&lt;/b&gt;&amp;nbsp;After this, you need to tell &amp;nbsp;UserDetailsService to use this object as the principal for the authentication token. For this you will have to override the UserDetailsService of the spring security.&lt;br /&gt;&lt;br /&gt;You can have the custom User object like. &lt;br /&gt;&lt;b&gt;Custom User Class -&amp;gt; MyUser.groovy&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras&lt;br /&gt;&lt;br /&gt;import org.springframework.security.core.GrantedAuthority&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 24/1/15.&lt;br /&gt; */&lt;br /&gt;class MyUser extends org.springframework.security.core.userdetails.User {&lt;br /&gt;&lt;br /&gt;    // Declare all custom attributes here&lt;br /&gt;    private final Object id;&lt;br /&gt;    private String name;&lt;br /&gt;&lt;br /&gt;    public MyUser(String username, String password, boolean enabled, boolean accountNonExpired,&lt;br /&gt;                      boolean credentialsNonExpired, boolean accountNonLocked,&lt;br /&gt;                      Collection&amp;lt;GrantedAuthority&amp;gt; authorities, Object id, String name) {&lt;br /&gt;        super(username, password, enabled, accountNonExpired, credentialsNonExpired,&lt;br /&gt;                accountNonLocked, authorities);&lt;br /&gt;&lt;br /&gt;        // Initialize all the custom attributes here like the following.&lt;br /&gt;        this.id = id;&lt;br /&gt;        this.name = name;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    /**&lt;br /&gt;     * Get the id.&lt;br /&gt;     * @return the id&lt;br /&gt;     */&lt;br /&gt;    public Object getId() {&lt;br /&gt;        return id;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;So now our User object will also contain a field &lt;b&gt;name&lt;/b&gt;&amp;nbsp;that is the concatenation of first name and last name.&lt;br /&gt;&lt;b&gt;Custom UserDertailService -&amp;gt; MyUserDetailsService.groovy&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras&lt;br /&gt;&lt;br /&gt;import grails.plugin.springsecurity.SpringSecurityUtils&lt;br /&gt;import grails.plugin.springsecurity.userdetails.NoStackUsernameNotFoundException&lt;br /&gt;import org.springframework.security.core.GrantedAuthority&lt;br /&gt;import org.springframework.security.core.authority.SimpleGrantedAuthority&lt;br /&gt;import org.springframework.security.core.userdetails.UserDetails&lt;br /&gt;import org.springframework.security.core.userdetails.UserDetailsService&lt;br /&gt;import org.springframework.security.core.userdetails.UsernameNotFoundException&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 23/1/15.&lt;br /&gt; */&lt;br /&gt;class MyUserDetailsService implements UserDetailsService {&lt;br /&gt;&lt;br /&gt;    static final GrantedAuthority NO_ROLE = new SimpleGrantedAuthority(SpringSecurityUtils.NO_ROLE)&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {&lt;br /&gt;&lt;br /&gt;        User user = User.findByUsername(username)&lt;br /&gt;        if(!user)&lt;br /&gt;            throw new NoStackUsernameNotFoundException();&lt;br /&gt;        &lt;br /&gt;        Collection&amp;lt;GrantedAuthority&amp;gt; authorities;&lt;br /&gt;        &lt;br /&gt;        user.authorities.each {authority-&amp;gt;&lt;br /&gt;            authorities.collect(new SimpleGrantedAuthority(authority))&lt;br /&gt;        }&lt;br /&gt;        &lt;br /&gt;        authorities = authorities ?: [NO_ROLE]&lt;br /&gt;&lt;br /&gt;        // Return the Custom User object &lt;br /&gt;        return new MyUser(username, user.password, user.enabled, !user.accountExpired, !user.passwordExpired,!user.accountLocked, authorities, user.id, user.firstName+ user.lastName);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;So now we have a custom UserDetailsService that will load our MyUser &amp;nbsp;object in spring security authentication principal, instead of conventional GromUser object. You need to do one last thing to make things work. You need to override the UserDetailsService and tell spring security to use your custom UserDetailsService and you can do it like the following. &lt;br /&gt;Add this in &lt;b&gt;resources.groovy&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;userDetailsService(MyUserDetailsService)&lt;/pre&gt;&lt;br /&gt;Thats it, now you have can add any number of custom attributes of the User object to spring security authentication.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5499893064860817550/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/spring-security-adding-additional-details-to-principal-user-object.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5499893064860817550'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5499893064860817550'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/spring-security-adding-additional-details-to-principal-user-object.html' title='Spring Security : Custom UserDetailsService and Custom UserDetails '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4342518922241962101</id><published>2015-01-26T21:17:00.000+05:30</published><updated>2015-01-26T21:18:55.672+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Allegations'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='CAT'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Allegations and Mixtures</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;How To Solve Allegations&lt;/b&gt;&lt;/p&gt;   &lt;img src="/images/quants/allegations/theory.png" align="right"&gt;   Suppose the average weight of a group of objects O&lt;sub&gt;1&lt;/sub&gt; is A&lt;sub&gt;1&lt;/sub&gt; and average weight of group of objects O&lt;sub&gt;2&lt;/sub&gt; is    A&lt;sub&gt;2&lt;/sub&gt; and A&lt;sub&gt;1&lt;/sub&gt; &lt; A&lt;sub&gt;2&lt;/sub&gt;, then we can write the data in the manner as shown in the figure. (A&lt;sub&gt;w&lt;/sub&gt;−A&lt;sub&gt;2&lt;/sub&gt;)    : (A&lt;sub&gt;w&lt;/sub&gt;−A&lt;sub&gt;1&lt;/sub&gt;) gives the ratio of O&lt;sub&gt;1&lt;/sub&gt; : O&lt;sub&gt;2&lt;/sub&gt;.        &lt;p&gt;&lt;b&gt;Allegations does not give the actual volume to be mixed but only the ratio in which volumes are to be mixed.&lt;/b&gt;&lt;/p&gt;   &lt;div class="clearer"&gt;&lt;/div&gt;       &lt;/div&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; A shopkeeper sells two types of rice A and B. If he sold 30% of type A rice at a profit of 50% and sold 90% of the    rice of type B at a profit of 10%. What is the averge profit percent of the shopkeeper, if he sells only these two types of rice.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;35%&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;45%&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;40%&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;55%&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;img src="http://images.ekjam.com/cat.ekjam/quants/allegations/ex-6.png" align="right"&gt;   Since the profit on rice of type B = 10% ∴ A&lt;sub&gt;1&lt;/sub&gt; = 10   &lt;br&gt;&lt;br&gt;Since the profit on rice of type A = 50% ∴ A&lt;sub&gt;2&lt;/sub&gt; = 50   &lt;br&gt;&lt;br&gt;Let the average profit be Rs x ∴ A&lt;sub&gt;w&lt;/sub&gt; = x   &lt;br&gt;&lt;br&gt;&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{50-x}{x-10}=\frac{3}{1}\Rightarrow50-x=3x-30$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="7" class="binary-operator"&gt;−&lt;/span&gt;&lt;var mathquill-command-id="9"&gt;x&lt;/var&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;var mathquill-command-id="11"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="13" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="20"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="22"&gt;&lt;span class="numerator" mathquill-block-id="24"&gt;&lt;span mathquill-command-id="23"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="26"&gt;&lt;span mathquill-command-id="25"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span mathquill-command-id="28"&gt;⇒&lt;/span&gt;&lt;span mathquill-command-id="30"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="32"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="34" class="binary-operator"&gt;−&lt;/span&gt;&lt;var mathquill-command-id="36"&gt;x&lt;/var&gt;&lt;span class="binary-operator" mathquill-command-id="38"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="40"&gt;3&lt;/span&gt;&lt;var mathquill-command-id="42"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="44" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="46"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="48"&gt;0&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;&lt;br&gt;⇒ x = 20   &lt;br&gt;&lt;br&gt;∴ Average profit of the shopkeeper is 40%                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; How much water should be mixed with 6L pure milk to make the concentration of milk 60%.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;4L&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;2L&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;3L&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;5L&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;img src="http://images.ekjam.com/cat.ekjam/quants/allegations/ex-1.png" align="right"&gt;   Since the concentration of milk in water = 0 ∴ A&lt;sub&gt;1&lt;/sub&gt; = 0   &lt;br&gt;&lt;br&gt;Since the concentration of pure milk = 100 ∴ A&lt;sub&gt;2&lt;/sub&gt; = 100   &lt;br&gt;&lt;br&gt;Since the concentration of  milk in milk-water solution = 60 ∴ A&lt;sub&gt;w&lt;/sub&gt; = 60   &lt;br&gt;&lt;br&gt;∴ Ratio in which water and milk should be added = 2:3   &lt;br&gt;&lt;br&gt;∴ Volume of water to be mixed = 4L                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; A dealer buys 11 kg of wheat at Rs 275 and mixes it with another quantity of wheat in the ratio of 4:5. The price     of the resulting mixture is Rs 30 per kg. Finf the price of this other quantity of wheat.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;Rs 37 per kg&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;Rs 31 per kg&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;Rs 24 per kg&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;Rs 34 per kg&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;img src="http://images.ekjam.com/cat.ekjam/quants/allegations/ex-7.png" align="right"&gt;   Price per kg of wheat = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{275}{11}=25$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="10"&gt;&lt;span mathquill-command-id="9"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="14"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="16"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="18"&gt;5&lt;/span&gt;&lt;/span&gt; Rs   &lt;br&gt;&lt;br&gt;Since the of wheat = Rs 25 ∴ A&lt;sub&gt;1&lt;/sub&gt; = 25   &lt;br&gt;&lt;br&gt;Let the price of rice of other type be Rs x ∴ A&lt;sub&gt;2&lt;/sub&gt; = x   &lt;br&gt;&lt;br&gt;The average price of wheat = Rs 30 ∴ A&lt;sub&gt;w&lt;/sub&gt; = 30   &lt;br&gt;&lt;br&gt;∴&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{5}{x-30}=\frac{5}{4}\Rightarrow20=5x-150$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;var mathquill-command-id="5"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="7" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="14"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="16"&gt;&lt;span class="numerator" mathquill-block-id="18"&gt;&lt;span mathquill-command-id="17"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="20"&gt;&lt;span mathquill-command-id="19"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span mathquill-command-id="22"&gt;⇒&lt;/span&gt;&lt;span mathquill-command-id="24"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="26"&gt;0&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="28"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="30"&gt;5&lt;/span&gt;&lt;var mathquill-command-id="32"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="34" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="36"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="38"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="40"&gt;0&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;&lt;br&gt;⇒ x = 34   &lt;br&gt;&lt;br&gt;∴ Price of wheat of other type = Rs 34 per kg                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; If the average weight of a class of 60 students is 50 and the average weight of a class of 40 students is 45    , then what will be the average weight of both the classes combined.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;24&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;26&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;45&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;48&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;img src="http://images.ekjam.com/cat.ekjam/quants/allegations/ex-3.png" align="right"&gt;   Since the average weight of class of 40 students = 45 ∴ A&lt;sub&gt;1&lt;/sub&gt; = 45   &lt;br&gt;&lt;br&gt;Since the average weight of class of 60 students = 50 ∴ A&lt;sub&gt;2&lt;/sub&gt; = 50   &lt;br&gt;&lt;br&gt;Let the average weight of both the classes combined be x kg.   &lt;br&gt;&lt;br&gt; O&lt;sub&gt;1&lt;/sub&gt;:O&lt;sub&gt;2&lt;/sub&gt; = 40:60 = 2:3   &lt;br&gt;&lt;br&gt;&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{50-x}{x-45}=\frac{2}{3}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="7" class="binary-operator"&gt;−&lt;/span&gt;&lt;var mathquill-command-id="9"&gt;x&lt;/var&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;var mathquill-command-id="11"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="13" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="20"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="22"&gt;&lt;span class="numerator" mathquill-block-id="24"&gt;&lt;span mathquill-command-id="23"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="26"&gt;&lt;span mathquill-command-id="25"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;&lt;br&gt;&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$150-3x=2x-90$&lt;/span&gt;&lt;span mathquill-command-id="2"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="4"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="6"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="8" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="10"&gt;3&lt;/span&gt;&lt;var mathquill-command-id="12"&gt;x&lt;/var&gt;&lt;span class="binary-operator" mathquill-command-id="14"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="16"&gt;2&lt;/span&gt;&lt;var mathquill-command-id="18"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="20" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="22"&gt;9&lt;/span&gt;&lt;span mathquill-command-id="24"&gt;0&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;&lt;br&gt;&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$x=48$&lt;/span&gt;&lt;var mathquill-command-id="2"&gt;x&lt;/var&gt;&lt;span class="binary-operator" mathquill-command-id="4"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="6"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="8"&gt;8&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;&lt;br&gt;∴ Average weight of both the classes combined = 48 kg                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; A person travels at a speed of 25 km/hr for 30min and then travels at 40km/hr for next 20 min to reach his destination.    Find his average speed in the whole journey.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;21 km/hr&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;31 km/hr&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;33 km/hr&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;None of these&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;img src="http://images.ekjam.com/cat.ekjam/quants/allegations/ex-5.png" align="right"&gt;   Since the person travels for 30 min at speed of 25 km/hr ∴ A&lt;sub&gt;1&lt;/sub&gt; = 25   &lt;br&gt;&lt;br&gt;Since the person travels for 20 min at speed of 40 km/hr ∴ A&lt;sub&gt;2&lt;/sub&gt; = 40   &lt;br&gt;&lt;br&gt;Let the average speed of the person be x km/hr ∴ A&lt;sub&gt;w&lt;/sub&gt; = 500   &lt;br&gt;&lt;br&gt;&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{40-x}{x-25}=\frac{3}{2}\Rightarrow80-2x=3x-75$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="7" class="binary-operator"&gt;−&lt;/span&gt;&lt;var mathquill-command-id="9"&gt;x&lt;/var&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;var mathquill-command-id="11"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="13" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="20"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="22"&gt;&lt;span class="numerator" mathquill-block-id="24"&gt;&lt;span mathquill-command-id="23"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="26"&gt;&lt;span mathquill-command-id="25"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span mathquill-command-id="28"&gt;⇒&lt;/span&gt;&lt;span mathquill-command-id="30"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="32"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="34" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="36"&gt;2&lt;/span&gt;&lt;var mathquill-command-id="38"&gt;x&lt;/var&gt;&lt;span class="binary-operator" mathquill-command-id="40"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="42"&gt;3&lt;/span&gt;&lt;var mathquill-command-id="44"&gt;x&lt;/var&gt;&lt;span mathquill-command-id="46" class="binary-operator"&gt;−&lt;/span&gt;&lt;span mathquill-command-id="48"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="50"&gt;5&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;&lt;br&gt;⇒ x = 31   &lt;br&gt;&lt;br&gt;∴ Average speed of the person in the whole journey was 31 Km/hr                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 6&lt;/b&gt; In what ratio should a 65% milk solution and 85% milk solution should be mixed so that the new solution is a 80% milk solution.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;1:2&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;1:3&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;1:4&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;2:3&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;img src="http://images.ekjam.com/cat.ekjam/quants/allegations/ex-2.png" align="right"&gt;   Since the concentration of milk in water = 65 ∴ A&lt;sub&gt;1&lt;/sub&gt; = 65   &lt;br&gt;&lt;br&gt;Since the concentration of pure milk = 85 ∴ A&lt;sub&gt;2&lt;/sub&gt; = 85   &lt;br&gt;&lt;br&gt;Since the concentration of  milk in milk-water solution = 80 ∴ A&lt;sub&gt;w&lt;/sub&gt; = 80   &lt;br&gt;&lt;br&gt;∴ Ratio in which the two solutions should be mixed = 1:3                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4342518922241962101/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/allegations-and-mixtures.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4342518922241962101'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4342518922241962101'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/allegations-and-mixtures.html' title='Allegations and Mixtures'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1913057013826779405</id><published>2015-01-26T18:56:00.000+05:30</published><updated>2015-01-26T18:56:58.407+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='CAT'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Weighted Averages</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;   When we have to calculate the average of some groups of different things, having different number of elements is being calculated, then     it is called the weighted average.    &lt;/p&gt;   &lt;div class="hl-note"&gt;   &lt;p&gt;If the number of elements in n different groups be N&lt;sub&gt;1&lt;/sub&gt;,N&lt;sub&gt;2&lt;/sub&gt;,N&lt;sub&gt;3&lt;/sub&gt;   .. N&lt;sub&gt;n&lt;/sub&gt; and their respective averages be A&lt;sub&gt;1&lt;/sub&gt;,A&lt;sub&gt;2&lt;/sub&gt;,A&lt;sub&gt;3&lt;/sub&gt;...A&lt;sub&gt;n&lt;/sub&gt;     ,&lt;br&gt;&lt;br&gt;&lt;b&gt; then Weighted average =&lt;/b&gt; &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{\mathbb{N}_1\cdot A_1+\mathbb{N}_2\cdot A_2+\mathbb{N}_3\cdot A_3...\mathbb{N}_n\cdot A_n}{\mathbb{N}_1+\mathbb{N}_2+\mathbb{N}_3...\mathbb{N}_n}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="5" mathquill-block-id="7"&gt;&lt;span mathquill-command-id="6"&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span class="binary-operator" mathquill-command-id="9"&gt;·&lt;/span&gt;&lt;var mathquill-command-id="11"&gt;A&lt;/var&gt;&lt;sub class="non-leaf" mathquill-command-id="13" mathquill-block-id="15"&gt;&lt;span mathquill-command-id="14"&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span mathquill-command-id="17" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="21" mathquill-block-id="23"&gt;&lt;span mathquill-command-id="22"&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span class="binary-operator" mathquill-command-id="25"&gt;·&lt;/span&gt;&lt;var mathquill-command-id="27"&gt;A&lt;/var&gt;&lt;sub class="non-leaf" mathquill-command-id="29" mathquill-block-id="31"&gt;&lt;span mathquill-command-id="30"&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span mathquill-command-id="33" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="35"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="37" mathquill-block-id="39"&gt;&lt;span mathquill-command-id="38"&gt;3&lt;/span&gt;&lt;/sub&gt;&lt;span class="binary-operator" mathquill-command-id="41"&gt;·&lt;/span&gt;&lt;var mathquill-command-id="43"&gt;A&lt;/var&gt;&lt;sub class="non-leaf" mathquill-command-id="45" mathquill-block-id="47"&gt;&lt;span mathquill-command-id="46"&gt;3&lt;/span&gt;&lt;/sub&gt;&lt;span mathquill-command-id="49"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="51"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="53"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="55"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="57" mathquill-block-id="59"&gt;&lt;var mathquill-command-id="58"&gt;n&lt;/var&gt;&lt;/sub&gt;&lt;span class="binary-operator" mathquill-command-id="61"&gt;·&lt;/span&gt;&lt;var mathquill-command-id="63"&gt;A&lt;/var&gt;&lt;sub class="non-leaf" mathquill-command-id="65" mathquill-block-id="67"&gt;&lt;var mathquill-command-id="66"&gt;n&lt;/var&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="70"&gt;&lt;span mathquill-command-id="69"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="71" mathquill-block-id="73"&gt;&lt;span mathquill-command-id="72"&gt;1&lt;/span&gt;&lt;/sub&gt;&lt;span mathquill-command-id="75" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="77"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="79" mathquill-block-id="81"&gt;&lt;span mathquill-command-id="80"&gt;2&lt;/span&gt;&lt;/sub&gt;&lt;span mathquill-command-id="83" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="85"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="87" mathquill-block-id="89"&gt;&lt;span mathquill-command-id="88"&gt;3&lt;/span&gt;&lt;/sub&gt;&lt;span mathquill-command-id="91"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="93"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="95"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="97"&gt;N&lt;/span&gt;&lt;sub class="non-leaf" mathquill-command-id="99" mathquill-block-id="101"&gt;&lt;var mathquill-command-id="100"&gt;n&lt;/var&gt;&lt;/sub&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;      &lt;/p&gt;   &lt;/div&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; Average cost of buying 5 quality A crackers is 60 and cost of buying 10 quality B crackers is 80. WHhat will be average    cost of buying all the crackers.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;71.33&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;72.33&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;73.33&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;74.33&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Total number of employees = 5 + 10 = 15    &lt;br&gt;&lt;br&gt;Average cost of all the crackers = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{5\cdot60+10\cdot80}{5+10}=\frac{300+800}{15}=\frac{1100}{15}=73.33$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;5&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="5"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="11" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;0&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="17"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="24"&gt;&lt;span mathquill-command-id="23"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="25" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="27"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="29"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="32"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="34"&gt;&lt;span class="numerator" mathquill-block-id="36"&gt;&lt;span mathquill-command-id="35"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="37"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="39"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="41" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="43"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="45"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="47"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="50"&gt;&lt;span mathquill-command-id="49"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="51"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="54"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="56"&gt;&lt;span class="numerator" mathquill-block-id="58"&gt;&lt;span mathquill-command-id="57"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="59"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="61"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="63"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="66"&gt;&lt;span mathquill-command-id="65"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="67"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="70"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="72"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="74"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="76"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="78"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="80"&gt;3&lt;/span&gt;&lt;/span&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; Average weight of a class of 40 students is 30 and average weight of a class of 20 students is 15. Find the average weight    of both the classes combined.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;21&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;22&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;24&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;25&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Average weight = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{40\times30+20\times15}{40+20}=25$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;0&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="7"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="13" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;0&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="19"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="23"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="26"&gt;&lt;span mathquill-command-id="25"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="27"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="29" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="31"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="33"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="36"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="38"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="40"&gt;5&lt;/span&gt;&lt;/span&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; There are two sections A and B of a class, consisting of 36 and 44 students' respectively. If the average weight of section A is 40kg and that of section B is 35kg, find the average weight of the whole class.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;37.25&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;74.5&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;36.25&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;36&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Total weight of (36+44) Students = (36×40 + 44×35) kg = 2980 kg    &lt;br&gt;&lt;br&gt;Therefore average weight of the whole class = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{2980}{80}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;9&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;span mathquill-command-id="11"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; kg    &lt;br&gt;&lt;br&gt;Therefore average weight = 37.25 kg                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; Average salary of 12 employees in company A is 15000 pm and 15 employees is company B is 16000 pm. What will be the average salary of all the employees.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;17000&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;16888&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;15000&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;14888&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Total number of employees = 15 + 12 = 27    &lt;br&gt;&lt;br&gt;Average salary = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{12\cdot18000+15\cdot16000}{12+15}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;2&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="7"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="19" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="23"&gt;5&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="25"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="27"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="29"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="31"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="33"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="35"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="38"&gt;&lt;span mathquill-command-id="37"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="39"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="41" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="43"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="45"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    &lt;br&gt;&lt;br&gt;= &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{456000}{27}=16888.88$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="16"&gt;&lt;span mathquill-command-id="15"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="20"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="22"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="24"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="26"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="28"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="30"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="32"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="34"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="36"&gt;8&lt;/span&gt;&lt;/span&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1913057013826779405/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/weighted-averages.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1913057013826779405'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1913057013826779405'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/weighted-averages.html' title='Weighted Averages'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1761001943415187287</id><published>2015-01-23T15:45:00.002+05:30</published><updated>2015-01-23T15:49:13.729+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Spring Security : Create a Custom Authentication Filter</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;You may need to create an AuthenticatioFilter when you want to create a custom logic for handling the authentication filter. You may also want to create your own Authentication Provider, Entry Point, Authentication Token etc to customize the authentication process to a new level.&lt;br /&gt;&lt;h2&gt;Step 1 : Create a Filter&lt;/h2&gt;Let us first create a class named &lt;b&gt;MyAuthenticationFilter &lt;/b&gt;and then register it as a bean in &lt;b&gt;resources.groovy&lt;/b&gt;.&amp;nbsp;After we have created the class and registered the it as a bean, we can use this class as a filter for our custom spring security authentication.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Class : MyAuthenticationFilter.groovy&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras&lt;br /&gt;&lt;br /&gt;import org.springframework.context.ApplicationEventPublisher&lt;br /&gt;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken&lt;br /&gt;import org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent&lt;br /&gt;import org.springframework.security.core.Authentication&lt;br /&gt;import org.springframework.security.core.AuthenticationException&lt;br /&gt;import org.springframework.security.core.context.SecurityContextHolder&lt;br /&gt;import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter&lt;br /&gt;import org.springframework.security.web.authentication.AuthenticationFailureHandler&lt;br /&gt;import org.springframework.security.web.authentication.AuthenticationSuccessHandler&lt;br /&gt;&lt;br /&gt;import javax.servlet.FilterChain&lt;br /&gt;import javax.servlet.ServletException&lt;br /&gt;import javax.servlet.ServletRequest&lt;br /&gt;import javax.servlet.ServletResponse&lt;br /&gt;import javax.servlet.http.HttpServletRequest&lt;br /&gt;import javax.servlet.http.HttpServletResponse&lt;br /&gt;&lt;br /&gt;/**&lt;br /&gt; * Created by ekansh on 19/1/15.&lt;br /&gt; */&lt;br /&gt;class MyAuthenticationFilter extends AbstractAuthenticationProcessingFilter{&lt;br /&gt;&lt;br /&gt;    public static final String USERNAME = 'j_username';&lt;br /&gt;    public static final String PASSWORD = 'j_password';&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    AuthenticationSuccessHandler authenticationSuccessHandler&lt;br /&gt;    AuthenticationFailureHandler authenticationFailureHandler&lt;br /&gt;    ApplicationEventPublisher applicationEventPublisher&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    protected MyAuthenticationFilter() {&lt;br /&gt;        super('/mylogin') // Register the url that will be intercepted by this filter.&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)  throws IOException, ServletException {&lt;br /&gt;        HttpServletRequest request = (HttpServletRequest) req&lt;br /&gt;        HttpServletResponse response = (HttpServletResponse) resp&lt;br /&gt;       &amp;nbsp;    //Check if the url contains the filterProcessUrl and required authentication is false, if not then pass the request to the next filter. &lt;br /&gt;        if (!request.getRequestURI().contains(filterProcessesUrl) &amp;amp;&amp;amp; !requiresAuthentication(request, response)) {&lt;br /&gt;            chain.doFilter(request, response)&lt;br /&gt;            return&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        // Create an authentication token that will be returned.&lt;br /&gt;        Authentication authentication;&lt;br /&gt;        try{ // If the credentials to not match then an AuthenticationException is thrown.&lt;br /&gt;            authentication = attemptAuthentication(request, response)&lt;br /&gt;            // If successfully authenticated then pass the request to the success handler&lt;br /&gt;            if(authentication.authenticated)&lt;br /&gt;                successfulAuthentication(request,response,authentication)&lt;br /&gt;        }&lt;br /&gt;        catch(AuthenticationException exception){&lt;br /&gt;            // Pass the request to authentication failure handler.&lt;br /&gt;            unsuccessfulAuthentication(request,response,exception)&lt;br /&gt;            return&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {&lt;br /&gt;        return true;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    Authentication attemptAuthentication(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws AuthenticationException, IOException, ServletException {&lt;br /&gt;&lt;br /&gt;        String username = getUsername(httpServletRequest);&lt;br /&gt;        String password = getPassword(httpServletRequest);&lt;br /&gt;&lt;br /&gt;        Authentication authentication = new UsernamePasswordAuthenticationToken(username, password);&lt;br /&gt;&lt;br /&gt;        return this.authenticationManager.authenticate(authentication);&lt;br /&gt;    }&lt;br /&gt;    @Override&lt;br /&gt;    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException{&lt;br /&gt;        SecurityContextHolder.getContext().setAuthentication(authentication)&lt;br /&gt;        applicationEventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authentication, this.class))&lt;br /&gt;        authenticationSuccessHandler.onAuthenticationSuccess(request,response,authentication)&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException{&lt;br /&gt;        authenticationFailureHandler.onAuthenticationFailure(request,response, exception)&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    // Get the username from the request object&lt;br /&gt;    String getUsername(HttpServletRequest request){&lt;br /&gt;        return request.getParameter(USERNAME);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    // get the password from the request object&lt;br /&gt;    String getPassword(HttpServletRequest request){&lt;br /&gt;        return request.getParameter(PASSWORD);&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Now we register the class as a spring bean in resources.groovy like this. &lt;br /&gt;&lt;pre class="brush:java"&gt;    myAuthenticationFilter(MyAuthenticationFilter){&lt;br /&gt;        authenticationManager = ref('authenticationManager')&lt;br /&gt;        sessionAuthenticationStrategy = ref('sessionAuthenticationStrategy')&lt;br /&gt;        authenticationSuccessHandler = ref('authenticationSuccessHandler')&lt;br /&gt;        authenticationFailureHandler = ref('authenticationFailureHandler')&lt;br /&gt;        rememberMeServices = ref('rememberMeServices')&lt;br /&gt;        authenticationDetailsSource = ref('authenticationDetailsSource')&lt;br /&gt;        filterProcessesUrl = '/mylogin'&lt;br /&gt;    }&lt;/pre&gt;&lt;br /&gt;Now you need to register this filter in the deployment descriptor so that the these effects take place. There are two ways of doing this&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;You can declare your filter using a filter chain in &lt;b&gt;Config.groovy&lt;/b&gt;. See the documentation &lt;a href="http://grails-plugins.github.io/grails-spring-security-core/guide/filters.html" target="_blank"&gt;how to do this.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;You can declare the filter in bootsrap as following&lt;br /&gt;&lt;pre class="brush:java"&gt;SpringSecurityUtils.clientRegisterFilter('myAuthenticationFilter', SecurityFilterPosition.SECURITY_CONTEXT_FILTER.order + 10)&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1761001943415187287/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/spring-security-create-custom-authentication-filter-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1761001943415187287'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1761001943415187287'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/spring-security-create-custom-authentication-filter-in-grails.html' title='Spring Security : Create a Custom Authentication Filter'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5983879502076892172</id><published>2015-01-23T15:44:00.001+05:30</published><updated>2015-01-23T15:44:39.792+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'></title><content type='html'>Points To Remember  You may need to create an AuthenticatioFilter when you want to create a custom logic for handling the authentication filter. You may also want to create your own Authentication Provider, Entry Point, Authentication Token etc to customize the authentication process to a new level. Step 1 : Create a Filter  Let us first create a class named MyAuthenticationFilter and then register it as a bean in resources.groovy. After we have created the class and registered the it as a bean, we can use this class as a filter for our custom spring security authentication.  Class : MyAuthenticationFilter.groovy package com.ekiras  import org.springframework.context.ApplicationEventPublisher import org.springframework.security.authentication.UsernamePasswordAuthenticationToken import org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent import org.springframework.security.core.Authentication import org.springframework.security.core.AuthenticationException import org.springframework.security.core.context.SecurityContextHolder import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter import org.springframework.security.web.authentication.AuthenticationFailureHandler import org.springframework.security.web.authentication.AuthenticationSuccessHandler  import javax.servlet.FilterChain import javax.servlet.ServletException import javax.servlet.ServletRequest import javax.servlet.ServletResponse import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse  /**  * Created by ekansh on 19/1/15.  */ class MyAuthenticationFilter extends AbstractAuthenticationProcessingFilter{      public static final String USERNAME = 'j_username';     public static final String PASSWORD = 'j_password';       AuthenticationSuccessHandler authenticationSuccessHandler     AuthenticationFailureHandler authenticationFailureHandler     ApplicationEventPublisher applicationEventPublisher        protected MyAuthenticationFilter() {         super('/mylogin') // Register the url that will be intercepted by this filter.     }      @Override     public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)  throws IOException, ServletException {         HttpServletRequest request = (HttpServletRequest) req         HttpServletResponse response = (HttpServletResponse) resp             //Check if the url contains the filterProcessUrl and required authentication is false, if not then pass the request to the next filter.          if (!request.getRequestURI().contains(filterProcessesUrl) &amp;&amp; !requiresAuthentication(request, response)) {             chain.doFilter(request, response)             return         }          // Create an authentication token that will be returned.         Authentication authentication;         try{ // If the credentials to not match then an AuthenticationException is thrown.             authentication = attemptAuthentication(request, response)             // If successfully authenticated then pass the request to the success handler             if(authentication.authenticated)                 successfulAuthentication(request,response,authentication)         }         catch(AuthenticationException exception){             // Pass the request to authentication failure handler.             unsuccessfulAuthentication(request,response,exception)             return         }     }      @Override     protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {         return true;     }       @Override     Authentication attemptAuthentication(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws AuthenticationException, IOException, ServletException {          String username = getUsername(httpServletRequest);         String password = getPassword(httpServletRequest);          Authentication authentication = new UsernamePasswordAuthenticationToken(username, password);          return this.authenticationManager.authenticate(authentication);     }     @Override     protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException{         SecurityContextHolder.getContext().setAuthentication(authentication)         applicationEventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authentication, this.class))         authenticationSuccessHandler.onAuthenticationSuccess(request,response,authentication)     }      @Override     protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException{         authenticationFailureHandler.onAuthenticationFailure(request,response, exception)     }      // Get the username from the request object     String getUsername(HttpServletRequest request){         return request.getParameter(USERNAME);     }      // get the password from the request object     String getPassword(HttpServletRequest request){         return request.getParameter(PASSWORD);     } }  Now we register the class as a spring bean in resources.groovy like this.     myAuthenticationFilter(MyAuthenticationFilter){         authenticationManager = ref('authenticationManager')         sessionAuthenticationStrategy = ref('sessionAuthenticationStrategy')         authenticationSuccessHandler = ref('authenticationSuccessHandler')         authenticationFailureHandler = ref('authenticationFailureHandler')         rememberMeServices = ref('rememberMeServices')         authenticationDetailsSource = ref('authenticationDetailsSource')         filterProcessesUrl = '/mylogin'     }  Now you need to register this filter in the deployment descriptor so that the these effects take place. There are two ways of doing this  You can declare your filter using a filter chain in Config.groovy. See the documentation how to do this.  You can declare the filter in bootsrap as following SpringSecurityUtils.clientRegisterFilter('myAuthenticationFilter', SecurityFilterPosition.SECURITY_CONTEXT_FILTER.order + 10) </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5983879502076892172'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5983879502076892172'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2632838525724239662</id><published>2015-01-19T21:12:00.000+05:30</published><updated>2015-01-19T21:15:30.149+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>How to integrate Spring Security in Grails</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Go to the &lt;a href="http://grails.org/plugin/spring-security-core" target="_blank"&gt;Grails Spring Security Plugin&lt;/a&gt;&amp;nbsp;and add the dependency in the &lt;b&gt;BuildConfig&lt;/b&gt;.&lt;br /&gt;&lt;h2&gt;Integrate Spring Security in Grails&lt;/h2&gt;Add the latest grails spring security plugin in the build config of the project. This will add spring security jars and classes that will be used to configure spring security in the project. &lt;br /&gt;&lt;pre class="brush:java"&gt;http://grails.org/plugin/spring-security-core&lt;/pre&gt;Now run the following command from the terminal. &lt;br /&gt;&lt;pre class="brush:java"&gt;grails s2-quickstart com.ekiras User Role&lt;/pre&gt;Here the syntax of the above command is&lt;br /&gt;&lt;b&gt;grails s2-quickstart {package} {user domain} {authority domain}&lt;/b&gt;&lt;br /&gt;The above command will create three Domains in the project User, Role and UserRole. user domain will contain the user info, role domain will contain Authorities and UserRole will contain the user authority mappings.&lt;br /&gt;It will also add the following settings to the &lt;b&gt;Config.groovy&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;// Added by the Spring Security Core plugin:&lt;br /&gt;grails.plugin.springsecurity.userLookup.userDomainClassName = 'com.ekiras.User'&lt;br /&gt;grails.plugin.springsecurity.userLookup.authorityJoinClassName = 'com.ekiras.UserRole'&lt;br /&gt;grails.plugin.springsecurity.authority.className = 'com.ekiras.Role'&lt;br /&gt;grails.plugin.springsecurity.controllerAnnotations.staticRules = [&lt;br /&gt; '/':                              ['permitAll'],&lt;br /&gt; '/index':                         ['permitAll'],&lt;br /&gt; '/index.gsp':                     ['permitAll'],&lt;br /&gt; '/assets/**':                     ['permitAll'],&lt;br /&gt; '/**/js/**':                      ['permitAll'],&lt;br /&gt; '/**/css/**':                     ['permitAll'],&lt;br /&gt; '/**/images/**':                  ['permitAll'],&lt;br /&gt; '/**/favicon.ico':                ['permitAll']&lt;br /&gt;]&lt;/pre&gt;It tells that the userDomain class authority class and user-authority join class. For other settings of the Spring security you can open the file &lt;b&gt;DefaultSecurityConfig.groovy&lt;/b&gt;&amp;nbsp;.&lt;br /&gt;&lt;br /&gt;See the Default Password Encoders and Custom Password Encoders in Grails Spring Security.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2632838525724239662/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-integrate-spring-security-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2632838525724239662'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2632838525724239662'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-integrate-spring-security-in-grails.html' title='How to integrate Spring Security in Grails'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5433942170408381592</id><published>2015-01-18T23:38:00.000+05:30</published><updated>2015-01-18T23:51:31.572+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>What is ServletConfig in Java J2EE application</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Each Servlet has its own ServletConfig object.&lt;/li&gt;&lt;li&gt;ServletConfig is defined in web.xml&lt;/li&gt;&lt;li&gt;ServletConfig is a way of giving init parameters to a servlet during initialization.&amp;nbsp;&lt;/li&gt;&lt;li&gt;ServletConfig is a predefined interface.&lt;/li&gt;&lt;li&gt;ServeltConfig object is created by the container when a servlet is initialized and this object remains with the servlet throughout the life cycle of the servlet.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : How to get ServletConfig Object in a Servlet.&lt;/b&gt;&lt;/div&gt;Lets take an example where we will add a few init params in the servlet config and get the config object from the servlet config object within the servlet. &lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;import java.io.PrintWriter;&lt;br /&gt;import java.util.Enumeration;&lt;br /&gt;&lt;br /&gt;import javax.servlet.ServletConfig;&lt;br /&gt;import javax.servlet.ServletException;&lt;br /&gt;import javax.servlet.http.HttpServlet;&lt;br /&gt;import javax.servlet.http.HttpServletRequest;&lt;br /&gt;import javax.servlet.http.HttpServletResponse;&lt;br /&gt;&lt;br /&gt;public class ServletConfigTest extends HttpServlet {&lt;br /&gt; private static final long serialVersionUID = 1L;&lt;br /&gt;&lt;br /&gt; protected void doGet(HttpServletRequest request,&lt;br /&gt;   HttpServletResponse response) throws ServletException, IOException {&lt;br /&gt;  response.setContentType("text/html");&lt;br /&gt;  PrintWriter out = response.getWriter();&lt;br /&gt;&lt;br /&gt;  ServletConfig config = getServletConfig();&lt;br /&gt;  Enumeration&amp;lt;String&amp;gt; e = config.getInitParameterNames();&lt;br /&gt;&lt;br /&gt;  String param = "";&lt;br /&gt;  while (e.hasMoreElements()) {&lt;br /&gt;   param = e.nextElement();&lt;br /&gt;   out.print(param);&lt;br /&gt;   out.print(" = " + config.getInitParameter(param) +"&amp;lt;br/&amp;gt;");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  out.close();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; protected void doPost(HttpServletRequest request,&lt;br /&gt;   HttpServletResponse response) throws ServletException, IOException {&lt;br /&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The following is the &lt;b&gt;web.xml&lt;/b&gt; with the servlet mapping and init params for servlet. &lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt; xmlns="http://xmlns.jcp.org/xml/ns/javaee"&lt;br /&gt; xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"&lt;br /&gt; id="WebApp_ID" version="3.1"&amp;gt;&lt;br /&gt; &amp;lt;display-name&amp;gt;Servlet Config Test&amp;lt;/display-name&amp;gt;&lt;br /&gt; &amp;lt;welcome-file-list&amp;gt;&lt;br /&gt;  &amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt;&lt;br /&gt; &amp;lt;/welcome-file-list&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;servlet&amp;gt;&lt;br /&gt;  &amp;lt;servlet-name&amp;gt;servletConfigTest&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;  &amp;lt;servlet-class&amp;gt;com.ekiras.ServletConfigTest&amp;lt;/servlet-class&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;init-param&amp;gt;&lt;br /&gt;   &amp;lt;param-name&amp;gt;name&amp;lt;/param-name&amp;gt;&lt;br /&gt;   &amp;lt;param-value&amp;gt;ekiras&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/init-param&amp;gt;&lt;br /&gt;&lt;br /&gt;  &amp;lt;init-param&amp;gt;&lt;br /&gt;   &amp;lt;param-name&amp;gt;blog&amp;lt;/param-name&amp;gt;&lt;br /&gt;   &amp;lt;param-value&amp;gt;http://ekiras.blogspot.com&amp;lt;/param-value&amp;gt;&lt;br /&gt;  &amp;lt;/init-param&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;/servlet&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet-name&amp;gt;servletConfigTest&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;  &amp;lt;url-pattern&amp;gt;/test&amp;lt;/url-pattern&amp;gt;&lt;br /&gt; &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/web-app&amp;gt;&lt;/pre&gt;The above will give the following output when run in a servlet container like tomcat with url &lt;b&gt;/test&lt;/b&gt;&lt;br /&gt;&lt;div class="output"&gt;name=ekiras&lt;br /&gt;blog=http://ekiras.blogspot.com&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5433942170408381592/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/what-is-servletconfig-and-how-to-get-servletconfig-in-servlet.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5433942170408381592'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5433942170408381592'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/what-is-servletconfig-and-how-to-get-servletconfig-in-servlet.html' title='What is ServletConfig in Java J2EE application'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5691549922706367285</id><published>2015-01-15T15:44:00.000+05:30</published><updated>2015-01-15T15:46:29.469+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Annotation'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>How to create a Custom Annotation in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;An annotation can be used as a replacement of interfaces.&lt;/li&gt;&lt;li&gt;You can make both empty/marker annotations and annotations with methods.&lt;/li&gt;&lt;li&gt;You can define the retention policy for the annotation and where the annotation can be used.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Program : Create A Custom Annotation&lt;/h2&gt;The following program creates a custom empty annotation.&lt;br /&gt;&lt;pre class="brush:java"&gt;import java.lang.annotation.Retention;&lt;br /&gt;import java.lang.annotation.RetentionPolicy;&lt;br /&gt;import java.lang.annotation.Target;&lt;br /&gt;import java.lang.annotation.ElementType;&lt;br /&gt;&lt;br /&gt;@Target(ElementType.TYPE)&lt;br /&gt;@Retention(RetentionPolicy.RUNTIME)&lt;br /&gt;public @interface Table {&lt;br /&gt;&lt;br /&gt; public String name() default "table";&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The above class can be used as a custom annotation with only one method name with a default value. This annotation can be applied only to the class i.e it is class level annotation and can not be applied to any member of a class.&lt;br /&gt;&lt;br /&gt;The following program creates a custom annotation with methods defined. &lt;br /&gt;&lt;pre class="brush:java"&gt;import java.lang.annotation.ElementType;&lt;br /&gt;import java.lang.annotation.Retention;&lt;br /&gt;import java.lang.annotation.RetentionPolicy;&lt;br /&gt;import java.lang.annotation.Target;&lt;br /&gt;&lt;br /&gt;@Retention(RetentionPolicy.RUNTIME)&lt;br /&gt;@Target(ElementType.FIELD)&lt;br /&gt;public @interface Column {&lt;br /&gt; public String name() default "";&lt;br /&gt;}&lt;/pre&gt;In the above example the annotation @Column can be applied only to the fields of a class and not at class level or method level.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;@Table(name="user_table")&lt;br /&gt;public class User {&lt;br /&gt;&lt;br /&gt; @Column(name="ekiras")&lt;br /&gt; private String username;&lt;/pre&gt;&lt;pre class="brush:java"&gt;&lt;/pre&gt;&lt;pre class="brush:java"&gt; public String password;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;The above code represents how we can use the annotations @Table and @Column to annotate in any pojo class like the class User mentioned above. &lt;br /&gt;&lt;pre class="brush:java"&gt;public class RunTest {&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  test();&lt;br /&gt;  &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public static void test(){&lt;br /&gt;  Table table = User.class.getAnnotation(Table.class);&lt;br /&gt;  if(table!=null){&lt;br /&gt;   System.out.println("Class is annotated with @Table and name="+table.name());&lt;br /&gt;   Field[] fields = User.class.getFields();&lt;br /&gt;   for(Field field : fields){&lt;br /&gt;    Column column = field.getAnnotation(Column.class);&lt;br /&gt;    if(column!=null)&lt;br /&gt;     System.out.println("Field "+field.getName() +" annotated with @Column name="+column.name());&lt;br /&gt;    else {&lt;br /&gt;     System.out.println("Field "+field.getName() +" is not annotated with @Column");&lt;br /&gt;    }&lt;br /&gt;   }&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;Class is annotated with @Table and name=user_table&lt;br /&gt;Field username annotated with @Column name=ekiras&lt;br /&gt;Field password is not annotated with @Column&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5691549922706367285/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-create-custom-annotation-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5691549922706367285'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5691549922706367285'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-create-custom-annotation-in-java.html' title='How to create a Custom Annotation in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8750044680232820652</id><published>2015-01-14T20:25:00.001+05:30</published><updated>2015-01-14T20:42:01.473+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>How to find all the packages in a Project with a Prefix</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You to need to add the &lt;a href="http://code.google.com/p/reflections/" target="_blank"&gt;Reflections&lt;/a&gt; jar in the class path.&amp;nbsp;&lt;/li&gt;&lt;li&gt;You will not be able to load the packages other than the current package using &lt;b&gt;Package.getPackages()&lt;/b&gt;&amp;nbsp;since current class loader will not be able to reach them.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Program : Scan all packages with a Prefix&lt;/h2&gt;You can use&amp;nbsp;&lt;b&gt;Package.getPackages()&lt;/b&gt;&amp;nbsp;approach to find all the packages that are in the current class loader. But you will not be&amp;nbsp;able to get the packages that are not in the class path of the current class loader. So you need to include the jar &lt;b&gt;"Reflections"&lt;/b&gt;&amp;nbsp;to do this for you.&lt;br /&gt;All the dependency to the project via &lt;b&gt;pom.xml&lt;/b&gt;&amp;nbsp;or you can add the jar in the class path of the project.&lt;br /&gt;&lt;br /&gt;The following code will list all the packages in the project that start with the prefix in the project.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt; public static Set&amp;lt;String&amp;gt; findAllPackagesStartingWith(String prefix) {&lt;br /&gt;     List&amp;lt;ClassLoader&amp;gt; classLoadersList = new LinkedList&amp;lt;ClassLoader&amp;gt;();&lt;br /&gt;     classLoadersList.add(ClasspathHelper.contextClassLoader());&lt;br /&gt;     classLoadersList.add(ClasspathHelper.staticClassLoader());&lt;br /&gt;     Reflections reflections = new Reflections(new ConfigurationBuilder()&lt;br /&gt;             .setScanners(new SubTypesScanner(false), new ResourcesScanner())&lt;br /&gt;             .setUrls(ClasspathHelper.forClassLoader(classLoadersList.toArray(new ClassLoader[0])))&lt;br /&gt;             .filterInputsBy(new FilterBuilder().include(FilterBuilder.prefix(prefix))));&lt;br /&gt;     Set&amp;lt;Class&amp;lt;? extends Object&amp;gt;&amp;gt; classes = reflections.getSubTypesOf(Object.class);&lt;br /&gt;&lt;br /&gt;     Set&amp;lt;String&amp;gt; packageNameSet = new TreeSet&amp;lt;String&amp;gt;();&lt;br /&gt;     for (Class&amp;lt;?&amp;gt; classInstance : classes) {&lt;br /&gt;         String packageName = classInstance.getPackage().getName();&lt;br /&gt;         if (packageName.startsWith(prefix)) {&lt;br /&gt;             packageNameSet.add(packageName);&lt;br /&gt;         }&lt;br /&gt;     }&lt;br /&gt;     for(String t : packageNameSet){&lt;br /&gt;      System.out.println(":::"+t);&lt;br /&gt;     }&lt;br /&gt;     return packageNameSet;&lt;br /&gt; }&lt;/pre&gt;&lt;br /&gt;If you want the packages in the project in the form of Package class you can do  &lt;br /&gt;&lt;pre class="brush: java"&gt;public Set&amp;lt;Package&amp;gt; findAllPackagesStartingWith(String prefix) {&lt;br /&gt;     List&amp;lt;ClassLoader&amp;gt; classLoadersList = new LinkedList&amp;lt;ClassLoader&amp;gt;();&lt;br /&gt;     classLoadersList.add(ClasspathHelper.contextClassLoader());&lt;br /&gt;     classLoadersList.add(ClasspathHelper.staticClassLoader());&lt;br /&gt;     Reflections reflections = new Reflections(new ConfigurationBuilder()&lt;br /&gt;             .setScanners(new SubTypesScanner(false), new ResourcesScanner())&lt;br /&gt;             .setUrls(ClasspathHelper.forClassLoader(classLoadersList.toArray(new ClassLoader[0])))&lt;br /&gt;             .filterInputsBy(new FilterBuilder().include(FilterBuilder.prefix(prefix))));&lt;br /&gt;     Set&amp;lt;Class&amp;lt;? extends Object&amp;gt;&amp;gt; classes = reflections.getSubTypesOf(Object.class);&lt;br /&gt;&lt;br /&gt;     Set&amp;lt;Package&amp;gt; packageNameSet = new TreeSet&amp;lt;Package&amp;gt;();&lt;br /&gt;     for (Class&amp;lt;?&amp;gt; classInstance : classes) {&lt;br /&gt;         if (classInstance.getPackage().getName().startsWith(prefix)) {&lt;br /&gt;             packageNameSet.add(classInstance.getPackage());&lt;br /&gt;         }&lt;br /&gt;     }&lt;br /&gt;     &lt;br /&gt;     return packageNameSet;&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;When we run the above code in a demo java project and call the function as &lt;b&gt;findAllPackagesStartingWith("java");&lt;/b&gt; we will get a output like the following. The output may differ for you depending upon the packages in your project.&lt;br /&gt;&lt;pre class="output"&gt;package = javassist&lt;br /&gt;package = javassist.bytecode&lt;br /&gt;package = javassist.bytecode.analysis&lt;br /&gt;package = javassist.bytecode.annotation&lt;br /&gt;package = javassist.bytecode.stackmap&lt;br /&gt;package = javassist.compiler&lt;br /&gt;package = javassist.compiler.ast&lt;br /&gt;package = javassist.convert&lt;br /&gt;package = javassist.expr&lt;br /&gt;package = javassist.runtime&lt;br /&gt;package = javassist.scopedpool&lt;br /&gt;package = javassist.tools&lt;br /&gt;package = javassist.tools.reflect&lt;br /&gt;package = javassist.tools.rmi&lt;br /&gt;package = javassist.tools.web&lt;br /&gt;package = javassist.util&lt;br /&gt;package = javassist.util.proxy&lt;br /&gt;package = javax.annotation&lt;br /&gt;package = javax.annotation.concurrent&lt;br /&gt;package = javax.annotation.meta&lt;br /&gt;package = javax.xml.parsers&lt;br /&gt;package = javax.xml.transform&lt;br /&gt;package = javax.xml.transform.dom&lt;br /&gt;package = javax.xml.transform.sax&lt;br /&gt;package = javax.xml.transform.stream&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8750044680232820652/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-find-all-packages-in-project-with-prefix-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8750044680232820652'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8750044680232820652'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-find-all-packages-in-project-with-prefix-in-java.html' title='How to find all the packages in a Project with a Prefix'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-466415469116448321</id><published>2015-01-14T19:04:00.000+05:30</published><updated>2015-01-14T19:04:00.998+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><category scheme='http://www.blogger.com/atom/ns#' term='SSL'/><title type='text'>How to Run tomcat on HTTPS Port with SSL certificate</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You must first create a SSL certificate. &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-create-a-ssl-certificate-and-add-certificate-to-keystore.html" target="_blank"&gt;Read how to create a SSL certificate.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;You can use self signed ssl certificate or an authorised certificate to run application on https.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Heading&lt;/h2&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-run-tomcat-on-https-port-with-ssl-certificate.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/466415469116448321'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/466415469116448321'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7392202909787982723</id><published>2015-01-14T16:24:00.000+05:30</published><updated>2015-01-14T16:24:44.634+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='MD5'/><category scheme='http://www.blogger.com/atom/ns#' term='Password'/><category scheme='http://www.blogger.com/atom/ns#' term='Salt'/><title type='text'>How to Encode Password using MD5 Algorithm</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can encrypt plain text password to MD5 hash using&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;MessageDigest&lt;/b&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Apache Common Codec - &lt;b&gt;DigestUtils&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;You can also add your own salt to make your password harder to decode.&lt;/li&gt;&lt;li&gt;Package &lt;b&gt;java.security&lt;/b&gt;&amp;nbsp;contains classes that can be used to encrypt passwords.&lt;/li&gt;&lt;li&gt;The data to be encoded is often called &lt;b&gt;message&lt;/b&gt;&amp;nbsp;and the encoded hash is called &lt;b&gt;message Digest&lt;/b&gt;&amp;nbsp;or simply &lt;b&gt;digest.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Program 1 : Encode message to MD5 using MessageDigest&lt;/h2&gt;We use the class &lt;b&gt;java.security.MessageDigest&lt;/b&gt;&amp;nbsp;to encode a message from plain text to MD5 or SHA&lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2015/01/how-to-encode-password-using-md5-algorithm-with-salt.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7392202909787982723'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7392202909787982723'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3868790751836798797</id><published>2014-12-30T23:01:00.000+05:30</published><updated>2014-12-30T23:16:21.284+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Constraints'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>How to apply Constraints in Command Objects</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to add the&amp;nbsp;&lt;b&gt;@Validateable&lt;/b&gt;&amp;nbsp;annotation to the command class.&lt;/li&gt;&lt;li&gt;Use&amp;nbsp;&lt;b&gt;importFrom&lt;/b&gt;&amp;nbsp;in the constraints block with the domain name to import the constraints from domain.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;How to add Constraints to the Command Object.&lt;/h2&gt;Lets us look at the example below. We have created a Domain by name User and a Command object by name UserCommand. We have created the constraints for email, password, first name and last name in User domain. We will import these constraints from domain to the command object and add some more constraints like verify password( if password and confirm password match).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;User.groovy&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.domain&lt;br /&gt;&lt;br /&gt;class User {&lt;br /&gt;&lt;br /&gt;    String email&lt;br /&gt;    String password&lt;br /&gt;    String firstName&lt;br /&gt;    String lastName&lt;br /&gt;&lt;br /&gt;    static constraints = {&lt;br /&gt;        email(nullable: false, blank: false, unique: true, email:true)&lt;br /&gt;        password(nullable: false, blank: false)&lt;br /&gt;        firstName(nullable: false, blank: false)&lt;br /&gt;        lastName(nullable: false, blank: false)&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;UserCommand.groovy&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.co&lt;br /&gt;&lt;br /&gt;import com.ekiras.domain.User&lt;br /&gt;import grails.validation.Validateable&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;@Validateable&lt;br /&gt;class UserCommand {&lt;br /&gt;&lt;br /&gt;    String email&lt;br /&gt;    String password&lt;br /&gt;    String firstName&lt;br /&gt;    String lastName&lt;br /&gt;    String confirmPassword&lt;br /&gt;    static constraints = {&lt;br /&gt;      // Imports the constraints of the User domain in UserCommand&lt;br /&gt;        importFrom User  &lt;br /&gt;        password minSize: 8, validator: {password, obj -&amp;gt;&lt;br /&gt;            obj.confirmPassword == password ? true : 'Passwords do not match'&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You can now call the validate method over the UserCommand like&amp;nbsp;&lt;b&gt;userCommand.validate()&lt;/b&gt;&amp;nbsp;and you can get the errors by calling &lt;b&gt;userCommand.hasErrors()&lt;/b&gt;&amp;nbsp;. This is how you can add constraints of the domain to the command objects or any other class.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3868790751836798797/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-apply-domain-constraints-in-command-objects-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3868790751836798797'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3868790751836798797'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-apply-domain-constraints-in-command-objects-in-grails.html' title='How to apply Constraints in Command Objects'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2589298903526371126</id><published>2014-12-26T02:05:00.000+05:30</published><updated>2015-11-18T00:51:50.674+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><category scheme='http://www.blogger.com/atom/ns#' term='HTTPS'/><category scheme='http://www.blogger.com/atom/ns#' term='SSL'/><category scheme='http://www.blogger.com/atom/ns#' term='Authentication'/><title type='text'>How to create SSL Certificate and add it to Keystore</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You need to have a SSL certificate o run an application/ server on &lt;b&gt;https.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;You can create a SSL certificate using &lt;b&gt;keytool.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;The keystore file for Java is available in &lt;b&gt;Java/jre/lib/security/cacerts.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Default password of the keystore is &lt;b&gt;"changeit".&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Create a Keystore&lt;/h2&gt;You can make a SSL certificate by following the steps below.&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Open a Command-line or Terminal window and make sure you're in your home directory.&lt;/li&gt;&lt;li&gt;Execute the following command in the terminal&lt;pre class="brush:java"&gt;keytool -genkey -alias tomcat -keyalg RSA -validity 365&lt;/pre&gt;&lt;pre class="note"&gt;NOTE, the validity parameter allows you to specify, in the number of days, how long the certificate should be valid for. The longer the time period, the less likely you are to need to recreate it. To recreate it, you'd need to delete the old one and then follow these instructions again.&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;The response will look something like this: &lt;pre class="brush:java"&gt;Enter keystore password: &lt;br /&gt;Re-enter new password:&lt;br /&gt;What is your first and last name?&lt;br /&gt;  [Unknown]:  $MACHINE_NAME&lt;br /&gt;What is the name of your organizational unit?&lt;br /&gt;  [Unknown]:  Test&lt;br /&gt;What is the name of your organization?&lt;br /&gt;  [Unknown]:  Test&lt;br /&gt;What is the name of your City or Locality?&lt;br /&gt;  [Unknown]:  Test&lt;br /&gt;What is the name of your State or Province?&lt;br /&gt;  [Unknown]:  Test&lt;br /&gt;What is the two-letter country code for this unit?&lt;br /&gt;  [Unknown]:  US&lt;br /&gt;Is CN=$FULL_MACHINE_NAME, OU=Test, O=Test, L=Test, ST=Test, C=IN correct?&lt;br /&gt;  [no]:  yes&lt;/pre&gt;&lt;b&gt;For the keystore password you should enter "changeit" without the quotation marks.&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;The above steps will successfully create a keystore file by name &lt;b&gt;.keystore&lt;/b&gt;&amp;nbsp;in the home directory.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Create a Server Certificate&amp;nbsp;&lt;/h2&gt;Any application that wishes to securely connect to the Tomcat instance would need to import the certificate. You can export the certificate that's compatible with other JVM keystores by executing the following command: &lt;br /&gt;&lt;pre class="brush:java"&gt;keytool -export -alias tomcat -file server.crt&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;Adding Server Certificate to JVM keystore&lt;/h2&gt;You will now have to import the &lt;b&gt;server.crt&lt;/b&gt; file created in the last step to the jvm's keystore, you can do it by following command. &lt;br /&gt;&lt;pre class="brush:java"&gt;keytool -import -file server.crt -keystore $JAVA_HOME/jre/lib/security/cacerts -alias tomcat&lt;/pre&gt;You need to provide the password of your keystore( default password is "&lt;b&gt;changeit&lt;/b&gt;") to successfully import the server.crt file to the jvm cacerts.&lt;br /&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Useful Command for using keystore.&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Check all the certificates added to the keystore.&lt;pre class="brush:java"&gt;keytool -list -keystore $JAVA_HOME/jre/lib/security/cacerts -v&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Delete any certificate from keystore.&lt;pre class="brush:java"&gt;keytool -delete -noprompt -alias ${certificate.alias}  -keystore ${keystore.file}&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Add a certificate to the keystore.&lt;pre class="brush:java"&gt;keytool -export -alias tomcat -file ${server.crt}&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Change Java Keystore Password.&lt;pre class="brush:java"&gt;keytool -storepasswd -new new_storepass -keystore keystore.jks&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;a href="http:/#" target="_blank"&gt;How to configure tomcat to run on HTTPS&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2589298903526371126/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-create-a-ssl-certificate-and-add-certificate-to-keystore.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2589298903526371126'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2589298903526371126'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-create-a-ssl-certificate-and-add-certificate-to-keystore.html' title='How to create SSL Certificate and add it to Keystore'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1232460749000692051</id><published>2014-12-23T18:24:00.000+05:30</published><updated>2014-12-23T18:35:32.252+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Struts2'/><category scheme='http://www.blogger.com/atom/ns#' term='Apache Struts'/><title type='text'>Struts : Setup Hello World Example</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;Download the struts required jars and add to the lib folder.&lt;br /&gt;&lt;h2&gt;Setup : &amp;nbsp;Struts Hello World Example&lt;/h2&gt;web.xml File &lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt; xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&lt;br /&gt; xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&lt;br /&gt; id="WebApp_ID" version="2.5"&amp;gt;&lt;br /&gt; &amp;lt;filter&amp;gt;&lt;br /&gt;  &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;&lt;br /&gt;  &amp;lt;filter-class&amp;gt;org.apache.struts2.dispatcher.FilterDispatcher&amp;lt;/filter-class&amp;gt;&lt;br /&gt; &amp;lt;/filter&amp;gt;&lt;br /&gt; &amp;lt;filter-mapping&amp;gt;&lt;br /&gt;  &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;&lt;br /&gt;  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt; &amp;lt;/filter-mapping&amp;gt;&lt;br /&gt; &amp;lt;welcome-file-list&amp;gt;&lt;br /&gt;  &amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt;&lt;br /&gt; &amp;lt;/welcome-file-list&amp;gt;&lt;br /&gt;&amp;lt;/web-app&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Struts Filter&lt;/b&gt;- This filter routes all incoming requests to &lt;b&gt;struts.xml&lt;/b&gt;. &lt;b&gt;struts.xml&lt;/b&gt; matches the actions and provides response accordingly.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Welcome File List&lt;/b&gt;- this defines which file will be loaded on starting the application. We can have multiple&amp;nbsp;&lt;b&gt;welcome-file&lt;/b&gt;&amp;nbsp;one followed by another.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;b&gt;struts.xml&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE struts PUBLIC&lt;br /&gt;"-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"&lt;br /&gt;"http://struts.apache.org/dtds/struts-2.0.dtd"&amp;gt;&lt;br /&gt;&amp;lt;struts&amp;gt;&lt;br /&gt;&amp;lt;!-- *********************  START STRUTS FILE ********************************* --&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;package name="HelloWorld" extends="struts-default"&amp;gt;&lt;br /&gt;  &lt;br /&gt;  &amp;lt;action name="HelloWorld" class="com.ekiras.action.Action" method="sayHello"&amp;gt;&lt;br /&gt;   &amp;lt;result name="success"&amp;gt;result.jsp&amp;lt;/result&amp;gt;&lt;br /&gt;  &amp;lt;/action&amp;gt;&lt;br /&gt; &lt;br /&gt; &amp;lt;/package&amp;gt;&lt;br /&gt; &lt;br /&gt;&amp;lt;!-- *********************  END STRUTS FILE *********************************** --&amp;gt;&lt;br /&gt;&amp;lt;/struts&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;struts.xml&lt;/b&gt; contains  &lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="c2"&gt;Package&lt;/span&gt; - name="any unique name" extends="any other package or struts-default" namespace="optional (default namespace if not nemtioned)"&lt;/li&gt;&lt;li&gt;&lt;span class="c2"&gt;Action&lt;/span&gt; name="HelloWorld" when this action is performed it sends request to function &lt;b&gt;sayHello&lt;/b&gt; of class &lt;b&gt;com.ekiras.action.Action&lt;/b&gt;   &lt;ul&gt;&lt;li&gt;&lt;span class="c2"&gt;Result&lt;/span&gt;- result="success" if the return type of method &lt;b&gt;sayhello&lt;/b&gt; is equal to "success" then it will redirect to &lt;b&gt;result.jsp&lt;/b&gt; page&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;index.jsp&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;&amp;lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"&lt;br /&gt;    pageEncoding="ISO-8859-1"%&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&amp;gt;&lt;br /&gt;&amp;lt;%@taglib prefix="s" uri="/struts-tags"%&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&amp;gt;&lt;br /&gt;&amp;lt;title&amp;gt;Struts Hello World&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;&amp;lt;h1&amp;gt;Hello World Test - STRUTS 2.0&amp;lt;/h1&amp;gt;&lt;br /&gt;&amp;lt;s:form action="HelloWorld"&amp;gt;&lt;br /&gt; &amp;lt;s:textfield label="Enter Your Name" name="bean.usrName"/&amp;gt;&lt;br /&gt; &amp;lt;s:submit label="Submit" /&amp;gt;&lt;br /&gt;&amp;lt;/s:form&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;This page is the welcome page in this example. It contains a text field that takes a name as an input and set's the value of &lt;i&gt;useName&lt;/i&gt; fiels of &lt;b&gt;Bean&lt;/b&gt; class on form submittion. &lt;br /&gt;&lt;b&gt;result.jsp&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;&amp;lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"&lt;br /&gt;    pageEncoding="ISO-8859-1"%&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&amp;gt;&lt;br /&gt;&amp;lt;%@taglib prefix="s" uri="/struts-tags"%&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&amp;gt;&lt;br /&gt;&amp;lt;title&amp;gt;Struts-Hello World&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;&amp;lt;h1&amp;gt;Hello - &amp;lt;s:property value="bean.usrName"/&amp;gt;&amp;lt;/h1&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/pre&gt;This page is loaded when the action &lt;b&gt;HelloWorld&lt;/b&gt; is performed and the method &lt;b&gt;sayHello()&lt;/b&gt; of class &lt;b&gt;Action&lt;/b&gt; returns a string &lt;b&gt;success&lt;/b&gt;. &lt;br /&gt;&lt;b&gt;Action.java&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.action;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;import com.ekiras.bean.Bean;&lt;br /&gt;import com.opensymphony.xwork2.ActionSupport;&lt;br /&gt;&lt;br /&gt;public class Action extends ActionSupport{&lt;br /&gt;&lt;br /&gt; private static final long serialVersionUID = 1L;&lt;br /&gt; private Bean bean;&lt;br /&gt; &lt;br /&gt; &lt;br /&gt; public Bean getBean() {&lt;br /&gt;  return bean;&lt;br /&gt; }&lt;br /&gt; public void setBean(Bean bean) {&lt;br /&gt;  this.bean = bean;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; public String sayHello()&lt;br /&gt; {&lt;br /&gt;  return "success";&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;This class has only one function &lt;b&gt;sayHello()&lt;/b&gt; and it just returns a string &lt;b&gt;success&lt;/b&gt;. It also contains an object of &lt;b&gt;Bean&lt;/b&gt; class and its getter setters. &lt;br /&gt;&lt;b&gt;Bean.java&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush:java"&gt;package com.ekiras.bean;&lt;br /&gt;&lt;br /&gt;public class Bean {&lt;br /&gt;&lt;br /&gt; private String usrName;&lt;br /&gt;&lt;br /&gt; public String getUsrName() {&lt;br /&gt;  return usrName;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void setUsrName(String usrName) {&lt;br /&gt;  this.usrName = usrName;&lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;This class contains &lt;br /&gt;&lt;ul&gt;&lt;li&gt;One member variables  &lt;ol type="number"&gt;&lt;li&gt;usrName- it is used to store the user name&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt; getter setters for member variable&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1232460749000692051/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/struts-setup-hello-world-example.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1232460749000692051'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1232460749000692051'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/struts-setup-hello-world-example.html' title='Struts : Setup Hello World Example'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6898246124499969991</id><published>2014-12-20T15:13:00.000+05:30</published><updated>2014-12-20T15:13:38.852+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Design Pattern'/><category scheme='http://www.blogger.com/atom/ns#' term='Singleton'/><title type='text'>How to make a Class Singleton</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;To make a class Singleton the class must satisfy the following points&lt;/li&gt;&lt;ul&gt;&lt;li&gt;No class should be able to make the object of this class.&lt;/li&gt;&lt;li&gt;Only one object of this class must me there that is used by all the other classes.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;The class must have a private constructor so that no class should be able to make object of this class.&lt;/li&gt;&lt;li&gt;Class should make a final object of the class itself and return it whenever asked for.&lt;/li&gt;&lt;li&gt;Class should have a static method that returns the object of this class.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Demo : Create a Singleton Class&lt;/h2&gt;Class : Singleton.java &lt;br /&gt;&lt;pre class="brush:java"&gt;public class Singleton{&lt;br /&gt;&lt;br /&gt;  private String name = "Singleton Object";&lt;br /&gt;  private static final Singleton object = new Singleton();&lt;br /&gt;&lt;br /&gt;  private Singleton(){&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public static Singleton getObject(){&lt;br /&gt;    return object;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public String getName(){&lt;br /&gt;    return name;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;Class : SingletonTest.java &lt;br /&gt;&lt;pre class="brush:java"&gt;class SingletonTest{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;   Singleton obj = Singleton.getObject();&lt;br /&gt;   System.out.println(obj.getName()); &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;The output of the following program will be  &lt;br /&gt;&lt;pre class="output"&gt;Singleton Object&lt;/pre&gt;&lt;br /&gt;No matter how many times you try to get the object of this class, you will always get the same object. Also you can not alter the object since it is final. This type of design pattern can be used to do stuffs like&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Loading configuration files.&lt;/li&gt;&lt;li&gt;Loading credentials&lt;/li&gt;&lt;li&gt;Provide constant services to the application.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6898246124499969991/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-make-class-singleton-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6898246124499969991'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6898246124499969991'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-make-class-singleton-in-java.html' title='How to make a Class Singleton'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4147083053360739063</id><published>2014-12-19T03:03:00.000+05:30</published><updated>2014-12-19T03:04:53.522+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to flatten a Nested List in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;See&amp;nbsp;&lt;a href="http://ekiras.blogspot.in/2014/12/how-to-create-nested-list-up-to-any-level-of-nesting.html" target="_blank"&gt;How to create a Nested List from a String input.&lt;/a&gt;&amp;nbsp;We use this class to create a nested list and then we try to flatten this list.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Program : Flatten a Nested List&amp;nbsp;&lt;/h2&gt;Here we write a Java function that will accept a nested ist upto any level of nesting and flatten this list.&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.List;&lt;br /&gt;import java.util.LinkedList;&lt;br /&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class FlattenList{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    CreateList obj = new CreateList();&lt;br /&gt;&lt;br /&gt;    // Get the nested list sample&lt;br /&gt;    List&amp;lt;Object&amp;gt; nestedList = obj.createNestedList();&lt;br /&gt;    System.out.println("-----------------------------------");&lt;br /&gt;&lt;br /&gt;    // Print the nested list&lt;br /&gt;    System.out.println("Nested List  = " + nestedList);  &lt;br /&gt;    // Print the sample nested list after flattening the list &lt;br /&gt;    System.out.println("Flatten List = " + new FlattenList().flattenList(nestedList));&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;  public List&amp;lt;Integer&amp;gt; flattenList(List&amp;lt;Object&amp;gt; nestedList){&lt;br /&gt;     List&amp;lt;Integer&amp;gt; flatList = new LinkedList&amp;lt;Integer&amp;gt;();&lt;br /&gt;     for(Object obj : nestedList){&lt;br /&gt;        if(obj instanceof List) // If the value is a List&lt;br /&gt;          for(Integer integer : flattenList((List)obj)) // traverse the returned list and add it to the list.&lt;br /&gt;            flatList.add(integer); &lt;br /&gt;        if(obj instanceof Integer) // If the value is an integer number add it to list&lt;br /&gt;          flatList.add((Integer)obj);&lt;br /&gt;     } &lt;br /&gt;    return flatList;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;The above program will give the following output &lt;br /&gt;&lt;pre class="output"&gt;Enter the Nested List&lt;br /&gt;[1,2,3,[4,5],6,[7,[8,9]],10,[11,[12,[13,[14,15],16]]]]&lt;br /&gt;-----------------------------------&lt;br /&gt;Nested List  = [1, 2, 3, [4, 5], 6, [7, [8, 9]], 10, [11, [12, [13, [14, 15], 16]]]]&lt;br /&gt;Flatten List = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;Algorithm&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;We traverse the List from start to end.&lt;/li&gt;&lt;li&gt;At each element we check if the element is a &lt;b&gt;List&lt;/b&gt; or &lt;b&gt;Integer&lt;/b&gt;.&lt;/li&gt;&lt;ol&gt;&lt;li&gt;If it is a Integer we add it to the output list.&lt;/li&gt;&lt;li&gt;If it is a list we use recursion to flatten this list.&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;div&gt;Using the above steps any level of nested list can be flatten.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4147083053360739063/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-flatten-nested-list-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4147083053360739063'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4147083053360739063'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-flatten-nested-list-in-java.html' title='How to flatten a Nested List in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7662470488071627533</id><published>2014-12-19T02:51:00.001+05:30</published><updated>2014-12-19T02:54:16.981+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to create a Nested List upto any level of nesting</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The Correct Datatype for creating a Nested List will be &lt;b&gt;List&amp;lt;Object&amp;gt;,&lt;/b&gt;&amp;nbsp;because we have to store either a integer number or a list inside the list.&lt;/li&gt;&lt;li&gt;We can not have a nested list like&amp;nbsp;&lt;b&gt;List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;&lt;/b&gt;&amp;nbsp;because it will not be able to hold the integer values. It can only hold a list.&lt;/li&gt;&lt;li&gt;The List we create can be nested to any level.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Program : Create A nested list upto any level&lt;/h2&gt;Here we suppose that we get a String input of the list that we have to create. The following program accepts the list as a String and returns after converting the list to a nested list up to any level.&lt;br /&gt;&lt;pre class="brush:java"&gt;import java.util.*;&lt;br /&gt;import java.util.LinkedList;&lt;br /&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;public class CreateList{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;    CreateList obj = new CreateList();&lt;br /&gt;    System.out.println(obj.createNestedList());&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  public List&amp;lt;Object&amp;gt; createNestedList(){&lt;br /&gt;&lt;br /&gt;     Scanner sc = new Scanner(System.in);&lt;br /&gt;     System.out.println("Enter the Nested List");&lt;br /&gt;&lt;br /&gt;     // Take input from the user&lt;br /&gt;     String inputString = sc.next(); &lt;br /&gt;&lt;br /&gt;     List&amp;lt;Object&amp;gt; nestedList = new LinkedList&amp;lt;Object&amp;gt;();&lt;br /&gt;     String num=""; // Strore the number as String&lt;br /&gt;     for(int itr=1; itr&amp;lt;inputString.length()-1;itr++){&lt;br /&gt;       char c = inputString.charAt(itr);&lt;br /&gt;       if(c == ','){ // If the char is , then add the number to list&lt;br /&gt;         if(!num.equals("")) // Check if the number is not null or ""&lt;br /&gt;            nestedList.add(Integer.parseInt(num));&lt;br /&gt;         num= "";&lt;br /&gt;       }&lt;br /&gt;       else if(c != '[' &amp;amp;&amp;amp; c != ']') // If the character is a digit add it to number&lt;br /&gt;          num += c;  &lt;br /&gt;       else if(c == '[') // If [ is encountered, add it to list&lt;br /&gt;          nestedList.add(c);   &lt;br /&gt;       else if(c == ']'){ // If ] is encountered, pop all elements till last [ and add to list.&lt;br /&gt;         if(!num.equals(""))&lt;br /&gt;            nestedList.add(Integer.parseInt(num));&lt;br /&gt;         num= "";&lt;br /&gt;         List&amp;lt;Object&amp;gt; temp = new LinkedList&amp;lt;Object&amp;gt;(nestedList.subList(nestedList.lastIndexOf('[')+1,nestedList.size()));&lt;br /&gt;         nestedList = nestedList.subList(0,nestedList.lastIndexOf('['));&lt;br /&gt;         nestedList.add(temp);&lt;br /&gt;       }&lt;br /&gt;     }&lt;br /&gt;   if(!num.equals("")) // If last digit is not added to list, add it&lt;br /&gt;       nestedList.add(Integer.parseInt(num));&lt;br /&gt;   return nestedList;&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;The above program gives the following output.&lt;br /&gt;&lt;pre class="output"&gt;Enter the Nested List&lt;br /&gt;[1,2,3,[4,5],6,[7,[8,9]],10]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [7, [8, 9]], 10]&lt;/pre&gt;If we add a print statement just before the end of the for loop we will see the following output.&lt;br /&gt;&lt;pre class="output"&gt;[]&lt;br /&gt;[1]&lt;br /&gt;[1]&lt;br /&gt;[1, 2]&lt;br /&gt;[1, 2]&lt;br /&gt;[1, 2, 3]&lt;br /&gt;[1, 2, 3, []&lt;br /&gt;[1, 2, 3, []&lt;br /&gt;[1, 2, 3, [, 4]&lt;br /&gt;[1, 2, 3, [, 4]&lt;br /&gt;[1, 2, 3, [4, 5]]&lt;br /&gt;[1, 2, 3, [4, 5]]&lt;br /&gt;[1, 2, 3, [4, 5]]&lt;br /&gt;[1, 2, 3, [4, 5], 6]&lt;br /&gt;[1, 2, 3, [4, 5], 6, []&lt;br /&gt;[1, 2, 3, [4, 5], 6, []&lt;br /&gt;[1, 2, 3, [4, 5], 6, [, 7]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [, 7, []&lt;br /&gt;[1, 2, 3, [4, 5], 6, [, 7, []&lt;br /&gt;[1, 2, 3, [4, 5], 6, [, 7, [, 8]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [, 7, [, 8]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [, 7, [8, 9]]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [7, [8, 9]]]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [7, [8, 9]]]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [7, [8, 9]]]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [7, [8, 9]]]&lt;br /&gt;[1, 2, 3, [4, 5], 6, [7, [8, 9]], 10]&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;Algorithm Followed&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Step 1 : Iterate over the String , you can encounter digit, comma, or brackets &lt;b&gt;[&lt;/b&gt; and &lt;b&gt;]&lt;/b&gt;.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;If a digit is encountered add it to String number, this is used to store digits that are greater than 10.&lt;/li&gt;&lt;li&gt;If &amp;nbsp;&lt;b&gt;,&lt;/b&gt;&amp;nbsp;is encountered add the number to list and reset value of number.&lt;/li&gt;&lt;li&gt;If &lt;b&gt;[&lt;/b&gt;&amp;nbsp;is encountered add it to the list.&lt;/li&gt;&lt;li&gt;if &lt;b&gt;]&lt;/b&gt;&amp;nbsp;is encountered&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Add number to list if it is not null.&lt;/li&gt;&lt;li&gt;Pop all elements till &lt;b&gt;[&lt;/b&gt;&amp;nbsp;is encountered and add it to a temp list&lt;/li&gt;&lt;li&gt;Add temp list to the list.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7662470488071627533/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-create-nested-list-up-to-any-level-of-nesting.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7662470488071627533'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7662470488071627533'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-create-nested-list-up-to-any-level-of-nesting.html' title='How to create a Nested List upto any level of nesting'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7118063080589689128</id><published>2014-12-17T01:08:00.001+05:30</published><updated>2015-11-18T01:43:38.563+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='CAS'/><category scheme='http://www.blogger.com/atom/ns#' term='REST'/><category scheme='http://www.blogger.com/atom/ns#' term='Authentication'/><title type='text'>Test CAS Rest API from Java Code</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Make sure that your CAS Server is up and running. &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-configure-cas-rest-api-and-test-reponse.html" target="_blank"&gt;How to set up CAS Rest api with JDBC Authentication.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;You have created a database and have dummy data in it.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Program : Test CAS Rest Api from a Java Code&lt;/h2&gt;You can use the following piece of code to test the CAS Rest API.  &lt;br /&gt;&lt;br /&gt;You need to follow the following points for Authentication a user on CAS&lt;br /&gt;&lt;ul&gt;&lt;li&gt;You need to make a GET or POST call depending on your CAS server setup.&lt;/li&gt;&lt;li&gt;If the Username and Password are correct then you will get a TGT (Ticket Granting Token)&lt;/li&gt;&lt;li"&gt;Now we will make a call to the service url of our application to get the Service Ticket.&lt;/li&gt;&lt;li&gt;On success you will get a Service Ticket&lt;/li&gt;&lt;li&gt;If you have service the Service Token, &amp;nbsp;then you have successfully authenticated the user.&lt;/li&gt;&lt;li&gt;Save this service ticket in a cookie or session, since a service ticket can be used only once&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/gitekiras/059ecf02b8f64a913658.js"&gt;&lt;/script&gt;&lt;br /&gt;You will get the following type of response if everything is working fine.  &lt;br /&gt;&lt;pre class="output"&gt;string s = username=admin%40gmail.com&amp;amp;password=igdefault&lt;br /&gt;201&lt;br /&gt;https://ekansh:8443/cas/v1/tickets/TGT-3-eeSgMb35iv3TkqYzqekyhjZcGyNwKKq2s94reeoRINtdKJBvjx-ekansh&lt;br /&gt;Tgt is : TGT-3-eeSgMb35iv3TkqYzqekyhjZcGyNwKKq2s94reeoRINtdKJBvjx-ekansh&lt;br /&gt;Service url is : service=http%3A%2F%2Fekansh%3A8090%2F&lt;br /&gt;https://ekansh:8443/cas/v1/tickets/TGT-3-eeSgMb35iv3TkqYzqekyhjZcGyNwKKq2s94reeoRINtdKJBvjx-ekansh&lt;br /&gt;Response code is:  200&lt;br /&gt;200&lt;br /&gt;ST-3-Uagfse2pVB7hR5GL09WB-ekansh&lt;br /&gt;&lt;/pre&gt;If the authentication fails at the server then you will get a response like the following &lt;br /&gt;&lt;pre class="output"&gt;string s = username=ekansh%40ekiras.com&amp;amp;password=pwd&lt;br /&gt;400&lt;br /&gt;&lt;/pre&gt;TGT - It is the token by the ticket granting token.&lt;br /&gt;ST-3-Uagfse2pVB7hR5GL09WB-ekansh -  It is the service token. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7118063080589689128/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/test-cas-rest-api-from-java-code.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7118063080589689128'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7118063080589689128'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/test-cas-rest-api-from-java-code.html' title='Test CAS Rest API from Java Code'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2739451363723067369</id><published>2014-12-15T00:37:00.000+05:30</published><updated>2014-12-15T00:37:57.516+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Finding number of factors of a number</title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;   If a number x divides another number y completely then x is a divisor of y. If x is a prime number then     x is called the prime factor of number x.    &lt;br&gt;&lt;br&gt;&lt;b&gt;e.g&lt;/b&gt; 1,2,3,6 are the factors of 6 and 2,3 are the prime factors of 6.     &lt;/p&gt;   &lt;div class="hl-note"&gt;   &lt;p&gt;If any composite number N which can be expressed as N=&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$a^x\cdot b^y\cdot c^z...$&lt;/span&gt;&lt;var mathquill-command-id="2"&gt;a&lt;/var&gt;&lt;sup class="non-leaf" mathquill-command-id="4" mathquill-block-id="6"&gt;&lt;var mathquill-command-id="5"&gt;x&lt;/var&gt;&lt;/sup&gt;&lt;span class="binary-operator" mathquill-command-id="8"&gt;·&lt;/span&gt;&lt;var mathquill-command-id="10"&gt;b&lt;/var&gt;&lt;sup class="non-leaf" mathquill-command-id="12" mathquill-block-id="14"&gt;&lt;var mathquill-command-id="13"&gt;y&lt;/var&gt;&lt;/sup&gt;&lt;span class="binary-operator" mathquill-command-id="16"&gt;·&lt;/span&gt;&lt;var mathquill-command-id="18"&gt;c&lt;/var&gt;&lt;sup class="non-leaf" mathquill-command-id="20" mathquill-block-id="22"&gt;&lt;var mathquill-command-id="21"&gt;z&lt;/var&gt;&lt;/sup&gt;&lt;span mathquill-command-id="24"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="26"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="28"&gt;.&lt;/span&gt;&lt;/span&gt;   , where a,b,c are the prime numbers and x,y,z are the powers of a,b,c respectively and so on. then     &lt;b&gt;the number of factors of N =(x+1)×(y+1)×(z+1)...&lt;/b&gt;   &lt;/p&gt;   &lt;/div&gt;        &lt;p&gt;&lt;b&gt;e.g&lt;/b&gt; Find the number of factors of 24   &lt;br&gt;&lt;br&gt;24=2&lt;sup&gt;2&lt;/sup&gt;×3&lt;sup&gt;1&lt;/sup&gt;  &lt;br&gt;&lt;br&gt;∴ number of factors of 24 = (3+1)(1+1) = 8   &lt;/p&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; Find the total number of factors of 1024 except 1 and 1024 itself.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;8&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;9&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;10&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;11&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            1024= 2&lt;sup&gt;10&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ total number of factors except 1 and 1024 = (10+1) - 2 = 9                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; Find number of factors of 1001&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;8&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;3&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;16&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;24&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            1001 = 7&lt;sup&gt;1&lt;/sup&gt;×11&lt;sup&gt;1&lt;/sup&gt;×13&lt;sup&gt;1&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ total number of factors = (1+1)(1+1)(1+1) = 2×2×2 = 8                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; Find the total number of factors of 144&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;15&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;16&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;18&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;25&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            144= 2&lt;sup&gt;4&lt;/sup&gt; × 3&lt;sup&gt;2&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ Number of factors of 144 = (4+1)(2+1) = 15                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; Find the number of factors of 970299&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;64&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;32&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;24&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;28&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            970299 = 3&lt;sup&gt;6&lt;/sup&gt;×11&lt;sup&gt;3&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ total number of factors = (6+1)(3+1) = 7×4 = 28                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; Find the total number of factors of 56 × 324&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;40&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;50&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;60&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;70&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            56 × 324 = (2&lt;sup&gt;3&lt;/sup&gt;×7&lt;sup&gt;1&lt;/sup&gt;) × (2&lt;sup&gt;2&lt;/sup&gt;×3&lt;sup&gt;4&lt;/sup&gt;)    &lt;br&gt;&lt;br&gt;56 × 324 = 2&lt;sup&gt;5&lt;/sup&gt;×3&lt;sup&gt;4&lt;/sup&gt;×7&lt;sup&gt;1&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ total number of factors = (5+1)(4+1)(1+1) = 6 × 5 × 2= 60                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2739451363723067369/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/finding-number-of-factors-of-number.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2739451363723067369'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2739451363723067369'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/finding-number-of-factors-of-number.html' title='Finding number of factors of a number'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3519977865814176813</id><published>2014-12-10T16:56:00.000+05:30</published><updated>2014-12-10T16:56:22.394+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='CAS'/><category scheme='http://www.blogger.com/atom/ns#' term='Authentication'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><category scheme='http://www.blogger.com/atom/ns#' term='Single Sign On'/><title type='text'>JASIG CAS JDBC Grails application setup</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;this is body. &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Heading&lt;/b&gt;&lt;/div&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/step-by-step-jasig-cas-jdbc-grails-application-setup.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3519977865814176813'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3519977865814176813'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5363923104781754517</id><published>2014-12-10T14:22:00.002+05:30</published><updated>2014-12-10T14:31:24.488+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='CAS'/><category scheme='http://www.blogger.com/atom/ns#' term='Authentication'/><title type='text'>CAS Rest API Integration and Testing</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Please refer to blog &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-setup-and-configure-cas-with-database.html" target="_blank"&gt;How to set up CAS server with database&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Now we are going to use the same authentication process through rest api and test it.&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;Step 1: Adding dependency in pom.xml&lt;/h2&gt;First thing that we need to do here is to add the &lt;b&gt;CAS Rest Api&lt;/b&gt;&amp;nbsp;dependencies to pom.xml so that we can get the related jars in the class path.&lt;br /&gt;&lt;pre class="brush:xml"&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;     &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;     &amp;lt;artifactId&amp;gt;cas-server-integration-restlet&amp;lt;/artifactId&amp;gt;&lt;br /&gt;     &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;     &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;&lt;br /&gt; &amp;lt;/dependency&amp;gt;&lt;/pre&gt;Note : Here we are using CAS v4.0.0&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Step 2: Mapping Servlet in web.xml&lt;/h2&gt;Now, we need to map the &lt;b&gt;restlet servlet&lt;/b&gt; in the web.xml. For this copy the previously generated web.xml from the war file and add the following lines in the web.xml file. This will register the servlet and the url pattern with which this servlet can be accessed. Here we are using &lt;b&gt;v1/*&lt;/b&gt;&amp;nbsp;as the url mapping, you can customize it according to your use case.&lt;br /&gt;&lt;pre class="brush:xml"&gt;  &amp;lt;servlet&amp;gt;&lt;br /&gt;    &amp;lt;servlet-name&amp;gt;restlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;    &amp;lt;servlet-class&amp;gt;org.restlet.ext.spring.RestletFrameworkServlet&amp;lt;/servlet-class&amp;gt;&lt;br /&gt;    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;&lt;br /&gt;  &amp;lt;/servlet&amp;gt;&lt;br /&gt; &lt;br /&gt;  &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;    &amp;lt;servlet-name&amp;gt;restlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;    &amp;lt;url-pattern&amp;gt;/v1/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/servlet-mapping&amp;gt;&lt;/pre&gt;&lt;h2 style="text-align: left;"&gt;Step 3 : Create war file&lt;/h2&gt;Create the war file using maven command&lt;br /&gt;&lt;pre class="brush:xml"&gt;mvn clean package&lt;/pre&gt;This will create a war file, &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-deploy-war-on-tomcat.html" target="_blank"&gt;upload this war file on servlet container&lt;/a&gt;, tomcat for our case. Restart the tomcat server and launch the application.&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Step 4 : Test our CAS rest application&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;When you launch the application you will see the cas login screen.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Enter the username and password we created in the database in &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-setup-and-configure-cas-with-database.html" target="_blank"&gt;this blog&lt;/a&gt;&amp;nbsp;(username = ekansh@ekiras.com, password = password).&lt;/li&gt;&lt;li&gt;You will see the login success screen.&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-K9V7uyIx1bw/VIXFLyEoFKI/AAAAAAAAAE8/-ZXu6AfB3PA/s1600/cas2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-K9V7uyIx1bw/VIXFLyEoFKI/AAAAAAAAAE8/-ZXu6AfB3PA/s1600/cas2.png" height="358" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;CAS - &amp;nbsp;Login success screen&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/li&gt;&lt;li&gt;Now, enter the url &lt;b&gt;/cas/v1/tickets.&lt;/b&gt;&amp;nbsp;You should see the following page.&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-RadODvQqDxo/VIgFelT397I/AAAAAAAAAG4/7wpLc1iSHNA/s1600/cas-rest-v1-tickets.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-RadODvQqDxo/VIgFelT397I/AAAAAAAAAG4/7wpLc1iSHNA/s1600/cas-rest-v1-tickets.png" height="358" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;CAS - Rest api url = cas/vi/tickets/&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;If you can see this page you are done configuring the &lt;b&gt;CAS Rest API.&lt;/b&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;You are seeing this page because this rest api, expects a &lt;b&gt;POST&lt;/b&gt;&amp;nbsp;method call and by hitting the url from browser we are giving a &lt;b&gt;GET&lt;/b&gt;&amp;nbsp;request.&lt;/div&gt;&lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/CAS-Rest-API-Configuration.git" target="_blank"&gt;Download from Git Repository.&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5363923104781754517/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-configure-cas-rest-api-and-test-reponse.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5363923104781754517'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5363923104781754517'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-configure-cas-rest-api-and-test-reponse.html' title='CAS Rest API Integration and Testing'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-K9V7uyIx1bw/VIXFLyEoFKI/AAAAAAAAAE8/-ZXu6AfB3PA/s72-c/cas2.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1276278210951267152</id><published>2014-12-08T23:05:00.002+05:30</published><updated>2014-12-10T14:32:16.729+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='CAS'/><category scheme='http://www.blogger.com/atom/ns#' term='Authentication'/><title type='text'>How to setup &amp; configure CAS with Database</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You can user MYSQL, Oracle or PostgreSQL connectors as the database.&lt;/li&gt;&lt;li&gt;Make sure you have created a SSL certificate to run the CAS server on browser.&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;Step 1: Adding Dependencies in pom.xml&lt;/h2&gt;Add the following dependencies to the pom.xml that we created in &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-setup-and-configure-cas-central-authentication-service.html" target="_blank"&gt;this tutorial.&lt;/a&gt;&amp;nbsp;These are the dependencies that are required to authenticate the user using the database.&lt;br /&gt;&lt;pre class="brush : xml"&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;cas-server-support-generic&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;            &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;cas-server-support-jdbc&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;     &amp;lt;/dependency&amp;gt;&lt;br /&gt;     &amp;lt;dependency&amp;gt;&lt;br /&gt;         &amp;lt;groupId&amp;gt;c3p0&amp;lt;/groupId&amp;gt;&lt;br /&gt;         &amp;lt;artifactId&amp;gt;c3p0&amp;lt;/artifactId&amp;gt;&lt;br /&gt;           &amp;lt;version&amp;gt;0.9.1.2&amp;lt;/version&amp;gt;&lt;br /&gt;     &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;     &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;     &amp;lt;artifactId&amp;gt;cas-server-integration-restlet&amp;lt;/artifactId&amp;gt;&lt;br /&gt;     &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;     &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;&lt;br /&gt; &amp;lt;/dependency&amp;gt;&lt;br /&gt;&lt;/pre&gt;So now the pom.xml will look like the following&lt;br /&gt;&lt;pre class="brush : xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"&lt;br /&gt;         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd "&amp;gt;&lt;br /&gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;ekiras&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br /&gt; &lt;br /&gt;    &amp;lt;build&amp;gt;&lt;br /&gt;        &amp;lt;plugins&amp;gt;&lt;br /&gt;            &amp;lt;plugin&amp;gt;&lt;br /&gt;                 &amp;lt;artifactId&amp;gt;maven-war-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                             &amp;lt;configuration&amp;gt;&lt;br /&gt;                                 &amp;lt;warName&amp;gt;cas&amp;lt;/warName&amp;gt;&lt;br /&gt;                             &amp;lt;/configuration&amp;gt;&lt;br /&gt;                        &amp;lt;/plugin&amp;gt;&lt;br /&gt;        &amp;lt;/plugins&amp;gt;&lt;br /&gt;    &amp;lt;/build&amp;gt;&lt;br /&gt; &lt;br /&gt;    &amp;lt;dependencies&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;cas-server-webapp&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;            &amp;lt;type&amp;gt;war&amp;lt;/type&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;cas-server-support-generic&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;            &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;cas-server-support-jdbc&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;     &amp;lt;/dependency&amp;gt;&lt;br /&gt;     &amp;lt;dependency&amp;gt;&lt;br /&gt;         &amp;lt;groupId&amp;gt;c3p0&amp;lt;/groupId&amp;gt;&lt;br /&gt;         &amp;lt;artifactId&amp;gt;c3p0&amp;lt;/artifactId&amp;gt;&lt;br /&gt;           &amp;lt;version&amp;gt;0.9.1.2&amp;lt;/version&amp;gt;&lt;br /&gt;     &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;     &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;     &amp;lt;artifactId&amp;gt;cas-server-integration-restlet&amp;lt;/artifactId&amp;gt;&lt;br /&gt;     &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;     &amp;lt;type&amp;gt;jar&amp;lt;/type&amp;gt;&lt;br /&gt; &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;5.1.34&amp;lt;/version&amp;gt;&lt;br /&gt; &amp;lt;/dependency&amp;gt;&lt;br /&gt;    &amp;lt;/dependencies&amp;gt;&lt;br /&gt; &lt;br /&gt;    &amp;lt;properties&amp;gt;&lt;br /&gt;        &amp;lt;cas.version&amp;gt;4.0.0&amp;lt;/cas.version&amp;gt;&lt;br /&gt;    &amp;lt;/properties&amp;gt;&lt;br /&gt; &lt;br /&gt;        &amp;lt;repositories&amp;gt;&lt;br /&gt;             &amp;lt;repository&amp;gt;&lt;br /&gt;                  &amp;lt;id&amp;gt;ja-sig&amp;lt;/id&amp;gt;&lt;br /&gt;                  &amp;lt;url&amp;gt;http://oss.sonatype.org/content/repositories/releases/ &amp;lt;/url&amp;gt;&lt;br /&gt;             &amp;lt;/repository&amp;gt;&lt;br /&gt;        &amp;lt;/repositories&amp;gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Step 2: Configuring the deployerConfigContext.xml&lt;/b&gt;&lt;/div&gt;Create folder &lt;b&gt;/src/main/webapp/WEB-INF&amp;nbsp;&lt;/b&gt;in the directory &lt;b&gt;PROJECT.&lt;/b&gt;&amp;nbsp;Now create a file named &lt;b&gt;deployerConfigContext.xml&lt;/b&gt;&amp;nbsp;in this folder location. and add the following configurations.&lt;br /&gt;&lt;pre class="brush : xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;!--&lt;br /&gt;&lt;br /&gt;    Licensed to Jasig under one or more contributor license&lt;br /&gt;    agreements. See the NOTICE file distributed with this work&lt;br /&gt;    for additional information regarding copyright ownership.&lt;br /&gt;    Jasig licenses this file to you under the Apache License,&lt;br /&gt;    Version 2.0 (the "License"); you may not use this file&lt;br /&gt;    except in compliance with the License.  You may obtain a&lt;br /&gt;    copy of the License at the following location:&lt;br /&gt;&lt;br /&gt;      http://www.apache.org/licenses/LICENSE-2.0&lt;br /&gt;&lt;br /&gt;    Unless required by applicable law or agreed to in writing,&lt;br /&gt;    software distributed under the License is distributed on an&lt;br /&gt;    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY&lt;br /&gt;    KIND, either express or implied.  See the License for the&lt;br /&gt;    specific language governing permissions and limitations&lt;br /&gt;    under the License.&lt;br /&gt;&lt;br /&gt;--&amp;gt;&lt;br /&gt;&amp;lt;!--&lt;br /&gt;| deployerConfigContext.xml centralizes into one file some of the declarative configuration that&lt;br /&gt;| all CAS deployers will need to modify.&lt;br /&gt;|&lt;br /&gt;| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  &lt;br /&gt;| The beans declared in this file are instantiated at context initialization time by the Spring &lt;br /&gt;| ContextLoaderListener declared in web.xml.  It finds this file because this&lt;br /&gt;| file is among those declared in the context parameter "contextConfigLocation".&lt;br /&gt;|&lt;br /&gt;| By far the most common change you will need to make in this file is to change the last bean&lt;br /&gt;| declaration to replace the default authentication handler with&lt;br /&gt;| one implementing your approach for authenticating usernames and passwords.&lt;br /&gt;+--&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;beans xmlns="http://www.springframework.org/schema/beans"&lt;br /&gt;       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;       xmlns:p="http://www.springframework.org/schema/p"&lt;br /&gt;       xmlns:c="http://www.springframework.org/schema/c"&lt;br /&gt;       xmlns:tx="http://www.springframework.org/schema/tx"&lt;br /&gt;       xmlns:util="http://www.springframework.org/schema/util"&lt;br /&gt;       xmlns:sec="http://www.springframework.org/schema/security"&lt;br /&gt;       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&lt;br /&gt;       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd&lt;br /&gt;       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd&lt;br /&gt;       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!--&lt;br /&gt;       | The authentication manager defines security policy for authentication by specifying at a minimum&lt;br /&gt;       | the authentication handlers that will be used to authenticate credential. While the AuthenticationManager&lt;br /&gt;       | interface supports plugging in another implementation, the default PolicyBasedAuthenticationManager should&lt;br /&gt;       | be sufficient in most cases.&lt;br /&gt;       +--&amp;gt;&lt;br /&gt;    &amp;lt;bean id="authenticationManager" class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager"&amp;gt;&lt;br /&gt;        &amp;lt;constructor-arg&amp;gt;&lt;br /&gt;            &amp;lt;map&amp;gt;&lt;br /&gt;                &amp;lt;!--&lt;br /&gt;                   | IMPORTANT&lt;br /&gt;                   | Every handler requires a unique name.&lt;br /&gt;                   | If more than one instance of the same handler class is configured, you must explicitly&lt;br /&gt;                   | set its name to something other than its default name (typically the simple class name).&lt;br /&gt;                   --&amp;gt;&lt;br /&gt;                &amp;lt;entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" /&amp;gt;&lt;br /&gt;                &amp;lt;!--entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" /--&amp;gt;&lt;br /&gt;  &amp;lt;entry key-ref="SearchModeSearchDatabaseAuthenticationHandler" value-ref="proxyPrincipalResolver" /&amp;gt;&lt;br /&gt;            &amp;lt;/map&amp;gt;&lt;br /&gt;        &amp;lt;/constructor-arg&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;!-- Uncomment the metadata populator to allow clearpass to capture and cache the password&lt;br /&gt;             This switch effectively will turn on clearpass.&lt;br /&gt;        &amp;lt;property name="authenticationMetaDataPopulators"&amp;gt;&lt;br /&gt;           &amp;lt;util:list&amp;gt;&lt;br /&gt;              &amp;lt;bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator"&lt;br /&gt;                    c:credentialCache-ref="encryptedMap" /&amp;gt;&lt;br /&gt;           &amp;lt;/util:list&amp;gt;&lt;br /&gt;        &amp;lt;/property&amp;gt;&lt;br /&gt;        --&amp;gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;!--&lt;br /&gt;           | Defines the security policy around authentication. Some alternative policies that ship with CAS:&lt;br /&gt;           |&lt;br /&gt;           | * NotPreventedAuthenticationPolicy - all credential must either pass or fail authentication&lt;br /&gt;           | * AllAuthenticationPolicy - all presented credential must be authenticated successfully&lt;br /&gt;           | * RequiredHandlerAuthenticationPolicy - specifies a handler that must authenticate its credential to pass&lt;br /&gt;           --&amp;gt;&lt;br /&gt;        &amp;lt;property name="authenticationPolicy"&amp;gt;&lt;br /&gt;            &amp;lt;bean class="org.jasig.cas.authentication.AnyAuthenticationPolicy" /&amp;gt;&lt;br /&gt;        &amp;lt;/property&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- Required for proxy ticket mechanism. --&amp;gt;&lt;br /&gt;    &amp;lt;bean id="proxyAuthenticationHandler"&lt;br /&gt;          class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"&lt;br /&gt;          p:httpClient-ref="httpClient" /&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!--&lt;br /&gt;       | TODO: Replace this component with one suitable for your enviroment.&lt;br /&gt;       |&lt;br /&gt;       | This component provides authentication for the kind of credential used in your environment. In most cases&lt;br /&gt;       | credential is a username/password pair that lives in a system of record like an LDAP directory.&lt;br /&gt;       | The most common authentication handler beans:&lt;br /&gt;       |&lt;br /&gt;       | * org.jasig.cas.authentication.LdapAuthenticationHandler&lt;br /&gt;       | * org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler&lt;br /&gt;       | * org.jasig.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandler&lt;br /&gt;       | * org.jasig.cas.support.spnego.authentication.handler.support.JCIFSSpnegoAuthenticationHandler&lt;br /&gt;       --&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;!-- Authentication method start--&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;bean id="dataSource"&lt;br /&gt;  class="com.mchange.v2.c3p0.ComboPooledDataSource"&lt;br /&gt;  p:driverClass="com.mysql.jdbc.Driver"&lt;br /&gt;  p:jdbcUrl="jdbc:mysql://localhost:3306/cas"&lt;br /&gt;  p:user="username"&lt;br /&gt;  p:password="password" /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;!-- Authentication method end--&amp;gt;&lt;br /&gt;&amp;lt;bean id="passwordEncoder"&lt;br /&gt;      class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder"&lt;br /&gt;      c:encodingAlgorithm="MD5"&lt;br /&gt;      p:characterEncoding="UTF-8" /&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;bean id="SearchModeSearchDatabaseAuthenticationHandler"&lt;br /&gt;      class="org.jasig.cas.adaptors.jdbc.SearchModeSearchDatabaseAuthenticationHandler"&lt;br /&gt;      p:dataSource-ref="dataSource"&lt;br /&gt;      p:passwordEncoder-ref="passwordEncoder"&lt;br /&gt;      p:tableUsers="user"&lt;br /&gt;      p:fieldUser="email"&lt;br /&gt;      p:fieldPassword="password" /&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- Required for proxy ticket mechanism --&amp;gt;&lt;br /&gt;    &amp;lt;bean id="proxyPrincipalResolver"&lt;br /&gt;          class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" /&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!--&lt;br /&gt;       | Resolves a principal from a credential using an attribute repository that is configured to resolve&lt;br /&gt;       | against a deployer-specific store (e.g. LDAP).&lt;br /&gt;       --&amp;gt;&lt;br /&gt;    &amp;lt;bean id="primaryPrincipalResolver"&lt;br /&gt;          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" &amp;gt;&lt;br /&gt;        &amp;lt;property name="attributeRepository" ref="attributeRepository" /&amp;gt;&lt;br /&gt;    &amp;lt;/bean&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!--&lt;br /&gt;    Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation&lt;br /&gt;    may go against a database or LDAP server.  The id should remain "attributeRepository" though.&lt;br /&gt;    +--&amp;gt;&lt;br /&gt;    &amp;lt;bean id="attributeRepository" class="org.jasig.services.persondir.support.StubPersonAttributeDao"&lt;br /&gt;            p:backingMap-ref="attrRepoBackingMap" /&amp;gt;&lt;br /&gt;    &lt;br /&gt;    &amp;lt;util:map id="attrRepoBackingMap"&amp;gt;&lt;br /&gt;        &amp;lt;entry key="uid" value="uid" /&amp;gt;&lt;br /&gt;        &amp;lt;entry key="eduPersonAffiliation" value="eduPersonAffiliation" /&amp;gt; &lt;br /&gt;        &amp;lt;entry key="groupMembership" value="groupMembership" /&amp;gt;&lt;br /&gt;    &amp;lt;/util:map&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;!-- &lt;br /&gt;    Sample, in-memory data store for the ServiceRegistry. A real implementation&lt;br /&gt;    would probably want to replace this with the JPA-backed ServiceRegistry DAO&lt;br /&gt;    The name of this bean should remain "serviceRegistryDao".&lt;br /&gt;    +--&amp;gt;&lt;br /&gt;    &amp;lt;bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"&lt;br /&gt;            p:registeredServices-ref="registeredServicesList" /&amp;gt;&lt;br /&gt;&lt;br /&gt;    &amp;lt;util:list id="registeredServicesList"&amp;gt;&lt;br /&gt;            &amp;lt;bean class="org.jasig.cas.services.RegexRegisteredService"&lt;br /&gt;              p:id="0" p:name="HTTP and IMAP" &lt;br /&gt;              p:description="Allows HTTP(S) and IMAP(S) protocols"&lt;br /&gt;              p:serviceId="^(https?|imaps?)://.*" &lt;br /&gt;              p:evaluationOrder="10000001" &lt;br /&gt;              p:enabled="true"&lt;br /&gt;              p:allowedToProxy="true"&lt;br /&gt;              p:ssoEnabled="true"&lt;br /&gt;            /&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;        &amp;lt;!--&lt;br /&gt;        Use the following definition instead of the above to further restrict access&lt;br /&gt;        to services within your domain (including sub domains).&lt;br /&gt;        Note that example.com must be replaced with the domain you wish to permit.&lt;br /&gt;        This example also demonstrates the configuration of an attribute filter&lt;br /&gt;        that only allows for attributes whose length is 3.&lt;br /&gt;        --&amp;gt;&lt;br /&gt;        &amp;lt;!--&lt;br /&gt;        &amp;lt;bean class="org.jasig.cas.services.RegexRegisteredService"&amp;gt;&lt;br /&gt;            &amp;lt;property name="id" value="1" /&amp;gt;&lt;br /&gt;            &amp;lt;property name="name" value="HTTP and IMAP on example.com" /&amp;gt;&lt;br /&gt;            &amp;lt;property name="description" value="Allows HTTP(S) and IMAP(S) protocols on example.com" /&amp;gt;&lt;br /&gt;            &amp;lt;property name="serviceId" value="^(https?|imaps?)://([A-Za-z0-9_-]+\.)*example\.com/.*" /&amp;gt;&lt;br /&gt;            &amp;lt;property name="evaluationOrder" value="0" /&amp;gt;&lt;br /&gt;            &amp;lt;property name="attributeFilter"&amp;gt;&lt;br /&gt;              &amp;lt;bean class="org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter" c:regex="^\w{3}$" /&amp;gt; &lt;br /&gt;            &amp;lt;/property&amp;gt;&lt;br /&gt;        &amp;lt;/bean&amp;gt;&lt;br /&gt;        --&amp;gt;&lt;br /&gt;    &amp;lt;/util:list&amp;gt;&lt;br /&gt;    &lt;br /&gt;    &amp;lt;bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" /&amp;gt;&lt;br /&gt;    &lt;br /&gt;    &amp;lt;bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor" p:monitors-ref="monitorsList" /&amp;gt;&lt;br /&gt;  &lt;br /&gt;    &amp;lt;util:list id="monitorsList"&amp;gt;&lt;br /&gt;      &amp;lt;bean class="org.jasig.cas.monitor.MemoryMonitor" p:freeMemoryWarnThreshold="10" /&amp;gt;&lt;br /&gt;      &amp;lt;!--&lt;br /&gt;        NOTE&lt;br /&gt;        The following ticket registries support SessionMonitor:&lt;br /&gt;          * DefaultTicketRegistry&lt;br /&gt;          * JpaTicketRegistry&lt;br /&gt;        Remove this monitor if you use an unsupported registry.&lt;br /&gt;      --&amp;gt;&lt;br /&gt;      &amp;lt;bean class="org.jasig.cas.monitor.SessionMonitor"&lt;br /&gt;          p:ticketRegistry-ref="ticketRegistry"&lt;br /&gt;          p:serviceTicketCountWarnThreshold="5000"&lt;br /&gt;          p:sessionCountWarnThreshold="100000" /&amp;gt;&lt;br /&gt;    &amp;lt;/util:list&amp;gt;&lt;br /&gt;&amp;lt;/beans&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Points to be noted here&lt;/b&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;We have created a&amp;nbsp;&lt;b&gt;datasource&lt;/b&gt;&amp;nbsp;bean&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;bean id="dataSource"&lt;br /&gt;  class="com.mchange.v2.c3p0.ComboPooledDataSource"&lt;br /&gt;  p:driverClass="com.mysql.jdbc.Driver"&lt;br /&gt;  p:jdbcUrl="jdbc:mysql://localhost:3306/cas"&lt;br /&gt;  p:user="username"&lt;br /&gt;  p:password="password" /&amp;gt;&lt;/pre&gt;Here we can are using MYSQL database for authentication. This bean takes inputs like driver class, url, database username and password. You can add your database username password here.&lt;/li&gt;&lt;li&gt;We have created a password encoder here via bean that encodes the password using MD5 encrption algorithm.&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;bean id="passwordEncoder"&lt;br /&gt;      class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder"&lt;br /&gt;      c:encodingAlgorithm="MD5"&lt;br /&gt;      p:characterEncoding="UTF-8" /&amp;gt;&lt;/pre&gt;You can also use other password encoding algorithms here like&amp;nbsp;&lt;b&gt;SHA1.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;We have created&amp;nbsp;&lt;b&gt;SearchModeSearchDatabaseAuthenticationHandler&lt;/b&gt;&amp;nbsp;bean, this will actually lookup the database and authenticate the user if found.&lt;br /&gt;&lt;pre class="brush:xml"&gt;&amp;lt;bean id="SearchModeSearchDatabaseAuthenticationHandler"&lt;br /&gt;      class="org.jasig.cas.adaptors.jdbc.SearchModeSearchDatabaseAuthenticationHandler"&lt;br /&gt;      p:dataSource-ref="dataSource"&lt;br /&gt;      p:passwordEncoder-ref="passwordEncoder"&lt;br /&gt;      p:tableUsers="user"&lt;br /&gt;      p:fieldUser="email"&lt;br /&gt;      p:fieldPassword="password" /&amp;gt;&lt;/pre&gt;This is the code that tells the CAS server to look for user in database via datasource that we have declared in in point 1 above. This also includes the password encoder to encode the password before checking in the database. TableUsers is the table it will look, fieldUser is the username that will be checked and fieldPassword is the password that will be looked for. Here we are making user login with email and password.&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;Step 3: Create Dummy Table with values..&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush :sql"&gt;create table user(&lt;br /&gt;id int  primary key auto_increment,&lt;br /&gt;email varchar(255),&lt;br /&gt;password varchar(255));&lt;/pre&gt;This will create the table as&lt;br /&gt;+-------------+----------------+-------+------+-----------+--------------------+&lt;br /&gt;| Field &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| Type &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| Null &amp;nbsp;| Key | Default | Extra &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;br /&gt;+-------------+----------------+-------+------+-----------+--------------------+&lt;br /&gt;| id &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | int(11) &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| NO &amp;nbsp; &amp;nbsp;| PRI | NULL &amp;nbsp; &amp;nbsp;| auto_increment |&lt;br /&gt;| email &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | varchar(255) | YES | &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| NULL &amp;nbsp; &amp;nbsp;| &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; |&lt;br /&gt;| password &amp;nbsp;| varchar(255) | YES &amp;nbsp;| &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;| NULL &amp;nbsp; &amp;nbsp;| &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;|&lt;br /&gt;+-------------+----------------+--------+------+-----------+-------------------+&lt;br /&gt;Now lets insert dummy values  &lt;br /&gt;&lt;pre class="brush : sql"&gt;insert into user(email,password) values('ekansh@ekiras.com','5f4dcc3b5aa765d61d8327deb882cf99')&lt;/pre&gt;Here '5f4dcc3b5aa765d61d8327deb882cf99' is the MD5 conversion of the string password. &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Step 4: Testing our CAS server war.&lt;/b&gt;&lt;/div&gt;Lets create the war using the following command. &lt;br /&gt;&lt;pre class="brush :xml"&gt;mvn clean package&lt;/pre&gt;Now we go and deploy the war as instructed &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-deploy-war-on-tomcat.html" target="_blank"&gt;here&lt;/a&gt;. We will get the CAS login screen and we can enter the dummy email and password we have in database to login (email='ekansh@ekiras.com', password = 'password'). This will successfully log the user into the CAS server. &lt;br /&gt;&lt;div class="download"&gt;&lt;a href="https://github.com/gitekiras/CAS-Mysql-Jdbc-Configuration.git" target="_blank"&gt;Download code from the Git Repository.&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1276278210951267152/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-setup-and-configure-cas-with-database.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1276278210951267152'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1276278210951267152'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-setup-and-configure-cas-with-database.html' title='How to setup &amp; configure CAS with Database'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6697821997103495958</id><published>2014-12-08T21:08:00.000+05:30</published><updated>2014-12-26T02:08:23.322+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='CAS'/><category scheme='http://www.blogger.com/atom/ns#' term='Authentication'/><title type='text'>How to setup and configure CAS - Central Authentication Service</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;CAS works on &lt;b&gt;Maven WAR overlay&lt;/b&gt;&amp;nbsp;technique.&lt;/li&gt;&lt;li&gt;You need to create a SSL certificate to use CAS and run it over https to enable SSO(single sign on). &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-create-a-ssl-certificate-and-add-certificate-to-keystore.html" target="_blank"&gt;How to create a SSL certificate and add it to keystore.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;You can use &lt;b&gt;LDAP, Database and Active Directory&lt;/b&gt; techniques to authenticate the user.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Requirements&lt;/b&gt;&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;You need to have Java SDK v1.6 or greater.&lt;/li&gt;&lt;li&gt;Servlet Containers like Tomcat , Websphere, JBoss etc.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Apache Maven v3.0 or greater.&lt;/li&gt;&lt;li&gt;Authentication technique related dependencies.&lt;/li&gt;&lt;/ol&gt;For the sake of simplicity let us assume that out application path is&lt;br /&gt;&lt;pre class="brush : xml"&gt;PROJECT = /home/ekiras/cas&lt;/pre&gt;and our tomcat path is&lt;br /&gt;&lt;pre class="brush : xml"&gt;TOMCAT = /home/ekiras/apache&lt;/pre&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Step 1 : Create pom.xml&lt;/b&gt;&lt;/div&gt;You need to create a pom.xml to create the war file and package it. lets create the pom file in the project directory i.e. &lt;b&gt;PROJECT/pom.xml&lt;/b&gt;&lt;br /&gt;Add the following code to the pom. &lt;br /&gt;&lt;pre class="brush : xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"&lt;br /&gt;         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&lt;br /&gt;         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd "&amp;gt;&lt;br /&gt;    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;br /&gt;    &amp;lt;groupId&amp;gt;cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;    &amp;lt;artifactId&amp;gt;ekiras&amp;lt;/artifactId&amp;gt;&lt;br /&gt;    &amp;lt;packaging&amp;gt;war&amp;lt;/packaging&amp;gt;&lt;br /&gt;    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&lt;br /&gt; &lt;br /&gt;    &amp;lt;build&amp;gt;&lt;br /&gt;        &amp;lt;plugins&amp;gt;&lt;br /&gt;            &amp;lt;plugin&amp;gt;&lt;br /&gt;                 &amp;lt;artifactId&amp;gt;maven-war-plugin&amp;lt;/artifactId&amp;gt;&lt;br /&gt;                             &amp;lt;configuration&amp;gt;&lt;br /&gt;                                 &amp;lt;warName&amp;gt;cas&amp;lt;/warName&amp;gt;&lt;br /&gt;                             &amp;lt;/configuration&amp;gt;&lt;br /&gt;                        &amp;lt;/plugin&amp;gt;&lt;br /&gt;        &amp;lt;/plugins&amp;gt;&lt;br /&gt;    &amp;lt;/build&amp;gt;&lt;br /&gt; &lt;br /&gt;    &amp;lt;dependencies&amp;gt;&lt;br /&gt;        &amp;lt;dependency&amp;gt;&lt;br /&gt;            &amp;lt;groupId&amp;gt;org.jasig.cas&amp;lt;/groupId&amp;gt;&lt;br /&gt;            &amp;lt;artifactId&amp;gt;cas-server-webapp&amp;lt;/artifactId&amp;gt;&lt;br /&gt;            &amp;lt;version&amp;gt;${cas.version}&amp;lt;/version&amp;gt;&lt;br /&gt;            &amp;lt;type&amp;gt;war&amp;lt;/type&amp;gt;&lt;br /&gt;            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&lt;br /&gt;        &amp;lt;/dependency&amp;gt;&lt;br /&gt;    &amp;lt;/dependencies&amp;gt;&lt;br /&gt; &lt;br /&gt;    &amp;lt;properties&amp;gt;&lt;br /&gt;        &amp;lt;cas.version&amp;gt;4.0.0&amp;lt;/cas.version&amp;gt;&lt;br /&gt;    &amp;lt;/properties&amp;gt;&lt;br /&gt; &lt;br /&gt;        &amp;lt;repositories&amp;gt;&lt;br /&gt;             &amp;lt;repository&amp;gt;&lt;br /&gt;                  &amp;lt;id&amp;gt;ja-sig&amp;lt;/id&amp;gt;&lt;br /&gt;                  &amp;lt;url&amp;gt;http://oss.sonatype.org/content/repositories/releases/ &amp;lt;/url&amp;gt;&lt;br /&gt;             &amp;lt;/repository&amp;gt;&lt;br /&gt;        &amp;lt;/repositories&amp;gt;&lt;br /&gt;&amp;lt;/project&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;Here we have added the dependencies of the project and the repositories where it will look for the dependencies and jars. We are setting up &lt;b&gt;CAS version 4.0.0&lt;/b&gt;&lt;/div&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Step 2 : Lets check our progress&lt;/b&gt;&lt;/div&gt;Let us check our progress and see if we have not missed on something. Run the following command&lt;br /&gt;&lt;pre class="brush : xml"&gt;mvn clean package&lt;/pre&gt;This will create a war file in the directory &lt;b&gt;PROJECT/target/&lt;/b&gt;. Deploy this war file on tomcat as instructed &lt;a href="http://ekiras.blogspot.in/2014/12/how-to-deploy-war-on-tomcat.html" target="_blank"&gt;here&lt;/a&gt;. Now run the app you will see the screen like the following.&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-zO2iR_PJVTc/VIXEYCrCioI/AAAAAAAAAEU/bx5ljtzHO6Y/s1600/Screenshot%2Bfrom%2B2014-12-08%2B21%3A00%3A05.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-zO2iR_PJVTc/VIXEYCrCioI/AAAAAAAAAEU/bx5ljtzHO6Y/s1600/Screenshot%2Bfrom%2B2014-12-08%2B21%3A00%3A05.png" height="358" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;CAS login screen&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;You can now login to the CAS server using username="casuser" and password="Mellon". These are the default username password that can be used to login. After login you will see the screen like the following.&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-K9V7uyIx1bw/VIXFLyEoFKI/AAAAAAAAAE8/-ZXu6AfB3PA/s1600/cas2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-K9V7uyIx1bw/VIXFLyEoFKI/AAAAAAAAAE8/-ZXu6AfB3PA/s1600/cas2.png" height="358" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;CAS Successful Login screen&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;We can logout the cas server using the path &lt;b&gt;/logout&lt;/b&gt;. This will log out the user.&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-VlsTMH0kAWI/VIXHHPZ0YFI/AAAAAAAAAFk/bJnNV-xqOPo/s1600/cas3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-VlsTMH0kAWI/VIXHHPZ0YFI/AAAAAAAAAFk/bJnNV-xqOPo/s1600/cas3.png" height="358" width="640" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;CAS successful logout screen.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;So, we have now setup our CAS server and successfully logged into and logged out of &amp;nbsp;the CAS server.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://ekiras.blogspot.in/2014/12/how-to-setup-and-configure-cas-with-database.html" target="_blank"&gt;How to Use Database for CAS Authentication.&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6697821997103495958/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-setup-and-configure-cas-central-authentication-service.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6697821997103495958'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6697821997103495958'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-setup-and-configure-cas-central-authentication-service.html' title='How to setup and configure CAS - Central Authentication Service'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-zO2iR_PJVTc/VIXEYCrCioI/AAAAAAAAAEU/bx5ljtzHO6Y/s72-c/Screenshot%2Bfrom%2B2014-12-08%2B21%3A00%3A05.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1164591537068257489</id><published>2014-12-03T15:04:00.000+05:30</published><updated>2017-01-02T18:21:52.533+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Tomcat'/><title type='text'>How to Deploy a war on Tomcat</title><content type='html'>&lt;div class='markdown'&gt;&lt;h2&gt;Points To Remember&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;You should have a war file that can be deployed to the tomcat.&lt;/li&gt;&lt;li&gt;You should have tomcat installed on your machine.&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Deploying a war file on Tomcat.&lt;/h2&gt;&lt;p&gt;We hope you have a installed the tomcat or have the tomcat bundle extracted on your system. In your case we just downloaded the tomcat zip and unzipped at home location.&lt;/p&gt;&lt;h2&gt;Step 1 : Change Tomcat User Name Password and Roles&lt;/h2&gt;&lt;p&gt;This is done so that you can login to the &lt;code&gt;Tomcat Application Manager&lt;/code&gt;. All you need to do is find the file &lt;code&gt;tomcat-user.xml&lt;/code&gt; at location &lt;code&gt;path-to-tomcat/conf&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat1.png" alt="Img 1"&gt;&lt;/p&gt;&lt;p&gt;Replace the following lines&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span class="hljs-comment"&gt;&amp;lt;!--&lt;br /&gt;  &amp;lt;role rolename="tomcat"/&amp;gt;&lt;br /&gt;  &amp;lt;role rolename="role1"/&amp;gt;&lt;br /&gt;  &amp;lt;user username="tomcat" password="tomcat" roles="tomcat"/&amp;gt;&lt;br /&gt;  &amp;lt;user username="both" password="tomcat" roles="tomcat,role1"/&amp;gt;&lt;br /&gt;  &amp;lt;user username="role1" password="tomcat" roles="role1"/&amp;gt;&lt;br /&gt;--&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;with the following lines&lt;/p&gt;&lt;pre&gt;&lt;code class="language-xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;role&lt;/span&gt; &lt;span class="hljs-attribute"&gt;rolename&lt;/span&gt;=&lt;span class="hljs-value"&gt;"tomcat"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;role&lt;/span&gt; &lt;span class="hljs-attribute"&gt;rolename&lt;/span&gt;=&lt;span class="hljs-value"&gt;"role1"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;user&lt;/span&gt; &lt;span class="hljs-attribute"&gt;username&lt;/span&gt;=&lt;span class="hljs-value"&gt;"tomcat"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;password&lt;/span&gt;=&lt;span class="hljs-value"&gt;"tomcat"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;roles&lt;/span&gt;=&lt;span class="hljs-value"&gt;"tomcat, manager-gui"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;user&lt;/span&gt; &lt;span class="hljs-attribute"&gt;username&lt;/span&gt;=&lt;span class="hljs-value"&gt;"both"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;password&lt;/span&gt;=&lt;span class="hljs-value"&gt;"tomcat"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;roles&lt;/span&gt;=&lt;span class="hljs-value"&gt;"tomcat,role1"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-title"&gt;user&lt;/span&gt; &lt;span class="hljs-attribute"&gt;username&lt;/span&gt;=&lt;span class="hljs-value"&gt;"role1"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;password&lt;/span&gt;=&lt;span class="hljs-value"&gt;"tomcat"&lt;/span&gt; &lt;span class="hljs-attribute"&gt;roles&lt;/span&gt;=&lt;span class="hljs-value"&gt;"role1"&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will enable us to login to Tomcat Application Manager with user &lt;code&gt;tomcat&lt;/code&gt; and password &lt;code&gt;tomcat&lt;/code&gt;.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note: We assigned role &lt;code&gt;manager-gui&lt;/code&gt; to our user &lt;code&gt;tomcat&lt;/code&gt;, without this you will not be able to authenticate.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat2.png" alt="Img 2"&gt;&lt;/p&gt;&lt;h2&gt;Step 2 : Logging into Tomcat Application Manager&lt;/h2&gt;&lt;p&gt;Enter the user name and password tomcat, tomcat (or the username, password) that you have set in step 1. This will authenticate you to the Tomcat Application manger&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat3.png" alt="Img 3"&gt;&lt;/p&gt;&lt;p&gt;After successful login you will be able to see the following welcome screen.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat4.png" alt="Img 4"&gt;&lt;/p&gt;&lt;h2&gt;Step 3 : Deploy the war file that we want.&lt;/h2&gt;&lt;p&gt;Click on the Choose File button, and choose the war file that you want to deploy to the tomcat.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat5.png" alt="Img 5"&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat6.png" alt="Img 6"&gt;&lt;/p&gt;&lt;h2&gt;Step 4: Start the application&lt;/h2&gt;&lt;p&gt;Once the file is uploaded and deployed you will be able to see this application in the application manager. You can start, stop, reload, undeploy the war from here.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat7.png" alt="Img 7"&gt;&lt;/p&gt;&lt;h2&gt;Step 5: Run the application&lt;/h2&gt;&lt;p&gt;Just click on the ling representing your application and it will launch our application.&lt;/p&gt;&lt;p&gt;&lt;img src="http://resources.ekiras.com/images/tomcat/tomcat8.png" alt="Img 8"&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Also Read&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-run-change-default-port-8080-of-tomcat.html"&gt;How to change default port 8080 of Tomcat&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/tomcat-how-to-change-deployment-directory-webapps-to-custom-directory.html"&gt;How to change Deployment directory from webapp to custom Directory&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-start-tomcat-on-multiple-more-than-one-ports.html"&gt;How to start Tomcat on more than one Port&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2014/12/how-to-deploy-war-on-tomcat.html"&gt;How to Deploy a war on Tomcat&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1164591537068257489/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-deploy-war-on-tomcat.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1164591537068257489'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1164591537068257489'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/12/how-to-deploy-war-on-tomcat.html' title='How to Deploy a war on Tomcat'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-407743205911992730</id><published>2014-11-29T01:33:00.000+05:30</published><updated>2014-11-29T01:33:57.760+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Simple Averages</title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;&lt;/p&gt;     &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;Properties of Averages&lt;/b&gt;&lt;/p&gt;   &lt;ol&gt;    &lt;li&gt;&lt;p&gt;Average of N things/quantities is equal to the sum of all the things/quantities divided by number of things/quantities.&lt;/p&gt;&lt;/li&gt;    &lt;li&gt;&lt;p&gt;Average of N number of things/quantities always lies between the lowest and the highest quantities.&lt;/p&gt;&lt;/li&gt;    &lt;li&gt;&lt;p&gt;If each quantity is increased by a certain value K, then the new average is increased by K.&lt;/p&gt;&lt;/li&gt;    &lt;li&gt;&lt;p&gt;If each quantity is decreased by a certain value K, then the new average is decreased by K.&lt;/p&gt;&lt;/li&gt;    &lt;li&gt;&lt;p&gt;If each quantity is multiplied by a certain value K, then the new average becomes K times the the original average. &lt;/p&gt;&lt;/li&gt;    &lt;li&gt;&lt;p&gt;If each quantity is divided by a certain value K, then the new average becomes &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{1}{K}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;var mathquill-command-id="5"&gt;K&lt;/var&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; times the the original average. &lt;/p&gt;&lt;/li&gt;   &lt;/ol&gt;       &lt;/div&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; Average number of chocolates with 10 children is 5. If a person distributes all 20 chocolates he has to the children then what is the average number    of chocolates with the children.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;7&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;8&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;9&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;10&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Total number of chocolates with the students = 10 × 5 = 50    &lt;br&gt;&lt;br&gt; New Total number of chocolates = 50 + 20 = 70    &lt;br&gt;&lt;br&gt;∴ new average number of chocolates = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{70}{10}=7$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="8"&gt;&lt;span mathquill-command-id="7"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="12"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="14"&gt;7&lt;/span&gt;&lt;/span&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; The average score of a cricketer for ten matches is 38.9 runs. If the average for the first six matches is 42, then find the average for the last four matches.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;35&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;36&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;35.25&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;36.25&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Total sum of last 4 matches = (10 × 38.9) - (6 × 42)    &lt;br&gt;&lt;br&gt;= 389 - 252 = 137    &lt;br&gt;&lt;br&gt;Average = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{137}{4}=35.25$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="10"&gt;&lt;span mathquill-command-id="9"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="12"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="14"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="16"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="18"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="20"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="22"&gt;5&lt;/span&gt;&lt;/span&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; Average of a class of 50 students is 50 kg. If 2 guys of average weight 45 leaves the class. What is the new average of the class.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;50&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;50.21&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;51.2&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;55.2&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Total weight of the class = 50 × 50 =2500 kg    &lt;br&gt;&lt;br&gt;Total weight of the two students who leave the class = 45 × 2 = 90 kg    &lt;br&gt;&lt;br&gt;∴new average weight of the class = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{2500-900}{48}=50.21$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="11" class="binary-operator"&gt;-&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;9&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="20"&gt;&lt;span mathquill-command-id="19"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="24"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="26"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="28"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="30"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="32"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="34"&gt;1&lt;/span&gt;&lt;/span&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; The number of sweets in a box is 15. If the shop keeper &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{2}{3}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;span mathquill-command-id="5"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;sup&gt;rd's&lt;/sup&gt; the number of sweets in each box, then what will be the new    average of number of sweets in the box.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;5&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;15&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;98&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;10&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Its simple application of the rule, Since the number of sweets is &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{2}{3}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;span mathquill-command-id="5"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; of the original quantity in each box    &lt;br&gt;&lt;br&gt; ∴ the average number of sweets in each box will be 15 × &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{2}{3}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;span mathquill-command-id="5"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; = 10                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; If the average weight of a family of 5 people is 42 kg and one member gets married and add to the family. Weight of this member is 48 kg. What will be the new average weight of the family.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;42&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;43&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;44&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;45&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Total weight of the family of 5 people = 5 × 42 = 240    &lt;br&gt;&lt;br&gt; Total weight of family after new member joins the family = 210 + 48 = 258    &lt;br&gt;&lt;br&gt;∴ new average of the family = &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{258}{6}=43$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="10"&gt;&lt;span mathquill-command-id="9"&gt;6&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="12"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="14"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="16"&gt;3&lt;/span&gt;&lt;/span&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 6&lt;/b&gt; The number of sweets in a box is 15. If the shop keeper triples the number of sweets in each box, then what will be the new    average of number of sweets in the box.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;3&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;15&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;45&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;55&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Its simple application of the rule, Since the number of sweets is tripled in each box    &lt;br&gt;&lt;br&gt; ∴ the average number of sweets in each box will be 15 × 3 = 45                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/407743205911992730/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/simple-averages.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/407743205911992730'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/407743205911992730'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/simple-averages.html' title='Simple Averages'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6579243298599305375</id><published>2014-11-29T01:18:00.000+05:30</published><updated>2014-11-29T01:18:31.021+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>LCM with Remainders</title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;There are three types of questions that are based on LCM with remainders. They are as follows.    &lt;/p&gt;           &lt;div class="hl-note"&gt;    &lt;ol type="I"&gt;    &lt;li&gt;&lt;p&gt;&lt;b&gt; When the remainders are same for all the divisors&lt;/b&gt;&lt;br&gt;&lt;br&gt;    In this case the required number will be the LCM × N + remainder, where N is any natural number     &lt;br&gt;&lt;br&gt; N=1, will give smallest such number     &lt;br&gt;&lt;br&gt; N=2, will give second smallest such number and so on     &lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;    &lt;p&gt;&lt;b&gt; When the remainders are different for different divisors but the respective difference between the      divisors and the remainders remain constant.&lt;/b&gt;&lt;br&gt;&lt;br&gt;    In this case the required number will be LCM × N +difference of any (divisor - remainder)     &lt;br&gt;&lt;br&gt; refer to example 2.     &lt;/p&gt;    &lt;/li&gt;        &lt;li&gt;    &lt;p&gt;&lt;b&gt;When neither the divisors are same nor the respective difference between the divisors and the remaniders     remain constant.&lt;/b&gt;&lt;br&gt;&lt;br&gt;    In this case solve the question by forming equations and solving them.      &lt;/p&gt;    &lt;/li&gt;    &lt;/ol&gt;   &lt;/div&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; What is the least possible number which when divided by 4,5,6 leaves the remainder as 3,4,5 respectively.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;59&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;60&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;61&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;119&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since the difference is same in all &lt;i&gt;i.e&lt;/i&gt; (4-3)=(5-4)=(6-5)=1    &lt;br&gt;&lt;br&gt;∴ the required number = LCM (4,5,6) -1    &lt;br&gt;&lt;br&gt;= 60 - 1 = 59                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; Find the least possible 5 digit number which when divided by 2,4,6,8 it leaves the remainder 1,3,5,7 respectively.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;10006&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;10007&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;10008&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;None of these&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;b&gt;i)&lt;/b&gt; LCM of 2,4,6,8 is 24&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;∴ all possible values = 24N - 1 , where N is a natural number    &lt;br&gt;&lt;br&gt;Least possible 5 digit number will be for N=417, 24 × 417 -1 = 10007                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; What is the least possible number which when divided by 10,12,14 leaves the remainder as 2. How many such numbers   are there between 5000 and 6000.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;1&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;2&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;3&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;4&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;b&gt;i)&lt;/b&gt; LCM of 10,12,14 is 420&lt;br&gt;&lt;br&gt;    ∴ the least possible number that leaves the remainder as 2 when divided by 10,12,14 = 420 × 1 + 2 = 422    &lt;br&gt;&lt;br&gt;    &lt;b&gt;ii)&lt;/b&gt; Number of such numbers between 5000 and 6000 can be found by putting different values of N,    &lt;br&gt;&lt;br&gt;for N=12, 420N +2 =  5042    &lt;br&gt;&lt;br&gt;for N=14, 420N +2 =  5882    &lt;br&gt;&lt;br&gt;∴ there are 3 such numbers between 5000 and 6000.(for N=12,13,14 420N+2 lies between 5000and 6000)                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; What is the least possible number which when divided by 11 leaves the remainder 3 and when divided by 5 leaves the remainder as 2.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;46&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;47&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;48&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;49&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Let the required number be N,    &lt;br&gt;&lt;br&gt; Since N divided by 5 gives remainder as 2 ∴ N = 5 × m + 2    &lt;br&gt;&lt;br&gt; Since N divided by 11 gives remainder as 3 ∴ N = 11 × n + 3    &lt;br&gt;&lt;br&gt;∴ 5m+2=11n+3    &lt;br&gt;&lt;br&gt;&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$m=\frac{11n+1}{5}$&lt;/span&gt;&lt;var mathquill-command-id="2"&gt;m&lt;/var&gt;&lt;span class="binary-operator" mathquill-command-id="4"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="6"&gt;&lt;span class="numerator" mathquill-block-id="8"&gt;&lt;span mathquill-command-id="7"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;1&lt;/span&gt;&lt;var mathquill-command-id="11"&gt;n&lt;/var&gt;&lt;span mathquill-command-id="13" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="18"&gt;&lt;span mathquill-command-id="17"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    &lt;br&gt;&lt;br&gt; For n = 4, m = 9 that is the smallest possible value of m for any n.    &lt;br&gt;&lt;br&gt;∴ the smallest number is 5×9+2=47    &lt;br&gt;&lt;br&gt;&lt;i&gt;Next such number will be LCM of (11 and 5) + 47&lt;/i&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; What will be the least possible number which when divided by 4,5,6 always leaves the remainder    3. Find the following such numbers which satisfy the given condition.    &lt;br&gt;&lt;br&gt;i) Smallest    &lt;br&gt;&lt;br&gt;ii) Second Smallest    &lt;br&gt;&lt;br&gt;iii) Greatest number smaller than 1000&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                 &lt;div class="explanation"&gt;                            &lt;ol type="i"&gt;     &lt;li&gt;&lt;p&gt; The smallest number which when divided by 4,5,6 leaves the remainder 3 in each case is LCM (4,5,6) + 3 = 63&lt;/p&gt;     &lt;/li&gt;          &lt;li&gt;&lt;p&gt;To find all the set of such numbers which gives remainder as 3 when divided by 4,5,6 will be      &lt;br&gt;&lt;br&gt;60N + 3, where N is a natural number.     &lt;br&gt;&lt;br&gt;∴ Second largest such number will be 60 × 2 + 3 = 123&lt;/p&gt;      &lt;/li&gt;          &lt;li&gt;      &lt;p&gt;      To find the largest number of such form smaller than 1000, we will have to find the largest number of form       60N + 3 ,  that is smaller than 1000.      &lt;br&gt;&lt;br&gt; Taking N=16, 60N +3 = 963, that is the largest such number      &lt;/p&gt;     &lt;/li&gt;    &lt;/ol&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6579243298599305375/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/lcm-with-remainders.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6579243298599305375'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6579243298599305375'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/lcm-with-remainders.html' title='LCM with Remainders'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2235836848594714936</id><published>2014-11-29T01:08:00.000+05:30</published><updated>2014-11-29T01:08:09.028+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Finding Last Two digits</title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;   There can be direct questions on finding last two digits of any power of a natural number    and this is very important for eliminating options in questions. Following are the four simple cases     with which we will be able to solve almost every problem.     &lt;/p&gt;     &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;Rules for Finding Last Two Digits of square of a number&lt;/b&gt;&lt;/p&gt;   &lt;p&gt;    In order to find the last two digits of square of any two digit number number, we can write it as difference or sum from 50 or 100, whichever      is closer.&lt;b&gt; In general the last two digits of a number (50±k)&lt;sup&gt;2&lt;/sup&gt; or (100-k)&lt;sup&gt;2&lt;/sup&gt; will be determined by square of k&lt;/b&gt;.    &lt;/p&gt;  &lt;/div&gt;   &lt;p&gt;&lt;i&gt;e.g&lt;/i&gt; 47&lt;sup&gt;2&lt;/sup&gt; can be written as (50-3)&lt;sup&gt;2&lt;/sup&gt;,&lt;/p&gt;   &lt;p&gt;Now, the last two digits will be determined by square of 3 that is 09&lt;/p&gt;         &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;Rules for Finding Last Two Digits of any power of a number&lt;/b&gt;&lt;/p&gt;   &lt;ol type="i"&gt;    &lt;li&gt;     &lt;p&gt;For a natural number N&lt;sup&gt;k&lt;/sup&gt;, where N is a natural number ending with 0 and K is a natural number greater than 2,&lt;br&gt;&lt;br&gt;     &lt;b&gt;Last two digits will always be 00&lt;/b&gt;.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;     &lt;p&gt;For a natural number N&lt;sup&gt;k&lt;/sup&gt;, where N is a natural number ending with 5 and K is a natural number greater than 2,&lt;br&gt;&lt;br&gt;     &lt;b&gt;Last two digits will always be 25&lt;/b&gt;.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;     &lt;p&gt;For a natural number (2×m)&lt;sup&gt;40k+1&lt;/sup&gt;, where m is a odd number not ending with 5 and K is a natural number,&lt;br&gt;&lt;br&gt;     &lt;b&gt;Last two digits will always be (2×m +50)&lt;/b&gt;.&lt;/p&gt;    &lt;/li&gt;    &lt;li&gt;     &lt;p&gt;For all the remaining cases, the last two digits of N&lt;sup&gt;40k+x&lt;/sup&gt;,&lt;br&gt;&lt;br&gt;     &lt;b&gt;Last two digits will always be equal to the last 2 digits of N&lt;sup&gt;x&lt;/sup&gt;&lt;/b&gt;&lt;/p&gt;    &lt;/li&gt;   &lt;/ol&gt;  &lt;/div&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; Find the last two digits of 12345&lt;sup&gt;98745&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;05&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;00&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;25&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;50&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since the number ends with 5, thus rule 2 applies here &lt;br&gt;&lt;br&gt;    ∴ the last two digits will be 25.                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; Find the last two digits of 39&lt;sup&gt;2&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;21&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;81&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;79&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;67&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since 39&lt;sup&gt;2&lt;/sup&gt; can be written as (50-11)&lt;sup&gt;2&lt;/sup&gt;&lt;br&gt;&lt;br&gt;    ∴ last two digits will be determined by 11&lt;sup&gt;2&lt;/sup&gt;=21                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; Find the last two digits of 22&lt;sup&gt;482&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;84&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;48&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;92&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;64&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since no rule applies to this, thus we will apply rule 4 here &lt;br&gt;&lt;br&gt;    22&lt;sup&gt;482&lt;/sup&gt; can be written as  22&lt;sup&gt;40×12+2&lt;/sup&gt;&lt;br&gt;&lt;br&gt;    ∴ the last two digits can be determined by 22&lt;sup&gt;2&lt;/sup&gt; and will be 84                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; Find the last two digits of 42&lt;sup&gt;801&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;29&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;92&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;45&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;54&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since the number can be written as (2×21)&lt;sup&gt;40×20+1&lt;/sup&gt;, thus rule 3 applies &lt;br&gt;&lt;br&gt;    ∴ the last two digits will be (2×21+50)=92                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; Find the last two digits of 39&lt;sup&gt;900&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;01&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;81&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;27&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;34&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since no rule applies to this, thus we will apply rule 4 here &lt;br&gt;&lt;br&gt;    39&lt;sup&gt;900&lt;/sup&gt; can be written as  39&lt;sup&gt;40×22+20&lt;/sup&gt;&lt;br&gt;&lt;br&gt;    ∴ the last two digits can be determined by 39&lt;sup&gt;20&lt;/sup&gt;&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;    Now we will keep squaring 39 to reach closet to 39&lt;sup&gt;20&lt;/sup&gt;, we will consider only the last two digits. &lt;br&gt;&lt;br&gt;    39&lt;sup&gt;2&lt;/sup&gt;- Last two digits will be 21, (using rule to find last two digits of square of a number (50-11)&lt;sup&gt;2&lt;/sup&gt;)&lt;br&gt;&lt;br&gt;    39&lt;sup&gt;4&lt;/sup&gt;- Last two digits will be 41, squaring 21&lt;br&gt;&lt;br&gt;    39&lt;sup&gt;8&lt;/sup&gt;- Last two digits will be 81, squaring 41 (using rule to find last two digits of square of a number (50-9)&lt;sup&gt;2&lt;/sup&gt;)&lt;br&gt;&lt;br&gt;    39&lt;sup&gt;16&lt;/sup&gt;- Last two digits will be 61, squaring 81 (using rule to find last two digits of square of a number (100-19)&lt;sup&gt;2&lt;/sup&gt;)&lt;br&gt;&lt;br&gt;    &lt;br&gt;&lt;br&gt;    Now, last two digits of 39&lt;sup&gt;20&lt;/sup&gt;=Last two digits of (39&lt;sup&gt;4&lt;/sup&gt;×39&lt;sup&gt;16&lt;/sup&gt;)&lt;br&gt;&lt;br&gt;    =Last two digits of (41×61)&lt;br&gt;&lt;br&gt;    =01&lt;br&gt;&lt;br&gt;    ∴ last two digits of 39&lt;sup&gt;900&lt;/sup&gt;=01                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 6&lt;/b&gt; Find the last two digits of 53&lt;sup&gt;2&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;01&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;02&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;03&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;04&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since 81&lt;sup&gt;2&lt;/sup&gt; can be written as (50+2)&lt;sup&gt;2&lt;/sup&gt;&lt;br&gt;&lt;br&gt;    ∴ last two digits will be determined by 2&lt;sup&gt;2&lt;/sup&gt;=04                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 7&lt;/b&gt; Find the last two digits of 81&lt;sup&gt;2&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;21&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;61&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;27&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;67&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since 81&lt;sup&gt;2&lt;/sup&gt; can be written as (100-19)&lt;sup&gt;2&lt;/sup&gt;&lt;br&gt;&lt;br&gt;    ∴ last two digits will be determined by 19&lt;sup&gt;2&lt;/sup&gt;=61                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 8&lt;/b&gt; Find the last two digits of 80&lt;sup&gt;754&lt;/sup&gt;.&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;64&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;16&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;00&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;08&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since the number ends with 0, thus rule 1 applies here &lt;br&gt;&lt;br&gt;    ∴ the last two digits will be 00.                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2235836848594714936/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-last-two-digits.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2235836848594714936'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2235836848594714936'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-last-two-digits.html' title='Finding Last Two digits'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7982878930771263375</id><published>2014-11-29T00:52:00.000+05:30</published><updated>2014-11-29T00:52:57.326+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Finding Last Digit of a Number</title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt; To find the last digit i.e the unit digit you need to be aware of the cyclicity of the numbers and their powers  &lt;/p&gt; &lt;table cellpadding="15px"&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;1&lt;/sup&gt;=2&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;1&lt;/sup&gt;=3&lt;/td&gt;   &lt;td&gt;4&lt;sup&gt;1&lt;/sup&gt;=4&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;2&lt;/sup&gt;=4&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;2&lt;/sup&gt;=9&lt;/td&gt;   &lt;td&gt;4&lt;sup&gt;2&lt;/sup&gt;=16&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;3&lt;/sup&gt;=8&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;3&lt;/sup&gt;=27&lt;/td&gt;   &lt;td&gt;4&lt;sup&gt;3&lt;/sup&gt;=64&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;4&lt;/sup&gt;=16&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;4&lt;/sup&gt;=81&lt;/td&gt;   &lt;td&gt;4&lt;sup&gt;4&lt;/sup&gt;=256&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;5&lt;/sup&gt;=32&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;5&lt;/sup&gt;=243&lt;/td&gt;   &lt;td&gt;4&lt;sup&gt;5&lt;/sup&gt;=1024&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;6&lt;/sup&gt;=64&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;6&lt;/sup&gt;=729&lt;/td&gt;   &lt;td&gt;4&lt;sup&gt;6&lt;/sup&gt;=4096&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;7&lt;/sup&gt;=128&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;7&lt;/sup&gt;=2187&lt;/td&gt;   &lt;td&gt; &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;   &lt;td&gt;2&lt;sup&gt;8&lt;/sup&gt;=256&lt;/td&gt;   &lt;td&gt;3&lt;sup&gt;8&lt;/sup&gt;=6561&lt;/td&gt;   &lt;td&gt; &lt;/td&gt;  &lt;/tr&gt; &lt;/table&gt;    &lt;p&gt; We can see that unit's digit of 2&lt;sup&gt;1&lt;/sup&gt;,2&lt;sup&gt;5&lt;/sup&gt;,2&lt;sup&gt;9&lt;/sup&gt; is 2 and so on. Therefore, after every   four powers of 2, the units digit of the number starts repeating.Thus we can say that cyclicity of unit's digit of higher powers of 2   is 4.    &lt;/p&gt; &lt;p&gt; Similarily unit digit of power of 4 starts reeating after 2, thus its cyclicity is 2.  &lt;/p&gt; &lt;div class="hl-note"&gt; &lt;p&gt; Unit digit follows a periodic pattern that is after a particular period it repeats in a cyclic form, this is called cyclicity.    &lt;/p&gt; &lt;ul&gt;    &lt;li&gt;&lt;p&gt;Unit digits of numbers ending with &lt;b&gt;0,1,5,6&lt;/b&gt; is always the same irrespective of their powers raised on them.&lt;/p&gt;&lt;/li&gt;  &lt;li&gt;&lt;p&gt;Unit digit of numbers ending with &lt;b&gt;4,9&lt;/b&gt;  follows the pattern with cyclicity of 2&lt;/p&gt;&lt;/li&gt;  &lt;li&gt;&lt;p&gt;Unit digit of numbers ending with &lt;b&gt;2,3,7,8&lt;/b&gt; follows the pattern with cyclicity of 4&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt; In order to find the last digit of any number xyz&lt;sup&gt;abc&lt;/sup&gt; whose who's last digit 'z' has the cyclicity of 4, then to find the last digit   write the number as z&lt;sup&gt;4k + m&lt;/sup&gt; where 4k+m = abc, and m is smaller than equal to z and not 0.  &lt;/p&gt;   &lt;p&gt; In order to find the last digit of any number xyz&lt;sup&gt;abc&lt;/sup&gt; whose who's last digit 'z' has the cyclicity of 2, then to find the last digit   write the number as z&lt;sup&gt;2k + m&lt;/sup&gt; where 2k+m = abc, and m is smaller than or equal to z ans is not equal to 0.  &lt;/p&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; What will be the unit digit of 7&lt;sup&gt;23&lt;/sup&gt;×8&lt;sup&gt;13&lt;/sup&gt;&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;2&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;3&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;4&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;6&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since the cyclicity of both 7 and 8 is 4,    &lt;br&gt;&lt;br&gt;∴ unit digit of 7&lt;sup&gt;23&lt;/sup&gt; and 8&lt;sup&gt;13&lt;/sup&gt;=7&lt;sup&gt;4×5+3&lt;/sup&gt; × 8&lt;sup&gt;4×3+1&lt;/sup&gt;    =unit digit of 7&lt;sup&gt;3&lt;/sup&gt; and 8&lt;sup&gt;1&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ unit digit of 7&lt;sup&gt;23&lt;/sup&gt;×8&lt;sup&gt;13&lt;/sup&gt;=unit digit of 3×8=4                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; What will be the unit digit of 888&lt;sup&gt;444&lt;/sup&gt;+444&lt;sup&gt;888&lt;/sup&gt;&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;2&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;4&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;5&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;6&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since the cyclicity of 8 is 4 and cyclicity of 4 is 2,    &lt;br&gt;&lt;br&gt;∴  888&lt;sup&gt;444&lt;/sup&gt;+444&lt;sup&gt;888&lt;/sup&gt;=888&lt;sup&gt;4×111&lt;/sup&gt;+444&lt;sup&gt;2×444&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ last digit of  888&lt;sup&gt;444&lt;/sup&gt; and 444&lt;sup&gt;888&lt;/sup&gt;=last digit of  8&lt;sup&gt;4&lt;/sup&gt; and 4&lt;sup&gt;2&lt;/sup&gt; = 6 and 6    &lt;br&gt;&lt;br&gt;Thus unit digit =6+6=12 ∴ unit digit is 2                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; Find the last digit of 3&lt;sup&gt;57&lt;/sup&gt;&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;3&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;6&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;1&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;7&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            3 has the cyclicity of 4.  3&lt;sup&gt;57&lt;/sup&gt;= 3&lt;sup&gt;4×14+1&lt;/sup&gt;    &lt;br&gt;&lt;br&gt; ∴ last digit of  3&lt;sup&gt;57&lt;/sup&gt;=last digit of  3&lt;sup&gt;1&lt;/sup&gt; = 3                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; What will be the unit digit of 4567&lt;sup&gt;1578&lt;/sup&gt;&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;7&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;1&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;9&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;3&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Since the cyclicity of 7 is 4,  4567&lt;sup&gt;1578&lt;/sup&gt;= 4567&lt;sup&gt;4×394+2&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ last digit of  4567&lt;sup&gt;1578&lt;/sup&gt;=last digit of  7&lt;sup&gt;2&lt;/sup&gt; = 9                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; What will be the unit digit of 199!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;1&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;2&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;9&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;0&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Factorial 199 = 1×2×3×4×5×..9×10×11..198×199    Thus the unit digit will be 0 (a number multiplied by 10 always end with 0)                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7982878930771263375/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-last-digit-of-number.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7982878930771263375'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7982878930771263375'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-last-digit-of-number.html' title='Finding Last Digit of a Number'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-736020797526551336</id><published>2014-11-28T00:44:00.000+05:30</published><updated>2014-11-29T00:37:58.467+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Finding Remainders </title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;  We can use the following rules to find the remainder when a number is divided by another.   &lt;/p&gt;  &lt;p&gt;&lt;b&gt;Rules for Finding Remainders&lt;/b&gt;&lt;/p&gt;     &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;Rule 1 : x is divided by y&lt;/b&gt;    When we have to divide a number by another number, then we can write x in terms of y, i.e.      (y×a)+b. This means that the remainder is b.            &lt;/p&gt;  &lt;/div&gt;  &lt;p&gt;&lt;b&gt;e.g.&lt;/b&gt;When 66 is divided by 10, we can write 66 as 10×6+6, thus the remainder is 6.&lt;/p&gt;  &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;Rule 2 : x ± y is divided by z&lt;/b&gt;    When we have to divide the sum or difference of two number by another number, then we write both     the numbers as the product of the number with which we have to divide.        &lt;/p&gt;  &lt;/div&gt;  &lt;p&gt;&lt;b&gt;e.g.&lt;/b&gt;When we have to divide 45+23 by 8, then we write it like&lt;br&gt;&lt;br&gt;    8×5+5 + 8×2+7=8(5+2)+ 12&lt;br&gt;&lt;br&gt;    Since 8(5+2) is divisible by 8 thus we will divide 12 by 8, and we know the remainder will be 4.&lt;br&gt;&lt;br&gt;    Similarily we can solve for 45-23 divided by 8.   &lt;/p&gt;  &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;Rule 3 : x × y is divided by z&lt;/b&gt;   When we have to divide the product of two numbers by another number, then the remainder will be equal to the remainder     of each of the number divided separately.    &lt;/p&gt;  &lt;/div&gt;  &lt;p&gt;&lt;b&gt;e.g.&lt;/b&gt;When 61×109 is divided by 7, the remainder of &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{61}{7}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="8"&gt;&lt;span mathquill-command-id="7"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    is 5 and remainder of &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{109}{7}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;9&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="10"&gt;&lt;span mathquill-command-id="9"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;    is 4, thus we can say the remainder will be &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{\left(5\cdot4\right)}{7}=\frac{20}{7}=6$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="12"&gt;&lt;span class="non-leaf" mathquill-command-id="4"&gt;&lt;span class="scaled paren" style="-webkit-transform: scale(1, 1.05);"&gt;(&lt;/span&gt;&lt;span class="non-leaf" mathquill-block-id="6"&gt;&lt;span mathquill-command-id="5"&gt;5&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="7"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span class="scaled paren" style="-webkit-transform: scale(1, 1.05);"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="14"&gt;&lt;span mathquill-command-id="13"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="16"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="18"&gt;&lt;span class="numerator" mathquill-block-id="20"&gt;&lt;span mathquill-command-id="19"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="24"&gt;&lt;span mathquill-command-id="23"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="26"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="28"&gt;6&lt;/span&gt;&lt;/span&gt;  &lt;/p&gt;        &lt;div class="hl-note"&gt;   &lt;p&gt;&lt;b&gt;Rule 4 : x&lt;sup&gt;y&lt;/sup&gt; is divided by z&lt;/b&gt;   When we have to divide a number to some power with another number, then keep dividing the number with     the divisor till the remainder is not less than the divisor.    &lt;/p&gt;  &lt;/div&gt;  &lt;p&gt;&lt;b&gt;e.g.&lt;/b&gt; When 7&lt;sup&gt;47&lt;/sup&gt; is divided by 5, &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{7}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;span mathquill-command-id="5"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   will give the remainder as 2, thus 7&lt;sup&gt;47&lt;/sup&gt; divided by 5 will give remainder as&lt;br&gt;&lt;br&gt;   &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{2\cdot2\cdot2...2}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="5"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;2&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="9"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;.&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="22"&gt;&lt;span mathquill-command-id="21"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   i.e 47 times 2.&lt;br&gt;&lt;br&gt;   Now, 2&lt;sup&gt;47&lt;/sup&gt; = 2&lt;sup&gt;3&lt;/sup&gt;×2&lt;sup&gt;4&lt;sup&gt;11&lt;/sup&gt;&lt;/sup&gt;=&lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{8\cdot16^{11}}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;8&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="5"&gt;·&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;6&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="11" mathquill-block-id="13"&gt;&lt;span mathquill-command-id="12"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="14"&gt;1&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="18"&gt;&lt;span mathquill-command-id="17"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   &lt;br&gt;&lt;br&gt; &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{8}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;span mathquill-command-id="5"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   gives the remainder as 3 and &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{16}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;6&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="8"&gt;&lt;span mathquill-command-id="7"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   gives the remainder as 1. &lt;br&gt;&lt;br&gt;   ∴ &lt;span class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{7^{47}}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;7&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="5" mathquill-block-id="7"&gt;&lt;span mathquill-command-id="6"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="8"&gt;7&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;span mathquill-command-id="11"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;   gives the remainder as 3.        &lt;/p&gt;     &lt;div class="hl-note"&gt;  &lt;p&gt;&lt;b&gt;Rule of Negative Remainder&lt;/b&gt;  When a number x divided by y, then we can say that the remainder is -a if y×k=x+a, where k can be any natural number and a is smaller than y.    This in turn means that the remainder is a times smaller than y.   &lt;/p&gt;  &lt;/div&gt;  &lt;p&gt;&lt;b&gt;e.g&lt;/b&gt; When 8 is divided by 5, we can that remainder is -2. It means 2 less than the divisor &lt;i&gt;i.e&lt;/i&gt; 3    &lt;/p&gt;     &lt;p&gt;&lt;b&gt;e.g&lt;/b&gt; When 120 is divided by 11, we can that remainder is -1. It means 1 less than the divisor &lt;i&gt;i.e&lt;/i&gt; 10     &lt;/p&gt;&lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; What will be remainder when 3&lt;sup&gt;97!&lt;/sup&gt; is divided by 80&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;2&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;1&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;3&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;4&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            3&lt;sup&gt;97!&lt;/sup&gt; can be written as 81&lt;sup&gt;k&lt;/sup&gt;&lt;br&gt;&lt;br&gt;    &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{81^k}{80}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;1&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="7" mathquill-block-id="9"&gt;&lt;var mathquill-command-id="8"&gt;k&lt;/var&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;span mathquill-command-id="11"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    &lt;br&gt;&lt;br&gt; Thus the remainder is 1                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; What will be remainder when 1234 × 5678 is divided by 11&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;1&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;2&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;4&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;6&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Using Rule 3, Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{1234\times5678}{11}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;4&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="11"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="22"&gt;&lt;span mathquill-command-id="21"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="23"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    = Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{2\times2}{11}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;2&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="5"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="10"&gt;&lt;span mathquill-command-id="9"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;=4                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; What will be remainder when 75&lt;sup&gt;75&lt;sup&gt;75&lt;/sup&gt;&lt;/sup&gt; is divided by 37&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;4&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;3&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;2&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;1&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            75 when divided by 37 leaves the remainder as 1 ,    &lt;br&gt;&lt;br&gt; Thus the remainder when 75&lt;sup&gt;75&lt;sup&gt;75&lt;/sup&gt;&lt;/sup&gt; is divided by 37 is 1                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; What will be remainder when 1!+2!+3!+4!..100! is divided by 7&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;4&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;5&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;6&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;7&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            All the numbers from 7! to 100! are divisible by 7, since they contains atleast 1 factor as 7 &lt;br&gt;&lt;br&gt;    1!+2!+3!+4!+5!+6! when divided by 7 will give remainder&lt;br&gt;&lt;br&gt;    &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{1+2+6+24+120+720}{7}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="9" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="13" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="19" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="23"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="25"&gt;0&lt;/span&gt;&lt;span mathquill-command-id="27" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="29"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="31"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="33"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="36"&gt;&lt;span mathquill-command-id="35"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    =&lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{1+2+-1+3+1+6}{7}=\frac{12}{7}=5$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="9" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="11" class="unary-operator"&gt;-&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="15" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="19" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="23" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="25"&gt;6&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="28"&gt;&lt;span mathquill-command-id="27"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="30"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="32"&gt;&lt;span class="numerator" mathquill-block-id="34"&gt;&lt;span mathquill-command-id="33"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="35"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="38"&gt;&lt;span mathquill-command-id="37"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="40"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="42"&gt;5&lt;/span&gt;&lt;/pre&gt;    &lt;br&gt;&lt;br&gt; Thus the remainder is 5                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; What will be remainder when 7&lt;sup&gt;486&lt;/sup&gt; is divided by 4&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;0&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;1&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;2&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;3&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{7}{4}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="6"&gt;&lt;span mathquill-command-id="5"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    will give the remainder as -1,&lt;br&gt;&lt;br&gt;    ∴  &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{7^{486}}{4}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;7&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="5" mathquill-block-id="7"&gt;&lt;span mathquill-command-id="6"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="8"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="10"&gt;6&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="14"&gt;&lt;span mathquill-command-id="13"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    will give remainder as &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{-1^{486}}{4}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3" class=""&gt;-&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;1&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="7" mathquill-block-id="9"&gt;&lt;span mathquill-command-id="8"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="10"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="12"&gt;6&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="16"&gt;&lt;span mathquill-command-id="15"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;    = -1&lt;br&gt;&lt;br&gt;    Thus the remainder will be 3                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 6&lt;/b&gt; What will be remainder when 1234+5678 is divided by 5&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;1&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;2&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;3&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;4&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Using Rule 2, &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{1234}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;3&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;span mathquill-command-id="11"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; gives remainder 4 and &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{5678}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;6&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;span mathquill-command-id="11"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; gives remainder 3    &lt;br&gt;&lt;br&gt; thus the remainder will be &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{4+3}{5}=2$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="5" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="10"&gt;&lt;span mathquill-command-id="9"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="12"&gt;=&lt;/span&gt;&lt;span mathquill-command-id="14"&gt;2&lt;/span&gt;&lt;/pre&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 7&lt;/b&gt; What will be remainder when 1719 × 1721 × 1723 × 1725 × 1727 is divided by 18&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;3&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;6&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;8&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;9&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Using Rule 3,&lt;br&gt;&lt;br&gt;    The remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{1719\times1721\times1723\times1725\times1727}{18}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;9&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="11"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;1&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="21"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="23"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="25"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="27"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="29"&gt;3&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="31"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="33"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="35"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="37"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="39"&gt;5&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="41"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="43"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="45"&gt;7&lt;/span&gt;&lt;span mathquill-command-id="47"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="49"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="52"&gt;&lt;span mathquill-command-id="51"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="53"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    = Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{9\times11\times13\times15\times17}{18}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;9&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="5"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;1&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="11"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;3&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="17"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;5&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="23"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="25"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="27"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="30"&gt;&lt;span mathquill-command-id="29"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="31"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;    = Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{99\times13\times15\times17}{18}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;9&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;9&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="7"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;3&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="13"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;5&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="19"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="23"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="26"&gt;&lt;span mathquill-command-id="25"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="27"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;    = Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{9\times13\times255}{18}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;9&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="5"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;3&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="11"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="17"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="20"&gt;&lt;span mathquill-command-id="19"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="21"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;    = Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{117\times255}{18}=\frac{9\times3}{18}=\frac{27}{18}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;7&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="9"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="11"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="13"&gt;5&lt;/span&gt;&lt;span mathquill-command-id="15"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="18"&gt;&lt;span mathquill-command-id="17"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="22"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="24"&gt;&lt;span class="numerator" mathquill-block-id="26"&gt;&lt;span mathquill-command-id="25"&gt;9&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="27"&gt;×&lt;/span&gt;&lt;span mathquill-command-id="29"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="32"&gt;&lt;span mathquill-command-id="31"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="33"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span class="binary-operator" mathquill-command-id="36"&gt;=&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="38"&gt;&lt;span class="numerator" mathquill-block-id="40"&gt;&lt;span mathquill-command-id="39"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="41"&gt;7&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="44"&gt;&lt;span mathquill-command-id="43"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="45"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;    = 9                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/736020797526551336/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-remainders.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/736020797526551336'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/736020797526551336'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-remainders.html' title='Finding Remainders '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5350308717820169219</id><published>2014-11-27T13:26:00.000+05:30</published><updated>2014-11-29T00:38:26.181+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Finding Number of Zeros in a Number</title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;&lt;/p&gt;   &lt;div class="hl-note"&gt;   &lt;p&gt;To find the number of zeros at the end of a factorial or a product, &lt;b&gt;find the highest power of 2 and 5    in the factorial or the product, number of zeros will be decided by the limiting factor&lt;/b&gt;. ( one who's    power is smaller will be the limiting factor)     &lt;/p&gt;   &lt;p&gt;&lt;b&gt;Limiting factor is the one who's power is less among 2 and 5&lt;/b&gt;&lt;/p&gt;   &lt;/div&gt;   &lt;br&gt;   &lt;br&gt;           &lt;b&gt;e.g. Finding number of Zeros in 150 &lt;/b&gt;   &lt;br&gt;&lt;br&gt;150 = 2 × 3 × 5 × 5,     &lt;br&gt;∴ Highest power of 2 = 1    &lt;br&gt;∴ Highest power of 5 = 2     &lt;br&gt;∴ Limiting factor = 1     &lt;br&gt;∴ Number of zeros in 150 = 1        &lt;br&gt;&lt;br&gt;        &lt;b&gt;e.g. Finding number of Zeros in 10! &lt;/b&gt;   &lt;br&gt;&lt;br&gt;∴ Highest power of 2 = 8    &lt;br&gt;∴ Highest power of 5 = 2     &lt;br&gt;∴ Limiting factor = 2     &lt;br&gt;∴ Number of zeros in 10! = 2 &lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; Find the number of zeros at the end of 33 × 128 × 125 × 50 × 45&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;3&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;4&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;5&lt;/td&gt;                                                                                                      &lt;td class="optionD correct locked"&gt;6&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                D&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            33 × 128 × 125 × 50 × 45 = 2&lt;sup&gt;8&lt;/sup&gt; × 3&lt;sup&gt;3&lt;/sup&gt;  × 5 &lt;sup&gt;6&lt;/sup&gt;  × 11&lt;sup&gt;1&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;∴ Number of zeros = 6                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; Find the number of zeros at the end of 100!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;97&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;56&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;24&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;23&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            10 = 2&lt;sup&gt;1&lt;/sup&gt; × 5&lt;sup&gt;1&lt;/sup&gt;    &lt;table cellspacing="20px"&gt;    &lt;tr&gt;&lt;td&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;100&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;50&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;25&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;12&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;6&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;3&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;     &lt;/td&gt;&lt;td valign="top"&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;100&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;20&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;4&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;    &lt;/td&gt;    &lt;/tr&gt;    &lt;/table&gt;     So highest power of 2 in factorial 100 = 50+25+12+6+3+1 = 97    &lt;br&gt;&lt;br&gt;So highest power of 5 in factorial 100 = 20+4 = 24    &lt;br&gt;&lt;br&gt;So limiting factor is 5 and the number of zeros at end of 100! = 24                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; Find the number of zeros at the end of 125!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;119&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;31&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;27&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;29&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            10 = 2&lt;sup&gt;1&lt;/sup&gt; × 5&lt;sup&gt;1&lt;/sup&gt;    &lt;table cellspacing="20px"&gt;    &lt;tr&gt;&lt;td&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;125&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;62&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;31&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;15&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;7&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;3&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;     &lt;/td&gt;&lt;td valign="top"&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;125&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;25&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;5&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;    &lt;/td&gt;    &lt;/tr&gt;    &lt;/table&gt;     So highest power of 2 in factorial 125 = 62+31+15+7+3+1 = 119    &lt;br&gt;&lt;br&gt;So highest power of 5 in factorial 125 = 25+5+1 = 31    &lt;br&gt;&lt;br&gt;So limiting factor is 5 and the number of zeros at end of 125! = 31                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; Find the number of zeros at the end of 390625 × 1024&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;8&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;10&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;15&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;17&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            390625 = 5&lt;sup&gt;8&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;1024 = 2&lt;sup&gt;10&lt;/sup&gt;    &lt;br&gt;&lt;br&gt;Thus the limiting factor will be 5 here and the highest power of 10 will be 8    &lt;br&gt;&lt;br&gt;Thus the number of zeros at the end of the 390625 × 1024 = 8                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5350308717820169219/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-number-of-zeros-in-number.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5350308717820169219'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5350308717820169219'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-number-of-zeros-in-number.html' title='Finding Number of Zeros in a Number'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1606457778175838116</id><published>2014-11-27T12:25:00.000+05:30</published><updated>2014-11-29T00:38:43.857+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Aptitude'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Numbers'/><category scheme='http://www.blogger.com/atom/ns#' term='Quantitative Aptitude'/><title type='text'>Finding Highest Power of Number</title><content type='html'>&lt;div id="TabbedPannel" class="panel-container"&gt;    &lt;span id="1-Tab" class="tab-option active" onclick=""&gt;Concepts&lt;/span&gt;    &lt;span id="2-Tab" class="tab-option inactive" onclick=""&gt;Examples&lt;/span&gt;&lt;/div&gt; &lt;div class="block tab-container"&gt;    &lt;p&gt;   Finding highest power of a number can be used to find the    &lt;/p&gt;   &lt;ol&gt;    &lt;li&gt;Highest power of a number that divide the factorial&lt;/li&gt;    &lt;li&gt;Highest power of a product of numbers that divide the factorial&lt;/li&gt;    &lt;li&gt;Number of 0's at the end of the factorial&lt;/li&gt;   &lt;/ol&gt;   &lt;div class="hl-note"&gt;   &lt;p&gt;To find the highest power of a number 'x' in the factorial of number N,     &lt;br&gt;&lt;br&gt;&lt;b&gt;Step 1 : &lt;/b&gt; Divide the number N successively till we get 0 as the last quotient.     &lt;br&gt;&lt;br&gt;&lt;b&gt;Step 2 : &lt;/b&gt; Add all the quotients to get the highest power that divides the factorial of N     &lt;/p&gt;   &lt;/div&gt;   &lt;p&gt;&lt;b&gt;e.g&lt;/b&gt; Find the highest power of a 2 in factorial 10.&lt;/p&gt;   i) To find highest power of 2 in 10! we divide 10 successively    &lt;table cellpadding="2px"&gt;    &lt;tr&gt;     &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;     &lt;td style="border-bottom: 1px solid;"&gt;10&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;     &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;     &lt;td style="border-bottom: 1px solid;"&gt;5&lt;/td&gt;    &lt;/tr&gt;      &lt;tr&gt;     &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;     &lt;td style="border-bottom: 1px solid;"&gt;2&lt;/td&gt;    &lt;/tr&gt;       &lt;tr&gt;     &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;     &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;    &lt;/tr&gt;      &lt;tr&gt;     &lt;td style="border-right: 1px solid;"&gt; &lt;/td&gt;     &lt;td&gt;0&lt;/td&gt;    &lt;/tr&gt;     &lt;/table&gt;   ii) Add all the quotients, &lt;i&gt;i.e.&lt;/i&gt; 5+2+1=8    &lt;br&gt;&lt;br&gt;∴ HIghest power of 2 in 10! is 8 &lt;/div&gt;&lt;div class="hidden tab-container"&gt;&lt;br /&gt;                          &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 1&lt;/b&gt; What will be remainder when 888&lt;sup&gt;333&lt;/sup&gt;+222&lt;sup&gt;888&lt;/sup&gt; is divided by 5&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;1&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;2&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;3&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;4&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{888^{222}+2^{888}}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="7"&gt;8&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="9" mathquill-block-id="11"&gt;&lt;span mathquill-command-id="10"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="12"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="14"&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;span mathquill-command-id="17" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="19"&gt;2&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="21" mathquill-block-id="23"&gt;&lt;span mathquill-command-id="22"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="24"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="26"&gt;8&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="30"&gt;&lt;span mathquill-command-id="29"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    = Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{3^{222}}{5}+\frac{2^{888}}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;3&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="5" mathquill-block-id="7"&gt;&lt;span mathquill-command-id="6"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="8"&gt;2&lt;/span&gt;&lt;span mathquill-command-id="10"&gt;2&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="14"&gt;&lt;span mathquill-command-id="13"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span mathquill-command-id="16" class="binary-operator"&gt;+&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="18"&gt;&lt;span class="numerator" mathquill-block-id="20"&gt;&lt;span mathquill-command-id="19"&gt;2&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="21" mathquill-block-id="23"&gt;&lt;span mathquill-command-id="22"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="24"&gt;8&lt;/span&gt;&lt;span mathquill-command-id="26"&gt;8&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="30"&gt;&lt;span mathquill-command-id="29"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    &lt;br&gt;&lt;br&gt;= Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{9^{111}}{5}+\frac{4^{444}}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3"&gt;9&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="5" mathquill-block-id="7"&gt;&lt;span mathquill-command-id="6"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="8"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="10"&gt;1&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="14"&gt;&lt;span mathquill-command-id="13"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span mathquill-command-id="16" class="binary-operator"&gt;+&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="18"&gt;&lt;span class="numerator" mathquill-block-id="20"&gt;&lt;span mathquill-command-id="19"&gt;4&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="21" mathquill-block-id="23"&gt;&lt;span mathquill-command-id="22"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="24"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="26"&gt;4&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="30"&gt;&lt;span mathquill-command-id="29"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    &lt;br&gt;&lt;br&gt;= Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{-1^{111}}{5}+\frac{-1^{444}}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3" class=""&gt;-&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;1&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="7" mathquill-block-id="9"&gt;&lt;span mathquill-command-id="8"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="10"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="12"&gt;1&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="16"&gt;&lt;span mathquill-command-id="15"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;span mathquill-command-id="18" class="binary-operator"&gt;+&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="20"&gt;&lt;span class="numerator" mathquill-block-id="22"&gt;&lt;span mathquill-command-id="21" class=""&gt;-&lt;/span&gt;&lt;span mathquill-command-id="23"&gt;1&lt;/span&gt;&lt;sup class="non-leaf" mathquill-command-id="25" mathquill-block-id="27"&gt;&lt;span mathquill-command-id="26"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="28"&gt;4&lt;/span&gt;&lt;span mathquill-command-id="30"&gt;4&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="34"&gt;&lt;span mathquill-command-id="33"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    &lt;br&gt;&lt;br&gt;= Remainder of &lt;pre class="mathquill-embedded-latex mathquill-rendered-math"&gt;&lt;span class="selectable"&gt;$\frac{-1+1}{5}$&lt;/span&gt;&lt;span class="fraction non-leaf" mathquill-command-id="2"&gt;&lt;span class="numerator" mathquill-block-id="4"&gt;&lt;span mathquill-command-id="3" class=""&gt;-&lt;/span&gt;&lt;span mathquill-command-id="5"&gt;1&lt;/span&gt;&lt;span mathquill-command-id="7" class="binary-operator"&gt;+&lt;/span&gt;&lt;span mathquill-command-id="9"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class="denominator" mathquill-block-id="12"&gt;&lt;span mathquill-command-id="11"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;span style="display:inline-block;width:0"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;    &lt;br&gt;&lt;br&gt;= 0    &lt;br&gt;&lt;br&gt; Thus 888&lt;sup&gt;333&lt;/sup&gt;+222&lt;sup&gt;888&lt;/sup&gt; is divisible by 5 and leaves 0 as the remainder                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 2&lt;/b&gt; Find the highest power of 3 that can divide 333!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA correct locked"&gt;165&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;164&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;191&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;111&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                A&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;3&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;333&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;3&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;111&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;3&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;37&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;3&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;12&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;3&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;4&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;3&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-right: 1px solid;"&gt;3&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;     So highest power of 3 in factorial 333 = 111+37+12+4+1 = 165                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 3&lt;/b&gt; Find the highest power of 10 that can divide 55!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;50&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;25&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;13&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;12&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            10 = 2&lt;sup&gt;1&lt;/sup&gt; × 5&lt;sup&gt;1&lt;/sup&gt;       &lt;br&gt;&lt;br&gt;    &lt;table cellspacing="20"&gt;    &lt;tr&gt;&lt;td&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;55&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;27&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;13&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;6&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;3&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;     &lt;/td&gt;&lt;td&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;55&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;11&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;2&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;      &lt;td style="border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;     &lt;/tr&gt;     &lt;/table&gt;     &lt;/td&gt;    &lt;/tr&gt;    &lt;/table&gt;     So highest power of 2 in factorial 55 = 27 + 13 + 6 + 3 + 1 = 50    &lt;br&gt;&lt;br&gt;So highest power of 5 in factorial 55 = 11 + 2  = 13    &lt;br&gt;&lt;br&gt;∴ HIghest power of 10 in factorial 55 = 13 (since highest power of 5 is only 13 while power of 2 is 50, thus power of 5 is the limiting factor here)                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 4&lt;/b&gt; Find the highest power of 2 in 879!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;879&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;871&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;850&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;820&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;879&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;439&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;219&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;109&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;54&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;27&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;13&lt;/td&gt;     &lt;/tr&gt;         &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;6&lt;/td&gt;     &lt;/tr&gt;         &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;3&lt;/td&gt;     &lt;/tr&gt;         &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;     &lt;/tr&gt;         &lt;tr&gt;      &lt;td style="border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;     &lt;br&gt;    So highest power of 2 in factorial 879! = 439 + 219 + 109 + 54 + 27 + 13 + 6 + 3 + 1  = 871                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 5&lt;/b&gt; Find the highest power of 20 that can divide 200!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;197&lt;/td&gt;                                                                                          &lt;td class="optionB correct locked"&gt;49&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC incorrect locked"&gt;98&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;150&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                B&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            20 = 2&lt;sup&gt;2&lt;/sup&gt; × 5&lt;sup&gt;1&lt;/sup&gt;       &lt;br&gt;&lt;br&gt;    &lt;table cellspacing="20"&gt;    &lt;tr&gt;&lt;td&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;200&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;100&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;50&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;25&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;12&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;6&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;3&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-right: 1px solid;"&gt;2&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;     &lt;/td&gt;&lt;td&gt;    &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;200&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;40&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;8&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;     &lt;/tr&gt;     &lt;/table&gt;     &lt;/td&gt;    &lt;/tr&gt;    &lt;/table&gt;     So highest power of 2 in factorial 200 = 100+50+25+12+6+3+1 = 197    &lt;br&gt;&lt;br&gt;So highest power of 5 in factorial 200 = 40+8+1 =49    &lt;br&gt;&lt;br&gt;∴ Highest power of 4 in factorial 200 = 197/2 = 98    &lt;br&gt;&lt;br&gt;∴ HIghest power of 20 in factorial 200 = 49 (since highest power of 5 is only 49 while power of 4 is 98, thus power of 5 is the limiting factor here)                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;                     &lt;div clas="container-question"&gt;                &lt;div class="question"&gt;&lt;b&gt;Question 6&lt;/b&gt; Find the highest power of 5 in 125!&lt;/div&gt;                &lt;input name="gvnAnswer" type="hidden"&gt;                                     &lt;table cellspacing="1" style="width: 100%;"&gt;                        &lt;tbody&gt;                        &lt;tr&gt;                                                             &lt;td class="optionA incorrect locked"&gt;25&lt;/td&gt;                                                                                          &lt;td class="optionB incorrect locked"&gt;27&lt;/td&gt;                                                     &lt;/tr&gt;                                                     &lt;tr&gt;                                                                     &lt;td class="optionC correct locked"&gt;31&lt;/td&gt;                                                                                                      &lt;td class="optionD incorrect locked"&gt;119&lt;/td&gt;                                                             &lt;/tr&gt;                                                 &lt;/tbody&gt;                    &lt;/table&gt;                                 &lt;div class="handle"&gt;                    &lt;div class="view-solution"&gt;                    &lt;/div&gt;                    &lt;div class="solution hidden"&gt;                                                     &lt;div class="answer"&gt;                                C&lt;/div&gt;                                                 &lt;div class="explanation"&gt;                            &lt;table&gt;     &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;125&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;25&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;5&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-bottom: 1px solid;border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td style="border-bottom: 1px solid;"&gt;1&lt;/td&gt;     &lt;/tr&gt;       &lt;tr&gt;      &lt;td style="border-right: 1px solid;"&gt;5&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;     &lt;/tr&gt;      &lt;/table&gt;     So highest power of 5 in factorial 125 = 25+5+1 = 31                         &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;&lt;br/&gt;              &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1606457778175838116/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-highest-power-of-number.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1606457778175838116'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1606457778175838116'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/finding-highest-power-of-number.html' title='Finding Highest Power of Number'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6985673629633956986</id><published>2014-11-24T13:17:00.000+05:30</published><updated>2014-11-24T14:21:13.037+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Render HTML String in a GSP in Grails</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;By default, in grails all the html code and script code is escaped.&lt;/li&gt;&lt;li&gt;You can render your html string as html in three ways, change in config, change at page level and change at field level.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Rendering HTML String in a GSP in Grails.&lt;/b&gt;&lt;/div&gt;Suppose we have a String like the following and we want it to get rendered as HTML in our gsp. By default out code will get rendered like this.&lt;br /&gt;&lt;pre class="brush: html"&gt;Hi &amp;lt; br /&amp;gt;My name is Ekansh Rastogi &amp;lt; br /&amp;gt;I want this in three lines.&lt;/pre&gt;But we wanted out output as&lt;br /&gt;&lt;pre class="brush:html"&gt;Hi &lt;br /&gt;My name is Ekansh Rastogi &lt;br /&gt;I want this in three lines.&lt;/pre&gt;&lt;br /&gt;So, following are the ways in which you can render your &lt;b&gt;HTML String&lt;/b&gt; as &lt;b&gt;HTML&lt;/b&gt;.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Render the Html String you want to encode as HTML.&lt;/b&gt;&lt;br /&gt;  &lt;pre class="brush : java"&gt;${raw(htmlString)}&lt;/pre&gt;This will encode the string and make it render like html. This will encode only the string on which it is called upon.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Render the all HTML Strings in a page to encode as HTML.&lt;/b&gt;&lt;br /&gt;  &lt;pre class="brush : java"&gt;&amp;lt;%@page expressionCodec="none" %&amp;gt;&lt;/pre&gt;This will render all the html strings in the page as HTML. In this case we may not want to encode each string separately to HTML, just one directive will do our work for the whole page.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Render the all HTML Strings in the Web project to encode as HTML.&lt;/b&gt;&lt;br /&gt;  &lt;pre class="brush : java"&gt;grails {&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; views {&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; gsp {&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; encoding = 'UTF-8'&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; htmlcodec = 'xml' // use xml escaping instead of HTML4 escaping&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; codecs {&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;b&gt;expression = 'none' // escapes values inside ${}&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scriptlet = 'html' // escapes output from scriptlets in GSPs&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; taglib = 'none' // escapes output from taglibs&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; staticparts = 'none' // escapes output from static template parts&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // escapes all not-encoded output at final stage of outputting&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // filteringCodecForContentType.'text/html' = 'html'&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;This will render all the html strings in the whole web application. In this case we may not need to encode each string field as HTML nor do we need to add the page directives on each page.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Please note that, making all the html strings to encode as HTML will make your site &lt;b&gt;vulnerable to attacks like Cross Site Scripting. &lt;/b&gt;&amp;nbsp;So it is advised to make use of this very judiciously.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6985673629633956986/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/render-html-string-in-gsp-in-grails.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6985673629633956986'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6985673629633956986'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/render-html-string-in-gsp-in-grails.html' title='Render HTML String in a GSP in Grails'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4493708073023247550</id><published>2014-11-18T15:19:00.000+05:30</published><updated>2014-11-18T15:19:00.798+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Wrapper Classes'/><title type='text'>What are the Wrapper Classes</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Every primitive datatype has a Wrapper class.&lt;/li&gt;&lt;li&gt;Primitive datatypes are not objects while Wrapper classes are objects.&lt;/li&gt;&lt;li&gt;A wrapper class of a primitive data type can be used to save the value of the datatype as strings.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Heading&lt;/b&gt;&lt;/div&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/what-are-wrapper-classes-and-why-are-they-needed.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4493708073023247550'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4493708073023247550'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5999919914395407671</id><published>2014-11-12T01:13:00.001+05:30</published><updated>2014-11-12T01:37:33.761+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Equals'/><title type='text'>How does equals() method work in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;equals()&lt;/b&gt;, method is a method of the Object class, hence is available in all classes.&lt;/li&gt;&lt;li&gt;Syntax of equals in Object class is &lt;b&gt;public boolean equals(Object obj)&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;It return true if two objects are same, in object class it just checks if the two references points to the same class.&amp;nbsp;&lt;/li&gt;&lt;li&gt;We can override the equals method to provide custom logic to say the two objects are same. See&amp;nbsp;&lt;a href="http://ekiras.blogspot.in/2014/09/overriding-equals-method-of-object.html" target="_blank"&gt;How to override equals method&lt;/a&gt;,&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Concept: Making two objects same.&lt;/b&gt;&lt;/div&gt;Suppose we have a Book class and each object represents a book. We create three objects book1, book2 and book3 (new keyword always creates a new object) and the objects book1, book2 refer to same book same with name 'Think Think' and id '1', book 3 refers to book 'Bad Kitty'. So in real case scenario the book1 and book2 objects should be same or equal.&lt;br /&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-qd-J6Ks01xU/VGJqdrIHMVI/AAAAAAAAAAg/3VVpEUkuciY/s1600/rsz_book-front-cover-illustration-art-21.jpg" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="200" src="https://4.bp.blogspot.com/-qd-J6Ks01xU/VGJqdrIHMVI/AAAAAAAAAAg/3VVpEUkuciY/s200/rsz_book-front-cover-illustration-art-21.jpg" width="165" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;id=1, name = Think Think&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-jmGfPnOL2EY/VGJq9M7oqQI/AAAAAAAAAAo/yA6496RmmNQ/s1600/rsz_02-digital-illustrated-childrens-book-cover.jpg" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="200" src="https://4.bp.blogspot.com/-jmGfPnOL2EY/VGJq9M7oqQI/AAAAAAAAAAo/yA6496RmmNQ/s200/rsz_02-digital-illustrated-childrens-book-cover.jpg" width="137" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;id=2, name= Bad Kitty&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;So lets check how many objects are created and if they are equal when their member variables are same. (According to our case, objects with same id and name should be equal)&lt;br /&gt;&lt;pre class="brush: java"&gt;class Book{&lt;br /&gt; int id;&lt;br /&gt; String name;&lt;br /&gt; public Book(int id, String name){&lt;br /&gt;   this.id = id;&lt;br /&gt;   this.name= name;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Book book1 = new Book(1,"Think Think");&lt;br /&gt;  Book book2 = new Book(1,"Think Think");&lt;br /&gt;  Book book3 = new Book(2,"Bad Kitty");&lt;br /&gt;&lt;br /&gt;  System.out.println("book1.equals(book2) = "+ book1.equals(book2));&lt;br /&gt;  System.out.println("book1.equals(book3) = "+ book1.equals(book3));&lt;br /&gt;  System.out.println("book2.equals(book3) = "+ book2.equals(book3));&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;book1.equals(book2) = false&lt;br /&gt;book1.equals(book3) = false&lt;br /&gt;book2.equals(book3) = true&lt;/pre&gt;The above output proves that there are only 2 objects created, one for book1, and other for book2, book3 shares the object of book2.&lt;br /&gt;&lt;br /&gt;But we may want to make objects book1 and book2 as same since they represents the same book (they have same book id and book name ). So we need to do some thing to make all the book objects that have same id and name as same objects or equal objects.&lt;br /&gt;&lt;br /&gt;What we need to do is, override equals and hashcode methods of the Object class. The following program shows how we can say the two objects with same id and name are equal. &lt;br /&gt;&lt;pre class="brush:java"&gt;class Book{&lt;br /&gt; int id;&lt;br /&gt; String name; &lt;br /&gt;&lt;br /&gt; public Book(int id, String name){&lt;br /&gt;   this.id = id;&lt;br /&gt;   this.name= name;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public boolean equals(Object obj){&lt;br /&gt;  // Null checks not included.&lt;br /&gt;  Book book = (Book)obj;   &lt;br /&gt;  if(this.name.compareTo(book.name)==0 &amp;amp;&amp;amp; this.id == book.id)&lt;br /&gt;    return true;&lt;br /&gt;  else&lt;br /&gt;    return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public int hashCode(){&lt;br /&gt;   return this.name.hashCode() * this.id;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Book book1 = new Book(1,"Think Think");&lt;br /&gt;  Book book2 = new Book(1,"Think Think");&lt;br /&gt;  Book book3 = new Book(2,"Bad Kitty");&lt;br /&gt;  System.out.println("book1.equals(book2) = "+ book1.equals(book2));&lt;br /&gt;  System.out.println("book1.equals(book3) = "+ book1.equals(book3));&lt;br /&gt;  System.out.println("book2.equals(book3) = "+ book2.equals(book3));&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;book1.equals(book2) = true&lt;br /&gt;book1.equals(book3) = false&lt;br /&gt;book2.equals(book3) = false&lt;/pre&gt;The objects with reference book1 and book2 are equal since according to our custom logic, book object with same id and name must be equal. Also do read the &lt;a href="http://ekiras.blogspot.in/2014/11/contract-between-equals-and-hashcode-methods-in-java.html" target="_blank"&gt;contract between hashCode() and equals() method&lt;/a&gt;.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5999919914395407671/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/how-does-equals-method-work-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5999919914395407671'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5999919914395407671'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/how-does-equals-method-work-in-java.html' title='How does equals() method work in Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://4.bp.blogspot.com/-qd-J6Ks01xU/VGJqdrIHMVI/AAAAAAAAAAg/3VVpEUkuciY/s72-c/rsz_book-front-cover-illustration-art-21.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-847122855337090405</id><published>2014-11-11T18:48:00.002+05:30</published><updated>2014-11-12T01:39:31.415+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Equals'/><category scheme='http://www.blogger.com/atom/ns#' term='Hashcode'/><title type='text'>Contract between equals() and hashCode()</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Both the method &lt;b&gt;equals()&lt;/b&gt; and &lt;b&gt;hashCode()&lt;/b&gt;&amp;nbsp;are the methods of Object class, hence available in all the classes.&lt;/li&gt;&lt;li&gt;Syntax for equals() method in Object class is &lt;b&gt;public boolean equals(Object obj)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Syntax for hashCode() method in Object class is &lt;b&gt;public int hashCode()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;The &lt;b&gt;equals()&lt;/b&gt;&amp;nbsp;method of Object class checks &lt;b&gt;if&lt;/b&gt; the &lt;b&gt;two references&lt;/b&gt; compared &lt;b&gt;point to same object&lt;/b&gt;, returns true if they are same and false if two objects are different. We can override this functionality by our own custom way of comparing objects.&lt;/li&gt;&lt;li&gt;&lt;b&gt;If the equals() method returns true, then the hashcode() of the two object must be same.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;If hashCode() of two objects are same, it does not mean that the objects should be same.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Concept : equals() &amp;amp; hashCode() method in Object class&amp;nbsp;&lt;/b&gt;&lt;/div&gt;First of all lets see what does an equals() method do in java. The equals method in the object class is used to see that if the two object references are pointing to the same object. &lt;a href="http://ekiras.blogspot.in/2014/11/how-does-equals-method-work-in-java.html" target="_blank"&gt;See how equals() method works.&lt;/a&gt;&amp;nbsp;So if two references are pointing to same object then all the member variables of the object must be same in all respect, this means that the hashcode of the two &amp;nbsp;objects must also be same.&lt;br /&gt;&lt;br /&gt;Let us see &lt;a href="http://ekiras.blogspot.com/" target="_blank"&gt;How hashCode() method works&lt;/a&gt;. The hash code method returns the hash a 16 digit integer number from some internal hashing algorithm.&lt;br /&gt;This is a one way process, which means&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;if we know a key then we can generate the hashcode and it will always be the same&lt;/li&gt;&lt;li&gt;but if we have hashcode, then we cannot find the key from hashcode.&lt;/li&gt;&lt;/ul&gt;where key can be any object that needs to be hashed. &lt;br /&gt;&lt;br /&gt;So, we summarize as below.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;If equals returns true, then the hashcode of the two objects must be same.&lt;/li&gt;&lt;li&gt;If equals returns false, hashcode may or may not be same.&lt;/li&gt;&lt;li&gt;If hashcode of two objects is same, then equals may may not return true.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Invalid use of hashCode() and equals()&lt;/b&gt;&lt;/div&gt;The below program as a problem, it does not follow the contract of equals and hashcode.We override the equals method and say that the two object of Book class are equal if their name is same. So by convention, &amp;nbsp;if the name of two books are same then the hashcode of objects must be same. But in this case the hashcode may vary since we multiply the hashcode of book name with book id, where book id may be different.&lt;br /&gt;&lt;pre class="brush:java"&gt;class Book{&lt;br /&gt; int id;&lt;br /&gt; String name; &lt;br /&gt;&lt;br /&gt; public Book(int id, String name){&lt;br /&gt;   this.id = id;&lt;br /&gt;   this.name= name;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public boolean equals(Object obj){&lt;br /&gt;  // Null checks not included.&lt;br /&gt;  Book book = (Book)obj;   &lt;br /&gt;  if(this.name.compareTo(book.name)==0 )&lt;br /&gt;    return true;&lt;br /&gt;  else&lt;br /&gt;    return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public int hashCode(){&lt;br /&gt;   return this.name.hashCode() * this.id;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Book book1 = new Book(1,"book");&lt;br /&gt;  Book book2 = new Book(2,"book");&lt;br /&gt;  Book book3 = new Book(1,"book");&lt;br /&gt;  System.out.println("book1.equals(book2) = "+ book1.equals(book2) + " book1.hash= "+book1.hashCode()+ " book2.hash= "+book2.hashCode());&lt;br /&gt;  System.out.println("book1.equals(book3) = "+ book1.equals(book3) + " book1.hash= "+book1.hashCode()+ " book3.hash= "+book3.hashCode());&lt;br /&gt;  System.out.println("book2.equals(book3) = "+ book2.equals(book3) + " book2.hash= "+book2.hashCode()+ " book3.hash= "+book3.hashCode());&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;book1.equals(book2) = true book1.hash= 3029737 book2.hash= 6059474&lt;br /&gt;book1.equals(book3) = true book1.hash= 3029737 book3.hash= 3029737&lt;br /&gt;book2.equals(book3) = true book2.hash= 6059474 book3.hash= 3029737&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Valid use of hashCode() and equals()&lt;/b&gt;&lt;/div&gt;In the above example the problem was that, the two objects that are same according to our implementation should also have returned same hashcode, but it was not so(as shown by the output). So we may correct this by either&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;changing &lt;b&gt;this.name.hashCode() * this.id; &amp;nbsp;&lt;/b&gt;to&amp;nbsp;&lt;b&gt;this.name.hashCode();&lt;/b&gt;&lt;/li&gt;&lt;li&gt;changing&amp;nbsp;&lt;b&gt;if(this.name.compareTo(book.name)==0 )&lt;/b&gt;&amp;nbsp;to&amp;nbsp;&lt;b&gt;if(this.name.compareTo(book.name)==0 &amp;amp;&amp;amp; this.id == book.id)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre class="brush:java"&gt;class Book{&lt;br /&gt; int id;&lt;br /&gt; String name; &lt;br /&gt;&lt;br /&gt; public Book(int id, String name){&lt;br /&gt;   this.id = id;&lt;br /&gt;   this.name= name;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public boolean equals(Object obj){&lt;br /&gt;  // Null checks not included.&lt;br /&gt;  Book book = (Book)obj;   &lt;br /&gt;  if(this.name.compareTo(book.name)==0 &amp;amp;&amp;amp; this.id == book.id)&lt;br /&gt;    return true;&lt;br /&gt;  else&lt;br /&gt;    return false;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public int hashCode(){&lt;br /&gt;   return this.name.hashCode() * this.id;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Book book1 = new Book(1,"book");&lt;br /&gt;  Book book2 = new Book(2,"book");&lt;br /&gt;  Book book3 = new Book(1,"book");&lt;br /&gt;  System.out.println("book1.equals(book2) = "+ book1.equals(book2) + " book1.hash= "+book1.hashCode()+ " book2.hash= "+book2.hashCode());&lt;br /&gt;  System.out.println("book1.equals(book3) = "+ book1.equals(book3) + " book1.hash= "+book1.hashCode()+ " book3.hash= "+book3.hashCode());&lt;br /&gt;  System.out.println("book2.equals(book3) = "+ book2.equals(book3) + " book2.hash= "+book2.hashCode()+ " book3.hash= "+book3.hashCode());&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;book1.equals(book2) = false book1.hash= 3029737 book2.hash= 6059474&lt;br /&gt;book1.equals(book3) = true book1.hash= 3029737 book3.hash= 3029737&lt;br /&gt;book2.equals(book3) = false book2.hash= 6059474 book3.hash= 3029737&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/847122855337090405/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/contract-between-equals-and-hashcode-methods-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/847122855337090405'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/847122855337090405'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/contract-between-equals-and-hashcode-methods-in-java.html' title='Contract between equals() and hashCode()'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2859038775715600791</id><published>2014-11-07T12:55:00.000+05:30</published><updated>2014-11-07T12:55:45.648+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><title type='text'>How to insert values in table from another table</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can use subqueries in databases like Mysql and avoid multiple queries.&lt;/li&gt;&lt;li&gt;Syntax - &lt;b&gt;INSERT INTO table1 SELECT * FROM table2;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;We do not write &lt;b&gt;VALUES&lt;/b&gt;&amp;nbsp;in the query.&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : Insert Values from one table to another.&lt;/b&gt;&lt;/div&gt;Suppose we have two table person and person_old with columns&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;id int primary key&lt;/li&gt;&lt;li&gt;name varchar&lt;/li&gt;&lt;li&gt;age number&lt;/li&gt;&lt;li&gt;contact varchar&lt;/li&gt;&lt;li&gt;description text&lt;/li&gt;&lt;/ul&gt;And we want to copy all the details of the table person_old to table person. Then we must write our query as. This will insert all the rows of the person_old table to the new table person.&lt;br /&gt;&lt;pre class="brush :sql"&gt;insert into person select * from person_old;&lt;/pre&gt;&lt;br /&gt;Also if we want to add only a few columns of the table person_old to the table person.Suppose we want to add only name, age and contact to the table person from table person_old where age is less than 25, then we can query as follows.&lt;br /&gt;&lt;pre class="brush :sql"&gt;insert into person(name,age,contact) select&amp;nbsp;name,age,contact from person_old  where age &amp;lt; 25;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2859038775715600791/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/how-to-insert-values-in-table-from-another-table-in-mysql.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2859038775715600791'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2859038775715600791'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/how-to-insert-values-in-table-from-another-table-in-mysql.html' title='How to insert values in table from another table'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2799894201097697102</id><published>2014-11-04T23:25:00.001+05:30</published><updated>2014-11-04T23:28:59.489+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to ignore Foreign Key Constraint in Database</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A foreign key is a key that is a primary key in some another and is used to maintain a relationship with this table.&lt;/li&gt;&lt;li&gt;Foreign key constraint failure occurs when we are trying to assign a value to a foreign key, that does not exist in the other table of which it is primary key.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Solution : How to ignore Foreign key constraint failure&lt;/b&gt;&lt;/div&gt;When you need to avoid foreign key constraints, you can do  &lt;br /&gt;&lt;pre class="brush : sql"&gt;SET FOREIGN_KEY_CHECKS=0;&lt;/pre&gt;When you again need to set foreign key constraints on you can, &lt;br /&gt;&lt;pre class="brush: sql"&gt;SET FOREIGN_KEY_CHECKS=1;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Note : This is not recommended&lt;/b&gt;&lt;/div&gt;If you are trying to insert some data to your tables when your constrains are off, you can end up adding raw data or incorrect data to the tables due to which you application may suffer.&lt;br /&gt;So it is advised that you use it only when it is required with high priority and where you are sure that you are not messing up with your table relations and mappings. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2799894201097697102/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/11/how-to-ignore-foreign-key-constraint-failure-in-database.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2799894201097697102'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2799894201097697102'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/11/how-to-ignore-foreign-key-constraint-failure-in-database.html' title='How to ignore Foreign Key Constraint in Database'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8868371300751330843</id><published>2014-10-30T23:27:00.002+05:30</published><updated>2014-10-30T23:32:04.720+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://www.blogger.com/atom/ns#' term='Threads'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to make Thread by extending Thread class</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can &lt;b&gt;implement Runnable interface&lt;/b&gt; or &lt;b&gt;extend Thread class&lt;/b&gt; to create threads.&lt;/li&gt;&lt;li&gt;We have to override the &lt;b&gt;run()&lt;/b&gt;&amp;nbsp;method to define the functionality of thread.&lt;/li&gt;&lt;li&gt;We should call &lt;b&gt;start()&lt;/b&gt;&amp;nbsp;method to start execution of a thread as a new entity, &lt;b&gt;if we call run() method on a thread then it will not start a new thread.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;We cannot guarantee which thread will execute first even if we prioritize the threads.&lt;/li&gt;&lt;li&gt;A thread &lt;b&gt;whose run() method&amp;nbsp;is executed completely reaches the dead state&lt;/b&gt; and cannot be invoked again.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Making 3 Threads using Thread Class&lt;/b&gt;&lt;/div&gt;In the following example we are making three different threads in the class Test which extends the Thread class. We just pass a parameter name to each object of Test thread to distinguish between them.&lt;br /&gt;&lt;pre class="brush : java"&gt;class Test extends Thread{&lt;br /&gt;&lt;br /&gt;  String name;&lt;br /&gt;&lt;br /&gt;  public Test(String name){&lt;br /&gt;    this.name = name;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){  &lt;br /&gt;    System.out.println("main started");&lt;br /&gt;&lt;br /&gt;    Thread t1 = new Thread(new Test("Thread t1"));&lt;br /&gt;    Thread t2 = new Thread(new Test("Thread t2"));&lt;br /&gt;    Thread t3 = new Thread(new Test("Thread t3"));&lt;br /&gt;    t1.start();&lt;br /&gt;    t2.start();&lt;br /&gt;    t3.start();&lt;br /&gt;&lt;br /&gt;    System.out.println("main ended");&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public void run(){&lt;br /&gt;    System.out.println(name);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;Running the program for the first time. &lt;br /&gt;&lt;pre class="output"&gt;main started&lt;br /&gt;Thread t1&lt;br /&gt;Thread t3&lt;br /&gt;Thread t2&lt;br /&gt;main ended&lt;/pre&gt;Running the program for the second time. &lt;br /&gt;&lt;pre class="output"&gt;main started&lt;br /&gt;main ended&lt;br /&gt;Thread t2&lt;br /&gt;Thread t1&lt;br /&gt;Thread t3&lt;/pre&gt;Running the program for the third time. &lt;br /&gt;&lt;pre class="output"&gt;main started&lt;br /&gt;main ended&lt;br /&gt;Thread t1&lt;br /&gt;Thread t3&lt;br /&gt;Thread t2&lt;/pre&gt;The above outputs confirms that we cannot guarantee the execution of any thread. Any thread may execute first.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8868371300751330843/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-make-thread-by-extending-thread-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8868371300751330843'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8868371300751330843'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-make-thread-by-extending-thread-class.html' title='How to make Thread by extending Thread class'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1320668615452022517</id><published>2014-10-30T05:11:00.001+05:30</published><updated>2014-10-30T05:18:37.666+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Find the word with maximum occurrences in a line</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Question :&amp;nbsp;Count the number of&amp;nbsp;occurrences&amp;nbsp;of each word in a String&lt;/b&gt;&lt;/div&gt;Write a program to accept a string from the user and print the number of times each word of the string occurs in the input string.&lt;br /&gt;e.g&lt;br /&gt;If the input is &lt;b&gt;"Tinkle Twinkle little star"&lt;/b&gt; then the output should be&lt;br /&gt;Twinkle &amp;nbsp;- 2&lt;br /&gt;little &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;-1&lt;br /&gt;star &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; -1&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program&amp;nbsp;&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;import java.util.HashMap;&lt;br /&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class CountOccurances{&lt;br /&gt;  &lt;br /&gt;   public static void main(String args[]){&lt;br /&gt;      CountOccurances obj = new CountOccurances();&lt;br /&gt;      System.out.println("Enter the line of String");&lt;br /&gt;      String max = obj.maxOccurances(new Scanner(System.in).nextLine().split(" "));&lt;br /&gt;      System.out.println("Word with maximum occurances = " + max);&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   public String maxOccurances(String[] str){&lt;br /&gt;      HashMap&amp;lt;String,Integer&amp;gt; map = new HashMap&amp;lt;String,Integer&amp;gt;();&lt;br /&gt;      for(int itr=0;itr&amp;lt;str.length;itr++){&lt;br /&gt;         if(map.containsKey(str[itr])){&lt;br /&gt;           map.put(str[itr], map.get(str[itr]) +1);&lt;br /&gt;         }else{&lt;br /&gt;           map.put(str[itr],1);&lt;br /&gt;         }&lt;br /&gt;      }&lt;br /&gt;      String word = null; &lt;br /&gt;      int max = 0;&lt;br /&gt;      for(String token : map.keySet()){&lt;br /&gt;         System.out.println("word = " + token + "   occurrences = " + map.get(token) );&lt;br /&gt;         if(map.get(token) &amp;gt; max){&lt;br /&gt;           max  = map.get(token);&lt;br /&gt;           word = token;&lt;br /&gt;        }&lt;br /&gt;      }&lt;br /&gt;      return word;&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;Enter the line of String&lt;br /&gt;this is a random text from a text book with unknown text                                                 &lt;br /&gt;word = with    occurrences = 1&lt;br /&gt;word = text    occurrences = 3&lt;br /&gt;word = is      occurrences = 1&lt;br /&gt;word = a       occurrences = 2&lt;br /&gt;word = book    occurrences = 1&lt;br /&gt;word = random  occurrences = 1&lt;br /&gt;word = unknown occurrences = 1&lt;br /&gt;word = from    occurrences = 1&lt;br /&gt;word = this    occurrences = 1&lt;br /&gt;Word = with maximum occurances = text&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Logic : Concept to be used&lt;/b&gt;&lt;/div&gt;We will make use of HashMap and use String as the key and Integer as value to store the number of times each word occurs in a given line. Now we need to add each word of the line to the HashMap and count the number of occurrences of each word.&lt;br /&gt;&lt;br /&gt;We will traverse the line of string and add each word to HashMap. Before adding the word to the HashMap we will check if the word already exists in the map&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;if it exists - &amp;nbsp;then we will increment the occurrence of the word by increasing its value by 1.&lt;/li&gt;&lt;li&gt;if does not exist - then we will add the word to the map and add its value as 1.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Now, we will traverse through the map and find the word with the maximum number of occurrences.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1320668615452022517/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/find-maximum-number-of-occurrences-of-word-in-line.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1320668615452022517'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1320668615452022517'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/find-maximum-number-of-occurrences-of-word-in-line.html' title='Find the word with maximum occurrences in a line'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4064332374604523452</id><published>2014-10-30T02:25:00.000+05:30</published><updated>2014-10-30T02:43:39.195+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Random Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div id="test-controller"&gt;&lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.   &lt;br /&gt;Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;&lt;h3&gt;Select Test Type&lt;/h3&gt;&lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt;&lt;div class="hidden" id="test-container"&gt;&lt;div id="instructions"&gt;&lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;&lt;div class="test-timer-container"&gt;&lt;div class="hidden" id="test-timer"&gt;Time Left -      minutes     :     seconds    &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of these is not supported by Java ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Multilevel Inheritence&lt;/td&gt;        &lt;td class="optionB"&gt;Multiple Inheritence&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;Garbage Collection&lt;/td&gt;       &lt;td class="optionD"&gt;Data Hiding&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;Java does not support Multiple inheritence. It can be only achieved by making use of the Interfaces.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following exceptions needs not to be in a try catch block.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;ClassNotFound Exception&lt;/td&gt;        &lt;td class="optionB"&gt;Arithmatic Exception&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;FileNotFound Exception&lt;/td&gt;       &lt;td class="optionD"&gt;NoClassDefFound Exception&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;We do not need to write a Runtime exceptions in a try-catch block. Arithmatic Exception is an &lt;b&gt;Unchecked Exception&lt;/b&gt; while all other are &lt;b&gt;Checked Exceptions&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the follwoing is the command to compile a java program ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;javacompile&lt;/td&gt;        &lt;td class="optionB"&gt;compile&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;javac&lt;/td&gt;       &lt;td class="optionD"&gt;java c&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;We can compile the java code using &lt;b&gt;javac&lt;/b&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the folowing is a class level variable.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;public int a;&lt;/td&gt;        &lt;td class="optionB"&gt;public static int a;&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;public final int a;&lt;/td&gt;       &lt;td class="optionD"&gt;public volatile int a;&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;static variables are class level variables. They are not assosiated with any object of the class.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following method is used to start the execution of a thread.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;run()&lt;/td&gt;        &lt;td class="optionB"&gt;begin()&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;start()&lt;/td&gt;       &lt;td class="optionD"&gt;execute()&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;To start the execution of the thread we need to call the start()  method of the thread. This method will internally call the run() method.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following always returns the objects in a sorted manner.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;HashMap&lt;/td&gt;        &lt;td class="optionB"&gt;HashTable&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;TreeSet&lt;/td&gt;       &lt;td class="optionD"&gt;HashSet&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;A Tree set implements Set interface and extends NavigableSet class, thus it always stores and returns the objects in a sorted manner.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What is the return type of hashCode() method of the object class ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;hash&lt;/td&gt;        &lt;td class="optionB"&gt;int&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;Object&lt;/td&gt;       &lt;td class="optionD"&gt;String&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;The method hashCode() of the object class return an int value of length 16.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What will be the output of  8 &amp;gt;&amp;gt; 2&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;8&lt;/td&gt;        &lt;td class="optionB"&gt;4&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;2&lt;/td&gt;       &lt;td class="optionD"&gt;1&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;8 is represented as 1000 in binary, &lt;b&gt;&amp;gt;&amp;gt;&lt;/b&gt; will shift each bit 2 places to the right, thus it will become 0010 which is equal to 2.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What happens if we call the finalize method on an object.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;The object gets ready to be garbage collected.&lt;/td&gt;        &lt;td class="optionB"&gt;The object is forced to be garbage collected.&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;It has nothing to do with garbage collection.&lt;/td&gt;       &lt;td class="optionD"&gt;It does not allow the object to be garbage collected.&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;A&lt;/div&gt;&lt;div class="explanation"&gt;A class to the finalize method tells the garbage collector that the particular object is ready to be garbase collected.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What will be the output of the following program ?   &lt;br /&gt;&lt;pre class="brush : java"&gt;class Test{&lt;br /&gt;   public static void main(String args[]){&lt;br /&gt;      static int a = 20;&lt;br /&gt;      System.out.println(a++);&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;20&lt;/td&gt;        &lt;td class="optionB"&gt;21&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;Compilation Error&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;The above code will throw a compilation error because we cannot have a static variable inside a method. Static variables are class level methods thus cannot be inside any method.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4064332374604523452/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-random-java-test-1.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4064332374604523452'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4064332374604523452'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-random-java-test-1.html' title='Java MCQ&apos;s on Random Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-581392856630758952</id><published>2014-10-29T04:12:00.002+05:30</published><updated>2014-10-29T04:16:08.791+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Java</title><content type='html'>&lt;div id="test-controller"&gt;&lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.     Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt; &lt;h3&gt;Select Test Type&lt;/h3&gt; &lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt;  &lt;/div&gt;  &lt;div id="test-container" class="hidden"&gt;    &lt;div id="instructions"&gt; &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt; &lt;div class="test-timer-container"&gt;   &lt;div id="test-timer" class="hidden"&gt;    &lt;span&gt;Time Left - &lt;/span&gt;    &lt;span&gt;minutes&lt;/span&gt;    &lt;span&gt;:&lt;/span&gt;    &lt;span&gt;seconds&lt;/span&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;     &lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;Weakest access specifier among the following is&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;public&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;default&lt;/td&gt;       &lt;td class="optionD"&gt;protected&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;private has the weakest access among all. Private members of a class can be accessed only within the same class.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which access specifier should be used with a class which should be available everywhere in the project.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;public&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;default&lt;/td&gt;       &lt;td class="optionD"&gt;protected&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;A class with a public access can be accessed from anywhere.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which of the following access specifier cannot be used with a class.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;   &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;default&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;protected&lt;/td&gt;       &lt;td class="optionD"&gt;Both B and C&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;A class can only be public or default.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Can we write two public classes within the same class.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Yes&lt;/td&gt;        &lt;td class="optionB"&gt;No&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;We can write only one public class in a file. If we try to write two public classes in same file then we will get a compilation error.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which access specifier allows methods of a class in package A to be used by a class in package B.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;   &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;public&lt;/td&gt;        &lt;td class="optionB"&gt;protected&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;default&lt;/td&gt;       &lt;td class="optionD"&gt;Both A and B&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;    &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;Any member of a public class that is public can be used by a class in another package. A protected member of a class can be used by a class in another package only if this class inherits the other class.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which access specifier is used for hiding data of classes of a package from classes of another package.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;protected&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;default&lt;/td&gt;       &lt;td class="optionD"&gt;protected&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;default access specifier allows the data members of a class to be used within the package only.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which access specifier should be used with a constructor so that this class cannot be inherited.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;public&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;default&lt;/td&gt;       &lt;td class="optionD"&gt;protected&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;If a class has a private constructor then this class cannot be inherited.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;How many non public classes can be declared within the same file.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Only 1&lt;/td&gt;        &lt;td class="optionB"&gt;1 or more&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;only 2&lt;/td&gt;       &lt;td class="optionD"&gt;Any number of classes.&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;There can be any number of non public classes in the same file.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which access specifier allows access to the class members that inherits this class.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;  &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;public&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;default&lt;/td&gt;       &lt;td class="optionD"&gt;protected&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;protected members of a class are availabel in the classes of the same package and classes of other packages that inherit this class.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which access specifier are used for methods of an interface.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;   &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;public&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;default&lt;/td&gt;       &lt;td class="optionD"&gt;Any of the above&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;All the methods of an interface are by default public.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;    &lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/581392856630758952/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-java-test-1.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/581392856630758952'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/581392856630758952'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-java-test-1.html' title='Java MCQ&apos;s on Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-733449661640897341</id><published>2014-10-28T13:11:00.002+05:30</published><updated>2014-10-28T13:13:11.566+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Program to print Numbers in Words</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Question : Print a given number in Words&lt;/b&gt;&lt;/div&gt;Write a program to print a number and convert it into words. Suppose we enter a number&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;132 the output should be "one hundred thirty two"&lt;/li&gt;&lt;li&gt;5234 the output should be "five thousand two hundred thirty four"&lt;/li&gt;&lt;li&gt;90 the output should be "ninety"&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Print Numbers in Words&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class NumberInWords{&lt;br /&gt;&lt;br /&gt;  String once[] = {"zero","one","two","three","four","five","six","seven","eight","nine"};&lt;br /&gt;  String tens[]   = {"ten","twenty","thirty","fourty","fifty","sixty","seventy","eighty","ninty"};&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;   NumberInWords obj = new NumberInWords();&lt;br /&gt;   System.out.println("Enter the number to be converted to words");&lt;br /&gt;   Scanner sc = new Scanner(System.in);&lt;br /&gt;   System.out.println(obj.getNumber(sc.next()));&lt;br /&gt; &lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public String getNumber(String num){&lt;br /&gt;    String words="";&lt;br /&gt;    int digit = Integer.parseInt(num.charAt(0)+"");&lt;br /&gt;&lt;br /&gt;    switch(num.length())&lt;br /&gt;    {&lt;br /&gt;     case 3: &lt;br /&gt;            return words = once[digit] + " hundered "+ getNumber(num.substring(1));&lt;br /&gt;     case 2:      &lt;br /&gt;           if(Integer.parseInt(num) % 10 != 0){&lt;br /&gt;              return words = tens[digit-1] +  getNumber(num.substring(1)); &lt;br /&gt;           }else{&lt;br /&gt;              return words = tens[digit-1]; &lt;br /&gt;           }&lt;br /&gt;     case 1:&lt;br /&gt;            if(digit != 0)&lt;br /&gt;               return words += " " + once[digit];&lt;br /&gt;    default:&lt;br /&gt;         return words += getNumber(num.substring(0,num.length()-3)) + " thousand " + getNumber(num.substring(num.length()-3)) ;&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;Enter the number to be converted to words&lt;br /&gt;456&lt;br /&gt;four hundered fifty six&lt;/pre&gt;&lt;pre class="output"&gt;Enter the number to be converted to words&lt;br /&gt;789456&lt;br /&gt;seven hundered eighty nine thousand four hundered fifty six&lt;/pre&gt;&lt;pre class="output"&gt;Enter the number to be converted to words&lt;br /&gt;50&lt;br /&gt;fifty&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Logic : Important Points To Remember&lt;/b&gt;&lt;/div&gt;We will need to have the numbers 1-9 in words in an array. We will also need the numbers like 10,20 up to 90 in words. We need them because they are the root words that can be used to print numbers in words. Using these we can generate a large range of numbers in words.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Now, if the have a number string of length 1 i.e. "case 1" this means that the number is of one digit only and we can print its value from array "&lt;b&gt;once[]"&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;If the length of the number string is 2&amp;nbsp;i.e. "case 2"&amp;nbsp;this means this number is between 10 to 99. Now we check if the number is divisible by 10 or not.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;if number is divisible by 10 like 20, 80 etc, we will get the words from the array "&lt;b&gt;tens[]"&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;if number is not divisible by 10 like 55,72 etc, we will print tens's digit from array&amp;nbsp;&lt;b&gt;"tens[]"&amp;nbsp;&lt;/b&gt;and once digit from array&amp;nbsp;&lt;b&gt;"once[]".&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;If the length of the number is 3 we print the number's hundred's digit from array&amp;nbsp;&lt;b&gt;"once[]"&lt;/b&gt;&amp;nbsp;add "hundred" and then call the method recursively.&lt;/li&gt;&lt;li&gt;For the numbers greater than 9999 we will print the numbers as 1000's and then proceed to the normal cases stated above. In this case we divide the number in two parts, e.g for number 123456 we divide the number 123 and 456, the first part prints "one hundred twenty three" then adds "thousand" and then adds the second part "four hundred fifty six". This makes our complete number.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/733449661640897341/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-print-numbers-in-words.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/733449661640897341'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/733449661640897341'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-print-numbers-in-words.html' title='Program to print Numbers in Words'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3246483414840262747</id><published>2014-10-26T02:28:00.000+05:30</published><updated>2014-10-26T02:30:20.329+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>How to add objects in a HashMap</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;HashMap saves objects in form of &lt;b&gt;key-value&lt;/b&gt; pair in form of &lt;b&gt;Entry&lt;/b&gt; object (Map.Entry).&lt;/li&gt;&lt;li&gt;We can use any object as a key on which &lt;b&gt;hashCode() and equals()&lt;/b&gt; can be applied.&lt;/li&gt;&lt;li&gt;We &lt;b&gt;cannot use primitive datatypes&lt;/b&gt; as keys or values.&lt;/li&gt;&lt;li&gt;We can have &lt;b&gt;only one value corresponding to a key&lt;/b&gt;, other values will get overridden.&lt;/li&gt;&lt;li&gt;A hashMap can contain a &lt;b&gt;single null key&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Initial size&lt;/b&gt; of a HashMap &lt;b&gt;is 16&lt;/b&gt; and its &lt;b&gt;load factor is 0.75&lt;/b&gt; after this HashMap gets rehashed.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Adding Objects to HashMap&lt;/b&gt;&lt;/div&gt;Below program shows how to save key-value pairs as entry objects in a HashMap. We use &lt;b&gt;put()&lt;/b&gt;&amp;nbsp;method to store key-value pairs in a Hashmap.&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.HashMap;&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    // Declaring and Initializing a HashMap &lt;br /&gt;    HashMap&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;String, String&amp;gt;();&lt;br /&gt;&lt;br /&gt;    // Adding Objects TO HashMap&lt;br /&gt;    map.put("key 1","value 1");&lt;br /&gt;    map.put("key 2","value 2");&lt;br /&gt;    map.put("key 3","value 3");&lt;br /&gt;    map.put("key 4","value 4");&lt;br /&gt;    map.put("key 5","value 5");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3246483414840262747/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-add-objects-in-hashmap.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3246483414840262747'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3246483414840262747'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-add-objects-in-hashmap.html' title='How to add objects in a HashMap'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7226130123662081120</id><published>2014-10-26T01:18:00.001+05:30</published><updated>2014-10-26T01:22:28.540+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>How to Iterate over HashMap Collection in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A HashMap contains objects in key-value pair.&lt;/li&gt;&lt;li&gt;We can use &lt;b&gt;enumeration, iterator , for loop&lt;/b&gt;(jdk v1.5 onwards) and &lt;b&gt;lamda expression&lt;/b&gt;( jdk v1.8)&lt;/li&gt;&lt;li&gt;We can add values to HashMap using &lt;b&gt;put(key,value).&lt;/b&gt;&lt;/li&gt;&lt;li&gt;We can get all keys by .&lt;b&gt;keySet()&lt;/b&gt;&amp;nbsp;and value of a key using &lt;b&gt;.get(key)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Method 1: Traverse A HashMap using "for" loop&lt;/b&gt;&lt;/div&gt;The below example shows how we can traverse a HashMap in java using advanced for loop.&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.HashMap;&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;    HashMap&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;String, String&amp;gt;();&lt;br /&gt;    map.put("key 1","value 1");&lt;br /&gt;    map.put("key 2","value 2");&lt;br /&gt;    map.put("key 3","value 3");&lt;br /&gt;    map.put("key 4","value 4");&lt;br /&gt;    map.put("key 5","value 5");&lt;br /&gt;&lt;br /&gt;   // Iterating Map using advanced for loop available from jdk v1.5 onwards&lt;br /&gt;&lt;br /&gt;   // Iterating over Values&lt;br /&gt;   for(String value : map.values()){&lt;br /&gt;     System.out.println(value);&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   // Iterating over Keys&lt;br /&gt;   for(String key : map.keySet()){&lt;br /&gt;     System.out.println(key + "  "  + map.get(key));&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;value 1&lt;br /&gt;value 2&lt;br /&gt;value 3&lt;br /&gt;value 4&lt;br /&gt;value 5&lt;br /&gt;key 1  value 1&lt;br /&gt;key 2  value 2&lt;br /&gt;key 3  value 3&lt;br /&gt;key 4  value 4&lt;br /&gt;key 5  value 5&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Method 2: Iterate a HashMap using Iterator&amp;nbsp;&lt;/b&gt;&lt;/div&gt;In the below method we declare an iterator "itr" and then check if the iterator has next entry element, if it has then &lt;b&gt;.hasnext()&lt;/b&gt;&amp;nbsp;returns true and itr&lt;b&gt;.next()&lt;/b&gt;&amp;nbsp;gives the next entry element.&lt;br /&gt;&lt;pre class="brush: java"&gt;import java.util.HashMap;&lt;br /&gt;import java.util.Iterator;&lt;br /&gt;import java.util.Map;&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;    HashMap&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;String, String&amp;gt;();&lt;br /&gt;    map.put("key 1","value 1");&lt;br /&gt;    map.put("key 2","value 2");&lt;br /&gt;    map.put("key 3","value 3");&lt;br /&gt;    map.put("key 4","value 4");&lt;br /&gt;    map.put("key 5","value 5");&lt;br /&gt;&lt;br /&gt;   // Iterating Map using Iterator&lt;br /&gt;   Iterator&amp;lt;Map.Entry&amp;lt;String, String&amp;gt;&amp;gt; itr = map.entrySet().iterator();&lt;br /&gt;   while(itr.hasNext()){&lt;br /&gt;     Map.Entry&amp;lt;String, String&amp;gt; entry = itr.next();&lt;br /&gt;     System.out.println(entry.getKey() + "   " + entry.getValue());&lt;br /&gt;&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;key 1   value 1&lt;br /&gt;key 2   value 2&lt;br /&gt;key 3   value 3&lt;br /&gt;key 4   value 4&lt;br /&gt;key 5   value 5&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7226130123662081120/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-iterate-over-hashmap-collection.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7226130123662081120'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7226130123662081120'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-iterate-over-hashmap-collection.html' title='How to Iterate over HashMap Collection in Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8374964965309438101</id><published>2014-10-25T01:45:00.000+05:30</published><updated>2014-10-25T01:49:35.145+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Fundamentals Of Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div id="test-controller"&gt;&lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Fundamentals Of Java&lt;/b&gt;.     Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;&lt;h3&gt;Select Test Type&lt;/h3&gt;&lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt;  &lt;/div&gt;&lt;div class="hidden" id="test-container"&gt;&lt;div id="instructions"&gt;&lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;&lt;div class="test-timer-container"&gt;&lt;div class="hidden" id="test-timer"&gt;Time Left -      minutes     :     seconds    &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is not a conditional statement.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;while&lt;/td&gt;        &lt;td class="optionB"&gt;if&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;for&lt;/td&gt;       &lt;td class="optionD"&gt;do while&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;&lt;b&gt;if&lt;/b&gt; is the conditional statement out of these all the others are the loops.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is not a keyword in java.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;volatile&lt;/td&gt;        &lt;td class="optionB"&gt;clazz&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;private&lt;/td&gt;       &lt;td class="optionD"&gt;transient&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;clazz is not a keyword in java.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is not an Object.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Integer&lt;/td&gt;        &lt;td class="optionB"&gt;Boolean&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;String&lt;/td&gt;       &lt;td class="optionD"&gt;char&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;D&lt;/div&gt;&lt;div class="explanation"&gt;char is not an object, it is a primitive datatype.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of these is invalid.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;char A = 1&lt;/td&gt;        &lt;td class="optionB"&gt;char A = 'A'&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;char A = "A"&lt;/td&gt;       &lt;td class="optionD"&gt;Both A and C&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;"A" represents a string thus this is wrong. Option A is correct because char can be assigned an a positive integer value.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is the parent class of all the classes.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Lang&lt;/td&gt;        &lt;td class="optionB"&gt;Object&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;Java&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;Object class is the parent class of all the classes in java.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Can we force garbace collection in Java.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Yes&lt;/td&gt;        &lt;td class="optionB"&gt;No&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;No we cannot force garbage collection in java. We can only tell JVM that a particular object is ready for garbage collection&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is not a type of variable.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;transient&lt;/td&gt;        &lt;td class="optionB"&gt;volatile&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;native&lt;/td&gt;       &lt;td class="optionD"&gt;final&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;native is not a type of a variable. All the others are valid for a variable in java.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;How many diffrent values can an integer have in java.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;2&lt;sup&gt;8&lt;/sup&gt;&lt;/td&gt;        &lt;td class="optionB"&gt;2&lt;sup&gt;16&lt;/sup&gt;&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;2&lt;sup&gt;32&lt;/sup&gt;&lt;/td&gt;       &lt;td class="optionD"&gt;2&lt;sup&gt;64&lt;/sup&gt;&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;An integer can have 2&lt;sup&gt;32&lt;/sup&gt;  different values in java. An integer is of 4 bytes that means 2&lt;sup&gt;8&lt;/sup&gt;4 = 2&lt;sup&gt;32&lt;/sup&gt; (Also 1 byte = 8 bits )&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What will be the output of the following program. &lt;br /&gt;&lt;pre class="brush : java"&gt;class A{&lt;br /&gt;   public static void main(String args[]){&lt;br /&gt;      char a = 1;&lt;br /&gt;      int n = 1;&lt;br /&gt;      System.out.println(a == n);&lt;br /&gt;   }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Compilation Error&lt;/td&gt;        &lt;td class="optionB"&gt;true&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;false&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;The above code will print true, because the char value of a is equal to integer value of n.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is an invalid in java&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%px;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;a = ++a;&lt;/td&gt;        &lt;td class="optionB"&gt;a -= --a;&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;a %= a;&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;D&lt;/div&gt;&lt;div class="explanation"&gt;All of the above are correct. &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8374964965309438101/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-fundamentals-of-java-test2.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8374964965309438101'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8374964965309438101'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-fundamentals-of-java-test2.html' title='Java MCQ&apos;s on Fundamentals Of Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4330810906425362146</id><published>2014-10-22T03:25:00.000+05:30</published><updated>2014-10-22T03:25:03.083+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Threads'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>How to make threads using Runnable Interface.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can make threads in java by implementing &lt;b&gt;Runnable Interface&lt;/b&gt;. Any class that implements this interface must override its &lt;b&gt;run()&lt;/b&gt; method.&lt;/li&gt;&lt;li&gt;The call to &lt;b&gt;start()&lt;/b&gt;&amp;nbsp;method internally calls the &lt;b&gt;run()&lt;/b&gt;&amp;nbsp;method of the thread.&lt;/li&gt;&lt;li&gt;We can not guarantee which thread would be executed first. &lt;b&gt;Thread Priority&lt;/b&gt; only promises the &lt;b&gt;cpu time and not that it will be run first&lt;/b&gt;.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : How to make threads by implementing Runnable Interface&lt;/b&gt;&lt;/div&gt;In the below example we are &lt;b&gt;implementing the Runnable interface&lt;/b&gt; and creating two threads "&lt;b&gt;t1&lt;/b&gt;" and "&lt;b&gt;t2&lt;/b&gt;" and &lt;b&gt;calling the run()&lt;/b&gt; method &lt;b&gt;using&lt;/b&gt; thread&lt;b&gt;.start().&lt;/b&gt;&amp;nbsp;We run the same program twice and we might get different outputs each time as shown below.&lt;br /&gt;&lt;pre class="brush:java"&gt;class Test implements Runnable{&lt;br /&gt; String msg;&lt;br /&gt;&lt;br /&gt;public void run(){&lt;br /&gt;System.out.println("Running Thread" + msg);&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public Test(String msg){&lt;br /&gt;this.msg = msg;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;System.out.println("Stating main");&lt;br /&gt;Thread t1 = new Thread(new Test("t1"));&lt;br /&gt;Thread t2 = new Thread(new Test("t2"));&lt;br /&gt;t1.start();&lt;br /&gt;t2.start();&lt;br /&gt;&lt;br /&gt;System.out.println("Ending main");&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;Running for first time &lt;br /&gt;&lt;pre class="output"&gt;Stating main&lt;br /&gt;Ending main&lt;br /&gt;Running Threadt2&lt;br /&gt;Running Threadt1&lt;/pre&gt;Running for second time &lt;br /&gt;&lt;pre class="output"&gt;Stating main&lt;br /&gt;Ending main&lt;br /&gt;Running Threadt2&lt;br /&gt;Running Threadt1&lt;br /&gt;&lt;/pre&gt;The abobe proves that we can not judge that which thread will be executed first. &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : How to make threads using Runnable Interface in a different class.&lt;/b&gt;&lt;/div&gt;The below program shows how we can threads of a class that implements Runnable Interface and call these threads from a different class. Here we make a class Sample that implements Runnable Interface and a Test class that makes threads of this class.&lt;br /&gt;&lt;pre class="brush:java"&gt;class Sample implements Runnable{&lt;br /&gt;&lt;br /&gt;  String msg;&lt;br /&gt;&lt;br /&gt;  public void run(){&lt;br /&gt;     System.out.println("Running Thread" + msg);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public Sample(String msg){&lt;br /&gt;     this.msg = msg;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    System.out.println("Stating main");&lt;br /&gt;    Thread t1 = new Thread(new Sample("t1"));&lt;br /&gt;    Thread t2 = new Thread(new Sample("t2"));&lt;br /&gt;    t1.start();&lt;br /&gt;    t2.start();&lt;br /&gt;    System.out.println("Ending main");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;Stating main&lt;br /&gt;Ending main&lt;br /&gt;Running Threadt1&lt;br /&gt;Running Threadt2&lt;br /&gt;&lt;/pre&gt;Running the program for the second time &lt;br /&gt;&lt;pre class="output"&gt;Stating main&lt;br /&gt;Running Threadt1&lt;br /&gt;Ending main&lt;br /&gt;Running Threadt2&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4330810906425362146/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-make-threads-using-runnable-interface.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4330810906425362146'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4330810906425362146'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-make-threads-using-runnable-interface.html' title='How to make threads using Runnable Interface.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6853802782498429562</id><published>2014-10-21T02:12:00.002+05:30</published><updated>2014-10-21T02:22:03.382+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>How to get all Declared Fields in a Class</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can use reflection to find all the fields available within a class.&lt;/li&gt;&lt;li&gt;We can get all the declared fields in a class by &lt;b&gt;getDeclaredFields()&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;We can search for any field in a class by using &lt;b&gt;getField().&lt;/b&gt;&amp;nbsp;It throws&amp;nbsp;&lt;b&gt;NoSuchFieldException&lt;/b&gt;&amp;nbsp;if the field does not exist in the class.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Get all the declared fields in a class&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;import java.lang.reflect.Field;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class SampleClass{&lt;br /&gt;&lt;br /&gt; String s1 = "Class variable";&lt;br /&gt; int a = 123;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;   Test obj = new Test();&lt;br /&gt;   try{&lt;br /&gt; Class clazz = Class.forName("SampleClass");&lt;br /&gt;        Field feilds[] = obj.getDeclaredFields(clazz);&lt;br /&gt;        for(Field feild : feilds){&lt;br /&gt;          System.out.println(feild);&lt;br /&gt;        }&lt;br /&gt;   }catch(Exception e){&lt;br /&gt; e.printStackTrace();&lt;br /&gt;   }&lt;br /&gt;   &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  public Field[] getDeclaredFields(Class clazz){&lt;br /&gt;    return clazz.getDeclaredFields(); &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;java.lang.String SampleClass.s1&lt;br /&gt;int SampleClass.a&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Get a particular field declared in a class.&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;import java.lang.reflect.Field;&lt;br /&gt;&lt;br /&gt;class SuperClass{&lt;br /&gt; public String abc = "super class";&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class SampleClass extends SuperClass{&lt;br /&gt;&lt;br /&gt; public String s1 = "Class variable";&lt;br /&gt; public int a = 123;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;   Test obj = new Test();&lt;br /&gt;   try{&lt;br /&gt; Class clazz = Class.forName("SampleClass");&lt;br /&gt;        Field feild = obj.getField(clazz, "abc");&lt;br /&gt;        System.out.println(feild);&lt;br /&gt;   }catch(Exception e){&lt;br /&gt; e.printStackTrace();&lt;br /&gt;   }&lt;br /&gt;   &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  public Field getField(Class clazz, String field) throws NoSuchFieldException{&lt;br /&gt;    return clazz.getField(field); &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;public java.lang.String SuperClass.abc&lt;/pre&gt;We can &lt;b&gt;only get the public fields&lt;/b&gt; declared in a class using this method. In case we try to access the private or default fields of the class, we will get a &lt;b&gt;NoSuchFieldException&lt;/b&gt;.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6853802782498429562/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-get-all-declared-fields-in-class.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6853802782498429562'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6853802782498429562'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-get-all-declared-fields-in-class.html' title='How to get all Declared Fields in a Class'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2708748475497763300</id><published>2014-10-20T16:53:00.001+05:30</published><updated>2014-10-20T17:01:23.085+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>How to get all Methods available in a Class</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can use Reflection API to get all methods available in a class.&lt;/li&gt;&lt;li&gt;Method class is present in &lt;b&gt;java.land.reflect.Method&lt;/b&gt; class.&lt;/li&gt;&lt;li&gt;We can use &lt;b&gt;getDeclaredMethods()&lt;/b&gt; to get all the declared Methods in a class.&lt;/li&gt;&lt;li&gt;We can use &lt;b&gt;getMethods()&lt;/b&gt;&amp;nbsp;to get all the methods available in a class. It also includes methods from its super classes.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Get All Methods Declared in a Class&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush :java"&gt;import java.lang.reflect.Method;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class SampleClass{&lt;br /&gt;&lt;br /&gt; String s1 = "Class variable";&lt;br /&gt; int a = 123;&lt;br /&gt;&lt;br /&gt; public SampleClass(){&lt;br /&gt;  System.out.println("SampleClass Default Constructor");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public SampleClass(String str){&lt;br /&gt;  System.out.println("SampleClass Overloaded Constructor");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void show(){&lt;br /&gt;  System.out.println("SampleClass Show Method");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void print(){&lt;br /&gt;  System.out.println("SampleClass Print Method");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;   Test obj = new Test();&lt;br /&gt;   try{&lt;br /&gt; Class clazz = Class.forName("SampleClass");&lt;br /&gt;        Method declaredMethods[] = obj.getDeclaredMethods(clazz);&lt;br /&gt;        for(Method method : declaredMethods){&lt;br /&gt;          System.out.println(method);&lt;br /&gt;        }&lt;br /&gt;   }catch(Exception e){&lt;br /&gt; e.printStackTrace();&lt;br /&gt;   }&lt;br /&gt;   &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  public Method[] getDeclaredMethods(Class clazz){&lt;br /&gt;    return clazz.getDeclaredMethods(); &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;public void SampleClass.show()&lt;br /&gt;public void SampleClass.print()&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Get All Declared and Inherited Methods of a Class&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush :java"&gt;import java.lang.reflect.Method;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class SampleClass{&lt;br /&gt;&lt;br /&gt; String s1 = "Class variable";&lt;br /&gt; int a = 123;&lt;br /&gt;&lt;br /&gt; public SampleClass(){&lt;br /&gt;  System.out.println("SampleClass Default Constructor");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public SampleClass(String str){&lt;br /&gt;  System.out.println("SampleClass Overloaded Constructor");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void show(){&lt;br /&gt;  System.out.println("SampleClass Show Method");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void print(){&lt;br /&gt;  System.out.println("SampleClass Print Method");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;   Test obj = new Test();&lt;br /&gt;   try{&lt;br /&gt; Class clazz = Class.forName("SampleClass");&lt;br /&gt; Method allMethods[] = obj.getAllMethods(clazz);&lt;br /&gt;        for(Method method : allMethods){&lt;br /&gt;          System.out.println(method);&lt;br /&gt;        }&lt;br /&gt;   }catch(Exception e){&lt;br /&gt; e.printStackTrace();&lt;br /&gt;   }&lt;br /&gt;   &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  public Method[] getAllMethods(Class clazz){&lt;br /&gt;    return clazz.getMethods(); &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;public void SampleClass.show()&lt;br /&gt;public void SampleClass.print()&lt;br /&gt;public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException&lt;br /&gt;public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException&lt;br /&gt;public final void java.lang.Object.wait() throws java.lang.InterruptedException&lt;br /&gt;public boolean java.lang.Object.equals(java.lang.Object)&lt;br /&gt;public java.lang.String java.lang.Object.toString()&lt;br /&gt;public native int java.lang.Object.hashCode()&lt;br /&gt;public final native java.lang.Class java.lang.Object.getClass()&lt;br /&gt;public final native void java.lang.Object.notify()&lt;br /&gt;public final native void java.lang.Object.notifyAll()&lt;/pre&gt;Difference between the &lt;b&gt;getDeclaredMethods()&lt;/b&gt; and &lt;b&gt;getMethods()&lt;/b&gt;&amp;nbsp;is that&amp;nbsp;getDeclaredMethods() will return all the methods that are declared within the class while getMethods() will return all the methods that are declared in the class and all the methods that this class inherits from its super classes.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2708748475497763300/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-get-all-methods-available-in-class-using-reflection-api.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2708748475497763300'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2708748475497763300'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-get-all-methods-available-in-class-using-reflection-api.html' title='How to get all Methods available in a Class'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-9009539705479084690</id><published>2014-10-20T16:28:00.000+05:30</published><updated>2014-10-20T16:32:58.948+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>How to get all Constructors declared in a Class</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can get the constructors declared in a class using Reflection API.&lt;/li&gt;&lt;li&gt;Constructor class is present in &lt;b&gt;java.lang.reflect.Constructor&lt;/b&gt;&amp;nbsp;class.&lt;/li&gt;&lt;li&gt;The&amp;nbsp;&lt;b&gt;getDeclaredConstructors()&lt;/b&gt;&amp;nbsp;method will return an array of Constructors in a class.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Get all constructors declared in a class&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush :java"&gt;import java.lang.reflect.Constructor;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class SampleClass{&lt;br /&gt;&lt;br /&gt; String s1 = "Class variable";&lt;br /&gt; int a = 123;&lt;br /&gt;&lt;br /&gt; public SampleClass(){&lt;br /&gt;  System.out.println("SampleClass Default Constructor");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public SampleClass(String str){&lt;br /&gt;  System.out.println("SampleClass Overloaded Constructor");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void show(){&lt;br /&gt;  System.out.println("SampleClass Show Method");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public void print(){&lt;br /&gt;  System.out.println("SampleClass Print Method");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;   Test obj = new Test();&lt;br /&gt;   try{&lt;br /&gt; Class clazz = Class.forName("SampleClass");&lt;br /&gt;        Constructor cc[] = obj.getConstructors(clazz);&lt;br /&gt;        for(Constructor constructor : cc){&lt;br /&gt;          System.out.println(constructor);&lt;br /&gt;        }&lt;br /&gt;   }catch(Exception e){&lt;br /&gt; e.printStackTrace();&lt;br /&gt;   }&lt;br /&gt;   &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;  public Constructor[] getConstructors(Class clazz){&lt;br /&gt;    return clazz.getDeclaredConstructors(); &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;public SampleClass()&lt;br /&gt;public SampleClass(java.lang.String)&lt;br /&gt;&lt;/pre&gt;The above example shows how we can get all the constructors that are declared within a class. We first get the &lt;b&gt;Class&lt;/b&gt;&amp;nbsp;of the class and then call the&amp;nbsp;getDeclaredConstructors() methods to get an array of all declared constructors.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/9009539705479084690/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-get-all-constructors-declared-in-class-using-reflection-api.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9009539705479084690'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9009539705479084690'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-get-all-constructors-declared-in-class-using-reflection-api.html' title='How to get all Constructors declared in a Class'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1443651193045747254</id><published>2014-10-19T22:08:00.000+05:30</published><updated>2014-10-19T22:08:33.169+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>What is Reflection API and its use</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What is Java Reflection API&lt;/b&gt;&lt;/div&gt;Java Reflection &amp;nbsp;API is a technique that enables us to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc. at compile time. It is also possible to instantiate new objects, invoke methods and get/set field values using reflection. &lt;br /&gt;&lt;br /&gt;Reflection API was introduced in java jdk v1.1&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Heading&lt;/b&gt;&lt;/div&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/what-is-java-reflection-api-in-java-and-what-are-its-uses.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1443651193045747254'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1443651193045747254'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6153845380222704255</id><published>2014-10-19T18:04:00.001+05:30</published><updated>2014-10-19T18:04:10.839+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Program to convert String to Integer without using Integer.parseInt()</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Convert a String to an Integer without using parseInt() method.&lt;/b&gt;&lt;/div&gt;We have to convert a String suppose "12345" to its equivalent integer value that is 13245 without using the parseInt() method. We need to check if the number is positive or negative and convert accordingly.&lt;br /&gt;&lt;pre class="brush: java"&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;    System.out.println("Enter the string to be converted to integer number ");&lt;br /&gt;    System.out.println(new Test().stringToInteger(new Scanner(System.in).next()));&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public int stringToInteger(String str){&lt;br /&gt;    int number = 0,itr=0;&lt;br /&gt;    boolean flag = false;&lt;br /&gt;&lt;br /&gt;    if(str.charAt(0) == '-'){&lt;br /&gt;       flag = true;&lt;br /&gt;       itr = 1; &lt;br /&gt;    }&lt;br /&gt;      &lt;br /&gt;    for(; itr &amp;lt;=str.length()-1 ; itr++){&lt;br /&gt;      char digit = str.charAt(itr);&lt;br /&gt;      number += Math.pow(10, str.length() - itr -1) * (digit-48);&lt;br /&gt;    }&lt;br /&gt;    if(flag)&lt;br /&gt;       return -number;&lt;br /&gt;    else&lt;br /&gt;       return number;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;Enter the string to be converted to integer number &lt;br /&gt;12345&lt;br /&gt;12345&lt;br /&gt;&lt;br /&gt;Enter the string to be converted to integer number &lt;br /&gt;-12345&lt;br /&gt;-12345&lt;/pre&gt;In the above program we traverse the string from first to last and find the power of 10 that is equal to the number of digits that are to the right of it and multiply it by the digit itself. For example&lt;br /&gt;9 &amp;nbsp; &amp;nbsp; = 10^0 * 9 = 9&lt;br /&gt;87 &amp;nbsp; = 10^1*8 + 10^0*7 = 87&lt;br /&gt;751 = 10^2*7 + 10^1*5 + 10^0*1 = 751&lt;br /&gt;But when the number is negative i.e starts with a '-' sign, we find the number in the same form but change the sign of the number at the end.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6153845380222704255/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-convert-string-to-integer-without-using-parseint-method.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6153845380222704255'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6153845380222704255'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-convert-string-to-integer-without-using-parseint-method.html' title='Program to convert String to Integer without using Integer.parseInt()'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5269405886000746867</id><published>2014-10-18T23:59:00.000+05:30</published><updated>2014-10-18T23:59:00.005+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Program to check if the given number is Armstrong</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Find if the given number is Armstrong&lt;/b&gt;&lt;/div&gt;A number is said to be armstrong if the sum of cube of its digits is equal to the number itself.&lt;br /&gt;e.g.&lt;br /&gt;371 is an Armstrong number, since &amp;nbsp; 3^3 + 7^3 + 1^3 = 371 &lt;br /&gt;341 is not Armstrong number, since &amp;nbsp;3^3 + 4^3 + 1^3 = 92&lt;br /&gt;&lt;pre class="brush: java"&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class Armstrong{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;     Armstrong obj = new Armstrong();&lt;br /&gt;     System.out.println("Enter a number to check Armstrong"); &lt;br /&gt;     Scanner sc = new Scanner(System.in); &lt;br /&gt;     obj.isArmstrong(sc.nextInt());&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;  public void isArmstrong(int n){&lt;br /&gt;     int sum = 0,number = n;&lt;br /&gt;     while(n!=0){ &lt;br /&gt;       sum += Math.pow(n%10,3);&lt;br /&gt;       n = n/10;&lt;br /&gt;     }&lt;br /&gt;     if(sum == number)&lt;br /&gt;       System.out.println("Number "+number+" is Armstrong");&lt;br /&gt;     else&lt;br /&gt;       System.out.println("Number "+number+" is not Armstrong");&lt;br /&gt;     &lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;Enter a number to check Armstrong&lt;br /&gt;371&lt;br /&gt;Number 371 is Armstrong&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here we run the while loop &lt;b&gt;while(n!=0)&lt;/b&gt; till the value of n does not becomes zero. In the loop we find the last digit of the number by &lt;b&gt;n%2&lt;/b&gt;&amp;nbsp;and add the cube of the digit to the sum. At last if the sum is equal to the sum of cubes of digit we say the number is armstrong. &lt;pre&gt;&lt;br /&gt;sum    = 0    digit  = 1 number = 371&lt;br /&gt;sum    = 1    digit  = 7 number = 37&lt;br /&gt;sum    = 344  digit  = 3 number = 3&lt;br /&gt;sum    = 371  digit  = 0 number = 0&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5269405886000746867/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-check-if-given-number-is-armstrong.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5269405886000746867'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5269405886000746867'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-check-if-given-number-is-armstrong.html' title='Program to check if the given number is Armstrong'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-9089671479978928172</id><published>2014-10-17T14:42:00.000+05:30</published><updated>2014-10-17T14:42:45.187+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Reflection API'/><title type='text'>How to make Object of a class By Reflection API</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Reflection API is a powerful technique to find out environment of a class as well as to inspect the class itself.&lt;/li&gt;&lt;li&gt;Reflection API was introduced in Java v1.1&lt;/li&gt;&lt;li&gt;It allows user to get full information about the classes, interfaces, constructors, methods, variables etc.&lt;/li&gt;&lt;li&gt;It is available in java.lang.reflect package.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : Creating Object Using Reflection API&lt;/b&gt;&lt;/div&gt;In the example below we are trying to create the object of class "A" in class "Test" using reflection api. We will first get the class of "A" by using &lt;b&gt;.class&lt;/b&gt;&amp;nbsp;and then call the &lt;b&gt;newInstance()&lt;/b&gt; method to get the object of this class.&lt;br /&gt;&lt;pre class="brush : java"&gt;class A{&lt;br /&gt;&lt;br /&gt;  public A(){&lt;br /&gt;    System.out.println("class A constructor");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public void show(){&lt;br /&gt;    System.out.println("class A show() ");&lt;br /&gt;  }&lt;br /&gt;  public void show(String s){&lt;br /&gt;    System.out.println(s);&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class Test{&lt;br /&gt;    &lt;br /&gt;   public static void main(String args[]){&lt;br /&gt;     try{&lt;br /&gt;&lt;br /&gt;       Class clazz = A.class;&lt;br /&gt;       A object = (A)clazz.newInstance();&lt;br /&gt;       object.show();&lt;br /&gt;       object.show("class A show(String)");&lt;br /&gt;&lt;br /&gt;     }catch(Exception e){&lt;br /&gt;       System.out.println("Error");&lt;br /&gt;&lt;br /&gt;     }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;class A constructor&lt;br /&gt;class A show() &lt;br /&gt;class A show(String)&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : Creating Object Using Class.forName()&lt;/b&gt;&lt;/div&gt;In this example we will create the object of a class using Class.forName("").newInstance(). This will give us an object of the class we specify in .&lt;b&gt;forName().&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;class A{&lt;br /&gt;&lt;br /&gt;  public A(){&lt;br /&gt;    System.out.println("class A constructor");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public void show(){&lt;br /&gt;    System.out.println("class A show() ");&lt;br /&gt;  }&lt;br /&gt;  public void show(String s){&lt;br /&gt;    System.out.println(s);&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class Test{&lt;br /&gt;    &lt;br /&gt;   public static void main(String args[]){&lt;br /&gt;     try{&lt;br /&gt;       A object = (A)Class.forName("A").newInstance();&lt;br /&gt;       object.show();&lt;br /&gt;       object.show("class A show(String)");&lt;br /&gt;&lt;br /&gt;     }catch(Exception e){&lt;br /&gt;       System.out.println("Error");&lt;br /&gt;&lt;br /&gt;     }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;class A constructor&lt;br /&gt;class A show() &lt;br /&gt;class A show(String)&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/9089671479978928172/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-make-object-of-class-by-reflection-api.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9089671479978928172'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/9089671479978928172'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-to-make-object-of-class-by-reflection-api.html' title='How to make Object of a class By Reflection API'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1964712424110946487</id><published>2014-10-13T00:35:00.000+05:30</published><updated>2014-10-13T00:35:39.402+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Method Overloading</title><content type='html'>&lt;div id="test-controller"&gt;&lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Method Overloading&lt;/b&gt;. &lt;br /&gt;   Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt; &lt;h3&gt;Select Test Type&lt;/h3&gt; &lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt;  &lt;/div&gt;  &lt;div id="test-container" class="hidden"&gt;    &lt;div id="instructions"&gt; &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt; &lt;div class="test-timer-container"&gt;   &lt;div id="test-timer" class="hidden"&gt;    &lt;span&gt;Time Left - &lt;/span&gt;    &lt;span&gt;minutes&lt;/span&gt;    &lt;span&gt;:&lt;/span&gt;    &lt;span&gt;seconds&lt;/span&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;     &lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;Compile time polymorphism is also known as &lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Method Overriding&lt;/td&gt;        &lt;td class="optionB"&gt;Method Overloading&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Method Rewriting&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;Comiple Time polymorphism means that methods with same names gets resolved at the compile time only. JVM does not have to resolve these methods at runtime.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which conditions should a method satisfy for overloading a method in a class.  A.its return type should be same.  B.number of parameters it takes should be different.  C.type of parameters should be different. &lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Only A&lt;/td&gt;        &lt;td class="optionB"&gt;Both A and B&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Either B and C&lt;/td&gt;       &lt;td class="optionD"&gt;All of the above are true.&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;For method overloading either the methods should have different number of paramaters or the type of parameters should be different.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Can we overload the constructor of a class ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Yes&lt;/td&gt;        &lt;td class="optionB"&gt;No&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;Yes, we can overload the constructors of a class as long as they satisfy the conditions of overloading.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will happen if we try to overload the main method in a class.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;main method gets overloaded&lt;/td&gt;       &lt;td class="optionD"&gt;None Of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;We can overload any method if it satisfy the overloading conditions, main method can also be overloaded. POint to remember is that the program will always start from the main method that takes "an array of Strings". All the other methods will be overloaded methods. &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.print(" test1");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; private void test(String s1){&lt;br /&gt;  System.out.print(s1);&lt;br /&gt;  this.test() ;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  System.out.print(" main");&lt;br /&gt;  Test obj = new Test();&lt;br /&gt;  obj.test(" test2");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;main test1 test2&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;main test2 test1&lt;/td&gt;       &lt;td class="optionD"&gt;None Of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;    &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;First "main" will be prinrted then, we call will go to the parameterized test() and "test2" will be printed and then control goes to no args test() and will print "test1" &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public int area(int a, int b){&lt;br /&gt;  System.out.println("int");&lt;br /&gt;  return a * b;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public float area(float a, float b){&lt;br /&gt;  System.out.println("float");&lt;br /&gt;  return a * b;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public double area(double a, double b){&lt;br /&gt;  System.out.println("double");&lt;br /&gt;  return a * b;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Test obj = new Test();&lt;br /&gt;  obj.area(1, 2.2);&lt;br /&gt;  obj.area(1F, 2.2);&lt;br /&gt;  obj.area(1F, 2);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;double float float&lt;/td&gt;        &lt;td class="optionB"&gt;int double float&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;int float double&lt;/td&gt;       &lt;td class="optionD"&gt;double double float&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;1 is an in value, 2.2 is a double value, 1F is a float value and 2 is int. So area(1,2.2) will go to area(double,double), area(1F,2.2) will also go to area(double,double) and area(1F,2) will go to area(float,float)&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public void test(int a){&lt;br /&gt;  System.out.println("int");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public float test(float a){&lt;br /&gt;  System.out.println("float");&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Test obj = new Test();&lt;br /&gt;  obj.test( 2.2 );&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;int&lt;/td&gt;       &lt;td class="optionD"&gt;float&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;It will give a compile time error because the 2.2 is a double value and there is no method "test" that takes double value.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public int test(int a){&lt;br /&gt;  System.out.println("test1");&lt;br /&gt;   return a;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public float test(int a){&lt;br /&gt;  System.out.println("test2");&lt;br /&gt;  return b;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  Test obj = new Test();&lt;br /&gt;  obj.test(2);&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;test1 &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;test2&lt;/td&gt;       &lt;td class="optionD"&gt;test1 test2&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;The code will give a compile time error because both the methods test() takes same arguments so jvm will not be able to decide which method to call&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args){&lt;br /&gt;  System.out.println("main 1");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  System.out.println("main 2");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;main 1&lt;/td&gt;       &lt;td class="optionD"&gt;main 2&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;Execution of the program always starts from the main method that takes an "array of strings" as the parameter. The above code containes the overloaded method main, when we will run the program it will print "main 2" &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;   &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("testA ");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public void test(String args){&lt;br /&gt;  this.test();&lt;br /&gt;  System.out.println("testA "+ args);&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("testB ");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  A obj = new B();&lt;br /&gt;  obj.test("check");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;testA testB check&lt;/td&gt;        &lt;td class="optionB"&gt;testA check testA&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;testB testA check&lt;/td&gt;       &lt;td class="optionD"&gt;Compile time error&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;       &lt;div class="explanation"&gt;Method test(String) of class A will be called first, "this.test()" will call the test() method of class A, but since test() method is overridden in class B, the call we go to test() method of class B and it will print "testB". Now control will again come back to test(String) method and it will print "testB check"&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;    &lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1964712424110946487/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-method-overloading.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1964712424110946487'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1964712424110946487'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-method-overloading.html' title='Java MCQ&apos;s on Method Overloading'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8817449400569775778</id><published>2014-10-11T20:31:00.000+05:30</published><updated>2014-10-11T21:57:13.878+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Method Overriding</title><content type='html'>&lt;div id="test-controller"&gt;&lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Method Overriding&lt;/b&gt;. &lt;br /&gt;   Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt; &lt;h3&gt;Select Test Type&lt;/h3&gt; &lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt;  &lt;/div&gt;  &lt;div id="test-container" class="hidden"&gt;    &lt;div id="instructions"&gt; &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt; &lt;div class="test-timer-container"&gt;   &lt;div id="test-timer" class="hidden"&gt;    &lt;span&gt;Time Left - &lt;/span&gt;    &lt;span&gt;minutes&lt;/span&gt;    &lt;span&gt;:&lt;/span&gt;    &lt;span&gt;seconds&lt;/span&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;     &lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;Compile time polymorphism is also known as &lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Method Overriding&lt;/td&gt;        &lt;td class="optionB"&gt;Method Overloading&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Method Rewriting&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;Comiple Time polymorphism means that methods with same names gets resolved at the compile time only. JVM does not have to resolve these methods at runtime.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;Which conditions should a method satisfy to override a method of parent class.  A.its return type should be same.  B.number of parameters it takes should be same and of same type.  C.its access specifier should not be weaker than the method to be overloaded. &lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Only A&lt;/td&gt;        &lt;td class="optionB"&gt;Only B&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Both A and B&lt;/td&gt;       &lt;td class="optionD"&gt;All of the above are true.&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;For a method to override a parent class method it should satisfy all the given conditions.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What happens if we override static methods of a class.&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile time error&lt;/td&gt;        &lt;td class="optionB"&gt;Run time error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;No error is thrown&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;Static methods are class level methods and are not bound to the objects, thus static methods cannot be overloaded. If we try to overload static methods, both the methods will work and can be called with the reference of the class. We wont get any sort of error.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program.  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt;static void t(){}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt;&lt;br /&gt;public void t(){}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Code works fine&lt;/td&gt;       &lt;td class="optionD"&gt;None Of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;Here method "t" of class B tries to override the method "t" of class A, but we cannot override a static method. Thus we will get a compile time error. When we will do &lt;b&gt;A.t()&lt;/b&gt; the jvm will not be able to decide which method to call, the method of class A or method of class B, since both the mothods can be called with this syntax.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt;static void t(){}&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt;&lt;br /&gt;static void t(){}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Code works fine&lt;/td&gt;       &lt;td class="optionD"&gt;None Of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;    &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;Here we are not overring the method "t()", since method "t" is static method it can be called only with class reference, thus "A.t()" will call method of class A and "B.t()" will call the method of class B. Also you should remember that static methods are at class variables and cannot be overridden.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class A");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class B");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  A object = new B();&lt;br /&gt;  object.test(); &lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Class A&lt;/td&gt;       &lt;td class="optionD"&gt;Class B&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;This is a case of mthod overriding, method test() of class A gets overriden by method test() of class B. So at run time whenever we call test(), it will always give us method of class B.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class A");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class B");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  B object = new A();&lt;br /&gt;  object.test(); &lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Class A&lt;/td&gt;       &lt;td class="optionD"&gt;Class B&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;It will give a compile time error because we cannot give reference of a child class to the object of a parent class.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class A");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class B");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  B object = (B)new A();&lt;br /&gt;  object.test(); &lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Class A&lt;/td&gt;       &lt;td class="optionD"&gt;Class B&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;The code will comiple successfully since &lt;b&gt;B object = (B)new A();&lt;/b&gt; at compile time will work fine since we typecast object of class A to object of class B. But at runtime it will throw a ClassCastException since class A cannot be casted to class B.  &lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class A");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt;&lt;br /&gt; void test(){&lt;br /&gt;  System.out.println("Class B");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  A object = new B();&lt;br /&gt;  object.test(); &lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Compile Time Error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime Error&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Class A&lt;/td&gt;       &lt;td class="optionD"&gt;Class B&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;The code will result into compile time error because it fails the condition of overriding that the access specifier of the overriding method cannot be weaker than the actual method. In our example, method test() has public access and in the class B we are tring to assign a weaker access to this method that is default, thus it will give a compile time error.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt; &lt;div class="question"&gt;What will be the output of the following program ?  &lt;pre class="brush : java"&gt;&lt;br /&gt;class A{&lt;br /&gt; int var = 10;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class A");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class B extends A{&lt;br /&gt; int var = 20;&lt;br /&gt; public void test(){&lt;br /&gt;  System.out.println("Class B");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  A object = new B();&lt;br /&gt;  object.test(); &lt;br /&gt;  System.out.println(object.var);  &lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt; &lt;/pre&gt;&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Class A 10&lt;/td&gt;        &lt;td class="optionB"&gt;Class B 10&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Class A 20 &lt;/td&gt;       &lt;td class="optionD"&gt;Class B 20 &lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;       &lt;div class="explanation"&gt;The method test() gets overridden and hence &lt;b&gt;object.test()&lt;/b&gt; will print "Class B". Variables of a class never gets overridden, thus &lt;b&gt;object.var&lt;/b&gt; will give 10, the value of the variable in class A, because the reference of the object is of class A.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;    &lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8817449400569775778/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-method-overriding.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8817449400569775778'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8817449400569775778'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-method-overriding.html' title='Java MCQ&apos;s on Method Overriding'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1112002342987898577</id><published>2014-10-11T01:35:00.001+05:30</published><updated>2014-10-11T01:41:54.320+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Find the Sum of Even Digits of a Number</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Question : Find sum of digits of number that are even.&lt;/b&gt;&lt;/div&gt;Suppose we have a number 456789 and we need to find the sum of all the digits in the number that are even or divisible by 2.&lt;br /&gt;e.g In number &amp;nbsp;456789 sum of even digits is 4 + 6 + 8 = 18.&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class FindSum{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;&lt;br /&gt; System.out.println("Enter the number");&lt;br /&gt; Scanner sc = new Scanner(System.in);&lt;br /&gt; FindSum object = new FindSum();&lt;br /&gt; int number = sc.nextInt();&lt;br /&gt; int sum = object.findSumOfDigits(number);&lt;br /&gt; System.out.println("Sum of digits of "+number+" = "+ sum);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int findSumOfDigits(int num){&lt;br /&gt;&lt;br /&gt;  int sum = 0;&lt;br /&gt;  while(num != 0){&lt;br /&gt;    if((num % 10) %2 == 0)&lt;br /&gt;    sum += num % 10;&lt;br /&gt;    num = num / 10;  &lt;br /&gt;  }&lt;br /&gt;  return sum;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;Enter the number&lt;br /&gt;456789&lt;br /&gt;Sum of digits of 456789 = 18&lt;/pre&gt;&lt;br /&gt;In the above program we take the number as input from the user by using the Scanner class and then pass this number to the method findSumOfDigits() that calculates the sum of digits of the number. The while loop runs till the number is not zero.&lt;br /&gt;In the while loop we add the last digit of the number to the sum and divide the number by 10 all we need to do extra is to check if the digit is divisible by 2, if yes then we add it to the sum or else we do not.. What happens is&lt;br /&gt;456789 % 10(gives 9), if condition fails so we do not add it to the sum and num = 456789 / 10 = 45678 (since num is integer)&lt;br /&gt;45678 % 10(gives 8), condition satisfies so we add it to sum, sum = 0 + 8 = 8 and num = 45678 / 10 = 4567 and so on.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1112002342987898577/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/find-sum-of-even-digits-of-number.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1112002342987898577'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1112002342987898577'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/find-sum-of-even-digits-of-number.html' title='Find the Sum of Even Digits of a Number'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1762595897243958132</id><published>2014-10-11T01:12:00.002+05:30</published><updated>2014-10-11T01:44:08.680+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Find the Sum of Digits of a number.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Question : Find the sum of digits of a number&lt;/b&gt;&lt;/div&gt;Suppose we have a number and we need to find the sum of digits of the number. e.g let the number be 456789, then the sum of digits will be 4 + 5 + 6 + 7 + 8 + 9 = 39&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.Scanner;&lt;br /&gt;&lt;br /&gt;class FindSum{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;&lt;br /&gt; System.out.println("Enter the number");&lt;br /&gt; Scanner sc = new Scanner(System.in);&lt;br /&gt; FindSum object = new FindSum();&lt;br /&gt; int number = sc.nextInt();&lt;br /&gt; int sum = object.findSumOfDigits(number);&lt;br /&gt; System.out.println("Sum of digits of "+number+" = "+ sum);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public int findSumOfDigits(int num){&lt;br /&gt;&lt;br /&gt;  int sum = 0;&lt;br /&gt;  while(num != 0){&lt;br /&gt;    sum += num % 10;&lt;br /&gt;    num = num / 10;  &lt;br /&gt;  }&lt;br /&gt;  return sum;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;Enter the number&lt;br /&gt;456789&lt;br /&gt;Sum of digits of 456789 = 39&lt;/pre&gt;In the above program we take the number as input from the user by using the Scanner class and then pass this number to the method findSumOfDigits() that calculates the sum of digits of the number.&lt;br /&gt;&lt;br /&gt;The while loop runs till the number is not zero. In the while loop we add the last digit of the number to the sum and divide the number by 10. What happens is&lt;br /&gt;&lt;br /&gt;sum += 456789 % 10(gives 9), so sum = 0 + 9 = 9 and num = 456789 / 10 = 45678 (since num is integer)&lt;br /&gt;sum += 45678 % 10(gives 8), so sum = 9 + 8 = 17 and num = 45678 / 10 = 4567&lt;br /&gt;and so on.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1762595897243958132/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-find-sum-of-digits-of-number.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1762595897243958132'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1762595897243958132'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-find-sum-of-digits-of-number.html' title='Find the Sum of Digits of a number.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2230424005320683652</id><published>2014-10-10T18:57:00.000+05:30</published><updated>2014-10-10T18:57:28.474+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What is Inheritance in Java ?</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Inheritance is always achieved with two classes, a base class and a parent class.&lt;/li&gt;&lt;li&gt;Base class gets all non private methods and variables of parent class.&lt;/li&gt;&lt;li&gt;We can override all the non private methods of a parent class in a base class.&lt;/li&gt;&lt;li&gt;Variables does not get overridden.&lt;/li&gt;&lt;li&gt;We cannot override a static method.&lt;/li&gt;&lt;li&gt;We cannot override a private method of the parent class in base class.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Definition : What is Inheritance&lt;/b&gt;&lt;/div&gt;Inheritance is a property by which&amp;nbsp;&lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/what-is-inheritance-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2230424005320683652'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2230424005320683652'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2885415386550022045</id><published>2014-10-09T02:55:00.002+05:30</published><updated>2014-10-09T02:59:31.413+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Can We have a Private Constructor in Class</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A constructor have the same name as that of a class.&lt;/li&gt;&lt;li&gt;A constructor does not have any return type, not even void.&lt;/li&gt;&lt;li&gt;Constructor of a class is called first, before any other method is called.&lt;/li&gt;&lt;li&gt;Constructor of a super class is called before the base class constructor.&amp;nbsp;&lt;/li&gt;&lt;li&gt;We can have a private constructor in a java class.&lt;/li&gt;&lt;li&gt;A class with a private constructor can not be inherited.&lt;/li&gt;&lt;li&gt;We cannot create object of a class with a private constructor.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What happens if we have a Private Constructor in a class.&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;Suppose if we make a private constructor of our class and try to create the object of that class from that class only.&lt;br /&gt;In the example below, we have a class A and we created the constructor of this class that just prints a statement. Now we created the object of this class from a main method. The code will compile and run successfully to give a output. Thus, this proofs that &lt;b&gt;we can have a private constructor in a class&lt;/b&gt;.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;class A &lt;br /&gt;{&lt;br /&gt;&lt;br /&gt;  private A(){&lt;br /&gt;    System.out.println("Private Constructor of A");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;    System.out.println("Hello World");&lt;br /&gt;    A obj = new A();&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;&lt;pre class="output"&gt;Hello World&lt;br /&gt;Private Constructor of A&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What happens if we try to create an object of a class with &amp;nbsp;a Private Constructor.&lt;/b&gt;&lt;/div&gt;Now, if we have a class with a private constructor and we try to create the object of this class e.g. If we have a class A and another class B, both with private constructors and we try to create object of class B from class A. This will throw a compile time exception stating that we can not create the object of class B because we cannot access its default constructor. &lt;b&gt;Thus we cannot create the object of a class that has a private constructor.&lt;/b&gt;&amp;nbsp; Remember that, a whenever an object of a class is created, its default constructor must be accessible by the class that is trying to create its object.&lt;br /&gt;&lt;pre class="brush : java"&gt;class B{&lt;br /&gt;&lt;br /&gt;  private B(){&lt;br /&gt;    System.out.println("Private Constructor of B");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class A &lt;br /&gt;{&lt;br /&gt;&lt;br /&gt;  private A(){&lt;br /&gt;    System.out.println("Private Constructor of A");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;    System.out.println("Hello World");&lt;br /&gt;    A objectA = new A();&lt;br /&gt;    B objectB = new B();&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;&lt;pre class="output"&gt;A.java:19: error: B() has private access in B&lt;br /&gt;    B objectB = new B();&lt;br /&gt;                ^&lt;br /&gt;1 error&lt;/pre&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What happens if we try to inherit a class with a Private Constructor.&lt;/b&gt;&lt;/div&gt;Now, if we create a class B with a private constructor and try to inherit this class, we will get a compile time error stating that the class B have a private constructor. This means that&amp;nbsp;&lt;b&gt;a class with the private constructor can not be inherited&lt;/b&gt;.&lt;br /&gt;&lt;br class="Apple-interchange-newline" /&gt;&lt;span style="font-family: monospace;"&gt;&lt;span style="white-space: pre;"&gt;class B{    private B(){     System.out.println("Private Constructor of B");   }  }  class A extends B {    private A(){     System.out.println("Private Constructor of A");   }    public static void main(String args[]){     System.out.println("Hello World");   } }&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; &lt;pre class="output"&gt;A.java:12: error: B() has private access in B&lt;br /&gt;  private A(){&lt;br /&gt;             ^&lt;br /&gt;1 error&lt;/pre&gt;Thus we cannot extend a class or make an object of a class that has a private constructor because its default constructor becomes inaccessible. When we inherit a class the default constructor of the super class is executed before the constructor of the base class is executed. Also when we make an object of a class its default constructor is accessed before any other method is accessed. &lt;b&gt;Thus constructor must be accessible for making the object of a class or inheriting a class. We can that a class with a private constructor can not be inherited nor we can make the object of this class.&lt;/b&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2885415386550022045/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/can-we-have-private-constructor-in-class-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2885415386550022045'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2885415386550022045'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/can-we-have-private-constructor-in-class-in-java.html' title='Can We have a Private Constructor in Class'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-380773941878043719</id><published>2014-10-07T16:12:00.000+05:30</published><updated>2014-10-07T19:02:36.995+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Program to Find All paths in a Matrix of 2D array.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Problem :  Find all possible paths through the array.&lt;/b&gt;&lt;/div&gt;It is only allowed to go diagonally up or down, or go to the right. An example 4x4 matrix &lt;br /&gt;&lt;pre&gt;3  5  7  9&lt;br /&gt;2  4  6  8&lt;br /&gt;9  3  7  5&lt;br /&gt;6  8  2  4&lt;br /&gt;&lt;/pre&gt;The numbers in the matrix can be any arbitrary value. I would like to generate all possible routes through the matrix, starting in one of the four numbers in the first column. It is only allowed to move Northeast, East, and Southeast. An example route: &lt;br /&gt;&lt;pre&gt;3-5 7 9&lt;br /&gt;   \&lt;br /&gt;2 4 6-8&lt;br /&gt;9 3 7 5&lt;br /&gt;6 8 2 4&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Solution&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;import java.util.*;&lt;br /&gt;&lt;br /&gt;class Paths{&lt;br /&gt;&lt;br /&gt;  static int arr[][] = {{3,5,7,9},{2,4,6,8},{9,3,7,5},{6,8,2,4}};&lt;br /&gt;    &lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;   for(int itr=0; itr&amp;lt;arr.length; itr++){&lt;br /&gt;      for(String path : new Paths().findPaths(itr, 0)){&lt;br /&gt;        if(path.split("-&amp;gt;").length == 4)&lt;br /&gt;           System.out.println(path); &lt;br /&gt;      }&lt;br /&gt;   }&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public ArrayList&amp;lt;String&amp;gt; findPaths(int row, int col){&lt;br /&gt;  ArrayList&amp;lt;String&amp;gt; paths = new ArrayList&amp;lt;String&amp;gt;();&lt;br /&gt;  if(goNorthEast(row,col)){&lt;br /&gt;    paths.add(arr[row][col]+"-&amp;gt;"+arr[row-1][col+1]);&lt;br /&gt;    for(String path :  findPaths(row-1,col+1)){&lt;br /&gt;      paths.add(arr[row][col]+"-&amp;gt;" + path);&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;  if(goEast(row,col)){&lt;br /&gt;    paths.add(arr[row][col]+"-&amp;gt;"+arr[row][col+1]);&lt;br /&gt;    for(String path :  findPaths(row,col+1)){&lt;br /&gt;      paths.add(arr[row][col]+"-&amp;gt;" + path);&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;  if(goSouthEast(row,col)){&lt;br /&gt;    paths.add(arr[row][col]+"-&amp;gt;"+arr[row+1][col+1]);&lt;br /&gt;    for(String path :  findPaths(row+1,col+1)){&lt;br /&gt;      paths.add(arr[row][col]+"-&amp;gt;" + path);&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;  return paths;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public boolean goNorthEast(int row, int col){&lt;br /&gt;   if(row-1&amp;lt;0 || col+1 &amp;gt;= arr.length)&lt;br /&gt;     return false;&lt;br /&gt;   return true;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public boolean goEast(int row, int col){&lt;br /&gt;   if(col+1 &amp;gt;= arr.length)&lt;br /&gt;     return false;&lt;br /&gt;   return true;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public boolean goSouthEast(int row, int col){&lt;br /&gt;   if(row+1 &amp;gt;=arr.length || col+1 &amp;gt;= arr.length)&lt;br /&gt;     return false;&lt;br /&gt;   return true;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;3-&amp;gt;5-&amp;gt;7-&amp;gt;9&lt;br /&gt;3-&amp;gt;5-&amp;gt;7-&amp;gt;8&lt;br /&gt;3-&amp;gt;5-&amp;gt;6-&amp;gt;9&lt;br /&gt;3-&amp;gt;5-&amp;gt;6-&amp;gt;8&lt;br /&gt;3-&amp;gt;5-&amp;gt;6-&amp;gt;5&lt;br /&gt;3-&amp;gt;4-&amp;gt;7-&amp;gt;9&lt;br /&gt;3-&amp;gt;4-&amp;gt;7-&amp;gt;8&lt;br /&gt;3-&amp;gt;4-&amp;gt;6-&amp;gt;9&lt;br /&gt;3-&amp;gt;4-&amp;gt;6-&amp;gt;8&lt;br /&gt;3-&amp;gt;4-&amp;gt;6-&amp;gt;5&lt;br /&gt;3-&amp;gt;4-&amp;gt;7-&amp;gt;8&lt;br /&gt;3-&amp;gt;4-&amp;gt;7-&amp;gt;5&lt;br /&gt;3-&amp;gt;4-&amp;gt;7-&amp;gt;4&lt;br /&gt;2-&amp;gt;5-&amp;gt;7-&amp;gt;9&lt;br /&gt;2-&amp;gt;5-&amp;gt;7-&amp;gt;8&lt;br /&gt;2-&amp;gt;5-&amp;gt;6-&amp;gt;9&lt;br /&gt;2-&amp;gt;5-&amp;gt;6-&amp;gt;8&lt;br /&gt;2-&amp;gt;5-&amp;gt;6-&amp;gt;5&lt;br /&gt;2-&amp;gt;4-&amp;gt;7-&amp;gt;9&lt;br /&gt;2-&amp;gt;4-&amp;gt;7-&amp;gt;8&lt;br /&gt;2-&amp;gt;4-&amp;gt;6-&amp;gt;9&lt;br /&gt;2-&amp;gt;4-&amp;gt;6-&amp;gt;8&lt;br /&gt;2-&amp;gt;4-&amp;gt;6-&amp;gt;5&lt;br /&gt;2-&amp;gt;4-&amp;gt;7-&amp;gt;8&lt;br /&gt;2-&amp;gt;4-&amp;gt;7-&amp;gt;5&lt;br /&gt;2-&amp;gt;4-&amp;gt;7-&amp;gt;4&lt;br /&gt;2-&amp;gt;3-&amp;gt;6-&amp;gt;9&lt;br /&gt;2-&amp;gt;3-&amp;gt;6-&amp;gt;8&lt;br /&gt;2-&amp;gt;3-&amp;gt;6-&amp;gt;5&lt;br /&gt;2-&amp;gt;3-&amp;gt;7-&amp;gt;8&lt;br /&gt;2-&amp;gt;3-&amp;gt;7-&amp;gt;5&lt;br /&gt;2-&amp;gt;3-&amp;gt;7-&amp;gt;4&lt;br /&gt;2-&amp;gt;3-&amp;gt;2-&amp;gt;5&lt;br /&gt;2-&amp;gt;3-&amp;gt;2-&amp;gt;4&lt;br /&gt;9-&amp;gt;4-&amp;gt;7-&amp;gt;9&lt;br /&gt;9-&amp;gt;4-&amp;gt;7-&amp;gt;8&lt;br /&gt;9-&amp;gt;4-&amp;gt;6-&amp;gt;9&lt;br /&gt;9-&amp;gt;4-&amp;gt;6-&amp;gt;8&lt;br /&gt;9-&amp;gt;4-&amp;gt;6-&amp;gt;5&lt;br /&gt;9-&amp;gt;4-&amp;gt;7-&amp;gt;8&lt;br /&gt;9-&amp;gt;4-&amp;gt;7-&amp;gt;5&lt;br /&gt;9-&amp;gt;4-&amp;gt;7-&amp;gt;4&lt;br /&gt;9-&amp;gt;3-&amp;gt;6-&amp;gt;9&lt;br /&gt;9-&amp;gt;3-&amp;gt;6-&amp;gt;8&lt;br /&gt;9-&amp;gt;3-&amp;gt;6-&amp;gt;5&lt;br /&gt;9-&amp;gt;3-&amp;gt;7-&amp;gt;8&lt;br /&gt;9-&amp;gt;3-&amp;gt;7-&amp;gt;5&lt;br /&gt;9-&amp;gt;3-&amp;gt;7-&amp;gt;4&lt;br /&gt;9-&amp;gt;3-&amp;gt;2-&amp;gt;5&lt;br /&gt;9-&amp;gt;3-&amp;gt;2-&amp;gt;4&lt;br /&gt;9-&amp;gt;8-&amp;gt;7-&amp;gt;8&lt;br /&gt;9-&amp;gt;8-&amp;gt;7-&amp;gt;5&lt;br /&gt;9-&amp;gt;8-&amp;gt;7-&amp;gt;4&lt;br /&gt;9-&amp;gt;8-&amp;gt;2-&amp;gt;5&lt;br /&gt;9-&amp;gt;8-&amp;gt;2-&amp;gt;4&lt;br /&gt;6-&amp;gt;3-&amp;gt;6-&amp;gt;9&lt;br /&gt;6-&amp;gt;3-&amp;gt;6-&amp;gt;8&lt;br /&gt;6-&amp;gt;3-&amp;gt;6-&amp;gt;5&lt;br /&gt;6-&amp;gt;3-&amp;gt;7-&amp;gt;8&lt;br /&gt;6-&amp;gt;3-&amp;gt;7-&amp;gt;5&lt;br /&gt;6-&amp;gt;3-&amp;gt;7-&amp;gt;4&lt;br /&gt;6-&amp;gt;3-&amp;gt;2-&amp;gt;5&lt;br /&gt;6-&amp;gt;3-&amp;gt;2-&amp;gt;4&lt;br /&gt;6-&amp;gt;8-&amp;gt;7-&amp;gt;8&lt;br /&gt;6-&amp;gt;8-&amp;gt;7-&amp;gt;5&lt;br /&gt;6-&amp;gt;8-&amp;gt;7-&amp;gt;4&lt;br /&gt;6-&amp;gt;8-&amp;gt;2-&amp;gt;5&lt;br /&gt;6-&amp;gt;8-&amp;gt;2-&amp;gt;4&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/380773941878043719/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-find-all-paths-in-matrix-of-2d-array.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/380773941878043719'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/380773941878043719'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/program-to-find-all-paths-in-matrix-of-2d-array.html' title='Program to Find All paths in a Matrix of 2D array.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6223063582195049556</id><published>2014-10-06T17:52:00.000+05:30</published><updated>2014-10-06T18:16:45.696+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Fundamentals Of Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div id="test-controller"&gt;&lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Fundamentals Of Java&lt;/b&gt;.     Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;&lt;h3&gt;Select Test Type&lt;/h3&gt;&lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt;  &lt;/div&gt;&lt;div class="hidden" id="test-container"&gt;&lt;div id="instructions"&gt;&lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt;&lt;div class="test-timer-container"&gt;&lt;div class="hidden" id="test-timer"&gt;&lt;span&gt;Time Left - &lt;/span&gt;    &lt;span&gt;minutes&lt;/span&gt;    &lt;span&gt;:&lt;/span&gt;    &lt;span&gt;seconds&lt;/span&gt;   &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What was the original name of Java ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Oak&lt;/td&gt;        &lt;td class="optionB"&gt;Pok&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;James&lt;/td&gt;       &lt;td class="optionD"&gt;Coffee&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;A&lt;/div&gt;&lt;div class="explanation"&gt;Java was initially named as Oak by its founders.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Who is know as the father of Java ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Ken Arnold&lt;/td&gt;        &lt;td class="optionB"&gt;David Holmes&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;James Gosling&lt;/td&gt;       &lt;td class="optionD"&gt;Peter Dibble&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;James Arthur Gosling, OC (born May 19, 1955) is a Canadian computer scientist, best known as the father of the Java programming language&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Java Source Code is compiled into which format&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;.java&lt;/td&gt;        &lt;td class="optionB"&gt;.class&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;.exe&lt;/td&gt;       &lt;td class="optionD"&gt;.bytecode&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;Java Source code in .java format is compiled by the compiler to form .class file&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which tool is used to compile Java Code ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="optionA"&gt;java&lt;/td&gt;&lt;td class="optionB"&gt;javac&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="optionC"&gt;javah&lt;/td&gt;&lt;td class="optionD"&gt;javacmpl&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;javac FileName.java is the command to compile the java Source Code and javac is the Compiler that compile the code&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What is byte code in the context of Java ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;The type of code generated by a Java compiler&lt;/td&gt;        &lt;td class="optionB"&gt;The type of code generated by a Java Virtual Machine&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;It is another name for a Java source file&lt;/td&gt;       &lt;td class="optionD"&gt;It is the code written within the instance methods of a class&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;A&lt;/div&gt;&lt;div class="explanation"&gt;The type of code generated by a Java compiler is called byte code. It is in .class format&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of these is platform independent ?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;bytecode&lt;/td&gt;        &lt;td class="optionB"&gt;JVM&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;both A and B&lt;/td&gt;       &lt;td class="optionD"&gt;none of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;A&lt;/div&gt;&lt;div class="explanation"&gt;bytecode is platform independent. JVM is platform dependent and there are different JVM's for different OS like windows, linux etc, but they all produce same bytecode, thus a bytecode once produced can be run on any operating system.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of these functions is called to display the output of an applet?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;display()&lt;/td&gt;        &lt;td class="optionB"&gt;print()&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;displayApplet()&lt;/td&gt;       &lt;td class="optionD"&gt;PrintApplet()&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;Method print() is the method that display the output of an applet.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What does AWT stands for?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;All Window Tools&lt;/td&gt;        &lt;td class="optionB"&gt;All Writing Tools&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;Abstract Window Toolkit&lt;/td&gt;       &lt;td class="optionD"&gt;Abstract Writing Toolkit&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;AWT stands for Abstract Window Toolkit.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is not a feature of Java.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Multiple Inheritance&lt;/td&gt;        &lt;td class="optionB"&gt;MultiLevel Inheritance&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;Garbage Collection&lt;/td&gt;       &lt;td class="optionD"&gt;Function Overloading&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;A&lt;/div&gt;&lt;div class="explanation"&gt;Java does not support Multiple Inheritance.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What of the following limits a class and its members to be used only within the class, classes within same package and classes that inherits them.&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;public&lt;/td&gt;        &lt;td class="optionB"&gt;private&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;protected&lt;/td&gt;       &lt;td class="optionD"&gt;default&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;Access specifier protected limits a class and its members to be used only within the class, classes within same package and classes that inherits them&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6223063582195049556/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-fundamentals-of-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6223063582195049556'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6223063582195049556'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-fundamentals-of-java.html' title='Java MCQ&apos;s on Fundamentals Of Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7068173473434971253</id><published>2014-10-06T15:31:00.000+05:30</published><updated>2014-10-06T16:54:28.271+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Constructors</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div id="test-controller"&gt;&lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Constructors&lt;/b&gt;.   &lt;br /&gt;Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;&lt;h3&gt;Select Test Type&lt;/h3&gt; &lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt;&lt;div class="hidden" id="test-container"&gt;&lt;div id="instructions"&gt; &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt; &lt;div class="test-timer-container"&gt;   &lt;div id="test-timer" class="hidden"&gt;    &lt;span&gt;Time Left - &lt;/span&gt;    &lt;span&gt;minutes&lt;/span&gt;    &lt;span&gt;:&lt;/span&gt;    &lt;span&gt;seconds&lt;/span&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; &lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt;&lt;div class="question"&gt;What is the return type of Constructors?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;int&lt;/td&gt;        &lt;td class="optionB"&gt;float&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;void&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;D&lt;/div&gt;&lt;div class="explanation"&gt;Constructors does not have any return type, not even void.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;Which keyword is used by method to refer to the object that invoked it?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;import&lt;/td&gt;        &lt;td class="optionB"&gt;catch&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;this&lt;/td&gt;       &lt;td class="optionD"&gt;super&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;&lt;b&gt;this&lt;/b&gt;&amp;nbsp;keyword is used by the method to refer to the object that invoked it. &lt;b&gt;this&lt;/b&gt;&amp;nbsp;keyword can also be used to refer to any member that is within the class e.g instance variables , functions or even objects.&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the following is a method having same name as that of its class?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;finalize&lt;/td&gt;        &lt;td class="optionB"&gt;constructor&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;delete&lt;/td&gt;       &lt;td class="optionD"&gt;class&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;A constructor is a method that initializes an object immediately upon creation. It has the same name as that of class in which it resides. A&amp;nbsp;constructor does not have any return type and is mostly used to initialize the members of a class when an object of a class is made.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;Which operator is used by Java run time implementations to free the memory of an object when it is no longer needed?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;delete&lt;/td&gt;        &lt;td class="optionB"&gt;free&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;new&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;D&lt;/div&gt;&lt;div class="explanation"&gt;&amp;nbsp;Java handles deallocation of memory automatically, we do not need to explicitly delete an element. Garbage collection only occurs during execution of the program. When no references to the object exist, that object is assumed to be no longer needed, and the memory occupied by the object can be reclaimed.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;Which function is used to perform some action when the object is to be destroyed?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;finalize()&lt;/td&gt;        &lt;td class="optionB"&gt;delete()&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;main()&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;A&lt;/div&gt;&lt;div class="explanation"&gt;finalize() is the method that is called by the to perform some action or task before the object is made ready for garbage collection.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;What is the output of this program? &lt;pre class="brush : java"&gt;class Box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;        int volume;&lt;br /&gt;        public Box() {&lt;br /&gt;            width = 5;&lt;br /&gt;            height = 5;&lt;br /&gt;            length = 6;&lt;br /&gt;        }&lt;br /&gt;        void volume() {&lt;br /&gt;             volume = width*height*length;&lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            Box obj = new Box();&lt;br /&gt;            obj.volume();&lt;br /&gt;            System.out.println(obj.volume);&lt;br /&gt;        }&lt;br /&gt;   }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;100&lt;/td&gt;        &lt;td class="optionB"&gt;150&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;200&lt;/td&gt;       &lt;td class="optionD"&gt;250&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;new Box() will make an object of class Box and assign values to the instance variables. obj.volume() will calculate the volume and assign value "5 * 5 * 6" to variable "volume". obj.volume will print the value assigned to the variable volume what will be 150.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;What will be the output of the following program ?&lt;br /&gt;&lt;pre class="brush : java"&gt;class Equality {&lt;br /&gt;        Integer x;&lt;br /&gt;        Integer y;&lt;br /&gt;        boolean isequal() {&lt;br /&gt;            return(x == y);  &lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            Equality obj = new Equality();&lt;br /&gt;            obj.x = 5;&lt;br /&gt;            obj.y = 5;&lt;br /&gt;            System.out.println(obj.isequal());        } &lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;True&lt;/td&gt;        &lt;td class="optionB"&gt;False&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;0&lt;/td&gt;       &lt;td class="optionD"&gt;1&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;A&lt;/div&gt;&lt;div class="explanation"&gt;Since both the variables are "x" and "y" are equal assigned with value 5, it will give the output "true"&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;What will be the output of the following program ?&lt;br /&gt;&lt;pre class="brush : java"&gt;class Box {&lt;br /&gt;        int width;&lt;br /&gt;        int height;&lt;br /&gt;        int length;&lt;br /&gt;        int volume;&lt;br /&gt;        void finalize() {&lt;br /&gt;            volume = width*height*length;&lt;br /&gt;            System.out.println(volume);&lt;br /&gt;        }&lt;br /&gt;        protected void volume() {&lt;br /&gt;            volume = width*height*length;&lt;br /&gt;            System.out.println(volume);&lt;br /&gt;       } &lt;br /&gt;    }    &lt;br /&gt;    class Output { &lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            Box obj = new Box();&lt;br /&gt;            obj.volume();&lt;br /&gt;        } &lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Compilation error&lt;/td&gt;        &lt;td class="optionB"&gt;Runtime error&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;0&lt;/td&gt;       &lt;td class="optionD"&gt;100&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;C&lt;/div&gt;&lt;div class="explanation"&gt;The program will compile successfully. When we create the object of a class all the instance variables that are not initialized are initialized with a default value 0. Thus it will give an output "0" &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;Which of the folowing stements are incorrect?&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;Default constructor is called at the time of declaration of the object if a constructor has not been defined.&lt;/td&gt;        &lt;td class="optionB"&gt;finalize() method is called when a object goes out of scope and is no longer needed.&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;finalize() method must be declared protected.&lt;/td&gt;       &lt;td class="optionD"&gt;Constructor can be parameterized.&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;B&lt;/div&gt;&lt;div class="explanation"&gt;finalize() method is called just prior to garbage collection. it is not called when object goes out of scope.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="container-question"&gt;&lt;div class="question"&gt;What will be the output of this program?&lt;br /&gt;&lt;pre class="brush : java"&gt;class Area {&lt;br /&gt;        int width;&lt;br /&gt;        int length;&lt;br /&gt;        int area;&lt;br /&gt;        public Area(int width, int length) {&lt;br /&gt;            this.width = width;&lt;br /&gt;            this.length = length;&lt;br /&gt;        }&lt;br /&gt; &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            Area obj = new Area(5 , 6);&lt;br /&gt;            System.out.println(obj.length + " " + obj.width);        &lt;br /&gt;        } &lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;input name="gvnAnswer" type="hidden" /&gt;&lt;table cellspacing="1" style="width: 100%;"&gt;    &lt;tbody&gt;&lt;tr&gt;          &lt;td class="optionA"&gt;0 0&lt;/td&gt;        &lt;td class="optionB"&gt;5 5&lt;/td&gt;     &lt;/tr&gt;&lt;tr&gt;       &lt;td class="optionC"&gt;5 6&lt;/td&gt;       &lt;td class="optionD"&gt;6 5&lt;/td&gt;     &lt;/tr&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;div class="handle hidden"&gt;&lt;div class="view-solution"&gt;&lt;/div&gt;&lt;div class="solution hidden"&gt;&lt;div class="answer"&gt;D&lt;/div&gt;&lt;div class="explanation"&gt;new Area(5,6) will set width = 6 and height = 5, thus the output will be "6 5"&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;  &lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7068173473434971253/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-constructors-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7068173473434971253'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7068173473434971253'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/java-mcqs-on-constructors-in-java.html' title='Java MCQ&apos;s on Constructors'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4123122470481898439</id><published>2014-10-04T02:23:00.001+05:30</published><updated>2014-10-04T02:23:25.821+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>Can a Servlet have a Constructor</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Servlet is a java class that implements &lt;b&gt;javax.servlet.Servlet&lt;/b&gt; interface.&lt;/li&gt;&lt;li&gt;Servlets are &lt;b&gt;initialized by the servlet containers using init() method&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Servlets like any other java class &lt;b&gt;can have constructors&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Servlet must have a no argument constructor in case it have a non zero arguments constructor.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Servlet needs an object of ServletConfig for initialization&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Interfaces cannot have constructors.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Can we have Constructors in a Servlet ?&lt;/b&gt;&lt;/div&gt;Yes we can, please read &lt;a href="http://ekiras.blogspot.in/2014/10/how-servlet-is-initialized-by-servlet-container.html" target="_blank"&gt;How a servlet is initialized by the servlet container.&lt;/a&gt;&amp;nbsp;So this article will make clear, why we cannot use a constructor for initializing a servlet.&lt;br /&gt;&lt;br /&gt;However there is no problem in having a constructor in a servlet. We can have both argumented and no arguments constructor in a servlet. &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;What we are trying to do is to create a simple servlet with a constructor and assign a value to a String variable named as "msg".&lt;br /&gt;&lt;h3&gt;Servlet : ServletConstructor&lt;/h3&gt;&lt;pre class="brush: java"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;import javax.servlet.ServletException;&lt;br /&gt;import javax.servlet.http.HttpServlet;&lt;br /&gt;import javax.servlet.http.HttpServletRequest;&lt;br /&gt;import javax.servlet.http.HttpServletResponse;&lt;br /&gt;&lt;br /&gt;public class ServletConstructor extends HttpServlet {&lt;br /&gt; private static final long serialVersionUID = 1L;&lt;br /&gt;       &lt;br /&gt; private String msg;&lt;br /&gt;&lt;br /&gt;    public ServletConstructor() {&lt;br /&gt;        super();&lt;br /&gt;        System.out.println("HI i am getting initialized");&lt;br /&gt;        this.msg = "Servlet Constructor Demo";&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&lt;br /&gt;  System.out.println("Get method --&amp;gt; msg = " + msg);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&lt;br /&gt;  // TODO Auto-generated method stub&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Deployment Descriptor : web.xml&lt;/h3&gt;&lt;pre class="brush: xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;br /&gt;&amp;lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0"&amp;gt;&lt;br /&gt;  &amp;lt;display-name&amp;gt;Test&amp;lt;/display-name&amp;gt;&lt;br /&gt;  &amp;lt;welcome-file-list&amp;gt;&lt;br /&gt;    &amp;lt;welcome-file&amp;gt;ServletConstructor&amp;lt;/welcome-file&amp;gt;&lt;br /&gt;  &amp;lt;/welcome-file-list&amp;gt;&lt;br /&gt;  &lt;br /&gt;  &amp;lt;servlet&amp;gt;&lt;br /&gt;     &amp;lt;servlet-name&amp;gt;ServletConstructor&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;     &amp;lt;servlet-class&amp;gt;com.ekiras.demo.ServletConstructor&amp;lt;/servlet-class&amp;gt;&lt;br /&gt;  &amp;lt;/servlet&amp;gt;&lt;br /&gt;  &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;     &amp;lt;servlet-name&amp;gt;ServletConstructor&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;     &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt;&amp;lt;/web-app&amp;gt;&lt;/pre&gt;When we run the above application in the web server like tomcat we will get the following output.  &lt;pre class="output"&gt;HI i am getting initialized&lt;br /&gt;Get method --&amp;gt; msg = Servlet Constructor Demo&lt;br /&gt;&lt;/pre&gt;So this makes it clear that there is no problem in having a constructors in a servlet. &lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4123122470481898439/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/can-servlet-have-constructor.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4123122470481898439'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4123122470481898439'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/can-servlet-have-constructor.html' title='Can a Servlet have a Constructor'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4784222439477833885</id><published>2014-10-04T01:40:00.002+05:30</published><updated>2014-10-04T01:50:43.815+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>How a Servlet is initialized by Servlet Container </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Servlets are&amp;nbsp;&lt;b&gt;initialized by the servlet containers&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Servlets like any other java class&amp;nbsp;&lt;b&gt;can have constructors&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Servlet needs an object of ServletConfig for initialization&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Interfaces cannot have constructors.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Why a Servlet is initialized using init() method ?&lt;/b&gt;&lt;/div&gt;A servlet is a java class that implements javax.servlet.Servlet interface.A servlet can be given some init parameters in web.xml, called the&amp;nbsp;&lt;a href="http://ekiras.blogspot.in/10/what-is-servletconfig-and-how-to-get-servletconfig-in-servlet.html" target="_blank"&gt;ServelConfig&lt;/a&gt;&amp;nbsp;and some global init parameters called the ServletContext. Thus they both are required at the initialization time of a servlet.&lt;br /&gt;&lt;br /&gt;Also Servlet is an interface so it cannot have a constructor, so how will we pass the ServletConfig &amp;nbsp;object to the servlet for its initialization. This is the reason the Servlet interface have a init(ServletConfig config) method and the implementing class needs to override this method to pass a ServletConfig object to it.&lt;br /&gt;&lt;br /&gt;GeneralServlet is an abstract class that implements the Servlet interface for us and helps in initialization of servlets by passing the ServletConfig object to the init() method of the Servlet interface.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Summary : Why we use init() for Servlet initialization&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;For a servlet to be initialized we need a ServletConfig Object.&lt;/li&gt;&lt;li&gt;Interfaces cannot have a constructor, so the only way is to get the ServletConfig object in the implementing class of javax.servlet.Servlet interface and then pass it to some method, so we created a method in the Servlet interface and called it init().&lt;/li&gt;&lt;li&gt;Now all the classes that implement Servlet interface will have to override init() method and pass a ServletConfig object to this method.&lt;/li&gt;&lt;li&gt;This will give the servlet container all necessary control to initialize the servlet.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4784222439477833885/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-servlet-is-initialized-by-servlet-container.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4784222439477833885'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4784222439477833885'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/how-servlet-is-initialized-by-servlet-container.html' title='How a Servlet is initialized by Servlet Container '/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8667587362251340249</id><published>2014-10-03T18:24:00.000+05:30</published><updated>2014-10-03T18:24:04.294+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Difference Between HashMap and HashTable</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;HashTable have the legacy code and were introduced before HashMaps.&lt;/li&gt;&lt;li&gt;There is nothing in a HashTable that a HashMap cannot do except multithreading.&lt;/li&gt;&lt;li&gt;ConcurrentHashMap is a replacement for HashTable, it a synchronized HashMap.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Differences : HashMap and HashTable&amp;nbsp;&lt;/b&gt;&lt;/div&gt;&lt;table border="1" cellpadding="5" cellspacing="0" class="table-bg" style="width: 100%;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th width="50%"&gt;HashMap&lt;/th&gt;&lt;th width="50%"&gt;HashTable&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;They implement Map Interface.&lt;/td&gt;&lt;td&gt;It extends Dictionary(obsolete from jdk 1.7) class and implements Map interface&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;They are a part of Collections API&lt;/td&gt;&lt;td&gt;They are not a part of Collections API&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;They allow a single null key and any number of null values.&lt;/td&gt;&lt;td&gt;They do not allow null values to be added.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;They are not synchronized or thread-safe&lt;/td&gt;&lt;td&gt;They are synchronized or thread-safe&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;They use Iterator to iterate over objects&lt;/td&gt;&lt;td&gt;They use Enumeration to iterate over objects&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;They are faster and uses less memory&lt;/td&gt;&lt;td&gt;They are comparatively slower.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Similarities : HashMap and HashTable&amp;nbsp;&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Both of them implements Map interface.&lt;/li&gt;&lt;li&gt;Both HashMap and Hashtable works on the Principle of Hashing.&lt;/li&gt;&lt;li&gt;Both HashMap and HashTable do not guarantee that the order of the map will remain constant over time.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I recommend not to use HashTable and use HashMap since HashMap is much faster than the HashTables and it allows you to do everything that a HashTable allows you to do. In case you are in need of using a Map in a multithreaded environment than you should go for ConcurrentHashMap. A ConcurrentHashMap provides all the functions of a HAshMap and it is also thread safe or simple multithreaded.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8667587362251340249/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/difference-between-hashmap-and-hashtable.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8667587362251340249'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8667587362251340249'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/difference-between-hashmap-and-hashtable.html' title='Difference Between HashMap and HashTable'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5915536828111820216</id><published>2014-10-03T01:41:00.003+05:30</published><updated>2014-10-03T01:44:56.264+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Find Factorial of a number using Recursion</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Factorial Using Recursion&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;class Factorial{&lt;br /&gt;&lt;br /&gt;public static void main(String args[]){&lt;br /&gt; int number = Integer.parseInt(args[0]);&lt;br /&gt; System.out.println("Factorial of " + number + " = " + factorial(number));&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public static int factorial(int n){&lt;br /&gt;&lt;br /&gt;  // Check if the number is greater than equal to 0.&lt;br /&gt;  // because factorial of a number &amp;lt; 0 is undefined.&lt;br /&gt;&lt;br /&gt; if(n == 1)&lt;br /&gt;   return 1;&lt;br /&gt;&lt;br /&gt; return n * factorial(n-1);&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;Factorial of 5 = 120&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here the function factorial for&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;number =1 will return&amp;nbsp;&amp;nbsp;&lt;b&gt;1&lt;/b&gt;&lt;/li&gt;&lt;li&gt;number =2&amp;nbsp;will return&amp;nbsp; &lt;b&gt;2 * factorial(1) &amp;nbsp;= 2 * 1 = 2&lt;/b&gt;&lt;/li&gt;&lt;li&gt;number =3 will return &amp;nbsp;&lt;b&gt;3 * factorial(2) &amp;nbsp;= 3 * 2 * factorial(1) = &amp;nbsp;3 * 2 * 1 = 6&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5915536828111820216/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/find-factorial-of-number-using-recursion.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5915536828111820216'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5915536828111820216'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/find-factorial-of-number-using-recursion.html' title='Find Factorial of a number using Recursion'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-217205285645547535</id><published>2014-10-02T17:25:00.000+05:30</published><updated>2014-10-02T19:39:46.155+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>ClassNotFoundException and NoClassDefFoundError</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ClassNotFoundException is an Exception.&lt;/li&gt;&lt;li&gt;NoClassDefFoundError is an Error.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;ClassNotFoundException&lt;/b&gt;&lt;/div&gt;This is a type of error when we are trying to access a class but that class is not available at the classpath or at the path specified by us. This type of error is thrown when an application tries to load in a class through its string name using:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;The forName method in class Class.&lt;/li&gt;&lt;li&gt;The findSystemClass method in class ClassLoader.&lt;/li&gt;&lt;li&gt;The loadClass method in class ClassLoader.&lt;/li&gt;&lt;/ol&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : When ClassNotFoundException occurs&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;class A{}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;  try{&lt;br /&gt;    System.out.println("classA = "+Class.forName("A").getClass());&lt;br /&gt;    System.out.println("classB = "+Class.forName("B").getClass());&lt;br /&gt;  }catch(ClassNotFoundException e){&lt;br /&gt;    System.out.println("ClassNotFoundException");&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;classA = class java.lang.Class&lt;br /&gt;ClassNotFoundException&lt;br /&gt;&lt;/pre&gt;Since the class A is found class.forName() returns the instance of class but since class Test did not find class B, it threw ClassNotFoundException.&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;NoClassDefFoundError&lt;/b&gt;&lt;/div&gt;This is a type of error which occurs at runtime. It occurs when a class uses some other class which was available at the compile time but is not available at the run time.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : When ClassNotFoundException occurs&lt;/b&gt;&lt;/div&gt;&lt;h4&gt;Class : A.java&lt;/h4&gt;&lt;pre class="brush : java"&gt;class A{&lt;br /&gt; public A(){&lt;br /&gt;   System.out.println("Class A");&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h4&gt;Class : Test.java&lt;/h4&gt;&lt;pre class="brush : java"&gt;class Test{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;   System.out.println("Class Test");&lt;br /&gt;   A object = new A();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The above code complies successfully and gives the following output. &lt;br /&gt;&lt;pre class="output"&gt;Class Test&lt;br /&gt;Class A&lt;br /&gt;&lt;/pre&gt;Now if we intentionally delete class A, then we will start getting the following output at run time. &lt;br /&gt;&lt;pre class="output"&gt;Class Test&lt;br /&gt;Exception in thread "main" java.lang.NoClassDefFoundError: A&lt;br /&gt; at Test.main(Test.java:5)&lt;br /&gt;Caused by: java.lang.ClassNotFoundException: A&lt;br /&gt; at java.net.URLClassLoader$1.run(URLClassLoader.java:366)&lt;br /&gt; at java.net.URLClassLoader$1.run(URLClassLoader.java:355)&lt;br /&gt; at java.security.AccessController.doPrivileged(Native Method)&lt;br /&gt; at java.net.URLClassLoader.findClass(URLClassLoader.java:354)&lt;br /&gt; at java.lang.ClassLoader.loadClass(ClassLoader.java:425)&lt;br /&gt; at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)&lt;br /&gt; at java.lang.ClassLoader.loadClass(ClassLoader.java:358)&lt;br /&gt; ... 1 more&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/217205285645547535/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/difference-between-classnotfoundexception-and-noclassdeffounderror.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/217205285645547535'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/217205285645547535'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/difference-between-classnotfoundexception-and-noclassdeffounderror.html' title='ClassNotFoundException and NoClassDefFoundError'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-136059425507102379</id><published>2014-10-01T02:47:00.001+05:30</published><updated>2014-10-01T11:05:34.095+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Test'/><title type='text'>Java MCQ's on Internal Working of HashMaps</title><content type='html'>&lt;div id="test-controller"&gt; &lt;div class="info"&gt;This test contains 10 questions based on &lt;b&gt;Internal Working of the HashMap&lt;/b&gt;.   &lt;br&gt;Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt; &lt;h3&gt;Select Test Type&lt;/h3&gt; &lt;button class="timed-test" onclick="startTest('timed');"&gt;Timed Test&lt;/button&gt; &lt;button class="untimed-test" onclick="startTest('untimed');"&gt;UnTimed Test&lt;/button&gt; &lt;/div&gt; &lt;div id="test-container" class="hidden"&gt;  &lt;div id="instructions"&gt; &lt;div&gt;&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;&lt;/div&gt; &lt;div class="test-timer-container"&gt;   &lt;div id="test-timer" class="hidden"&gt;    &lt;span&gt;Time Left - &lt;/span&gt;    &lt;span&gt;minutes&lt;/span&gt;    &lt;span&gt;:&lt;/span&gt;    &lt;span&gt;seconds&lt;/span&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;   &lt;div id="test-score"&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;How are key values stored in a hashmap ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;as Entry object&lt;/td&gt;        &lt;td class="optionB"&gt;as a LinkedList&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;          &lt;td class="optionC"&gt;as an ArrayList&lt;/td&gt;        &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;All the objects in the form of a key-value pair are stored as an Entry object.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;What is the initial size of a HashMap when we create an object of a HashMap ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;0&lt;/td&gt;        &lt;td class="optionB"&gt;8&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;16&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;When we create a HashMap like &lt;b&gt;"HashMap&lt;Object,Object&gt; map = new HashMap&lt;Object,Object&gt;();"&lt;/b&gt; , it creates an empty hashmap of initial size of 16 elements.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;What methods are used to find the correct value of a given key ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;hashCode()&lt;/td&gt;        &lt;td class="optionB"&gt;equals()&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;both hashCode() and equals()&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;Both the hashCode() and equals() method are used to get the value of a given key. hasgCode() method is used to get the correct bucket location of the key. Then the equals() method is used to find the actual key.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;How many times the key gets hashed while finding the correct location for saving the key value pair ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;2&lt;/td&gt;        &lt;td class="optionB"&gt;1&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;4&lt;/td&gt;       &lt;td class="optionD"&gt;3&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;While finding the location of the bucket for saving the key-value pair, the key is hashed twice, first by the hashCode() of the Object class and then by the internal hashing method of the HashMap class.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;Output of a HashMap is ordered ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;True&lt;/td&gt;        &lt;td class="optionB"&gt;False&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;    &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;A HashMap outputs in the order of the hashcode of the keys, so it is unordered but it will always produce same result for same set of keys.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;What is the default load factor of a HashMap ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;1&lt;/td&gt;        &lt;td class="optionB"&gt;0.5&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;0.75&lt;/td&gt;       &lt;td class="optionD"&gt;0.25&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;Default load factor of a HashMap is 0.75&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;How are keys-values saved when the keys produce the same hashcode ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;as a linkedlist&lt;/td&gt;        &lt;td class="optionB"&gt;as an array&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;as seperate objects&lt;/td&gt;       &lt;td class="optionD"&gt;as vectors&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;A&lt;/div&gt;      &lt;div class="explanation"&gt;All the keys that produce same hashcode are saved in the same bucket location as a linked list.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;Which interface does a HashMap implement ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;NavigableMap&lt;/td&gt;        &lt;td class="optionB"&gt;SortedMap&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Map&lt;/td&gt;       &lt;td class="optionD"&gt;HashTable&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;C&lt;/div&gt;      &lt;div class="explanation"&gt;HashMap implements the Map interface.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;Is a HashMap threadsafe ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;Yes&lt;/td&gt;        &lt;td class="optionB"&gt;No&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;Depends&lt;/td&gt;       &lt;td class="optionD"&gt;None of these&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;B&lt;/div&gt;      &lt;div class="explanation"&gt;No, a hashmap is not thread safe, if we want to make a HashMap thread safe then we may have to use a ConcurrentHashMap.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="container-question"&gt; &lt;div class="question"&gt;Which of the following are correct for a HashMap and a HashTable ?&lt;/div&gt; &lt;input type="hidden" name="gvnAnswer"&gt; &lt;table width="100%" cellspacing='1'&gt;    &lt;tbody&gt;     &lt;tr&gt;          &lt;td class="optionA"&gt;HashMap allows a null object but a HashTable does not.&lt;/td&gt;        &lt;td class="optionB"&gt;Hashtable is threadsafe but a hashmap is not&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td class="optionC"&gt;HashTable uses enumeration to iterate while a HashMap uses iterator to iterate.&lt;/td&gt;       &lt;td class="optionD"&gt;All of the above&lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt;   &lt;div class="handle hidden"&gt;   &lt;div class="view-solution"&gt;&lt;/div&gt;   &lt;div class="solution hidden"&gt;      &lt;div class="answer"&gt;D&lt;/div&gt;      &lt;div class="explanation"&gt;All of the above are correct for hashmap and hashtable, these are the differences between the two.&lt;/div&gt;   &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class="test-finish"&gt;Finish Test&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/136059425507102379/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/10/mcqs-on-internal-working-of-hashmap-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/136059425507102379'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/136059425507102379'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/10/mcqs-on-internal-working-of-hashmap-in-java.html' title='Java MCQ&apos;s on Internal Working of HashMaps'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5393256710375580713</id><published>2014-09-30T20:12:00.001+05:30</published><updated>2014-10-01T11:46:08.009+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What are static variables in Java ?</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Static variable are the variables at the class level.&lt;/li&gt;&lt;li&gt;Static variables are not attached to the objects.&lt;/li&gt;&lt;li&gt;Static variable cannot be declared inside any method of a class.&lt;/li&gt;&lt;li&gt;Static variables are assigned the memory only once during the execution of the class.&lt;/li&gt;&lt;li&gt;Static variables can be called directly from static context or by class reference.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/div&gt;Static variables are the class level variable that are allocated the memory only once and they cannot be declared inside any method of a class or inside a static block or static method but can be declared only &amp;nbsp;outside all methods and inside a class. A static variable is called by using the reference of the class and not the object.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;&lt;a href="http://1.bp.blogspot.com/-8AUgN_YBKmA/VCprWGln-fI/AAAAAAAAAI0/lKXUw-oA6Ww/s1600/static.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-8AUgN_YBKmA/VCprWGln-fI/AAAAAAAAAI0/lKXUw-oA6Ww/s1600/static.jpg" height="214" width="400" /&gt;&lt;/a&gt;So lets assume an easy example where we have a class Test, with two variables, "&lt;b&gt;a&lt;/b&gt;" non-static variable and the other "&lt;b&gt;b&lt;/b&gt;" a static variable. &lt;b&gt;Then variable "a" will be specific to the objects of the class Test and variable "b" will be common for all the objects of the class Test.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;As shown in the image both object s1 and s2 have their own copy of variable "a", and both s1 and s2 have same copy of the variable "b".&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;public class Test{&lt;br /&gt;&lt;br /&gt;  String a ;&lt;br /&gt;  static String b ;&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;  Test obj1 = new Test();&lt;br /&gt;  Test obj2 = new Test();&lt;br /&gt;  obj1.a = "Class A instance variable";&lt;br /&gt;  obj2.a = "Class B instance variable";&lt;br /&gt;  obj1.b = "Class A static variable";&lt;br /&gt;  obj2.b = "Class B static variable";&lt;br /&gt;  System.out.println(obj1.a);&lt;br /&gt;  System.out.println(obj2.a);&lt;br /&gt;  System.out.println(obj1.b);&lt;br /&gt;  System.out.println(obj2.b);&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;Class A instance variable&lt;br /&gt;Class B instance variable&lt;br /&gt;Class B static variable&lt;br /&gt;Class B static variable&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So lets understand the output and match it with the statements we made above. An instance variable or non static variable is attached to an object (is at object level). This means that both objects obj1 and obj2 have their own variable "a". Thus obj1.a and obj2.a will give the values we assigned them. But when we assign static variable "b" value by obj1.b we assign value to the variable that is at class level. When we reassign it a value by obj2.b , the value of "b" is that was assigned by obj1.b is replaced by value of obj2.b. This is because &lt;b&gt;static variable are at class level and only one copy of a static variable is created.&lt;/b&gt;&amp;nbsp;Thus obj1.b and obj2.b both will point to the same variable.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5393256710375580713/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-static-variables-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5393256710375580713'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5393256710375580713'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-static-variables-in-java.html' title='What are static variables in Java ?'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-8AUgN_YBKmA/VCprWGln-fI/AAAAAAAAAI0/lKXUw-oA6Ww/s72-c/static.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6999535332299030615</id><published>2014-09-30T00:51:00.000+05:30</published><updated>2014-09-30T00:51:07.768+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Can we override a static method in Java ?</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Static methods can not be overriden.&lt;/li&gt;&lt;li&gt;Static methods are at class level and not at object level.&lt;/li&gt;&lt;li&gt;Static methods take lock on a class and non static methods takes lock on an object.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : Trying to override a static method&lt;/b&gt;&lt;/div&gt;Suppose we have a class A and another class B that extends this class. Both the classes have same static method test() with same return type and same parameters. So this satisfies this the conditions for overriding a function. So what will be the output of the following program ?&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;class A{&lt;br /&gt;  public static void test(){&lt;br /&gt;    System.out.println("Class A");   &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class B extends A{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;  A obj1 = new B();&lt;br /&gt;  B obj2 = new B();&lt;br /&gt;  obj1.test();&lt;br /&gt;  obj2.test();&lt;br /&gt;  A.test();&lt;br /&gt;  B.test();&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public static void test(){&lt;br /&gt;    System.out.println("Class B");&lt;br /&gt;  } &lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;Class A&lt;br /&gt;Class B&lt;br /&gt;Class A&lt;br /&gt;Class B&lt;br /&gt;&lt;/pre&gt;So, why did we get this output ? Incase it was a case of overriding we should have got the output of obj1.test() and obj2.test() &amp;nbsp;as Class B. So this is definitely not the case of overriding.&lt;br /&gt;&lt;br /&gt;We get this because method test() is static and belongs to class and not any object. Thus when we call obj1.test(), we get a reference of class A, thus it will call the test() of class A and when we do obj2.test(), we get a reference of class B, thus it will call the test() of class B.&lt;br /&gt;&lt;br /&gt;Now, lets see what happens if we remove the static keyword from the methods,&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;class A{&lt;br /&gt;  public void test(){&lt;br /&gt;    System.out.println("Class A");   &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class B extends A{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;  A obj1 = new B();&lt;br /&gt;  obj1.test();&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public void test(){&lt;br /&gt;    System.out.println("Class B");&lt;br /&gt;  } &lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;Class B&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;So, now the method test() of class A gets overridden, this is why we get Class B as the output.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6999535332299030615/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/can-we-override-static-method-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6999535332299030615'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6999535332299030615'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/can-we-override-static-method-in-java.html' title='Can we override a static method in Java ?'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8095225297026596945</id><published>2014-09-26T19:49:00.002+05:30</published><updated>2014-09-26T19:53:58.157+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>What is a TreeSet in Java ?</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;TreeSet is ordered and sorted Set.&lt;/li&gt;&lt;li&gt;TreeSet extends AbstractSet and implements NavigableSet.&lt;/li&gt;&lt;li&gt;Objects are stored in ascending order based on natural ordering.&lt;/li&gt;&lt;li&gt;You can even define your sorting rules for sorting a TreeSet using constructors with Comparable or Comparator.&lt;/li&gt;&lt;li&gt;It is fast for Accessing/Retrieving objects but slow for Adding/Removing objects.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Constructor : TreeSet&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;TreeSet(); // Default Constructor&lt;br /&gt;TreeSet(Collection&amp;lt;? extends E&amp;gt; c); //TreeSet from Collection C&lt;br /&gt;TreeSet(Comparator&amp;lt;? super E&amp;gt; comp); // TreeSet with custom ordering as per Comparator&lt;br /&gt;TreeSet(SortedSet&amp;lt;E&amp;gt;ss); //TreeSet that contains the elements of ss.&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : TreeSet Implementation&lt;/b&gt;&lt;/div&gt;Suppose we have a Set of Tourists from different countries and we want to sort them according to their names.(Right now we can just neglect the country of the tourists).&lt;br /&gt;&lt;pre class="brush: java"&gt;import java.util.TreeSet;&lt;br /&gt;&lt;br /&gt;public class TreeSetDemo {&lt;br /&gt;&lt;br /&gt;	public static void main(String[] args) {&lt;br /&gt;		TreeSet&amp;lt;String&amp;gt; tourists = new TreeSet&amp;lt;String&amp;gt;();&lt;br /&gt;		&lt;br /&gt;		tourists.add("Sachin");&lt;br /&gt;		tourists.add("Zahir");&lt;br /&gt;		tourists.add("Ravi");&lt;br /&gt;		tourists.add("Ishant");&lt;br /&gt;		tourists.add("Satty");&lt;br /&gt;		tourists.add("Kavita");&lt;br /&gt;		tourists.add("Ashish");&lt;br /&gt;		tourists.add("Sanket");&lt;br /&gt;		tourists.add("Sachin");&lt;br /&gt;                // This is duplicate element so will not be added again&lt;br /&gt;		&lt;br /&gt;		System.out.println("Original Set:" + tourists); 		&lt;br /&gt;		System.out.println("First Name: "+ tourists.first());&lt;br /&gt;		System.out.println("Last Name: "+ tourists.last());&lt;br /&gt;		&lt;br /&gt;	}&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;Original Set:[Ashish, Ishant, Kavita, Ravi, Sachin, Sanket, Satty, Zahir]&lt;br /&gt;First Name: Ashish&lt;br /&gt;Last Name: Zahir&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : TreeSet &amp;nbsp;Implementation Comparator Interface.&lt;/b&gt;&lt;/div&gt;Now If we consider the ages of the tourists as well, the above example will fail Since we do not know how to sort the given objects of the class. So we need to define custom sorting logic using &lt;b&gt;Comparator &lt;/b&gt;or &lt;b&gt;Comparable.&lt;/b&gt;&amp;nbsp;The following example shows how we can use Comparator to sort the Tourists based on their names and if their names are same then based on their ages. &lt;br /&gt;&lt;h3&gt;Class : Tourists.java&lt;/h3&gt;&lt;pre class="brush : java"&gt;public class Tourists {&lt;br /&gt;&lt;br /&gt;  private String name;&lt;br /&gt;  private int age;&lt;br /&gt;&lt;br /&gt;  Tourists(String cricketerName, int age){&lt;br /&gt;    this.name = cricketerName;&lt;br /&gt;    this.age = age;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public String getName() {&lt;br /&gt;    return name;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public int getAge() {&lt;br /&gt;    return age;&lt;br /&gt;  }		&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;h3&gt;Class : SortTouristsByComparator.java&lt;/h3&gt;&lt;pre class="brush : java"&gt;import java.util.Comparator;	&lt;br /&gt;&lt;br /&gt;class SortTouristsByComparator implements Comparator&amp;lt;Tourists&amp;gt; {&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public int compare(Tourists t1, Tourists t2) {&lt;br /&gt;&lt;br /&gt;    if( t1.getName().compareTo(t2.getName()) != 0)&lt;br /&gt;      return t1.getName().compareTo(t2.getName());    &lt;br /&gt;    &lt;br /&gt;    return t1.getAge() - t2.getAge() ;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h3&gt;Class : TreeSetDemo.java&lt;/h3&gt;&lt;pre class="brush : java"&gt;import java.util.TreeSet;&lt;br /&gt;&lt;br /&gt;public class TreeSetDemo {&lt;br /&gt;&lt;br /&gt;	public static void main(String[] args) {       &lt;br /&gt;  //We pass the object of the Class that implements Comparable&lt;br /&gt;  //interface for sorting Tourists objects.&lt;br /&gt;&lt;br /&gt;		TreeSet&amp;lt;Tourists&amp;gt; tourists = new TreeSet&amp;lt;Tourists&amp;gt;(new SortTouristsByComparator());&lt;br /&gt;		&lt;br /&gt;		tourists.add(new Tourists("Sachin",35));&lt;br /&gt;		tourists.add(new Tourists("Zahir",29));&lt;br /&gt;		tourists.add(new Tourists("Ravi",31));&lt;br /&gt;		tourists.add(new Tourists("Ishant",19));&lt;br /&gt;		tourists.add(new Tourists("Satty",25));&lt;br /&gt;		tourists.add(new Tourists("Kavita",12));&lt;br /&gt;		tourists.add(new Tourists("Ashish",64));&lt;br /&gt;		tourists.add(new Tourists("Sanket",30));&lt;br /&gt;		tourists.add(new Tourists("Sachin",23)); &lt;br /&gt;&lt;br /&gt;		for(Tourists tourist : tourists){&lt;br /&gt;                  System.out.println("name="+tourist.getName() + "  age="+tourist.getAge());&lt;br /&gt;                }&lt;br /&gt;		&lt;br /&gt;	}&lt;br /&gt;} &lt;br /&gt;&lt;/pre&gt;&lt;pre class="output"&gt;name=Ashish  age=64&lt;br /&gt;name=Ishant  age=19&lt;br /&gt;name=Kavita  age=12&lt;br /&gt;name=Ravi  age=31&lt;br /&gt;name=Sachin  age=23&lt;br /&gt;name=Sachin  age=35&lt;br /&gt;name=Sanket  age=30&lt;br /&gt;name=Satty  age=25&lt;br /&gt;name=Zahir  age=29&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : TreeSet Implementation using Comparable Interface.&lt;/b&gt;&lt;/div&gt;The following example shows how we can use Comparable to sort the Tourists based on their names and if their names are same then based on their ages. &lt;br /&gt;&lt;h3&gt;Class : Tourists.java&lt;/h3&gt;&lt;pre class="brush : java"&gt;public class Tourists implements Comparable&amp;lt;Tourists&amp;gt;{&lt;br /&gt;&lt;br /&gt;  private String name;&lt;br /&gt;  private int age;&lt;br /&gt;&lt;br /&gt;  Tourists(String cricketerName, int age){&lt;br /&gt;    this.name = cricketerName;&lt;br /&gt;    this.age = age;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public String getName() {&lt;br /&gt;    return name;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public int getAge() {&lt;br /&gt;    return age;&lt;br /&gt;  }		&lt;br /&gt;&lt;br /&gt;  &lt;br /&gt;  public int compareTo(Tourists t){&lt;br /&gt;&lt;br /&gt;  if(this.getName().compareTo(t.getName()) !=0)&lt;br /&gt;     return this.getName().compareTo(t.getName());&lt;br /&gt; &lt;br /&gt;  return this.getAge() - t.getAge(); &lt;br /&gt;  &lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;h3&gt;Class : TreeSetDemo.java&lt;/h3&gt;&lt;pre class="brush : java"&gt;import java.util.TreeSet;&lt;br /&gt;&lt;br /&gt;public class TreeSetDemo {&lt;br /&gt;&lt;br /&gt;	public static void main(String[] args) {&lt;br /&gt;		TreeSet&amp;lt;Tourists&amp;gt; tourists = new TreeSet&amp;lt;Tourists&amp;gt;();&lt;br /&gt;		&lt;br /&gt;		tourists.add(new Tourists("Sachin",35));&lt;br /&gt;		tourists.add(new Tourists("Zahir",29));&lt;br /&gt;		tourists.add(new Tourists("Ravi",31));&lt;br /&gt;		tourists.add(new Tourists("Ishant",19));&lt;br /&gt;		tourists.add(new Tourists("Satty",25));&lt;br /&gt;		tourists.add(new Tourists("Kavita",12));&lt;br /&gt;		tourists.add(new Tourists("Ashish",64));&lt;br /&gt;		tourists.add(new Tourists("Sanket",30));&lt;br /&gt;		tourists.add(new Tourists("Sachin",23)); &lt;br /&gt;&lt;br /&gt;		for(Tourists tourist : tourists){&lt;br /&gt;                  System.out.println("name="+tourist.getName() + "  age="+tourist.getAge());&lt;br /&gt;                }&lt;br /&gt;		&lt;br /&gt;	}&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;&lt;/h3&gt;&lt;pre class="output"&gt;name=Ashish  age=64&lt;br /&gt;name=Ishant  age=19&lt;br /&gt;name=Kavita  age=12&lt;br /&gt;name=Ravi  age=31&lt;br /&gt;name=Sachin  age=23&lt;br /&gt;name=Sachin  age=35&lt;br /&gt;name=Sanket  age=30&lt;br /&gt;name=Satty  age=25&lt;br /&gt;name=Zahir  age=29&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8095225297026596945/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-treeset-in-java-and-why-treeset-is-used.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8095225297026596945'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8095225297026596945'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-treeset-in-java-and-why-treeset-is-used.html' title='What is a TreeSet in Java ?'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6103303754346250958</id><published>2014-09-26T13:44:00.000+05:30</published><updated>2014-09-26T13:44:01.143+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>How HashSet works internally in Java ??</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;HashSet returns unordered and unsorted values.&lt;/li&gt;&lt;li&gt;HashSet&amp;nbsp;contains only the unique values.&lt;/li&gt;&lt;li&gt;HashSet maintains an internal HashMap to provide uniqueness.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;How Set maintains Uniqueness ??&lt;/b&gt;&lt;/div&gt;The following program shows how we add new values to a set.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.Set;&lt;br /&gt;import java.util.HashSet;&lt;br /&gt;class SetImpl{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;     &lt;br /&gt;    Set&amp;lt;object&amp;gt; set = new HashSet&amp;lt;object&amp;gt;();&lt;br /&gt;    set.add(100);&lt;br /&gt;    set.add("Java");&lt;br /&gt;    set.add("String");&lt;br /&gt;    set.add("Java");&lt;br /&gt;    set.add("Java");&lt;br /&gt;    System.out.println(set);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Output of the program is&amp;nbsp;[100, String, Java]&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Now, the question is how does Set maintains &amp;nbsp;uniqueness. The answer is that Set internally maintains a HashMap. Surprised ?? If you open the implementation of HashSet in the java api you will get the following implementation.&lt;br /&gt;&lt;pre class="brush : java"&gt;public class HashSet&lt;e&gt;&lt;br /&gt;extends AbstractSet&lt;e&gt;&lt;br /&gt;implements Set&lt;e&gt;, Cloneable, java.io.Serializable&lt;br /&gt;&lt;br /&gt;{&lt;br /&gt;    private transient HashMap&lt;e bject=""&gt; map;&lt;br /&gt;    &lt;br /&gt;    // Dummy value to associate with an Object in the backing Map&lt;br /&gt;    &lt;br /&gt;    private static final Object PRESENT = new Object();&lt;br /&gt;    &lt;br /&gt;    &lt;br /&gt;    public HashSet() {&lt;br /&gt;        map = new HashMap&amp;lt;&amp;gt;();&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    // SOME CODE ,i.e Other methods in Hash Set&lt;br /&gt;    &lt;br /&gt;    &lt;br /&gt;    public boolean add(E e) {&lt;br /&gt;        return map.put(e, PRESENT)==null;&lt;br /&gt;    }&lt;br /&gt;    &lt;br /&gt;    &lt;br /&gt;    // SOME CODE ,i.e Other methods in Hash Set&lt;br /&gt;}&lt;br /&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/e&gt;&lt;/pre&gt;&lt;br /&gt;So, we achieve uniqueness through HashMap, whenever you create an object of HashSet an object of Hashmap is automatically create. You can see&amp;nbsp;&lt;a href="http://ekiras.blogspot.in/2014/09/how-does-hashmap-works-internally-in-java.html" target="_blank"&gt;internal working of HashMap&lt;/a&gt;&amp;nbsp;at this link. Now, whenever we add an object to Hashset by &lt;b&gt;add() &lt;/b&gt;&amp;nbsp;method, the object we pass is hashed and rehashed to find a bucket location. At this bucket location the object be passed is stored as key and a dummy value is passed along with it to the &lt;b&gt;put(key,value) &lt;/b&gt;method of HashMap method.&lt;br /&gt;&lt;br /&gt;So, when we do&amp;nbsp;&lt;b&gt;set.add(100); &lt;/b&gt;, 100 actually becomes the key and a dummy object (&lt;b&gt;new Object()) &amp;nbsp;&lt;/b&gt;&amp;nbsp;which is referred by Object reference &lt;b&gt;PRESENT&lt;/b&gt; is passed to the map.put(key,value).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;public boolean add(E e) {&lt;br /&gt;        return map.put(e, PRESENT)==null;&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;The method above as in the HashMap implementation, return true if the map.put(key,value) method returns true. This means the value is successfully added to the HashSet otherwise false is returned.&lt;br /&gt;&lt;br /&gt;Main point to remember here is that&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;put(key,value) return true, if the key is unique and added to the map.&lt;/li&gt;&lt;li&gt;If the key is duplicate, then the old value of the key is returned.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6103303754346250958/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/internal-implementation-of-hashset-and-how-hashset-works-internally-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6103303754346250958'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6103303754346250958'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/internal-implementation-of-hashset-and-how-hashset-works-internally-in-java.html' title='How HashSet works internally in Java ??'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-112649101353982949</id><published>2014-09-22T01:41:00.000+05:30</published><updated>2014-09-22T14:34:13.115+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>What is a JSP in Java J2EE.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;JSP stands for Java Server Pages.&lt;/li&gt;&lt;li&gt;Jsp at compilation time is a servlet and also behaves like a servlet.&lt;/li&gt;&lt;li&gt;Jsp serves as &lt;b&gt;views&lt;/b&gt;&amp;nbsp;in MVC architecture.&lt;/li&gt;&lt;li&gt;Jsp can contain HTML code inside them.&lt;/li&gt;&lt;li&gt;They are compiled everytime they are requested.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What is a JSP ?&lt;/b&gt;&lt;/div&gt;JavaServer Pages (JSP) is a technology for developing dynamic web pages with dynamic data. You can write java code within a jsp along with the Html using special Jsp tags most of which start with &amp;lt;% and end with %&amp;gt;.&lt;br /&gt;&lt;br /&gt;A JavaServerPage component is a type of Java servlet that is designed to fulfill the role of a user interface for a Java web application. Web developers write JSPs as text files that combine HTML or XHTML code, XML elements, and embedded JSP actions and commands.&lt;br /&gt;&lt;br /&gt;Using JSP, you can collect input from users through web page forms, present records from a database or another source, and create web pages dynamically.  JSP tags can be used for a variety of purposes, such as retrieving information from a database or registering user preferences, accessing JavaBeans components, passing control between pages and sharing information between requests, pages etc.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-VJkgZHTSx5o/VBXJcPs4bQI/AAAAAAAAAHM/VNFX-EbtoKg/s1600/cstrdoc001.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-VJkgZHTSx5o/VBXJcPs4bQI/AAAAAAAAAHM/VNFX-EbtoKg/s1600/cstrdoc001.gif" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="hl-note"&gt;&lt;h3&gt;Sample JSP Structure&lt;/h3&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;&amp;lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"&lt;br /&gt;    pageEncoding="ISO-8859-1"%&amp;gt;&lt;br /&gt;&amp;lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"&amp;gt;&lt;br /&gt;&amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;   This is the body of the jsp page.&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/112649101353982949/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-jsp-in-java-j2ee.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/112649101353982949'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/112649101353982949'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-jsp-in-java-j2ee.html' title='What is a JSP in Java J2EE.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-VJkgZHTSx5o/VBXJcPs4bQI/AAAAAAAAAHM/VNFX-EbtoKg/s72-c/cstrdoc001.gif' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4280404670113387437</id><published>2014-09-19T17:07:00.000+05:30</published><updated>2014-09-19T17:07:15.776+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>Difference between ServletConfig and ServletContext</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Difference : ServletContext vs ServletConfig&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;table border="1" cellpadding="5" cellspacing="0" class="table-bg" style="width: 100%;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;th width="50%"&gt;ServletContext&lt;/th&gt;&lt;th width="50%"&gt;ServletConfig&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Servlet Context is a global configuration for servlets in a an application i.e this is same for all the servlets.&amp;nbsp;&lt;/td&gt;&lt;td&gt;Servlet Config is a local configuration for each servlet in an application i.e each servlet has its own servlet configuration that may differ from the servlet config of another servlet.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ServletContext is one per application.&lt;/td&gt;&lt;td&gt;ServletConfig is one per servlet.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;It is created at the time of deployment of the web application.&lt;/td&gt;&lt;td&gt;It is initialized when a servlet is initialized.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;Its scope is as long as the application is up and running, it will be destroyed when the application is removed from the server.&lt;/td&gt;&lt;td&gt;&amp;nbsp;Its scope isand is destroyed when a servlet is destroyed by the servlet container.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;In web.xml it should be declared as &amp;lt;context-param&amp;gt; tag and it should be under &amp;lt;web-app&amp;gt; tag.&lt;/td&gt;&lt;td&gt;In web.xml it should be declared as &amp;lt;init-param&amp;gt; under &amp;lt;servlet-class&amp;gt; tag.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ServletContext object will be available even before giving the first request&lt;/td&gt;&lt;td&gt;We should give request explicitly, in order to create ServletConfig object for the first time&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-FHvlpFiPvo4/VBwUYWd4aEI/AAAAAAAAAHs/nO_BqxOu6r4/s1600/servlet-context-and-servlet-config.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-FHvlpFiPvo4/VBwUYWd4aEI/AAAAAAAAAHs/nO_BqxOu6r4/s1600/servlet-context-and-servlet-config.png" height="436" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4280404670113387437/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/difference-between-servlet-config-and-servlet-context.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4280404670113387437'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4280404670113387437'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/difference-between-servlet-config-and-servlet-context.html' title='Difference between ServletConfig and ServletContext'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-FHvlpFiPvo4/VBwUYWd4aEI/AAAAAAAAAHs/nO_BqxOu6r4/s72-c/servlet-context-and-servlet-config.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4528933647245772132</id><published>2014-09-18T01:21:00.001+05:30</published><updated>2014-09-18T01:21:14.700+05:30</updated><app:control xmlns:app='http://purl.org/atom/app#'><app:draft>yes</app:draft></app:control><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>What is an Interceptor in Java J2EE Web Applications</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;this is body. &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Heading&lt;/b&gt;&lt;/div&gt;this is body. &lt;/div&gt;</content><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-an-interceptor-in-java-j2ee-web-application.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4528933647245772132'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4528933647245772132'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3733986627003694687</id><published>2014-09-17T13:24:00.001+05:30</published><updated>2014-09-17T13:33:43.573+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='J2EE'/><title type='text'>What are Filters in Java J2EE applications.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A filter is hit before the servlet or a controller is hit and before the response is sent back to the client.&lt;/li&gt;&lt;li&gt;Filters can be used to apply some action on application level.&lt;/li&gt;&lt;li&gt;A filter implements the javax.servlet.Filter interface and the primary filter functionality is implemented by the doFilter() method of the filter.&lt;/li&gt;&lt;li&gt;Filters can be used to manipulate both requests from client and response from server.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;a href="http://3.bp.blogspot.com/-UzwFLHu3N6s/VBk3jxLOyQI/AAAAAAAAAHc/oRh8uIHD1wg/s1600/servlet-filters-1.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-UzwFLHu3N6s/VBk3jxLOyQI/AAAAAAAAAHc/oRh8uIHD1wg/s1600/servlet-filters-1.png" height="239" width="320" /&gt;&lt;/a&gt;&lt;b&gt;What is a Filter in Java Web Applications ?&lt;/b&gt;&lt;/div&gt;A filter is a useful way of performing filtering operations in java web applications bith before a request reaches the backend server and after the response is received from the backend server. A filter is basically used to filter things. Suppose you want to make your application accessible to a particular country, then you can apply IP filtering in your application, similarly we can have various types of filters like&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Authentication Filters&lt;/li&gt;&lt;li&gt;Data compression Filters&lt;/li&gt;&lt;li&gt;Encryption Filters&lt;/li&gt;&lt;li&gt;Filters that trigger resource access events&lt;/li&gt;&lt;li&gt;Image Conversion Filters&lt;/li&gt;&lt;li&gt;Logging and Auditing Filters&lt;/li&gt;&lt;li&gt;MIME-TYPE Chain Filters&lt;/li&gt;&lt;li&gt;Tokenizing Filters&lt;/li&gt;&lt;li&gt;XSL/T Filters That Transform XML Content&lt;/li&gt;&lt;/ul&gt;Filters are deployed in the deployment descriptor file &lt;b&gt;web.xml&lt;/b&gt; and then &lt;b&gt;map to either servlet names or URL patterns&lt;/b&gt; in your application's deployment descriptor.  When the web container starts up your web application, it creates &lt;b&gt;an instance of each filter&lt;/b&gt; that you have declared in the deployment descriptor. The &lt;b&gt;filters execute in the order that they are declared&lt;/b&gt; in the deployment descriptor.&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : Implementation of a Filter&amp;nbsp;&lt;/b&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;web.xml -&lt;/h3&gt;&lt;div&gt;It contains the following&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Welcome file list&lt;/li&gt;&lt;li&gt;Mapping for a filter named MyFilter&lt;/li&gt;&lt;li&gt;Mapping for a servlet named DemoServlet&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;pre class="brush : xml"&gt;&amp;lt;web-app id="WebApp_ID" version="2.5" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemalocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&amp;gt;&lt;br /&gt;  &amp;lt;display-name&amp;gt;FilterDemo&amp;lt;/display-name&amp;gt;&lt;br /&gt;  &amp;lt;welcome-file-list&amp;gt;&lt;br /&gt;    &amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt;&lt;br /&gt;  &amp;lt;/welcome-file-list&amp;gt;&lt;br /&gt;  &amp;lt;filter&amp;gt;&lt;br /&gt;    &amp;lt;filter-name&amp;gt;MyFilter&amp;lt;/filter-name&amp;gt;&lt;br /&gt;    &amp;lt;filter-class&amp;gt;com.ekiras.filter.MyFilter&amp;lt;/filter-class&amp;gt;&lt;br /&gt;    &amp;lt;init-param&amp;gt;&lt;br /&gt;      &amp;lt;param-name&amp;gt;my-param&amp;lt;/param-name&amp;gt;&lt;br /&gt;      &amp;lt;param-value&amp;gt;my-param-value&amp;lt;/param-value&amp;gt;&lt;br /&gt;    &amp;lt;/init-param&amp;gt;&lt;br /&gt;  &amp;lt;/filter&amp;gt;&lt;br /&gt;  &amp;lt;filter-mapping&amp;gt;&lt;br /&gt;    &amp;lt;filter-name&amp;gt;MyFilter&amp;lt;/filter-name&amp;gt;&lt;br /&gt;    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/filter-mapping&amp;gt;&lt;br /&gt;  &amp;lt;servlet&amp;gt;&lt;br /&gt;    &amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;&lt;br /&gt;    &amp;lt;display-name&amp;gt;DemoServlet&amp;lt;/display-name&amp;gt;&lt;br /&gt;    &amp;lt;servlet-name&amp;gt;DemoServlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;    &amp;lt;servlet-class&amp;gt;com.ekiras.servlet.DemoServlet&amp;lt;/servlet-class&amp;gt;&lt;br /&gt;  &amp;lt;/servlet&amp;gt;&lt;br /&gt;  &amp;lt;servlet-mapping&amp;gt;&lt;br /&gt;    &amp;lt;servlet-name&amp;gt;DemoServlet&amp;lt;/servlet-name&amp;gt;&lt;br /&gt;    &amp;lt;url-pattern&amp;gt;/DemoServlet&amp;lt;/url-pattern&amp;gt;&lt;br /&gt;  &amp;lt;/servlet-mapping&amp;gt;&lt;br /&gt;&amp;lt;/web-app&amp;gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;Filter - MyFilter&lt;/h3&gt;This filter implements the Filter interface and overrides its methods init(), destroy() and doFilter(). We write the filtering logic in the doFilter() method. In this case we are just going to add the init parameters for the filter to the response object inorder to show it on the jsp. filterChain.doFilter() method will take the control to the requested servlet or jsp. After a response has been set the control comes back to this filter.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;package com.ekiras.filter;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;import javax.servlet.ServletException;&lt;br /&gt;import javax.servlet.http.HttpServlet;&lt;br /&gt;import javax.servlet.http.HttpServletRequest;&lt;br /&gt;import javax.servlet.http.HttpServletResponse;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;import java.io.PrintWriter;&lt;br /&gt;import java.util.Enumeration;&lt;br /&gt;&lt;br /&gt;import javax.servlet.Filter;&lt;br /&gt;import javax.servlet.FilterChain;&lt;br /&gt;import javax.servlet.FilterConfig;&lt;br /&gt;import javax.servlet.ServletException;&lt;br /&gt;import javax.servlet.ServletRequest;&lt;br /&gt;import javax.servlet.ServletResponse;&lt;br /&gt;&lt;br /&gt;// Implements Filter class&lt;br /&gt;public class MyFilter implements Filter {&lt;br /&gt;&lt;br /&gt;	// To get The FilterConfig object&lt;br /&gt;	FilterConfig filterConfig = null;&lt;br /&gt;&lt;br /&gt;	public void init(FilterConfig filterConfig) throws ServletException {&lt;br /&gt;		this.filterConfig = filterConfig;&lt;br /&gt;	}&lt;br /&gt;&lt;br /&gt;	public void destroy() {&lt;br /&gt;	}&lt;br /&gt;    &lt;br /&gt;	//doFilter() method is the method where we write filtering logic.&lt;br /&gt;	public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)&lt;br /&gt;			throws IOException, ServletException {&lt;br /&gt;		servletResponse.setContentType("text/html");&lt;br /&gt;		&lt;br /&gt;		PrintWriter out = servletResponse.getWriter();&lt;br /&gt;                // Get init parameter &lt;br /&gt;		out.println("my-param (InitParameter): " + filterConfig.getInitParameter("my-param"));&lt;br /&gt;		out.println("&lt;br /&gt;&lt;br /&gt;Parameters:&lt;br /&gt;");&lt;br /&gt;		Enumeration&lt;string&gt; parameterNames = servletRequest.getParameterNames();&lt;br /&gt;		if (parameterNames.hasMoreElements()) {&lt;br /&gt;			while (parameterNames.hasMoreElements()) {&lt;br /&gt;				String name = parameterNames.nextElement();&lt;br /&gt;				String value = servletRequest.getParameter(name);&lt;br /&gt;				out.println("name:" + name + ", value: " + value + "&lt;br /&gt;");&lt;br /&gt;			}&lt;br /&gt;		} else {&lt;br /&gt;			out.println("---None---&lt;br /&gt;");&lt;br /&gt;		}&lt;br /&gt;		out.println("&lt;br /&gt;Start Regular Content:&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;");&lt;br /&gt;                // Pass request back down the filter chain&lt;br /&gt;		filterChain.doFilter(servletRequest, servletResponse);&lt;br /&gt;		out.println("&lt;br /&gt;&lt;hr /&gt;&lt;br /&gt;End Regular Content:&lt;br /&gt;");&lt;br /&gt;&lt;br /&gt;	}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/string&gt;&lt;/pre&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Servlet - DemoServlet&lt;/h3&gt;This is a demo servlet and just calls a method performTask() to print a demo message.  &lt;br /&gt;&lt;pre class="brush : java"&gt;package com.ekiras.servlet;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;import java.io.PrintWriter;&lt;br /&gt;&lt;br /&gt;import javax.servlet.ServletException;&lt;br /&gt;import javax.servlet.http.HttpServlet;&lt;br /&gt;import javax.servlet.http.HttpServletRequest;&lt;br /&gt;import javax.servlet.http.HttpServletResponse;&lt;br /&gt;&lt;br /&gt;public class DemoServlet extends HttpServlet {&lt;br /&gt;	private static final long serialVersionUID = 1L;&lt;br /&gt;&lt;br /&gt;	public DemoServlet() {&lt;br /&gt;        super();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&lt;br /&gt;		performTask(request, response);&lt;br /&gt;	}&lt;br /&gt;&lt;br /&gt;	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,&lt;br /&gt;			IOException {&lt;br /&gt;		performTask(request, response);&lt;br /&gt;	}&lt;br /&gt;&lt;br /&gt;	private void performTask(HttpServletRequest request, HttpServletResponse response) throws ServletException,&lt;br /&gt;			IOException {&lt;br /&gt;		response.setContentType("text/html");&lt;br /&gt;		PrintWriter out = response.getWriter();&lt;br /&gt;		out.println("TestServlet says hi");&lt;br /&gt;	}&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;h3 style="text-align: left;"&gt;Jsp - index.jsp&lt;/h3&gt;This is the jsp that will be hit. This jsp just contains a demo message . &lt;br /&gt;&lt;pre class="brush : java"&gt;&amp;lt;%@ page language="java" contentType="text/html; charset=ISO-8859-1"&lt;br /&gt;    pageEncoding="ISO-8859-1"&amp;gt;;&lt;br /&gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;title&amp;gt;Test Filter&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;Hi This is My JSP&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div class="download"&gt;&lt;a href="https://drive.google.com/file/d/0B9LTuuU_2Sd6bDVsV21xaFJhUGc/edit?usp=sharing" target="_blank"&gt;FilerDemo&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3733986627003694687/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-filters-in-java-j2ee.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3733986627003694687'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3733986627003694687'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-filters-in-java-j2ee.html' title='What are Filters in Java J2EE applications.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-UzwFLHu3N6s/VBk3jxLOyQI/AAAAAAAAAHc/oRh8uIHD1wg/s72-c/servlet-filters-1.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7737979681175012750</id><published>2014-09-16T21:46:00.002+05:30</published><updated>2014-09-16T21:46:40.211+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><title type='text'>How to select Second largest value from a database.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Why this question is important ?&lt;/b&gt;&lt;/div&gt;This is a most frequently asked question in an interview these days. This question tests the thinking of a candidate and how much the candidate knows about the database. This question &amp;nbsp;cannot be done without the use of a sub query and most of the people are not comfortable writing the sub-queries. So if you are not very comfortable with database queries you might get tricked in this question.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&amp;nbsp;&lt;/b&gt;&lt;/div&gt;Suppose we have a table with id's from 1 to 1000 and we need to find the second largest id from this table.&lt;br /&gt;Let's say we have table&lt;br /&gt;&lt;pre class="brush : sql"&gt;create table test(id int not null primary_key, name varchar(50));&lt;/pre&gt;So we can get the second largest value of id in the following ways.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;pre class="brush : sql"&gt;SELECT max(id) FROM test WHERE id!=(SELECT MAX(id) FROM test GROUP BY id) GROUP BY id;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&lt;pre class="brush : sql"&gt;SELECT MIN(id) FROM test (SELECT id FROM test ORDER BY id DESC LIMIT 2) t ;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;In Query 1 : &lt;b&gt;SELECT max(id) FROM test WHERE id!=(SELECT MAX(id) FROM test GROUP BY id) GROUP BY id;&lt;/b&gt;&lt;br /&gt;We first find the largest id from the table "test" by the sub query "&lt;b&gt;(SELECT MAX(id) FROM test GROUP BY id)&lt;/b&gt;", in our case this will give 1000 .Now we select the max "id" from table test where id is not equal to this id, thus it will give 999 as the max id.&lt;br /&gt;&lt;br /&gt;In Query 2 : &lt;b&gt;SELECT MIN(id) FROM test (SELECT id FROM test ORDER BY id DESC LIMIT 2) t ;&lt;/b&gt;&lt;br /&gt;We first find the number of records in decreasing order that we have to find, suppose we have to find the second largest value then we will find 2 records, if we need to find the third largest value then we need to find the three largest records.&lt;b&gt;SELECT id FROM test ORDER BY id DESC LIMIT 2,&lt;/b&gt;&amp;nbsp;gives us 2 records for id = 1000 and 999. Now we select the id with the minimum value, i.e id =999, which is minimum between 1000 and 999.&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;Using Query 2, we can find out any largest value from &amp;nbsp;given table. We just need to change the&lt;b&gt; LIMIT N&amp;nbsp;&lt;/b&gt;where 'N' is the n-largest value in the table e.g for fourth largest value it will be LIMIT 4 and for 10th largest value it will be LIMIT 10.&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7737979681175012750/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-select-second-largest-value-from-a-table-in-database.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7737979681175012750'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7737979681175012750'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-select-second-largest-value-from-a-table-in-database.html' title='How to select Second largest value from a database.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2150660457430161681</id><published>2014-09-16T13:35:00.002+05:30</published><updated>2014-09-16T13:56:20.247+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Spring Roo'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Spring'/><title type='text'>Introduction To Spring Roo</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What is Spring Roo ?&lt;/b&gt;&lt;/div&gt;Spring Roo is a spring productivity tool that simply reduces the pain of a developer by doing all the configuration related stuff for a project. Spring Roo does not require any extra knowledge &amp;nbsp;expect java. &lt;b&gt;Roo makes it fast and easy to build full Java applications in minutes.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Why Use Spring Roo ?&lt;/b&gt;&lt;/div&gt;Following are the points why we should use Spring Roo.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Higher Productivity - &lt;/b&gt;We can get started with the java project just in minutes and the roo follows the best practice standard methods to create the application for us&lt;/li&gt;&lt;li&gt;&lt;b&gt;Stock Standard Java -&lt;/b&gt;&amp;nbsp;Roo works perfectly with all the versions of java from Java 5.0 and above. So you need not to upgrade your java versions. Roo works perfectly with projects for Spring, JSP's , &amp;nbsp;JPA like Hibernate etc. So working with Roo will be very easy and familiar for a developer.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Usable and Learnable -&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;No Engineering Tradeoffs - &lt;/b&gt;Roo is not a part of Production code, hence Roo in no way can have any trade-off effects on the code. It will neither effect the uptime of the application nor it will comsume CPU time or any sort of emory.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Easy Roo Removal -&amp;nbsp;&lt;/b&gt;&amp;nbsp; Since Roo is not a part of the runtime code. Thus in any case, if you want to get rid of roo, you can do that without changing anything from the production code. It can also be removed with few easy steps.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Spring Roo is not a runtime. It means that it is not involved in anyway in the production code, no classes, no annotations, no dependencies.&lt;/li&gt;&lt;li&gt;Roo is not an IDE plugin. You can access the Roo in the roo terminal.&lt;/li&gt;&lt;li&gt;Roo is not an annotation processing library.&lt;/li&gt;&lt;li&gt;Roo works perfetly with java 5.0&lt;sup&gt;+&lt;/sup&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Getting Started.&lt;/b&gt;&lt;/div&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/installing-and-getting-started-with-spring-roo.html" target="_blank"&gt;Installing and Getting started with Spring Roo&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2150660457430161681/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/introduction-and-getting-started-with-spring-roo.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2150660457430161681'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2150660457430161681'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/introduction-and-getting-started-with-spring-roo.html' title='Introduction To Spring Roo'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8049973805774570380</id><published>2014-09-13T01:46:00.000+05:30</published><updated>2014-10-02T19:33:22.426+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>Sorting objects using Comparable Interface.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Comparable is an &lt;b&gt;interface&lt;/b&gt; and is available in &lt;b&gt;java.lang&lt;/b&gt; package.&lt;/li&gt;&lt;li&gt;A class implementing it should override &lt;b&gt;compareTo()&lt;/b&gt; method.&lt;/li&gt;&lt;li&gt;compareTo(Object obj) method returns&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;negative integer if object obj is greater than the object with &amp;nbsp;whom it is compared.&lt;/li&gt;&lt;li&gt;0 if both the objects have same values or are same.&lt;/li&gt;&lt;li&gt;positive integer if object obj have is less than the object with whom it is compared.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;While overriding compareTo() method we must check&lt;/li&gt;&lt;ul&gt;&lt;li&gt;If the two objects belong to the same class, else throw ClassCastException.&lt;/li&gt;&lt;li&gt;If the two objects are not null, if either is null then throw NullPointerException.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;We need not implement this class if we need to sort an array or list with objects like string, integers etc.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example: &amp;nbsp;Sorting a list of objects using Comparable Interface&lt;/b&gt;&lt;/div&gt;Suppose we have a class Book with fields name and price and we need to sort the objects based on the name of the book, if the name of the book is same then we sort the book object based on the price of the book.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.*;&lt;br /&gt;&lt;br /&gt;class Book implements Comparable&amp;lt;Book&amp;gt;{&lt;br /&gt; &lt;br /&gt; String name;&lt;br /&gt; int price;&lt;br /&gt;  &lt;br /&gt; public Book(String name, int price){&lt;br /&gt; &lt;br /&gt;    this.name=name;this.price=price;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public int compareTo(Book book)throws NullPointerException,ClassCastException{&lt;br /&gt;&lt;br /&gt;   if(this == null || book == null)&lt;br /&gt;      throw new NullPointerException();&lt;br /&gt;&lt;br /&gt;   if(this.getClass() != book.getClass())&lt;br /&gt;      throw new ClassCastException(); &lt;br /&gt;&lt;br /&gt;   if(this.name.compareTo(book.name) != 0)&lt;br /&gt;     return this.name.compareTo(book.name);&lt;br /&gt;&lt;br /&gt;   return (this.price - book.price); &lt;br /&gt; }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class TestComparable{&lt;br /&gt; &lt;br /&gt; public static void main(String args[]){&lt;br /&gt; &lt;br /&gt;   List&amp;lt;Book&amp;gt; list = new ArrayList&amp;lt;Book&amp;gt;();&lt;br /&gt;   Book book1 = new Book("Alchamist" , 150);&lt;br /&gt;   Book book2 = new Book("Monks" , 450);&lt;br /&gt;   Book book3 = new Book("Harry Potter" , 750);&lt;br /&gt;   Book book4 = new Book("Jungle Book" , 350);&lt;br /&gt;   Book book5 = new Book("Harry Potter" , 550);&lt;br /&gt;   list.add(book1);&lt;br /&gt;   list.add(book2);&lt;br /&gt;   list.add(book3);&lt;br /&gt;   list.add(book4);&lt;br /&gt;   list.add(book5);&lt;br /&gt; &lt;br /&gt;   Collections.sort(list);&lt;br /&gt; &lt;br /&gt;   for(Book book : list){&lt;br /&gt;     System.out.println("name="+book.name+" price="+book.price);&lt;br /&gt;   } &lt;br /&gt; &lt;br /&gt; }&lt;br /&gt; &lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;Output of the program :&lt;/b&gt;&lt;br /&gt;&lt;pre class="output"&gt;&lt;br /&gt;name=Alchamist price=150&lt;br /&gt;&lt;br /&gt;name=Harry Potter price=550&lt;br /&gt;&lt;br /&gt;name=Harry Potter price=750&lt;br /&gt;&lt;br /&gt;name=Jungle Book price=350&lt;br /&gt;&lt;br /&gt;name=Monks price=450&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8049973805774570380/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-sort-objects-using-comparable-interface.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8049973805774570380'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8049973805774570380'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-sort-objects-using-comparable-interface.html' title='Sorting objects using Comparable Interface.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6286696676586701110</id><published>2014-09-13T01:12:00.000+05:30</published><updated>2014-09-16T19:36:27.080+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>Difference between Comparator and Comparable Interfaces</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Difference between Comparator and Comparable&lt;/b&gt;&lt;/div&gt;&lt;table border="1" cellpadding="5" cellspacing="0" class="table-bg" style="width: 100%;" class="table-bg"&gt;&lt;tbody&gt;&lt;tr width="50%"&gt;&lt;th&gt;Comparator&lt;/th&gt;&lt;th width="50%"&gt;Comparable&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;It is available in &lt;b&gt;java.util &lt;/b&gt;package.&lt;/td&gt;&lt;td&gt;It is available in &lt;b&gt;java.lang&lt;/b&gt; package.&lt;br /&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;We need to override &lt;b&gt;compare()&lt;/b&gt;&amp;nbsp;method.&lt;/td&gt;&lt;td&gt;We need to override &lt;b&gt;compareTo()&lt;/b&gt; method.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;It takes two arguments as parameters.&lt;br /&gt;&lt;b&gt;public int compare(Object obj1,Object obj2 )&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&amp;nbsp;It takes only one argument as a parameter.&lt;br /&gt;&lt;b&gt;public int compareTo(Object obj)&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Its primary use is where we need to write the &lt;b&gt;comparing logic outside the class&lt;/b&gt; which has to be compared.&amp;nbsp;&lt;/td&gt;&lt;td&gt;&amp;nbsp;It is used when we need to compare the instance of an object with a given object. &lt;b&gt;Comparing logic is inside the class&lt;/b&gt; that needs to be compared.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;b&gt;this&lt;/b&gt; reference is not made while comparing objects&lt;/td&gt;&lt;td&gt;&lt;b&gt;this&lt;/b&gt;&amp;nbsp;reference is used to compare the object.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;It is used for comparing objects based on any logic.&lt;/td&gt;&lt;td&gt;It is mostly used for comparing objects based on the natural ordering.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Both compareTo() and compare() methods return int value.&lt;/li&gt;&lt;li&gt;Both&amp;nbsp;compareTo() and compare() methods return either a negative integer, 0 or a positive integer.&lt;/li&gt;&lt;li&gt;Both Comparator and Comparable are interfaces.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6286696676586701110/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-the-difference-between-comparator-and-comparable-interfaces.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6286696676586701110'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6286696676586701110'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-the-difference-between-comparator-and-comparable-interfaces.html' title='Difference between Comparator and Comparable Interfaces'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-8655818744416598252</id><published>2014-09-12T01:06:00.003+05:30</published><updated>2014-09-12T01:10:44.412+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Difference between Interface and Abstract Class</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Difference Between Interface and Abstract Class&lt;/b&gt;&lt;/div&gt;&lt;table border="1" cellpadding="5" cellspacing="0" style="width: 100%;" class="table-bg"&gt;&lt;thead&gt;&lt;tr&gt;&lt;th width="50%"&gt;Interface&lt;/th&gt;&lt;th&gt;Abstract Class&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;An interface is an unimplemented class.&lt;/td&gt;&lt;td&gt;An abstract class is an incomplete class.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;All methods are by default public abstract.&lt;/td&gt;&lt;td&gt;An abstract class can have both abstract and non abstract methods.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;All variables by default public static final by default&lt;/td&gt;&lt;td&gt;Variables may be static final or may not be.&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;They cannot have any implemented methods.&lt;/td&gt;&lt;td&gt;They can have any number of &amp;nbsp;implemented methods.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;An interface must be implemented by the base class.&lt;/td&gt;&lt;td&gt;An abstract class must be extended by the base class.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;You need to override each method of an interface in the sub class.&lt;/td&gt;&lt;td&gt;You need to override abstract methods only.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;An interface cannot have a constructor&lt;/td&gt;&lt;td&gt;An abstract class can have a constructor.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;An interface can extend more than one interfaces.&lt;/td&gt;&lt;td&gt;An abstract class can implement more than one interface.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Point To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Object of both an interface and an abstract class can not be made.&lt;/li&gt;&lt;li&gt;An abstract class may not override all methods of an interface.&lt;/li&gt;&lt;li&gt;An abstract class may not override any method of another abstract class.&lt;/li&gt;&lt;li&gt;An abstract method in interface or abstract class can not be static.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example : Use of Interface and Abstract Class&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;interface Interface{&lt;br /&gt;    int t = 100;&lt;br /&gt;    public abstract void show();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;abstract class Abstract{&lt;br /&gt;&lt;br /&gt;   public Abstract(){&lt;br /&gt;      System.out.println("Constructor - Abstract Class ");&lt;br /&gt;   }&lt;br /&gt;   public abstract void print(); &lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class Test extends Abstract implements Interface{&lt;br /&gt;&lt;br /&gt;   public static void main(String args[])&lt;br /&gt;   {&lt;br /&gt;      Test obj = new Test();&lt;br /&gt;      obj.show();&lt;br /&gt;      obj.print();&lt;br /&gt;   }&lt;br /&gt;   &lt;br /&gt;   @Override&lt;br /&gt;   public void show(){&lt;br /&gt;       System.out.println("Show()");&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   @Override&lt;br /&gt;   public void print(){&lt;br /&gt;       System.out.println("Print()");&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/8655818744416598252/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-the-difference-between-interface-and-abstract-class-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8655818744416598252'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/8655818744416598252'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-the-difference-between-interface-and-abstract-class-in-java.html' title='Difference between Interface and Abstract Class'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-244359357009033891</id><published>2014-09-11T16:05:00.000+05:30</published><updated>2014-09-11T16:05:01.090+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What are classes in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;First things that comes in mind are&lt;/b&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;A class is a blueprint from which objects are created.&lt;/li&gt;&lt;li&gt;They are wrappers and have everything inside them e.g Functions/Methods/Variables etc.&lt;/li&gt;&lt;li&gt;They can be public or default but not private or protected.&lt;/li&gt;&lt;li&gt;Each Class has a name, and may belong to a package.&lt;/li&gt;&lt;li&gt;A class can have both static and non static methods and variables.&lt;/li&gt;&lt;li&gt;A class can not be static (however inner classes can be).&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/div&gt;A class is the blueprint from which individual objects are created. A class containes&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A main method marked as public static void and taking an array of String arguments.&lt;/li&gt;&lt;li&gt;Instance variables that are inside a class but outside all function.&lt;/li&gt;&lt;li&gt;Local variables that are inside a function. Their scope is limited to the function only.&lt;/li&gt;&lt;li&gt;Member functions that can be either static, non static or final or final static.&lt;/li&gt;&lt;li&gt;A package declaration, this is important for grouping same type of classes together.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;package com.ekiras.demo;&lt;br /&gt;&lt;br /&gt;public class HelloWorld{&lt;br /&gt;&lt;br /&gt;  int instanceVarible = 1;&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    System.out.println("HelloWorld");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public void method(){&lt;br /&gt;    &lt;br /&gt;    String localVariable = "Hi";&lt;br /&gt;  } &lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;A simple class may look like the one shown above.&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Access specifiers of a class&lt;/b&gt;&lt;/div&gt;A class can have public or default access specifier. The class can not be private or protected.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/244359357009033891/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-classes-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/244359357009033891'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/244359357009033891'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-classes-in-java.html' title='What are classes in Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7050279444893453295</id><published>2014-09-11T15:51:00.001+05:30</published><updated>2014-09-13T01:13:43.699+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>How to sort objects using Comparator Interface</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Comparator is an interface and is available in &lt;b&gt;java.util&lt;/b&gt; package.&lt;/li&gt;&lt;li&gt;A class that implement Comparator interface must override its compare() method.&amp;nbsp;&lt;/li&gt;&lt;li&gt;We use Comparator when we have to write logic for comparing object of a class outside that class.&lt;/li&gt;&lt;li&gt;&lt;b&gt;compare(Object e1, Object e2): &lt;/b&gt;Can be called like compare(e1, e2)     &lt;ol&gt;&lt;li&gt;compare(Objecte obj1, Object obj2) method&amp;nbsp;returns zero if the objects are equal.&lt;/li&gt;&lt;li&gt;compare(Objecte obj1, Object obj2) method returns a positive value if obj1 is greater than obj2.&lt;/li&gt;&lt;li&gt;compare(Objecte obj1, Object obj2) method returns a negative value if obj1 is smaller than obj2.&lt;/li&gt;&lt;li&gt;It should throw ClassCastException if object&amp;nbsp;types of&amp;nbsp;e1 and e2 are not comparable.&lt;/li&gt;&lt;li&gt;It should throw NullPointerException if either e1 or e2 or both passed are null.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Syntax for using Comparator interface.&lt;/b&gt;&lt;/div&gt;First we need a class for which we need to write the sorting logic(how to compare objects of this class). Then we need to create a new class that will do this comparing for this class. And finally we need to &amp;nbsp;call the class to do sorting for us.&lt;br /&gt;&lt;pre class="brush : java"&gt;class TobeCompared{&lt;br /&gt;&lt;br /&gt;  // Variables&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class ComparingLogic implements Comparator{&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public int compare(Object obj1, Object obj2){&lt;br /&gt;&lt;br /&gt;       // Comparing logic&lt;br /&gt;       //return int value based on comparison&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;  // Create List of TobeCompared&lt;br /&gt;  // call Collections.sort(list object, new&amp;nbsp;ComparingLogic()) to sort the list&lt;br /&gt;&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example: Sort an Arraylist using Comparator Interface&lt;/b&gt;&lt;/div&gt;Suppose we have a Person class with values name, age and gender. Now if we want to sort a list of Person class such that we get a list of Person class sorted by their name, if names are equal then by age and if age is also same then by their gender.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.util.*;&lt;br /&gt;import java.util.Comparator;&lt;br /&gt;&lt;br /&gt;class Person{&lt;br /&gt;&lt;br /&gt; String name;&lt;br /&gt; int age;&lt;br /&gt; String gender;&lt;br /&gt; &lt;br /&gt; public Person(String name, int age, String gender){&lt;br /&gt;&lt;br /&gt;    this.name=name;this.age=age;this.gender=gender;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class SortObjects implements Comparator&amp;lt;Person&amp;gt;{&lt;br /&gt;&lt;br /&gt; public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;   List&amp;lt;Person&amp;gt; list = new ArrayList&amp;lt;Person&amp;gt;();&lt;br /&gt;   Person person;&lt;br /&gt;   person = new Person("Akash" , 23 , "Male");&lt;br /&gt;   list.add(person);&lt;br /&gt;   person = new Person("Sarah" , 18 , "Female");&lt;br /&gt;   list.add(person);&lt;br /&gt;   person = new Person("Garvita" , 52 , "Female");&lt;br /&gt;   list.add(person);&lt;br /&gt;   person = new Person("Sanket" , 38 , "Male");&lt;br /&gt;   list.add(person);&lt;br /&gt;   person = new Person("Sanket" , 38 , "Female");&lt;br /&gt;   list.add(person);&lt;br /&gt;&lt;br /&gt;   Collections.sort(list, new SortObjects());&lt;br /&gt;&lt;br /&gt;   for(Person obj : list){&lt;br /&gt;     System.out.println("name="+obj.name+" age="+obj.age+" gender="+obj.gender);&lt;br /&gt;   } &lt;br /&gt;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public int compare(Person p1, Person p2){&lt;br /&gt;&lt;br /&gt;   int result = 0;&lt;br /&gt;&lt;br /&gt;   result = p1.name.compareTo(p2.name);&lt;br /&gt;   if(result!=0)&lt;br /&gt;     return result;&lt;br /&gt;   &lt;br /&gt;   result = p1.age - p2.age;&lt;br /&gt;   if(result!=0)&lt;br /&gt;     return result;&lt;br /&gt; &lt;br /&gt;   result = p1.gender.compareTo(p2.gender);&lt;br /&gt;   if(result!=0)&lt;br /&gt;     return result;&lt;br /&gt; &lt;br /&gt;   return result;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;Output of the program :&lt;br /&gt;&lt;b&gt;name=Akash &amp;nbsp; &amp;nbsp;age=23 &amp;nbsp; gender=Male&lt;/b&gt;&lt;br /&gt;&lt;b&gt;name=Garvita &amp;nbsp;age=52 &amp;nbsp; gender=Female&lt;/b&gt;&lt;br /&gt;&lt;b&gt;name=Sanket &amp;nbsp; age=38 &amp;nbsp; gender=Female&lt;/b&gt;&lt;br /&gt;&lt;b&gt;name=Sanket &amp;nbsp; age=38 &amp;nbsp; gender=Male&lt;/b&gt;&lt;br /&gt;&lt;b&gt;name=Sarah &amp;nbsp; &amp;nbsp;age=18 &amp;nbsp; gender=Female&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We can even move the sorting logic from the class to be sorted to a new class, say ComparingLogic, where we can keep&amp;nbsp;write comparing logic for more than one class by overloading the compare() method. So, this class can be used to sort any collection object in the entire project.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7050279444893453295/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-sort-objects-using-comparator-interface-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7050279444893453295'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7050279444893453295'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-sort-objects-using-comparator-interface-in-java.html' title='How to sort objects using Comparator Interface'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1601996676640807441</id><published>2014-09-10T00:16:00.000+05:30</published><updated>2014-09-11T15:54:51.922+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Program to reverse each word of the String.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program : Reverse each word of String&amp;nbsp;&lt;/b&gt;&lt;/div&gt;Write a program that takes a string input from the user and then reverse each word of the of the line as entered by the user.&lt;br /&gt;Expected input &amp;nbsp; : "This is a very good blog"&lt;br /&gt;Expected output : "sihT si a yrev doog golb"&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;import java.io.*;&lt;br /&gt;&lt;br /&gt;public class ReverseString{&lt;br /&gt; &lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    ReverseString obj = new ReverseString();&lt;br /&gt;    String inputString = obj.getStringFromUser();&lt;br /&gt;    String outputString = "";&lt;br /&gt;    String aux = "";&lt;br /&gt;&lt;br /&gt;    for(int itr=0;itr&amp;lt;inputString.length();itr++){    &lt;br /&gt;&lt;br /&gt;        // reverse the words if a whitespace occurs.   &lt;br /&gt;       if(inputString.charAt(itr) == ' '){&lt;br /&gt;          outputString += reverseString(aux) + " ";&lt;br /&gt;          aux = "";&lt;br /&gt;       }&lt;br /&gt;       else{ // extract the word from the string &lt;br /&gt;          aux += inputString.charAt(itr);&lt;br /&gt;       }&lt;br /&gt;    }&lt;br /&gt;    // reverse the last word of the string&lt;br /&gt;    outputString += reverseString(aux);&lt;br /&gt;    System.out.println(outputString);&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;  public static String reverseString(String str){&lt;br /&gt;    &lt;br /&gt;   String aux = "";&lt;br /&gt;   for(int itr = str.length()-1;itr&amp;gt;=0;itr--){&lt;br /&gt;     aux += str.charAt(itr);&lt;br /&gt;   }&lt;br /&gt;   return aux;&lt;br /&gt;  } &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  public String getStringFromUser(){&lt;br /&gt;&lt;br /&gt;     try{&lt;br /&gt;     System.out.println("Enter String to be reversed");&lt;br /&gt;     BufferedReader br= new BufferedReader(new InputStreamReader(System.in));&lt;br /&gt;     return br.readLine();&lt;br /&gt;     }&lt;br /&gt;     catch(Exception e){e.printStackTrace();}&lt;br /&gt;     return "ekansh";&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;Output of the program :&lt;br /&gt;&lt;b&gt;Enter String to be reversed&lt;/b&gt;&lt;br /&gt;&lt;b&gt;This is a very good blog&lt;/b&gt;&lt;br /&gt;&lt;b&gt;sihT si a yrev doog golb&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1601996676640807441/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/program-to-reverse-each-word-of-string-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1601996676640807441'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1601996676640807441'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/program-to-reverse-each-word-of-string-in-java.html' title='Program to reverse each word of the String.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-608544861528325510</id><published>2014-09-09T23:24:00.000+05:30</published><updated>2014-09-11T15:56:46.411+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Program to reverse a String</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program -1 Reverse String with input String from arguments&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;public class ReverseString{&lt;br /&gt; &lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    ReverseString obj = new ReverseString();&lt;br /&gt;    System.out.println(obj.reverseString(args[0]));&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;  public String reverseString(String str){&lt;br /&gt;   &lt;br /&gt;   String aux = "";&lt;br /&gt;   for(int itr = str.length()-1;itr&amp;gt;=0;itr--){&lt;br /&gt;     aux += str.charAt(itr);&lt;br /&gt;   }&lt;br /&gt;   return aux;&lt;br /&gt;  } &lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;Running the program as : &lt;b&gt;java ReverseString ekiras&amp;nbsp;&lt;/b&gt;&lt;br /&gt;Output of the program : &lt;b&gt;sarike &lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Program -2 : Reverse String with input from command line at runtime.&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;import java.io.*;&lt;br /&gt;&lt;br /&gt;public class ReverseString{&lt;br /&gt; &lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    ReverseString obj = new ReverseString();&lt;br /&gt;    System.out.println(obj.reverseString(obj.getStringFromUser()));&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;  public String reverseString(String str){&lt;br /&gt;   &lt;br /&gt;   String aux = "";&lt;br /&gt;   for(int itr = str.length()-1;itr&amp;gt;=0;itr--){&lt;br /&gt;     aux += str.charAt(itr);&lt;br /&gt;   }&lt;br /&gt;   return aux;&lt;br /&gt;  } &lt;br /&gt;  &lt;br /&gt;  public String getStringFromUser(){&lt;br /&gt;&lt;br /&gt;     try{&lt;br /&gt;     System.out.println("Enter String to be reversed");&lt;br /&gt;     BufferedReader br= new BufferedReader(new InputStreamReader(System.in));&lt;br /&gt;     return br.readLine();&lt;br /&gt;     }&lt;br /&gt;     catch(Exception e){e.printStackTrace();}&lt;br /&gt;     return "ekansh";&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Output of the above program :  &lt;/b&gt;&lt;br /&gt;&lt;b&gt;Enter String to be reversed&lt;/b&gt;&lt;br /&gt;&lt;b&gt;ekiras&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;sarike&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/608544861528325510/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/program-to-reverse-a-string-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/608544861528325510'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/608544861528325510'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/program-to-reverse-a-string-in-java.html' title='Program to reverse a String'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5189546450116333787</id><published>2014-09-09T22:20:00.001+05:30</published><updated>2014-09-18T18:19:57.565+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Different ways of creating Objects in Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Different ways of creating Objects&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using &lt;b&gt;new&lt;/b&gt;&amp;nbsp;operator.&lt;/li&gt;&lt;li&gt;Using &lt;b&gt;Class.forName() &lt;/b&gt;and &lt;b&gt;newInstance()&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Using Factory Methods&lt;/li&gt;&lt;li&gt;Using &lt;b&gt;Object cloning&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Using &lt;b&gt;Object deserialization&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Object Creation By Different Methods&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;public class ObjectCreation {&lt;br /&gt; &lt;br /&gt;  public static void main(String args[])throws Exception{&lt;br /&gt;&lt;br /&gt;    ObjectCreation objecByNewKeyword = createObjecByNewKeyword();&lt;br /&gt;    ObjectCreation objecByClassForName = createObjecByClassForName();&lt;br /&gt;    ObjectCreation objecByCloning = (ObjectCreation)createObjecByCloning(); // object to be cloned&lt;br /&gt;&lt;br /&gt;    objecByNewKeyword.show("new keyword");&lt;br /&gt;    objecByClassForName.show("using Class.forName and newInstance");&lt;br /&gt;    objecByCloning.show("cloning");&lt;br /&gt;    &lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;  public static ObjectCreation createObjecByNewKeyword(){&lt;br /&gt;   &lt;br /&gt;     ObjectCreation obj = new ObjectCreation();&lt;br /&gt;     return obj;&lt;br /&gt;  } &lt;br /&gt;&lt;br /&gt; &lt;br /&gt;  public static ObjectCreation createObjecByClassForName() throws ClassNotFoundException, InstantiationException, IllegalAccessException{&lt;br /&gt;   &lt;br /&gt;     ObjectCreation obj = (ObjectCreation)Class.forName("ObjectCreation").newInstance();&lt;br /&gt;     return obj;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;  public static ObjectCreation createObjecByCloning()throws CloneNotSupportedException{&lt;br /&gt;&lt;br /&gt;     ObjectCreation obj = new ObjectCreation();&lt;br /&gt;     ObjectCreation clone = (ObjectCreation)obj.clone();&lt;br /&gt;     return clone;&lt;br /&gt;  } &lt;br /&gt;&lt;br /&gt;  public void show(String msg){&lt;br /&gt;     System.out.println("I am an Object created by " + msg);&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Output of the above program&lt;/b&gt;&lt;br /&gt;&lt;b&gt;I am an Object created by new keyword&lt;/b&gt;&lt;br /&gt;&lt;b&gt;I am an Object created by using Class.forName and newInstance&lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;I am an Object created by using cloning&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5189546450116333787/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-different-ways-of-creating-objects-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5189546450116333787'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5189546450116333787'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-different-ways-of-creating-objects-in-java.html' title='Different ways of creating Objects in Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-781675373485749542</id><published>2014-09-09T01:35:00.002+05:30</published><updated>2014-09-17T01:55:47.232+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What is a static block in Java ??</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A static block is &lt;b&gt;called only once &lt;/b&gt;and is &lt;b&gt;not a member of a class&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;A static block is &lt;b&gt;executed before execution of any other method&lt;/b&gt; in the class.&lt;/li&gt;&lt;li&gt;If there are more than one static block in a class then, &lt;b&gt;they are executed in order of their occurence&lt;/b&gt;&amp;nbsp;in a class.&lt;/li&gt;&lt;li&gt;They do not have a &lt;b&gt;return statement&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;They cannot contain &lt;b&gt;this&lt;/b&gt; or &lt;b&gt;super&lt;/b&gt; reference.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What is a Static block in Java??&lt;/b&gt;&lt;/div&gt;A static block is a block of code that &lt;b&gt;gets executed first&lt;/b&gt; at the time the class is called or its object is created. Even if we have a main method in a class and we run this class, even then the code in the static block will be executed before the execution of the main method. If we have more than one static blocks in a clss then they gets executed in the same order as they appear in the code but before any method or even constructor gets executed. Also a static block is not a member of a class and does not contain any return statement or a this or super reference.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example 1 - Static block executes before main() method.&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;public class HelloWorld{&lt;br /&gt; &lt;br /&gt;  static int test = 100;&lt;br /&gt;&lt;br /&gt;  static{&lt;br /&gt;    test = 75;&lt;br /&gt;    System.out.println("static1 test = " + test);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    test = 25;&lt;br /&gt;    System.out.println("main() test = " + test);&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;  static{&lt;br /&gt;    test = 50;&lt;br /&gt;    System.out.println("static2 test = " + test);&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;Output of the above program :&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;static1 test = 75&lt;/b&gt;&lt;br /&gt;&lt;b&gt;static2 test = 50&lt;/b&gt;&lt;br /&gt;&lt;b&gt;main() test = 25&lt;/b&gt;&lt;br /&gt;&lt;div&gt;Thus this clearly shows that the 1st staic block gets executed followed by 2nd and 3rd static blocks and after that main method gets executed.&lt;/div&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example 2 - Static block executes before constructor.&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;class Test{&lt;br /&gt;&lt;br /&gt;  public Test(){&lt;br /&gt;     System.out.println("Constructor");     &lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  static{&lt;br /&gt;    System.out.println("static show of Test ");&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class TestStatic{&lt;br /&gt; &lt;br /&gt;  static int test = 100;&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;    Test obj = new Test();&lt;br /&gt;    System.out.println("main test = " + test);&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;  static{&lt;br /&gt;    System.out.println("static show test = " + test);&lt;br /&gt;  }&lt;br /&gt;  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;Output of the above program :  &lt;/b&gt;&lt;br /&gt;&lt;b&gt;static show test = 100&lt;/b&gt;&lt;br /&gt;&lt;b&gt;static show of Test&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;Constructor&lt;/b&gt;&lt;br /&gt;&lt;b&gt;main test = 100&lt;/b&gt;&lt;br /&gt;&lt;div&gt;Thus this shows that, the static block of the class is called first, then the method main is executed, when object of class Test is made, first the static block of the class is executed and then the constructor is called. Thus static block gets executed before the constructor is executed.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/781675373485749542/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-static-block-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/781675373485749542'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/781675373485749542'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-static-block-in-java.html' title='What is a static block in Java ??'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2364972158842602013</id><published>2014-09-09T00:39:00.002+05:30</published><updated>2014-09-11T16:00:54.363+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>What is the Difference between Enumeration and Iterator</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In java 1.0, there were two primary collection classes &lt;b&gt;HashMap and Vector.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Enumeration was a class in Java 1.0 to Iterate through these collection classes.(They are not the enum types.)&lt;/li&gt;&lt;li&gt;Iterator was introduced in Java 1.2&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Difference between Enumeration and Iterator.&lt;/b&gt;&lt;/div&gt;&lt;table border="1" cellpadding="5" cellspacing="0" class="table-bg" style="width: 100%;"&gt;&lt;tbody&gt;&lt;tr width="50%"&gt;&lt;th&gt;Enumeration&lt;/th&gt;&lt;th width="50%"&gt;Iterator&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;It was introduces in Java v1.0&lt;/td&gt;&lt;td&gt;It was introduced in java v1.2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Enumeration does not have remove() method&lt;/td&gt;&lt;td&gt;Iterator has remove() method&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Enumeration provides a read only iteration over collection&lt;/td&gt;&lt;td&gt;Iterator provides iteration over collections along with manipulation of objects like adding and removing from object.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Enumeration is less safe and secure&lt;/td&gt;&lt;td&gt;Iterator is more secure and safe, when multiple thread work on same object, it does not allow any thread to modify the object and throws &lt;b&gt;ConcurrentModificationException.&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Enumeration has lengthy method names like&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;hasMoreElements()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;nextElements()&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;td&gt;Iterator have short method names like&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;hasNext()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;next()&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Enumeration is used when we want to iterate Collection object in read only manner.&lt;/td&gt;&lt;td&gt;Iterator is used when we want to iterate on collection object along with object manipulation.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Using Enumeration to Iterate.&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;Vector names = new Vector();&lt;br /&gt;&lt;br /&gt;// ... add some names to the collection&lt;br /&gt;&lt;br /&gt;Enumeration e = names.elements();&lt;br /&gt;while (e.hasMoreElements())&lt;br /&gt;  {&lt;br /&gt;    String name = (String) e.nextElement();&lt;br /&gt;    System.out.println(name);&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Using Iterator to Iterate.&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;List names = new LinkedList();&lt;br /&gt;&lt;br /&gt;// ... add some names to the collection&lt;br /&gt;&lt;br /&gt;Iterator i = names.iterator();&lt;br /&gt;while (i.hasNext())&lt;br /&gt;  {&lt;br /&gt;    String name = (String) i.next();&lt;br /&gt;    System.out.println(name);&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2364972158842602013/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-difference-between-enumeration-and-iterator-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2364972158842602013'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2364972158842602013'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-difference-between-enumeration-and-iterator-in-java.html' title='What is the Difference between Enumeration and Iterator'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-662823027672918765</id><published>2014-09-08T11:18:00.001+05:30</published><updated>2014-09-11T16:03:35.878+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What is final keyword in Java.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Where can Finally keyword be used ??&lt;/b&gt;&lt;br /&gt;Finally keyword can be &amp;nbsp;used with the following&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;final variable, &lt;/b&gt;a variable marked as final acts like a constant variable whose value can not be changed once assigned throughout the life of the variable.&lt;/li&gt;&lt;li&gt;&lt;b&gt;final method,&lt;/b&gt;&amp;nbsp;a method marked as final can never be overridden but can be overloaded.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;final class,&lt;/b&gt;&amp;nbsp;a class marked as final can never be extended.&lt;/li&gt;&lt;li&gt;&lt;b&gt;final object,&lt;/b&gt;&amp;nbsp;final object is an object whose reference can not be changed once assigned.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Final variable&lt;/b&gt;&lt;/div&gt;final variable when used with any variable, then this variable starts acting like a constant. Value of this variable can not be changed throughout the life of this variable.Suppose we have a final variable in a class and we try to change the value of this variable.&lt;br /&gt;&lt;pre class="brush : java"&gt;public class TestClass{&lt;br /&gt;&lt;br /&gt;  final int test = 1;  &lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;   TestClass obj = new TestClass();&lt;br /&gt;   obj.test = 2;  &lt;br /&gt;   System.out.println(obj.test);&lt;br /&gt;  }&lt;br /&gt; &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The output of the above program will be&lt;br /&gt;&lt;b&gt;TestClass.java:9: error: cannot assign a value to final variable test&lt;/b&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Final method&lt;/b&gt;&lt;/div&gt;When a method is marked as final then this method can not be overridden.&lt;br /&gt;&lt;pre class="brush : java"&gt;class FinalClass&lt;br /&gt;{&lt;br /&gt;  public final void show(){&lt;br /&gt;    &lt;br /&gt;     System.out.println("Original method");&lt;br /&gt;  } &lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;public class HelloWorld extends FinalClass{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    FinalClass obj = new FinalClass();&lt;br /&gt;    obj.show();&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public final void show(){&lt;br /&gt;&lt;br /&gt;     System.out.println("Overridden method");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The Output of the &amp;nbsp;above program is&lt;br /&gt;&lt;b&gt;HelloWorld.java:17: error: show() in HelloWorld cannot override show() in FinalClass&lt;/b&gt;&lt;br /&gt;Thus this is clear that a final method cannot be overridden. However a final method can be overloaded.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;public class HelloWorld{&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    HelloWorld obj = new HelloWorld();&lt;br /&gt;    obj.show();&lt;br /&gt;    obj.show("test");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public final void show(){&lt;br /&gt;&lt;br /&gt;     System.out.println("show");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public final void show(String str){&lt;br /&gt;&lt;br /&gt;     System.out.println("show(String str)");&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The Output of the &amp;nbsp;above program is &lt;br /&gt;&lt;b&gt;show&lt;/b&gt;&lt;br /&gt;&lt;b&gt;show(String str)&lt;/b&gt;&lt;br /&gt;&lt;div&gt;Thus this shows that a final method can be overloaded.&lt;/div&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Final class&lt;/b&gt;&lt;/div&gt;final keyword when used with the class, then this class can never be inherited by any class. Suppose we have a final class FinalClass and we try to extend it. &lt;br /&gt;&lt;pre class="brush : java"&gt;final class FinalClass&lt;br /&gt;{}&lt;br /&gt;&lt;br /&gt;public class HelloWorld extends FinalClass{&lt;br /&gt;&lt;br /&gt;  int instanceVarible = 1;&lt;br /&gt;  &lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    System.out.println("HelloWorld");&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The output of the above program is&lt;br /&gt;&lt;b&gt;HelloWorld.java:4: error: cannot inherit from final FinalClass&lt;/b&gt;&lt;br /&gt;Thus it is clear that a final class cannot be extended i.e. a final class cannot be inherited.  &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Final object&lt;/b&gt;&lt;/div&gt;when an object is marked as final, the the reference of this object can not be changed. Remember that the reference of this object cannot be changed but the not final member of this object can still be changed.&lt;br /&gt;&lt;b&gt;Example - 1 Shows that a final object's reference can not be changed.&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;public class HelloWorld{&lt;br /&gt;&lt;br /&gt;  int test = 100;&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    final HelloWorld obj = new HelloWorld();&lt;br /&gt;    obj.test = 50;&lt;br /&gt;     System.out.println(obj.test);&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The output of the above program is : &lt;b&gt;50&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Example - 2 Shows that the value of member variables of a final object can be changed.&lt;/b&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;public class HelloWorld{&lt;br /&gt;&lt;br /&gt;  int test = 100;&lt;br /&gt;&lt;br /&gt;  public static void main(String args[]){&lt;br /&gt;&lt;br /&gt;    final HelloWorld obj1 = new HelloWorld();&lt;br /&gt;    HelloWorld obj2 = new HelloWorld();&lt;br /&gt;    obj1 = obj2;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;}&lt;/pre&gt;The output of the above program is&lt;br /&gt;&lt;b&gt;HelloWorld.java:9: error: cannot assign a value to final variable obj1&lt;/b&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;Thus from the above examples it is clear that the reference to the object is constant as shown in example-2, we were not able to reference obj1 to any other object. However in example-1, the object obj was marked as final but still its member variable was changed, this is because the member variables are still a reference to the objects say String or Integer for example. Thus the value of these objects can be changed.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/662823027672918765/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-final-keyword-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/662823027672918765'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/662823027672918765'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-final-keyword-in-java.html' title='What is final keyword in Java.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3924859086991455063</id><published>2014-09-07T15:17:00.001+05:30</published><updated>2014-09-26T13:54:03.389+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Collections API'/><title type='text'>How does a HashMap works internally in Java ??</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;HashMap implements the Map Interface.&lt;/li&gt;&lt;li&gt;It works on the principles of hashing.&amp;nbsp;&lt;/li&gt;&lt;li&gt;It stores and retrieves data in a key value pair.&lt;/li&gt;&lt;li&gt;HashMap can have only one key as a null element.&lt;/li&gt;&lt;li&gt;HashMap stores both key and value in form of Entry object&amp;nbsp;&lt;b&gt;Map.Entry.&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Initial capacity of HashMap is 16. (Since jdk 1.7 we can have HashMap with initial capacity as 0).&lt;/li&gt;&lt;li&gt;Default load Factor of a HashMap is 0.75, after this a HashMap gets rehashed.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Q1 : How does HashMap work internally ?&amp;nbsp;&lt;/b&gt;&lt;/div&gt;We add data to the HashMap in key-value pair, by method &lt;b&gt;put(key, value).&lt;/b&gt;&amp;nbsp;When we do this, the &lt;b&gt;hashCode() &lt;/b&gt;method is &lt;b&gt;called upon the key&lt;/b&gt; to return a hashcode, this hashcode is an integer value 16 digit long by default. This hashcode is then used by the HashMap's &lt;b&gt;internal hashing method&lt;/b&gt; to find a &lt;b&gt;bucket location&lt;/b&gt;&amp;nbsp;to store the Entry object. At this bucket location both key and value is saved in the bucket. Since we know that different objects can result into the same hashcode, thus all the keys that result into the same hashcode are stored in the same bucket in form of a linklist. This linklist however is not the same as java.util.LinkedList, it is a much simpler implementation of list as compared to java.util.LinkedList.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This second hash function is provided by the implementation of HashMap and cannot be overridden by the developer. This is a static method and looks like &lt;br /&gt;&lt;pre class="brush : java"&gt;static int hash(int h) {&lt;br /&gt;    // This function ensures that hashCodes that differ only by&lt;br /&gt;    // constant multiples at each bit position have a bounded&lt;br /&gt;    // number of collisions (approximately 8 at default load factor).&lt;br /&gt;    h ^= (h &amp;gt;&amp;gt;&amp;gt; 20) ^ (h &amp;gt;&amp;gt;&amp;gt; 12);&lt;br /&gt;    return h ^ (h &amp;gt;&amp;gt;&amp;gt; 7) ^ (h &amp;gt;&amp;gt;&amp;gt; 4);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;Each hashmap has an Array and in that Array places the entries in a position according to the keys hashcode (e.g. position = hashcode % arraysize).&lt;/li&gt;&lt;li&gt;If more than one entry ends up in the same bucket those entries are stored in a linked list. Thus the bucket-metaphor: each array-entry is a "bucket" where you just dump in all the matching keys.We use array to get the desired &lt;b&gt;"constant time"&lt;/b&gt; behaviour since we need to &lt;b&gt;Access random positions&lt;/b&gt; in this list.&lt;/li&gt;&lt;li&gt;Whereas within a bucket you have to traverse all elements until finding the desired key anyways, so you can use a linked list as it is easier to append to (no resize needed).&lt;/li&gt;&lt;li&gt;If key is null, then Null keys always map to hash 0, thus index 0.&lt;/li&gt;&lt;li&gt;If both the hashCode() and equals() return the same value for key then, its value is overridden if it exists.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;This also Shows the Need for a good hashfunction, because if all keys hash to only a few values you will get Long linked lists to search and a lot of (fast to access) empty buckets.&lt;/div&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Q2 :&amp;nbsp;&lt;/b&gt;&lt;b&gt;How do we retrieve values from a HashMap ?&lt;/b&gt;&lt;/div&gt;We retrieve from HashMap using the &lt;b&gt;get(key) &lt;/b&gt;method. As stated above, first the hashcode is found by the &lt;b&gt;hashCode() method &lt;/b&gt;and then this hashcode is applied to the static &lt;b&gt;hash() &lt;/b&gt;&amp;nbsp;method of the hashmap to find the bucket location. Once the bucket location is found, that is actually a link list. We traverse from first element of the list to the last element applying &lt;b&gt;equals()&lt;/b&gt;&amp;nbsp;method to find the value corresponding to the key.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Q3 :&amp;nbsp;&lt;/b&gt;&lt;b&gt;What will happen if two keys have same hashcode ?&lt;/b&gt;&lt;/div&gt;Yes, this is also a main concern that two different objects can produce same hashcode, thus this is the main reason why this hashode is again rehashed using internal hashing algorithm of the HashMap. When we get two objects with same hashcode, their bucket location will be same. Therefore both the key value pairs will be stored in the same bucket in the form of a linklist.&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-i2gfkgog5FQ/VAwkCHpxWfI/AAAAAAAAAG8/B8q9hmx9z7w/s1600/hashmap.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://2.bp.blogspot.com/-i2gfkgog5FQ/VAwkCHpxWfI/AAAAAAAAAG8/B8q9hmx9z7w/s1600/hashmap.png" height="275" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-1LHJDMOmJrE/VCUhFUZRAGI/AAAAAAAAAII/ymUgD2wHvJQ/s1600/HashMap.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-1LHJDMOmJrE/VCUhFUZRAGI/AAAAAAAAAII/ymUgD2wHvJQ/s1600/HashMap.JPG" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;For example, in the above shown image the keys "John Smith" and "Sandra Dee" produces the same hashcode(). So same hashcode will point to the same bucket location, e.g in our case, lets say that bucket location is 152. Now in case we search for "Sandra Dee", we will apply equals() method to all the keys in the link list of this bucket until one of them return true. This returned value will be the value corresponding to that key.Image 2 above, shows how key-value elements are stored in an Entry object, how keys with same hashcode are stored in a singly linkedlist and how &amp;nbsp;an array of these bucket locations are stored in an array.&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Q4 :&amp;nbsp;&lt;/b&gt;&lt;b&gt;Why Strings, Integers and other Wrapper classes considered as good keys ?&amp;nbsp;&lt;/b&gt;&lt;/div&gt;Any class that implements the &lt;b&gt;hashCode()&lt;/b&gt; and &lt;b&gt;equals()&lt;/b&gt;&amp;nbsp;methods of the java.lang.Object are considered as good keys. Using &lt;b&gt;immutable, final object with proper equals() and hashcode() implementation&lt;/b&gt; would &lt;b&gt;act as perfect&lt;/b&gt; Java HashMap  &lt;b&gt;keys&lt;/b&gt; and &lt;b&gt;improve performance&lt;/b&gt; of Java HashMap  &lt;b&gt;by reducing collision&lt;/b&gt;. &lt;b&gt;Immutability&lt;/b&gt; also &lt;b&gt;allows caching&lt;/b&gt; there hashcode of different keys which makes overall retrieval process very fast, if unequal object return different hashcode than chances of collision will be less which subsequently improve performance of HashMa. Thus String and various wrapper classes e.g. Integer very good keys in Java HashMap. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3924859086991455063/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-does-hashmap-works-internally-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3924859086991455063'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3924859086991455063'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-does-hashmap-works-internally-in-java.html' title='How does a HashMap works internally in Java ??'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-i2gfkgog5FQ/VAwkCHpxWfI/AAAAAAAAAG8/B8q9hmx9z7w/s72-c/hashmap.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7896060430402786939</id><published>2014-09-05T03:22:00.002+05:30</published><updated>2014-11-04T15:46:25.858+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://www.blogger.com/atom/ns#' term='Java Program'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><category scheme='http://www.blogger.com/atom/ns#' term='JDBC'/><title type='text'>Create Mysql Database JDBC connection in Java.</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&amp;nbsp;&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Download&amp;nbsp;&lt;a href="http://dev.mysql.com/downloads/connector/j/"&gt;Mysql Java Connector&lt;/a&gt;&amp;nbsp;by clicking on the link.&lt;/li&gt;&lt;li&gt;Put the above downloaded jar file in the &lt;b&gt;lib&lt;/b&gt;&amp;nbsp;folder of your project.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Code : Mysql JDBC connection in Java&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;import java.sql.Connection;&lt;br /&gt;import java.sql.DriverManager;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;public class JavaMysqlConnection {&lt;br /&gt;&lt;br /&gt; &lt;br /&gt;    private String host = "localhost:3306"; // For running on localhost&lt;br /&gt;    private String db = "databaseName";&lt;br /&gt;    private String userName = "userName";&lt;br /&gt;    private String password = "password";&lt;br /&gt;     &lt;br /&gt;    public Connection getConnection() {&lt;br /&gt;       try {&lt;br /&gt;            Class.forName("com.mysql.jdbc.Driver");&lt;br /&gt;            Connection conn =  DriverManager.getConnection("jdbc:mysql://"+ host +"/"+db,userName, password);&lt;br /&gt;            return conn;&lt;br /&gt;       }catch(Exception e){&lt;br /&gt;             e.printStackTrace();&lt;br /&gt;       }&lt;br /&gt;       return null;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;   &lt;br /&gt;&lt;br /&gt;public class Test{&lt;br /&gt;&lt;br /&gt;      public static void main(String[] argv) {&lt;br /&gt;         Connection conn =  new JavaMysqlConnection().getConnection();&lt;br /&gt;         if(conn == null)&lt;br /&gt;             System.out.println("Connection was not established");&lt;br /&gt;         else&lt;br /&gt;             System.out.println("Connection is successfully established");&lt;br /&gt;     }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This is a very generic code that you can use in both your standalone projects and web based projects. Whenever you need to get a connection to database, you just need to create an object of class JavaMysqlConnection and call its getConnection() method.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7896060430402786939/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/create-mysql-database-jdbc-connection-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7896060430402786939'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7896060430402786939'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/create-mysql-database-jdbc-connection-in-java.html' title='Create Mysql Database JDBC connection in Java.'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-404802248392284990</id><published>2014-09-05T00:04:00.001+05:30</published><updated>2014-10-10T19:06:54.713+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What is Method Overriding in Java ??</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-imp"&gt;When a base class extends a super class and both the base class and the super class have a method with same name, same types of parameters and same number of parameters, then the two methods are said to be overriden. &lt;/div&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Overriding of methods is &lt;b&gt;always done in a base class&lt;/b&gt; or in other words, we always override a parent class method.&lt;/li&gt;&lt;li&gt;The &lt;b&gt;access specifier&lt;/b&gt; of the overriden method &lt;b&gt;can not be less than the parent class &lt;/b&gt;method's access specifier e.g if a parent class method is marked as protected, you can override it with access specifiers protected and public only.&lt;/li&gt;&lt;li&gt;Overriden methods should have &lt;b&gt;same number of arguments and of same type&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;The &lt;b&gt;return type&lt;/b&gt; of the overridden method &lt;b&gt;should be same &lt;/b&gt;as the overriding method.&lt;/li&gt;&lt;li&gt;We &lt;b&gt;cannot override a static methods.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;We &lt;b&gt;cannot override private methods&lt;/b&gt; of parent class in a base class, it will give a compile time error if we try to do so.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example Of Overriding&lt;/b&gt;&lt;/div&gt;The following is a simple example of overriding.&lt;br /&gt;&lt;pre class="brush : java"&gt;class Base {&lt;br /&gt;  public Base(){&lt;br /&gt;     System.out.println("Base Constructor");     &lt;br /&gt;  }&lt;br /&gt;  public void show() {&lt;br /&gt;     System.out.println("Base show");     &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;   &lt;br /&gt;class Derived extends Base {&lt;br /&gt;&lt;br /&gt;  public Derived(){&lt;br /&gt;     System.out.println("Derived Constructor");     &lt;br /&gt;  }&lt;br /&gt;  public void show() {  // overrides the Base's show()&lt;br /&gt;     System.out.println("Derived show");  &lt;br /&gt;  }&lt;br /&gt;  public static void main(String[] args) {&lt;br /&gt;      Base obj = new Derived();&lt;br /&gt;      obj.show();&lt;br /&gt;  }  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The above example will give an output&lt;br /&gt;&lt;pre class="output"&gt;&lt;br /&gt;Base Constructor&lt;br /&gt;Derived Constructor&lt;br /&gt;Derived show&lt;br /&gt;&lt;/pre&gt;This is because the super class is always referenced before a sub class is referenced. Thus the Base Constructor is referenced first and the show method of Base class is made available to the JVM. Now the JVM references the Derived class and again finds the show() method. Thus it will keep the show() method of the Dervired class and whenever the class to show() method is made, the JVM will class the show() method of the Derived class. &lt;div class="hl-note"&gt;&lt;b&gt;Overriding Use Case&lt;/b&gt;&lt;/div&gt;&lt;img align="right" border="0" src="http://1.bp.blogspot.com/-0RibQb_l7Ms/VAiSuDw5VsI/AAAAAAAAAGc/DTH68iEy1Ag/s1600/polymorphism.gif" height="313" width="320" /&gt;Suppose we want to make a function &lt;b&gt;speak()&lt;/b&gt; that returns how a particular animal speaks e.g dog barks , ducks quack, cats meow.&lt;br /&gt;We can do this in the following ways.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can have a speak() method inside each class Dog, Cat or Duck and we can access the speak() method by making object of that class. &lt;b&gt;This method is a bad practice and must be avoided.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;We make a super class Animal and all other classes like Dog, Cat etc extend this class. Now we can give reference of the Animal class to all the objects of Dog, Cat , Duck etc.&lt;/li&gt;&lt;/ul&gt;&lt;pre class="brush : java"&gt;class Animal {&lt;br /&gt;  public void speak(){&lt;br /&gt;     System.out.println("My language is not known"); &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Cat extends Animal {&lt;br /&gt;  public void speak() {&lt;br /&gt;     System.out.println("I am a cat and i do Meow Meow");     &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Dog extends Animal {&lt;br /&gt;  public void speak() {&lt;br /&gt;     System.out.println("I am a dog and i do Woof Woof");     &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Duck extends Animal {&lt;br /&gt;  public void speak() {&lt;br /&gt;     System.out.println("I am a duck and i do Quack Quack");     &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Alien extends Animal {&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;class Test {&lt;br /&gt;&lt;br /&gt;  public static void main(String[] args) {&lt;br /&gt;&lt;br /&gt;     Animal dog = new Dog();&lt;br /&gt;     Animal cat = new Cat();&lt;br /&gt;     Animal duck = new Duck();&lt;br /&gt;     Animal alien = new Alien();&lt;br /&gt;     speak(dog);&lt;br /&gt;     speak(cat);&lt;br /&gt;     speak(duck); &lt;br /&gt;     speak(alien);  &lt;br /&gt;  }  &lt;br /&gt;&lt;br /&gt;  public static void speak(Animal animal){&lt;br /&gt;   animal.speak();&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;Output of the above example is as follows&lt;/b&gt;&lt;pre class="output"&gt;&lt;br /&gt;I am a dog and i do Woof Woof&lt;br /&gt;I am a cat and i do Meow Meow&lt;br /&gt;I am a duck and i do Quack Quack&lt;br /&gt;My language is not known&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;In the above example the method speak() of class Test takes the parameter animal object and prints what does that animal speaks. This method does not know about what type of animal it is having. Its only gets to know at runtime.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;This is how Polymorphism(Dynamic Binding) works and this example shows how you can achieve polymorphism with the help of Method Overriding.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/404802248392284990/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-method-overriding-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/404802248392284990'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/404802248392284990'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-method-overriding-in-java.html' title='What is Method Overriding in Java ??'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-0RibQb_l7Ms/VAiSuDw5VsI/AAAAAAAAAGc/DTH68iEy1Ag/s72-c/polymorphism.gif' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-3327651689514451984</id><published>2014-09-05T00:02:00.001+05:30</published><updated>2014-10-11T22:14:55.294+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Difference between Method Overloading and Method Overriding</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Key Differences&lt;/b&gt;&lt;/div&gt;&lt;table border="1" cellpadding="5" cellspacing="0" class="table-bg" style="width: 100%;"&gt;  &lt;thead&gt;&lt;tr&gt; &lt;th width="50%"&gt;Method Overloading&lt;/th&gt; &lt;th width="50%"&gt;Method Overriding&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Method Overloading always happens within the same class.&lt;/td&gt;&lt;td&gt;Method Overriding always happen between a super class and a sub class.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;In method overloading the return type of the method need not to be the same.&lt;/td&gt;&lt;td&gt;In method overriding the return type of the method must be same&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Number of arguments can be different.&lt;/td&gt;&lt;td&gt;Number of arguments should be same.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Overloaded methods can have different access specifiers.&lt;/td&gt;&lt;td&gt;Overriding method should not have weaker access specifier than the method it is overriding.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Type of arguments can be same or different.&lt;/td&gt;&lt;td&gt;Type of arguments should be same.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;In method overloading one method cannot hide the other method.&lt;/td&gt;&lt;td&gt;In method overriding base class method hides the super class method.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;It helps to achieve Static or Compile time Polymorphism&lt;/td&gt;&lt;td&gt;It helps to achieve Dynamic or Run time Polymorphism&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-5-Fgw7Wtgfo/VAiqrvPbhdI/AAAAAAAAAGs/Ijh5Sm5403U/s1600/overloadingvsoverriding.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-5-Fgw7Wtgfo/VAiqrvPbhdI/AAAAAAAAAGs/Ijh5Sm5403U/s1600/overloadingvsoverriding.gif" height="353" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The above picture tries to show the difference between Overloading and Overriding.&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In overloading we have more than one arrow(method) and they are all available at runtime.&lt;/li&gt;&lt;li&gt;In overriding we may have more than one arrow, but at runtime we have only one arrow that is available.&lt;/li&gt;&lt;li&gt;In overloading their return type or parameters or type of parameters can be different.&lt;/li&gt;&lt;li&gt;In overloading their return type, parameters and type of parameters all must be same.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Examples of Overloading and Overriding&lt;/b&gt;&lt;/div&gt;Try to identify Overloading and Overriding in the example given below.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;class Base {&lt;br /&gt;  public void print() {&lt;br /&gt;     System.out.println("Base class print()");   &lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;   &lt;br /&gt;class Derived extends Base {&lt;br /&gt;&lt;br /&gt;  public String show(String args) {&lt;br /&gt;     System.out.println(args);   &lt;br /&gt;     return "";  &lt;br /&gt;  }&lt;br /&gt;  public void show() {&lt;br /&gt;     System.out.println("No args show");     &lt;br /&gt;  }&lt;br /&gt;  public void print() {&lt;br /&gt;     System.out.println("Derived class print()");   &lt;br /&gt;  }&lt;br /&gt;  public static void main(String[] args) {&lt;br /&gt;      Derived obj = new Derived();&lt;br /&gt;      obj.show();&lt;br /&gt;      obj.show("String overloaded show");&lt;br /&gt;      obj.print();&lt;br /&gt;  }  &lt;br /&gt;}&lt;/pre&gt;&lt;b&gt;Output of the program is&lt;/b&gt;&lt;br /&gt;No args show&lt;br /&gt;String overloaded show&lt;br /&gt;Derived class print()&lt;br /&gt;&lt;br /&gt;In this example the method &lt;b&gt;show() is overloaded&lt;/b&gt; and the method &lt;b&gt;print() &lt;/b&gt;&amp;nbsp;is overridden. Thus it is clear that we can access all the overloaded methods, but only one overridden method( method in the super class is hidden).&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/3327651689514451984/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/difference-between-method-overloading-and-method-overriding.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3327651689514451984'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/3327651689514451984'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/difference-between-method-overloading-and-method-overriding.html' title='Difference between Method Overloading and Method Overriding'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-5-Fgw7Wtgfo/VAiqrvPbhdI/AAAAAAAAAGs/Ijh5Sm5403U/s72-c/overloadingvsoverriding.gif' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-5703451292005872470</id><published>2014-09-04T21:51:00.002+05:30</published><updated>2014-10-11T22:11:39.052+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What is Method Overloading in Java ??</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-imp"&gt;We can have multiple methods with the same name as long as their parameter types or number of parameters differ. These methods are called overloaded methods. This is also referred as Static Polymorphism.  &lt;/div&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Overloading of methods is &lt;b&gt;always done in the same class&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;The &lt;b&gt;access specifier&lt;/b&gt; of the overloaded method &lt;b&gt;may or may not be same &lt;/b&gt;&amp;nbsp;to the other overloaded methods.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Name&lt;/b&gt; of the overloaded methods &lt;b&gt;should be same&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;The overloaded methods may have &lt;b&gt;different return types&lt;/b&gt;.&lt;/li&gt;&lt;li&gt;Overloaded methods &lt;b&gt;should have at least one&lt;/b&gt; of the following&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Different argument types&lt;/li&gt;&lt;li&gt;Different number of arguments&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;They provide &lt;b&gt;Static or Compile time Polymorphism.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example Of Overloading&lt;/b&gt;&lt;/div&gt;The following is a simple example of overloading.&lt;br /&gt;&lt;pre class="brush : java"&gt;class Derived {&lt;br /&gt;&lt;br /&gt;  public void show() {&lt;br /&gt;     System.out.println("show()");   &lt;br /&gt;  }&lt;br /&gt;  public void show(String args) {&lt;br /&gt;     System.out.println("show("+ args +")");   &lt;br /&gt;  }&lt;br /&gt;  public void show(int a){&lt;br /&gt;     System.out.println("show("+ a +")");   &lt;br /&gt;  }&lt;br /&gt;  public void show(String abc, int a) {&lt;br /&gt;     System.out.println("show("+ abc +", "+ a +")");     &lt;br /&gt;  }&lt;br /&gt;  public static void main(String[] args) {&lt;br /&gt;      Derived obj = new Derived();&lt;br /&gt;      obj.show();&lt;br /&gt;      obj.show("String");&lt;br /&gt;      obj.show(10);&lt;br /&gt;      obj.show("String", 5);&lt;br /&gt;  }  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;The above example will give an output&lt;/b&gt;&lt;br /&gt;show()&lt;br /&gt;show(String)&lt;br /&gt;show(10)&lt;br /&gt;show(String, 5)&lt;br /&gt;&lt;br /&gt;Thus it is clear that we can have more than one method with same name in the same class as long as the number of arguments they take is different or the type of arguments are different.&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Overloading &amp;nbsp;Use Case&lt;/b&gt;&lt;/div&gt;Suppose we want to make class that finds the area of any shape, this class should have methods to calculate the area of all types of shapes with the same method name area.&lt;br /&gt;We can do this in the following ways.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can have a speak() method inside each class Dog, Cat or Duck and we can access the speak() method by making object of that class. &lt;b&gt;This method is a bad practice and must be avoided.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;We make a super class Animal and all other classes like Dog, Cat etc extend this class. Now we can give reference of the Animal class to all the objects of Dog, Cat , Duck etc.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;pre class="brush : java"&gt;class Area {&lt;br /&gt;&lt;br /&gt;  public double area(double radius) {&lt;br /&gt;     return ((22 / 7 ) * radius * radius);   &lt;br /&gt;  }&lt;br /&gt;  public int area(int side) {&lt;br /&gt;     return side * side ;   &lt;br /&gt;  }&lt;br /&gt;  public int area(int length, int width){&lt;br /&gt;     return length * width ;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  public static void main(String[] args) {&lt;br /&gt;    &lt;br /&gt;      Area shape = new Area();&lt;br /&gt;      &lt;br /&gt;      System.out.println("Area of circle = " + shape.area(5.0));&lt;br /&gt;      System.out.println("Area of square = " + shape.area(5));&lt;br /&gt;      System.out.println("Area of rectangle =" + shape.area(5,5));&lt;br /&gt;  }  &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Output of the above example is as follows&lt;/b&gt;&lt;br /&gt;I am a dog and i do Woof Woof&lt;br /&gt;I am a cat and i do Meow Meow&lt;br /&gt;I am a duck and i do Quack Quack&lt;br /&gt;My language is not known&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;In the above example the method speak() of class Test takes the parameter animal object and prints what does that animal speaks. This method does not know about what type of animal it is having. Its only gets to know at runtime.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;This is how Polymorphism(Dynamic Binding) works and this example shows how you can achieve polymorphism with the help of Method Overriding.&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/5703451292005872470/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-method-overloading-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5703451292005872470'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/5703451292005872470'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-is-method-overloading-in-java.html' title='What is Method Overloading in Java ??'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-4716039868185913933</id><published>2014-09-04T19:08:00.001+05:30</published><updated>2014-09-07T17:08:09.990+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Overriding equals() method of Object class in java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Default &lt;b&gt;equals()&lt;/b&gt; method of the &lt;b&gt;java.lang.Object&lt;/b&gt; class &lt;b&gt;compares the memory location&lt;/b&gt; of the objects and &lt;b&gt;returns true if&lt;/b&gt; the two reference variables are pointing to the same memory location. i.e. &lt;b&gt;they are the same objects.&lt;/b&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;equals() method is the method of Object class.&lt;/li&gt;&lt;li&gt;It compares the memory location of the two objects.&lt;/li&gt;&lt;li&gt;equals() method in java is &lt;b&gt;Reflexive.&lt;/b&gt;&amp;nbsp;i.e, object must be equal to itself.&lt;/li&gt;&lt;li&gt;equals() method in java is&amp;nbsp;&lt;b&gt;Symmetric.&amp;nbsp;&lt;/b&gt;&amp;nbsp;i.e, if a.equals(b) then b.equals(a) must be true.&lt;/li&gt;&lt;li&gt;equals() method in java is&amp;nbsp;&lt;b&gt;Transitive.&amp;nbsp;&lt;/b&gt;&amp;nbsp;i.e, &amp;nbsp;if&amp;nbsp;a.equals(b) and b.equals(c) the&amp;nbsp;a.equals(c) must be true.&lt;/li&gt;&lt;li&gt;equals() method in java is&amp;nbsp;&lt;b&gt;Consistent.&amp;nbsp;&lt;/b&gt;&amp;nbsp;i.e, if two objects are same in java then they must remain same all time until any property of any object is changed.&lt;/li&gt;&lt;li&gt;&lt;b&gt;If two object are same then their hashCode() will be same, but if the two hashCodes are same then they may or may not be same.&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Steps to override equals method in Java&lt;/b&gt;&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;this&lt;/b&gt; check, if the object is same as this, then return true.&lt;/li&gt;&lt;li&gt;&lt;b&gt;null &lt;/b&gt;check, if the object is null return false.&lt;/li&gt;&lt;li&gt;&lt;b&gt;instanceOf() &lt;/b&gt;check, if both the object are an instance of same class.&lt;/li&gt;&lt;/ol&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example of overriding equals()&lt;/b&gt;&lt;/div&gt;Following example show how to override the equals() method.&lt;br /&gt;&lt;pre class="brush : java"&gt;public class TestClass{&lt;br /&gt;&lt;br /&gt;    String name;   &lt;br /&gt;&lt;br /&gt;    public TestClass(String name){&lt;br /&gt;        this.name = name;&lt;br /&gt;    } &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    public static void main (String args[]){&lt;br /&gt; &lt;br /&gt;       TestClass t1 = new TestClass("Demo Object");&lt;br /&gt;       TestClass t2 = new TestClass("Demo Object");&lt;br /&gt;       System.out.println(t1.equals(t2));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;    @Override &lt;br /&gt;    public boolean equals(Object obj){&lt;br /&gt;      if(obj == this)&lt;br /&gt;          return true;&lt;br /&gt;      if(obj == null)&lt;br /&gt;          return false;&lt;br /&gt;      if(!(obj instanceof TestClass) )&lt;br /&gt;          return false;&lt;br /&gt;      TestClass test = (TestClass)obj;&lt;br /&gt;      return name.equals(test.name);&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The above program will give the &lt;b&gt;output : true. &lt;/b&gt;&amp;nbsp;However if we would have not overriden the equals() method, in that case the same program would have given the output as false.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/4716039868185913933/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/overriding-equals-method-of-object.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4716039868185913933'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/4716039868185913933'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/overriding-equals-method-of-object.html' title='Overriding equals() method of Object class in java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-326106800005903213</id><published>2014-09-04T03:07:00.000+05:30</published><updated>2014-09-04T03:07:56.594+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Can we have multiple main methods in Java ?</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points to remember&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can have only one entry point per class in Java. Thus we can have only one "&lt;b&gt;public static void main(String args[])&lt;/b&gt;"&lt;b&gt;.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Any other method with a different name or type or arguments will not be treated as a main method().&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Yes, we can have multiple main methods in a java class.&lt;/b&gt; Surprised ?? Method Overloading, by using this you can have as many main() methods as you want as long as their types or arguments are different. However &lt;b&gt;these are not actually the main() methods&lt;/b&gt;, these are just overridden methods and may act as any other overridden method. None of these will be treated as an entry point for execution.&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;What will be the output of the following program ?? &lt;br /&gt;&lt;pre class="brush : java"&gt;public class TestClass{&lt;br /&gt;&lt;br /&gt;    public static final void main (String args[]){&lt;br /&gt; System.out.println("Hello World String args[]");&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public void main (String args){&lt;br /&gt; System.out.println("String args");&lt;br /&gt;    }&lt;br /&gt;    public void main (Integer args){&lt;br /&gt; System.out.println("Integer args");&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;This class will compile successfully and will give a output Hello World String args[]&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;What will be the output of the following program ??&lt;br /&gt;&lt;pre class="brush : java"&gt;public class TestClass{&lt;br /&gt;&lt;br /&gt;    public void main (String args){&lt;br /&gt; System.out.println("String args");&lt;br /&gt;    }&lt;br /&gt;    public void main (Integer args){&lt;br /&gt; System.out.println("Integer args");&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;This class will also &lt;b&gt;compile successfully&lt;/b&gt; but will &lt;b&gt;give a run time &amp;nbsp;exception,&lt;/b&gt; "&lt;b style="background-color: white; font-family: HelveticaNeue-Light, 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif; font-size: 15px; line-height: 21.559999465942383px;"&gt;Main method not found in class TestClass, please define the main method".&lt;/b&gt;&lt;br /&gt;&lt;b style="background-color: white; font-family: HelveticaNeue-Light, 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif; font-size: 15px; line-height: 21.559999465942383px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;span style="background-color: white; font-family: HelveticaNeue-Light, 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif; font-size: 15px; line-height: 21.559999465942383px;"&gt;Thus none of the above methods acted as an entry point for execution, since they are just another method by the name main, but not the main method JVM looks for.&lt;/span&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/326106800005903213/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/multiple-main-methods-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/326106800005903213'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/326106800005903213'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/multiple-main-methods-in-java.html' title='Can we have multiple main methods in Java ?'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6722068128371898563</id><published>2014-09-04T02:40:00.001+05:30</published><updated>2014-09-04T02:45:41.843+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Why the main method in java is public static void</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;What is the "main" method in java??&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;It is the entry point of execution of any java program.&lt;/li&gt;&lt;li&gt;We must have a main(String args[]) or main(String ...) method in a class for its execution.&lt;/li&gt;&lt;li&gt;We can have multiple main() methods in a class.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Why is main method "public" ??&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The main method is always marked as &lt;b&gt;public &lt;/b&gt;&amp;nbsp;because it must always be visible or available to the JVM. You can even say that this is the java convention and it needs to be followed.&lt;/li&gt;&lt;li&gt;If we make our main() method as private, our code will still compile without giving any compilation error, but at runtime it will throw an exception "&lt;b&gt;Main method not found in class Class, please define the main method"&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Why is main method "static" ??&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A main method is always static, this because whenever a class has to be accessed, first its object is to be created and only then the class can be instantiated.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The &lt;b&gt;static &lt;/b&gt;keyword allows the method to be accessed by the class name without instantiating the class.&lt;/li&gt;&lt;/ul&gt;Suppose we have a class  &lt;br /&gt;&lt;pre class="brush : java"&gt;public class TestClass{&lt;br /&gt;    public TestClass(){&lt;br /&gt; System.out.println("Hello World Default Constructor");&lt;br /&gt;    }&lt;br /&gt;    public TestClass(String name){&lt;br /&gt; System.out.println("Hello World Argumented Constructor");&lt;br /&gt;    }&lt;br /&gt;    public static final void main (String args[]){&lt;br /&gt; System.out.println("Hello World");&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;br class="Apple-interchange-newline" /&gt;The above program will give the output "Hello World", because it does not calls the constructors.&amp;nbsp;The JVM would not know what constructor to call and in case of &amp;nbsp;argumented constructor, what arguments to pass. &lt;b&gt;If the main method was not static then it first call the super constructor of its super class if any, then its own constructors. But the JVM would not know of any super class of this class because this is the starting point of the program, thus the main method is always static.&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt; &lt;div class="hl-note"&gt;&lt;b&gt;Why is main method "void" ??&lt;/b&gt;&lt;/div&gt;The main method is always void because it does not return any value to any other function. As the execution of the main method is stopped when the program completes its execution.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6722068128371898563/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/why-main-method-in-java-is-public.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6722068128371898563'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6722068128371898563'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/why-main-method-in-java-is-public.html' title='Why the main method in java is public static void'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-826151206207682620</id><published>2014-09-02T19:36:00.000+05:30</published><updated>2014-09-03T01:05:01.161+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Internet'/><category scheme='http://www.blogger.com/atom/ns#' term='MIME'/><title type='text'>What are MIME types</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Points To Remeber&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;MIME stands for Multi-purpose Internet Mail Extensions.&lt;/li&gt;&lt;li&gt;MIME is an extension of the original Internet e-mail protocol that lets people use the &lt;b&gt;protocol to exchange different kinds of data files on the Internet&lt;/b&gt;: audio, video, images, application programs&lt;/li&gt;&lt;li&gt;MIME types were originally used to send different file types through email services over SMT SMTP(Simple Mail Transfer Protocal) protocal.&lt;/li&gt;&lt;li&gt;&amp;nbsp;MIME types &lt;b&gt;form a standard way of classifying file types on the Internet&lt;/b&gt; e.g. using the "Content-type" header value defined in a HTTP response, the browser can open the file with the proper extension/plugin.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&amp;nbsp;Internet programs such as Web servers and browsers all have a list of MIME types, &lt;b&gt;so that they can transfer files of the same type in the same way&lt;/b&gt;, irrespective of what operating system they are working in.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;How does a MIME type look like ??&lt;/b&gt;&lt;/div&gt;There are two parts in a MIME type a type and a subtype, and they are seperated by a slash '/' in between.&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Type - &lt;/b&gt;It represent the type of file that is being used e.g application, audio, text etc.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Subtype - &lt;/b&gt;It represents the file type of the file being used. eg msword, html , plain , zip etc.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div class="hl-note"&gt;&lt;b&gt;MIME type Prefixes&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;MIME Prefixed with "x-" &lt;/b&gt;The "x-" prefix of a MIME subtype simply means that it's non-standard, i.e not registered with the "Internet Assigned Numbers Authority".&lt;/li&gt;&lt;li&gt;&lt;b&gt;MIME Prefixed with "vnd-"&lt;/b&gt; The "vnd-" prefix means that the MIME value is vendor specific and is not a registered MIME type.&lt;b&gt;&amp;nbsp;&lt;/b&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;How to set Content-Type &amp;nbsp;header of my files ??&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Setting the Content-type in ASP:&amp;nbsp;&lt;/b&gt;&lt;br /&gt;&amp;lt;% response.ContentType="text/html" %&amp;gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Setting the Content-type in C#:&amp;nbsp;&lt;/b&gt;&lt;br /&gt;// Response is of type System.Web.HttpResponse&lt;br /&gt;response.ContentType = "text/plain";&lt;/li&gt;&lt;li&gt;&lt;b&gt;Setting the Content-type in Java:&amp;nbsp;&lt;/b&gt;&lt;br /&gt;// Response is of type javax.servlet.ServletReponse &lt;br /&gt;response.setContentType("text/plain");&lt;/li&gt;&lt;li&gt;&lt;b&gt;Setting the Content-type in Perl/CGI: &amp;nbsp;&lt;/b&gt;&lt;br /&gt;print "Content-type:text/html";&lt;/li&gt;&lt;li&gt;&lt;b&gt;Setting the Content-type in PHP: &amp;nbsp;&lt;/b&gt;&lt;br /&gt;&amp;lt;?php header('Content-type: text/html');?&amp;gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/826151206207682620/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-mime-types.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/826151206207682620'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/826151206207682620'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/what-are-mime-types.html' title='What are MIME types'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1126481172845301220</id><published>2014-09-01T17:22:00.001+05:30</published><updated>2014-09-01T17:30:27.662+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Pdf'/><title type='text'>How to display a pdf file in browser using java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Display PDF in browser using Java from response&lt;/b&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;response.setContentType("application/pdf");&lt;br /&gt;response.setHeader("Content-Disposition", "inline; filename='" + pdfName + "'");&lt;br /&gt;response.setContentLength((int) FileInputStream input = new FileInputStream("File.pdf").length());&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;The above lines of code can be used to send a response to the view( like .jsp) as a pdf. &amp;nbsp;This will open the pdf in the browser and not make the pdf downloadable.&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Display PDF in browser view page&lt;/b&gt;&lt;/div&gt;To indicate to the browser that the file should be viewed in the browser :&lt;br /&gt;&lt;pre class="brush : html"&gt;Content-Type : application/pdf&lt;br /&gt;&lt;br /&gt;Content-Disposition : inline; filename.pdf&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;To have the file downloaded rather than viewed:&lt;br /&gt;&lt;pre class="brush : html"&gt;Content-Type : application/pdf&lt;br /&gt;&lt;br /&gt;Content-Disposition : attachment; filename.pdf&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1126481172845301220/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-display-pdf-file-in-browser.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1126481172845301220'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1126481172845301220'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-display-pdf-file-in-browser.html' title='How to display a pdf file in browser using java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-1159550226437069365</id><published>2014-09-01T14:42:00.002+05:30</published><updated>2014-09-01T14:42:37.592+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='MySQL'/><title type='text'>How to view table schema in Mysql</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Syntax : SHOW CREATE TABLE &lt;/b&gt;tablename&lt;/div&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;When To Use ?&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;You already have a table in the database and you want to view how this table was created.&lt;/li&gt;&lt;li&gt;You want to check all the datatypes, default value, nullability of the columns.&lt;/li&gt;&lt;li&gt;You want to see all the constraints and keys that are applicable to this table.&lt;/li&gt;&lt;li&gt;This command can be used to recreate the table as it is with all constraints and keys set.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;Suppose we have two tables &lt;b&gt;Institute and User &lt;/b&gt;&amp;nbsp;and we want to check the schema of the tables or in simple terms how these tables were created, then we will use this command&amp;nbsp;&lt;b&gt;SHOW CREATE TABLE&amp;nbsp;&lt;/b&gt;user, where user is the table name whose schema we want to check.&lt;br /&gt;The above command will give the following output.&lt;br /&gt;&lt;br /&gt;&lt;pre class="brush : sql"&gt;user  | CREATE TABLE `user` (&lt;br /&gt;  `id` bigint(20) NOT NULL AUTO_INCREMENT,&lt;br /&gt;  `city` varchar(255) DEFAULT NULL,&lt;br /&gt;  `date_created` datetime NOT NULL,&lt;br /&gt;  `dob` datetime DEFAULT NULL,&lt;br /&gt;  `email` varchar(255) NOT NULL,&lt;br /&gt;  `firstName` varchar(30) DEFAULT NULL,&lt;br /&gt;  `gender` varchar(255) DEFAULT NULL,&lt;br /&gt;  `is_enabled` tinyint(1) NOT NULL,&lt;br /&gt;  `is_expired` tinyint(1) DEFAULT NULL,&lt;br /&gt;  `lastName` varchar(30) DEFAULT NULL,&lt;br /&gt;  `last_updated` datetime NOT NULL,&lt;br /&gt;  `mobile` bigint(20) DEFAULT NULL,&lt;br /&gt;  `pwd` varchar(255) NOT NULL,&lt;br /&gt;  `token` varchar(255) DEFAULT NULL,&lt;br /&gt;  `user_role` int(11) NOT NULL,&lt;br /&gt;  `institute_id` bigint(20) NOT NULL,&lt;br /&gt;  PRIMARY KEY (`id`),&lt;br /&gt;  UNIQUE KEY `UK_52d8b7773f334f29885182c5fad` (`email`),&lt;br /&gt;  KEY `FK_d87d9b2cd99f4f999b750d83637` (`institute_id`),&lt;br /&gt;  CONSTRAINT `FK_d87d9b2cd99f4f999b750d83637` FOREIGN KEY (`institute_id`) REFERENCES `institute` (`id`)&lt;br /&gt;) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1 |&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/1159550226437069365/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-view-table-schema-in-mysql.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1159550226437069365'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/1159550226437069365'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/09/how-to-view-table-schema-in-mysql.html' title='How to view table schema in Mysql'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-7805711952148857817</id><published>2014-08-28T20:06:00.002+05:30</published><updated>2014-08-28T21:59:36.687+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate @NotFound Annotation</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Hibernate provides the annotation &lt;b&gt;@NotFound&lt;/b&gt;. &amp;nbsp;This annotation can be used in cases where we have relationships between the Entities e.g. ManyToOne or OneToMany or ManyToMany etc.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Syntax - @NotFound(action=NotFoundException.IGNORE)&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;When we want to access an entity using the relation from another entity, if the value of this entity is not available then the hibernate throws an exception. We &amp;nbsp;can use &lt;b&gt;@NotFound &lt;/b&gt;annotation to ignore these exceptions.&amp;nbsp;&lt;b&gt;NotFoundException.IGNORE &lt;/b&gt;tells the hibernate to avoid throwing the exception if the record for the entity is not found.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;pre class="brush : java"&gt;@Entity(name="user")&lt;br /&gt;@Table(name="user")&lt;br /&gt;public class User{&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/7805711952148857817/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/08/hibernate-notfound-annotation.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7805711952148857817'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/7805711952148857817'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/08/hibernate-notfound-annotation.html' title='Hibernate @NotFound Annotation'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-6688461361166931182</id><published>2014-08-28T02:28:00.001+05:30</published><updated>2014-08-28T20:07:42.133+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Database'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Hibernate'/><title type='text'>Hibernate Primary Key Generation Strategies</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;There are 4 types of Generation Strategies that can be used to generate Id in hibernate.&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;AUTO&lt;/b&gt;&amp;nbsp; e.g. strategy = GenerationType.AUTO&lt;/li&gt;&lt;li&gt;&lt;b&gt;IDENTITY&lt;/b&gt;&amp;nbsp;e.g. strategy = GenerationType.IDENTITY&lt;/li&gt;&lt;li&gt;&lt;b&gt;SEQUENCE&lt;/b&gt;&amp;nbsp;e.g. strategy = GenerationType.SEQUENCE&lt;/li&gt;&lt;li&gt;&lt;b&gt;TABLE&lt;/b&gt;&amp;nbsp;e.g. strategy = GenerationType.TABLE&lt;/li&gt;&lt;/ol&gt;&lt;div class="hl-note"&gt;&lt;b&gt;strategy = GenerationType.AUTO&lt;/b&gt;&lt;/div&gt;This is the default Generation Strategy that is used by the hibernate. This strategy allows hibernate to decide what strategy to be used to generate the unique key for the table. Strategies used by hibernate can be different for different types of databases used.  &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;strategy = GenerationType.IDENTITY&lt;/b&gt;&lt;/div&gt;In this Generation Strategy the hibernate is going to use an identity column. Identity column is a feature that is provided in some of the databases, this is not a generic feature and is provided by a few databases only.  &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;strategy = GenerationType.SEQUENCE&lt;/b&gt;&lt;/div&gt;In this Generation Strategy, the hibernate&amp;nbsp;generate unique keys by&amp;nbsp;a sequence hilo. This uses a sequence object to generate a&amp;nbsp;sequence of ids, and sequence.nextval will always give the next value of the sequence. &amp;nbsp;Databases manages this on their own.  &lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;strategy = GenerationType.TABLE&lt;/b&gt;&lt;/div&gt;In this Generation Strategy, the hibernate uses a separate table to provide unique key. The table stores the latest value to store the last used primary key so that we can get this value and increment the value to create new primary key. &lt;br /&gt;&lt;br /&gt;I would recommend to use &amp;nbsp;&lt;b&gt;strategy = GenerationType.AUTO &lt;/b&gt;because it lets hibernate to use the best generation strategy based on the database we use. &lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/6688461361166931182/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/08/hibernate-id-generation-strategies.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6688461361166931182'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/6688461361166931182'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/08/hibernate-id-generation-strategies.html' title='Hibernate Primary Key Generation Strategies'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2808252423759964436</id><published>2014-08-27T15:50:00.000+05:30</published><updated>2014-09-03T01:52:26.503+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Grails'/><title type='text'>Difference between Grails Respond and Grails Render </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;First things that comes in mind&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Respond was introduced in Grails v2.3.&lt;/li&gt;&lt;li&gt;Render is used by Grails to render different forms of responses from simple text response, to views to templates.&lt;/li&gt;&lt;li&gt;Respond automatically attempts to return the most appropriate type for the requested content type.&lt;/li&gt;&lt;li&gt;Respond is a better version of render, and can do everything render does.&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;In case you want to send data to the view in "xml" or in "json" format then you will have to do the following&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;render :&lt;/b&gt;&amp;nbsp;// renders text for a specified content-type/encoding&lt;br /&gt;render(text: "&lt;xml&gt;some xml&lt;/xml&gt;", contentType: "text/xml", encoding: "UTF-8"&lt;br /&gt;render(text: "&lt;xml&gt;some json&lt;/xml&gt;", contentType: "text/json", encoding: "UTF-8"&lt;/li&gt;&lt;li&gt;&lt;b&gt;respond : &lt;/b&gt;&amp;nbsp;by using&amp;nbsp;respond, it will automatically select the correct return type&lt;/li&gt;respond( text: "some text in json or xml" [formats : ['xml' , 'json']]) it will automatically send the required respond depending upon the type of request.&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2808252423759964436/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/08/difference-between-grails-respond-and.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2808252423759964436'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2808252423759964436'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/08/difference-between-grails-respond-and.html' title='Difference between Grails Respond and Grails Render '/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.post-2258867137030713942</id><published>2014-08-12T13:48:00.000+05:30</published><updated>2014-08-27T18:22:43.886+05:30</updated><category scheme='http://www.blogger.com/atom/ns#' term='Java'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>What are Objects In Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="hl-note"&gt;&lt;b&gt;First things that comes in mind are&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;They are real things&lt;/li&gt;&lt;li&gt;They occupy some space in memory&lt;/li&gt;&lt;li&gt;They have a state and some characteristics&lt;/li&gt;&lt;/ul&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Definition&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Java Objects are the real world entities that can have a state and some behavior. They are created from a blueprint i.e. classes. &lt;br /&gt;&lt;br /&gt;&lt;div class="hl-note"&gt;&lt;b&gt;Example&lt;/b&gt;&lt;/div&gt;If we say that Person is a class, then person is a blue print of every human in this world and we are all the objects of this class Person.&lt;br /&gt;&lt;br /&gt;Since each object has some state and some&amp;nbsp;characteristics, thus we may be similar or different from each other ion the basis of these states or characteristics. The image below shows a Class - "Person" and its objects Elaya, Dara and Bharat.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-9bD0agcZiUQ/U_2HWYGijJI/AAAAAAAAAGM/x2B4aOA4ES4/s1600/Objects.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-9bD0agcZiUQ/U_2HWYGijJI/AAAAAAAAAGM/x2B4aOA4ES4/s1600/Objects.jpg" height="179" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='https://ekiras.blogspot.com/feeds/2258867137030713942/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://ekiras.blogspot.com/2014/08/what-are-objects-in-java.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2258867137030713942'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/posts/default/2258867137030713942'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/2014/08/what-are-objects-in-java.html' title='What are Objects In Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-9bD0agcZiUQ/U_2HWYGijJI/AAAAAAAAAGM/x2B4aOA4ES4/s72-c/Objects.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-5500252535508671434</id><published>2017-04-07T13:11:00.000+05:30</published><updated>2017-04-07T13:11:06.143+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Angular</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5500252535508671434'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5500252535508671434'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/angular.html' title='Angular'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-2949220736108241191</id><published>2017-03-07T14:49:00.000+05:30</published><updated>2017-03-07T14:49:54.287+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Groovy</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/08/groovy-difference-between-findall-and-collect-methods.html" target="_blank"&gt;Difference between findAll() and collect() method.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/02/what-is-groovy-truth-and-define-custom-groovy-truth.html" target="_blank"&gt;What is Groovy Truth and how to define Custom Groovy Truth.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Groovy Operators&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/03/what-is-safe-navigation-operator-or-null-check-operator.html" target="_blank"&gt;Safe Navigation Operator (null check operator)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/03/what-is-elvis-operator-and-difference-between-elvis-and-ternary-operator.html" target="_blank"&gt;Ternary &amp;amp; Elvis Operator&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/03/what-is-direct-field-access-operator-and-how-to-use-it.html" target="_blank"&gt;Direct Field Access Operator.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/03/what-is-coercion-operator-and-how-to-use-it.html" target="_blank"&gt;Coercion Operator.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/03/what-is-identity-operator-and--difference-between-equals-in-java-and-groovy.html" target="_blank"&gt;Identity Operator.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2949220736108241191'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2949220736108241191'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/groovy.html' title='Groovy'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-3062835896957913774</id><published>2017-03-01T18:09:00.000+05:30</published><updated>2017-03-01T18:09:56.872+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Gradle</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2 style="text-align: left;"&gt;Gradle Basics&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-build-life-cycle-phases-gradle.html" target="_blank"&gt;Gradle Build Lifecycle.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-run-single-or-multiple-gradle-tasks.html" target="_blank"&gt;How to run a single or multiple Gradle tasks in one line.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-continue-build-even-if-a-failure-occurs.html" target="_blank"&gt;How to continue running a build even when a failure occurs.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-import-gradle-file-in-another-gradle-file.html" target="_blank"&gt;How to include Gradle file in another gradle file.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/difference-between-dofirst-and-dolast-methods-in-gradle-task.html" target="_blank"&gt;Difference between doFirst() and doLast() methods in a task.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Gradle Wrapper&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Introduction to Gradle Wrapper&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Gradle Daemon&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-daemon.html" target="_blank"&gt;Introduction to Gradle Daemons.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-how-to-list-all-running-gradle-daemons.html" target="_blank"&gt;How to see all running Daemons.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-stop-running-gradle-daemon.html" target="_blank"&gt;How to stop running Daemon.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-disable-gradle-daemon.html" target="_blank"&gt;How to diable Gradle Daemon.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Gradle Tasks&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/what-is-gradle-task-how-to-write-custom-gradle-task.html" target="_blank"&gt;What is a Gradle task and How to write a custom Gradle Task.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-default-task-in-gradle.html" target="_blank"&gt;How to define Default Tasks in Gradle.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-gradle-task-alias-short-forms.html" target="_blank"&gt;How to run a Gradle Task with shortforms.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-make-gradle-task-that-depends-on-another-gradle-task.html" target="_blank"&gt;How to make a gradle task depend on another task for execution.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-how-to-check-if-operation-system-is-linux-mac-windows.html" target="_blank"&gt;How to get Operating System Information if it is Linux, Windows or Mac OS.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;Gradle File&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/gradle-how-to-load-and-read-file.html" target="_blank"&gt;File - How to load and read a File in Gradle Task.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/what-is-file-collection-in-gradle.html" target="_blank"&gt;FileCollection - How to read multiple files in Gradle Task.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-read-all-files-in-directory-file-tree.html" target="_blank"&gt;FileTree - How to read all files in a directory in Gradle Task.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/difference-between-file-file-collection-and-file-tree.html" target="_blank"&gt;Difference between File, FileCollection and FileTree in Gradle.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/how-to-list-files-inside-jar-tar-zip-files-gradle-task.html" target="_blank"&gt;How to list files in a Jar, Tar or a Zip file.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Gradle JAR&amp;nbsp;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-create-jar-file-include-exclude-files-gradle-task.html" target="_blank"&gt;How to create a Jar file.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-exclude-files-packages-from-jar-file-created-gradle-task.html" target="_blank"&gt;How To Exclude Files and Packages from a Jar file.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Gradle WAR&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/03/how-to-make-a-war-file-include-exclude-files-gradle.html" target="_blank"&gt;How to create a Custom War file.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Gradle Deploy on Tomcat&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/02/how-to-use-gradle-cargo-plugin-to-deploy-war-on-tomcat.html" target="_blank"&gt;How to deploy a war file on Tomcat.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3062835896957913774'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3062835896957913774'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/gradle.html' title='Gradle'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-7088266579549535906</id><published>2017-01-02T19:34:00.000+05:30</published><updated>2017-01-02T19:34:37.957+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Apace Tomcat</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Tomcat Configuration&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-start-tomcat-on-multiple-more-than-one-ports.html" target="_blank"&gt;How to start Tomcat on multiple ports.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2017/01/how-to-run-change-default-port-8080-of-tomcat.html" target="_blank"&gt;How to change default port 8080 of Tomcat.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/12/tomcat-how-to-change-deployment-directory-webapps-to-custom-directory.html" target="_blank"&gt;How to change Deployment directory from webapp.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;Tomcat&amp;nbsp;&lt;/h2&gt;&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/12/how-to-deploy-war-on-tomcat.html" target="_blank"&gt;How to deploy war file on Tomcat Server.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7088266579549535906'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7088266579549535906'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/apace-tomcat.html' title='Apace Tomcat'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-5820695517170294371</id><published>2016-11-29T00:43:00.000+05:30</published><updated>2016-11-29T00:43:53.765+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java 9</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2 style="text-align: left;"&gt;Process API&lt;/h2&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-list-all-processes-running-on-the-os.html" target="_blank"&gt;List all processes running in the OS.&lt;/a&gt;&lt;/li&gt;&lt;li style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px;"&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-get-current-process-information-in-java-9.html" target="_blank"&gt;Get the information of the current process.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-start-new-process-and-get-process-id-in-java.html" target="_blank"&gt;How to start a new Process and get process id&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-get-process-information-from-process-id-in-java.html" target="_blank"&gt;How to get Process information from Process Id.&lt;/a&gt;&lt;/li&gt;&lt;li style="box-sizing: border-box; margin: 0px 0px 0.25em; padding: 0px;"&gt;&lt;a href="http://www.ekiras.com/2016/11/how-to-destroy-terminate-running-process-in-java.html" target="_blank"&gt;Destroy a running process forcefully.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;Project JIGSAW&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/java-9-what-is-project-jigsaw.html" target="_blank"&gt;Introduction to Project JIGSAW.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/11/java-9-how-to-create-compile-and-run-modules.html" target="_blank"&gt;How to create and run a custom Module.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;HTTP/2 Client&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;What is HTTP/2 Client&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Javadoc&amp;nbsp;&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;How to create javadoc for a custom module.&lt;/li&gt;&lt;li&gt;How to generate Html 4 and Html 5 javadocs.&lt;/li&gt;&lt;li&gt;How to use Search box generated in javadoc.&lt;/li&gt;&lt;/ul&gt;&lt;h2 style="text-align: left;"&gt;Enhanced Deprecation&lt;/h2&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;The Java Shell : REPL&lt;/h2&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5820695517170294371'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5820695517170294371'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java9.html' title='Java 9'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/116908167628545730654</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh6.googleusercontent.com/-p2DZgwb-g9s/AAAAAAAAAAI/AAAAAAAABaA/PfcOq4f6pWA/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-3032929781586520463</id><published>2016-09-29T03:11:00.000+05:30</published><updated>2016-09-29T03:11:23.208+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Spring Boot</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2 style="text-align: left;"&gt;Spring Boot Setup&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/how-to-run-spring-boot-application.html" target="_blank"&gt;How to run a Spring Boot application using Maven or Gradle build tool.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/spring-boot-making-cli-application-using-java.html" target="_blank"&gt;Spring Boot Single Page Java Application.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/spring-boot-making-cli-application-using-groovy.html" target="_blank"&gt;Spring Boot Single Page Groovy Application.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/spring-boot-mvc-gradle-sample-crud-project-setup.html" target="_blank"&gt;Spring Boot Gradle MVC CRUD project using Mysql.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/spring-boot-sample-maven-dependencies-to-create-basic-crud-application.html" target="_blank"&gt;Spring Boot Maven MVC CRUD project using Mysql.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Spring Boot Gradle MVC CRUD project using MongoDb.&lt;/li&gt;&lt;li&gt;Spring Boot Gradle REST project setup using Mysql.&lt;/li&gt;&lt;li&gt;Spring Boot Gradle&amp;nbsp;REST&amp;nbsp;project setup using MongoDb.&lt;/li&gt;&lt;li&gt;Spring Boot Spring Security setup.&lt;/li&gt;&lt;li&gt;Spring Boot RabbitMq setup.&lt;/li&gt;&lt;li&gt;Spring Boot Kafka Setup.&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/how-to-setup-hazelcast-server-in-spring-boot-application.html" target="_blank"&gt;Spring Boot Hazelcast Setup.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Spring Boot send email using Java Mail Api.&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/09/gradle-task-to-add-selected-files-to-jar.html" target="_blank"&gt;Spring Boot create Jar of files using Gradle task.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Banner&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/02/how-to-disable-application-banner-in-spring-boot.html" target="_blank"&gt;How to disable the Spring Boot application Banner.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/02/adding-custom-banner-in-springboot-application.html" target="_blank"&gt;Adding Custom Banner for application&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2&gt;Profiles, Environments and Properties and Configurations&lt;/h2&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/06/springboot-what-are-profiles-in-spring.html" target="_blank"&gt;What are profiles in Spring Boot.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/11/how-to-set-active-profile-in-spring-boot-application.html" target="_blank"&gt;How to set active profile and other properties.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/07/spring-boot-reading-properties-file.html" target="_blank"&gt;Reading values from Properties File.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/05/how-to-run-spring-boot-application-on-custom-port-8080.html" target="_blank"&gt;How to run Application on custom port.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Serving Static Content&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/06/how-to-display-static-html-in-springboot-mvc.html" target="_blank"&gt;How to serve static html pages.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Exception Handling&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Controller Level Exception Handling.&lt;/li&gt;&lt;li&gt;@ControllerAdvice Annotation.&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/02/how-to-do-exception-handling-in-springboot-rest-application.html" target="_blank"&gt;Global Exception Handling.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2&gt;Filters and Interceptors&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://how%20to%20create%20a%20filter%20in%20spring%20boot%20application/" target="_blank"&gt;How to create and Register a filter in Spring Boot.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/spring-boot-how-to-create-bootstrap-class.html" target="_blank"&gt;Create a bootstrap class to run before server is up and running.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/spring-boot-how-to-register-filter-in-spring-boot-application.html" target="_blank"&gt;How to register a Filter in the &amp;nbsp;Filter Chain.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.blogger.com/Spring%20:%20How%20to%20define%20Filter%20order%20in%20Filter%20Chain%20in%20Spring%20Boot" target="_blank"&gt;How to define Filter Order in Filter Chain.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Spring Boot making Custom Interceptor.&lt;/li&gt;&lt;li&gt;Spring Boot making Custom Listener.&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;CORS&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/09/springboot-how-to-allow-cross-origin-ajax-calls-to-spring-rest-mvc-application.html" target="_blank"&gt;How to allow CORS's ajax calls to application.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/09/springboot-cors-allow-custom-headers-in-ajax-calls.html" target="_blank"&gt;How to allow Custom Headers in COR's ajax calls.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;Internationalization&amp;nbsp;&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/01/springboot-internalization-and-i18n.html" target="_blank"&gt;How to do internationalization of messages for Rest Application.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;How to do internationalization of messages for MVC Application.&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Spring Data Binding&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/01/how-to-bind-request-data-to-variable-in-springboot.html" target="_blank"&gt;How to Bind data from Url to a Variable.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/01/how-to-read-custom-header-from-spring-boot-controller.html" target="_blank"&gt;How to Bind Header data to a variable.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;Spring Boot Data JPA&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Mappings&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/09/one-to-one-mapping-in-spring-boot-spring-data-jpa-hibernate.html" target="_blank"&gt;One To One Mapping.&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/01/jpa-one-to-many-mapping-using-hibernate-spring-boot.html" target="_blank"&gt;One to Many Mapping.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Inheritence&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/09/how-to-handle-inheritance-with-entities-in-spring-data-jpa.html" target="_blank"&gt;Inheritance with Entities with&amp;nbsp;@MappedSuperclass.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/09/how-to-override-the-domain-mapping-defined-in-parent-entity-with-mapped-super-class.html" target="_blank"&gt;Override the domain mapping defined in Parent Entity.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/02/how-to-use-configure-session-factory-bean-springboot.html" target="_blank"&gt;Configure and Use SessionFactory.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3032929781586520463'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3032929781586520463'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/spring-boot.html' title='Spring Boot'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-5508531628138304353</id><published>2016-04-13T02:38:00.000+05:30</published><updated>2016-04-13T02:38:30.260+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Spring Security</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2&gt;Spring Security Basics&lt;/h2&gt;&lt;div style="font-size: medium; font-weight: normal;"&gt;&lt;ol&gt;&lt;li&gt;AuthenticationEntryPoint.&lt;/li&gt;&lt;li&gt;AuthenticationFilter.&lt;/li&gt;&lt;li&gt;AuthenticationProvider.&lt;/li&gt;&lt;li&gt;AuthenticationSuccessHandler&lt;/li&gt;&lt;li&gt;AuthenticationFailureHandler.&lt;/li&gt;&lt;li&gt;AuthenticationManager.&lt;/li&gt;&lt;li&gt;UsernamePasswordAuthenticationFilter&lt;/li&gt;&lt;li&gt;UserDetailsService&lt;/li&gt;&lt;li&gt;UserDetails.&lt;/li&gt;&lt;li&gt;User&lt;/li&gt;&lt;li&gt;GrantedAuthority&lt;/li&gt;&lt;li&gt;PasswordEncoder&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2&gt;Getting Started with Spring Security &amp;amp; Spring Boot&lt;/h2&gt;&lt;ol style="font-size: medium; font-weight: normal;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-configure-spring-security-with-spring-boot.html" target="_blank"&gt;Configure Spring Security in Spring boot.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/in-memory-authentication-with-spring-security.html" target="_blank"&gt;In-Memory authentication.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/configure-spring-security-with-jdbc-mysql-query-for-authentication.html" target="_blank"&gt;JDBC Authentication with&amp;nbsp;Mysql query.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/authenticate-user-with-custom-user-details-service-in-spring-security.html" target="_blank"&gt;JDBC Authentication with Custom User Details Service.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/implement-role-hierarchy-in-spring-security-and-spring-boot.html" target="_blank"&gt;Configure Role Hierarchy.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-list-user-authorities-in-spring-security.html" target="_blank"&gt;How to get User Authorities for a currently logged in user.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Custom Login Url for authentication.&lt;/li&gt;&lt;li&gt;Custom Logout Url for authentication.&lt;/li&gt;&lt;li&gt;Custom Logout Success Url.&lt;/li&gt;&lt;li&gt;Spring Security Secure url's for authentication.&lt;/li&gt;&lt;li&gt;How to add details to User Authentication token.&lt;/li&gt;&lt;li&gt;DAO based authentication.&lt;/li&gt;&lt;li&gt;How to configure, use and disable CSRF attacks.&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Spring Security Web/MVC&lt;/h2&gt;&lt;div style="font-size: medium; font-weight: normal;"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Custom Login Page.&lt;/li&gt;&lt;li&gt;Custom Login Url.&lt;/li&gt;&lt;li&gt;Custom Login Filter.&lt;/li&gt;&lt;li&gt;Custom Login Success Handler.&lt;/li&gt;&lt;li&gt;Custom Login username and password fields.&lt;/li&gt;&lt;li&gt;DAO based Authentication.&lt;/li&gt;&lt;li&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Spring Security Rest&lt;/h2&gt;&lt;div style="font-size: medium; font-weight: normal;"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/04/how-to-disable-session-creation-stateless-rest-spring-security.html" target="_blank"&gt;How to make Spring Security authentication Stateless.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Allow Assets and Resources to be accessed.&lt;/li&gt;&lt;li&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Spring Security in Grails&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/01/how-to-integrate-spring-security-in-grails.html" target="_blank"&gt;How to integrate Spring Security in Grails.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2015/01/spring-security-adding-additional-details-to-principal-user-object.html" target="_blank"&gt;How to add Custom Attributes to Spring Security User object.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2015/01/spring-security-create-custom-authentication-filter-in-grails.html" target="_blank"&gt;How to create a Custom Spring Security Filter in Grails.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5508531628138304353'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5508531628138304353'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/spring-security.html' title='Spring Security'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-7992415060669902055</id><published>2016-02-23T11:07:00.000+05:30</published><updated>2016-02-23T11:07:27.541+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Java Concepts&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-are-classes-in-java.html" target="_blank"&gt;What are Classes.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/08/what-are-objects-in-java.html" target="_blank"&gt;What are Objects.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-are-different-ways-of-creating-objects-in-java.html" target="_blank"&gt;Different ways of creating an Object.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/can-we-have-private-constructor-in-class-in-java.html" target="_blank"&gt;Can we have a Private Constructor in a Java class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/why-main-method-in-java-is-public.html" target="_blank"&gt;Why main() method in  java is public static void.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/multiple-main-methods-in-java.html" target="_blank"&gt;Multiple main() methods in a java class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/what-are-marker-interfaces-in-java.html" target="_blank"&gt;What are Marker Interfaces and how are they different from normal Interfaces ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/overriding-equals-method-of-object.html" target="_blank"&gt;Overriding equals() method.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/how-does-equals-method-work-in-java.html" target="_blank"&gt;What is the purpose of equals() method and when to use it.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/contract-between-equals-and-hashcode-methods-in-java.html" target="_blank"&gt;Contract between equals() and hashCode() methods.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-method-overriding-in-java.html" target="_blank"&gt;What is Method Overriding.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-method-overloading-in-java.html" target="_blank"&gt;What is Method Overloading.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-final-keyword-in-java.html" target="_blank"&gt;Purpose of Final keyword.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-are-static-variables-in-java.html" target="_blank"&gt;What are static variables.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-static-block-in-java.html" target="_blank"&gt;What are static blocks.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/can-we-override-static-method-in-java.html" target="_blank"&gt;Can we override a static method.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Why strings are mutable.&lt;/li&gt;&lt;li&gt;Ways to iterate a Collection object.&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/difference-between-classnotfoundexception-and-noclassdeffounderror.html" target="_blank"&gt;What are ClassNotFoundException and NoClassDefFoundError.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Threads&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-make-threads-using-runnable-interface.html" target="_blank"&gt;How to make a Thread by implementing Runnable Interface.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-make-thread-by-extending-thread-class.html" target="_blank"&gt;How to make a Thread by extending Thread class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/05/how-to-create-schedule-job-or-thread-to-run-at-fixed-intervals-in-java.html" target="_blank"&gt;How to run a Thread after a fixed interval of time.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Files&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/06/how-to-create-nested-folders-in-java.html"&gt;How to create nested folders.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/06/how-to-delete-folder-in-java.html"&gt;How to delete a file.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/11/how-to-write-file-in-java-using-filewriter.html" target="_blank"&gt;How to write a file using FileWriter&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;Java Collections&lt;/div&gt;&lt;div class="body"&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/how-does-hashmap-works-internally-in-java.html" target="_blank"&gt;Internal working of HashMap.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-add-objects-in-hashmap.html" target="_blank"&gt;Adding Objects to a HashMap.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-iterate-over-hashmap-collection.html" target="_blank"&gt;Iterating through a HashMap.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/how-set-works-internally-in-java.html" target="_blank"&gt;Internal Working of HashSet.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-treeset-in-java-and-why-treeset-is-used.html" target="_blank"&gt;How does a TreeSet Works in Java.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/how-to-sort-objects-using-comparable-interface.html" target="_blank"&gt;Sorting collection of objects by implementing Comparable Interface.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/how-to-sort-objects-using-comparator-interface-in-java.html" target="_blank"&gt;Sorting collection of objects by implementing Comparator Interface.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/exception-in-thread-java-util-concurrent-modification-exception.html" target="_blank"&gt;Exception in thread java.util.ConcurrentModificationException.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/how-to-remove-all-nulls-from-collection-in.html" target="_blank"&gt;How to remove Object/ null from a Collection.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/java-exception-in-thread-main-java-util-concurrent-modification-exception.html" target="_blank"&gt;Exception in thread "main" java.util.ConcurrentModificationException&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Java Reflection API&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;What is Reflection API and what is its use.&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-make-object-of-class-by-reflection-api.html" target="_blank"&gt;How to make object of a class by Reflection API.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-get-all-constructors-declared-in-class-using-reflection-api.html" target="_blank"&gt;How to get all the constructors declared within a given class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-get-all-methods-available-in-class-using-reflection-api.html" target="_blank"&gt;How to get all the methods available in a class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-get-all-declared-fields-in-class.html" target="_blank"&gt;How to get all the fields declared in a class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/01/how-to-find-all-packages-in-project-with-prefix-in-java.html" target="_blank"&gt;How to get all packages in the project class path.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/java-how-to-check-if-field-of-class-is-final-by-reflection.html" target="_blank"&gt;How to check if field of class is final.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/java-how-to-check-if-field-of-class-is-static-by-reflection.html" target="_blank"&gt;How to check if field of class is static.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Java Programs&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/create-mysql-database-jdbc-connection-in-java.html" target="_blank"&gt;Connect to Mysql Database server using JDBC.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Numbers&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/01/how-to-generate-random-number-between-two-given-numbers-in-java.html" target="_blank"&gt;Generate a Random Number between two given numbers.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/program-to-check-if-given-number-is-armstrong.html" target="_blank"&gt;Check if a given number is Armstrong.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/find-factorial-of-number-using-recursion.html" target="_blank"&gt;Factorial of a number using Recursion.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/program-to-find-sum-of-digits-of-number.html" target="_blank"&gt;Find the sum of digits of a number.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/find-sum-of-even-digits-of-number.html" target="_blank"&gt;Find the sum of digits of a number that are even.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/01/how-to-convert-decimal-number-to-any-base-in-java.html" target="_blank"&gt;How to convert a number from one base to another.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Strings&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/program-to-reverse-a-string-in-java.html" target="_blank"&gt;Reverse a given String.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/program-to-reverse-each-word-of-string-in-java.html" target="_blank"&gt;Reverse each word in a line of a given String.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/program-to-convert-string-to-integer-without-using-parseint-method.html" target="_blank"&gt;Convert a String to Integer without using parseInt() method.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/find-maximum-number-of-occurrences-of-word-in-line.html" target="_blank"&gt;Find the word with maximum occurrences in a line.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/how-to-find-all-permutations-and-combinations-of-string-in-java.html"&gt;Find all Permutations and Combinations of a String.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Recursion&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/program-to-find-all-paths-in-matrix-of-2d-array.html" target="_blank"&gt;How to find all possible paths in a given 2D array.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/program-to-print-numbers-in-words.html" target="_blank"&gt;Print a given Number in Words.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Collections&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/12/how-to-create-nested-list-up-to-any-level-of-nesting.html" target="_blank"&gt;Create a Nested List upto any level of nesting.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/12/how-to-flatten-nested-list-in-java.html" target="_blank"&gt;How to Flatten a Nested List.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/02/how-to-sort-array-list-based-on-custom-order-java.html" target="_blank"&gt;How to sort Array/ List based on Custom order.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Difference Between Questions&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/difference-between-method-overloading-and-method-overriding.html" target="_blank"&gt;Difference between Method Overloading and Method Overriding.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-difference-between-enumeration-and-iterator-in-java.html" target="_blank"&gt;Difference between Enumeration and Iterator.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-the-difference-between-interface-and-abstract-class-in-java.html" target="_blank"&gt;Difference between Interface and Abstract Class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-the-difference-between-comparator-and-comparable-interfaces.html" target="_blank"&gt;Difference between Comparable and Comparator Interfaces.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/difference-between-hashmap-and-hashtable.html" target="_blank"&gt;Difference between HashMap and HashTable.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Difference between String, String Builder and StringBuffer&lt;/li&gt;&lt;li&gt;Difference between final and finally.&lt;/li&gt;&lt;li&gt;Difference between JDK and JRE&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7992415060669902055'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7992415060669902055'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java.html' title='Java'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-3108699265714301115</id><published>2016-01-19T13:45:00.000+05:30</published><updated>2016-01-19T13:45:15.985+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Hibernate</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2 style="text-align: left;"&gt;Hibernate Annotations&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/09/hibernate-how-to-use-entity-annotation.html" target="_blank"&gt;@Entity&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/09/hibernate-how-to-use-id-annotation.html" target="_blank"&gt;@Id&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;complete id="goog_1294520933"&gt;@GeneratedValue&lt;/complete&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;complete&gt;&lt;a href="http://www.ekiras.com/2014/08/hibernate-id-generation-strategies.html" target="_blank"&gt;strategy&lt;/a&gt;&lt;/complete&gt;&lt;/li&gt;&lt;li&gt;&lt;complete&gt;generator&lt;/complete&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;complete&gt;&lt;a href="http://www.ekiras.com/2015/09/hibernate-how-to-use-column-annotation.html" target="_blank"&gt;@Column&lt;/a&gt;&lt;/complete&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="background-color: white; color: #333333; font-family: &amp;quot;helvetica neue&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;arial&amp;quot; , sans-serif; font-size: 14px; line-height: 19.6000003814697px;"&gt;columnDefinition&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;complete&gt;@ColumnResult&lt;/complete&gt;&lt;/li&gt;&lt;li&gt;&lt;complete&gt;&lt;a href="http://www.ekiras.com/2015/09/hibernate-how-to-use-temporal-annotation.html" target="_blank"&gt;@Temporal&lt;/a&gt;&lt;/complete&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;Hibernate Annotation Configurations&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/08/hibernate-id-generation-strategies.html" target="_blank"&gt;Primary Key Generation Strategies.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/02/how-to-create-composite-key-in-hibernate-using-annotation.html" target="_blank"&gt;Create a Composite Key using Embeddeble Annotation.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/how-to-use-enums-in-hibernate-persistence.html" target="_blank"&gt;Mapping Enums in Hibernate Entity.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/many-to-many-mapping-in-hibernate-using-annotations.html" target="_blank"&gt;Create Many to Many relation mapping in hibernate.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/03/how-to-get-results-from-fixed-position-in-hibernate-criteria-query.html" target="_blank"&gt;How to define Offset or First Result to fetch from database using Criteria Query.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/09/hibernate-make-field-non-updatable-in-an-entity.html" target="_blank"&gt;How to make a field Non Updatable in hibernate.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h2 style="text-align: left;"&gt;Hibernate XML Configuration&lt;/h2&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/hibernate-table-annotation.html" target="_blank"&gt;@Table annotation in hibernate.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/08/hibernate-notfound-annotation.html" target="_blank"&gt;@NotFound Annotation in hibernate.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;h2 style="text-align: left;"&gt;Hibernate Criteria Query&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/03/hibernate-criteria-query-to-find-list-of-domain-class.html" target="_blank"&gt;list&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/03/hibernate-fetch-results-using-orderby-in-criteria-query.html" target="_blank"&gt;order&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2 style="text-align: left;"&gt;&lt;b&gt;Hibernate Mappings&lt;/b&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/01/jpa-one-to-many-mapping-using-hibernate-spring-boot.html" target="_blank"&gt;JPA One to Many Mapping.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3108699265714301115'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3108699265714301115'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/hibernate.html' title='Hibernate'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-8360292298850042404</id><published>2016-01-08T02:49:00.000+05:30</published><updated>2016-01-08T02:49:14.569+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java Programs</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/create-mysql-database-jdbc-connection-in-java.html" target="_blank"&gt;Connect to Mysql Database server using JDBC.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Numbers&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2016/01/how-to-generate-random-number-between-two-given-numbers-in-java.html" target="_blank"&gt;Generate a Random Number between two given numbers.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/program-to-check-if-given-number-is-armstrong.html" target="_blank"&gt;Check if a given number is Armstrong.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/find-factorial-of-number-using-recursion.html" target="_blank"&gt;Factorial of a number using Recursion.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/program-to-find-sum-of-digits-of-number.html" target="_blank"&gt;Find the sum of digits of a number.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/find-sum-of-even-digits-of-number.html" target="_blank"&gt;Find the sum of digits of a number that are even.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/01/how-to-convert-decimal-number-to-any-base-in-java.html" target="_blank"&gt;How to convert a number from one base to another.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Strings&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/program-to-reverse-a-string-in-java.html" target="_blank"&gt;Reverse a given String.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/program-to-reverse-each-word-of-string-in-java.html" target="_blank"&gt;Reverse each word in a line of a given String.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/program-to-convert-string-to-integer-without-using-parseint-method.html" target="_blank"&gt;Convert a String to Integer without using parseInt() method.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/find-maximum-number-of-occurrences-of-word-in-line.html" target="_blank"&gt;Find the word with maximum occurrences in a line.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/08/how-to-find-all-permutations-and-combinations-of-string-in-java.html"&gt;Find all Permutations and Combinations of a String.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Recursion&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/program-to-find-all-paths-in-matrix-of-2d-array.html" target="_blank"&gt;How to find all possible paths in a given 2D array.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/program-to-print-numbers-in-words.html" target="_blank"&gt;Print a given Number in Words.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Collections&lt;/li&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/12/how-to-create-nested-list-up-to-any-level-of-nesting.html" target="_blank"&gt;Create a Nested List upto any level of nesting.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/12/how-to-flatten-nested-list-in-java.html" target="_blank"&gt;How to Flatten a Nested List.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8360292298850042404'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8360292298850042404'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-programs.html' title='Java Programs'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-2833615272020456810</id><published>2015-12-22T11:11:00.000+05:30</published><updated>2015-12-22T11:11:04.980+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Android</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/android-how-to-change-application-icon.html" target="_blank"&gt;How to change application icon.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/android-how-to-change-android-application-label-in-action-bar.html" target="_blank"&gt;How to change the Android&amp;nbsp;Application Label.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/android-how-to-change-action-bar-tool-bar-color.html" target="_blank"&gt;How to change ActionBar/ ToolBar color.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/android-add-action-icon-action-button-on-action-bar.html" target="_blank"&gt;Add Action Icon / Action button on Action Bar.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/12/how-to-disable-back-button-to-splash-activity.html" target="_blank"&gt;How to prevent going back to an Activity.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/android-how-to-create-basic-list-view.html" target="_blank"&gt;How to create a Basic List View.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/12/how-to-send-object-from-one-activity-to-another-in-android.html" target="_blank"&gt;How to send POJO Object from on Activity to another.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/12/how-to-implement-material-design-tab-layout-in-android.html" target="_blank"&gt;How to create Android Material Design Tab Layout with View Pager.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Difference Between&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/android-difference-between-gravity-and-layout-gravity.html" target="_blank"&gt;android:gravity and android:layout_gravity&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2833615272020456810'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2833615272020456810'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/android.html' title='Android'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-6650012494485569086</id><published>2015-11-04T14:32:00.000+05:30</published><updated>2015-11-04T14:32:22.990+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Javascript</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2 style="text-align: left;"&gt;Basics&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/11/javascript-what-is-javascript-hoisting.html" target="_blank"&gt;What is Hoisting in Javascript.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;h2 style="text-align: left;"&gt;Objects&lt;/h2&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/11/oojs-create-object-in-javascript.html" target="_blank"&gt;Create Object in javascript.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6650012494485569086'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6650012494485569086'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/javascript.html' title='Javascript'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-1071653324421590218</id><published>2015-11-02T20:20:00.000+05:30</published><updated>2015-11-02T20:20:04.859+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Hazelcast</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h2 style="text-align: left;"&gt;Hazelcast&lt;/h2&gt;&lt;div&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/how-to-setup-hazelcast-server-in-spring-boot-application.html" target="_blank"&gt;Setup Hazelcast server with spring boot application.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/11/hazelcast-auto-reconnect-to-hazelcast-server.html" target="_blank"&gt;Auto Reconnect to Hazelcast server if connection is broken.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/1071653324421590218'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/1071653324421590218'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/hazelcast.html' title='Hazelcast'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-2290125805446332236</id><published>2015-10-27T02:19:00.000+05:30</published><updated>2015-10-27T02:19:59.210+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java Reflection API</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;What is Reflection API and what is its use.&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-make-object-of-class-by-reflection-api.html" target="_blank"&gt;How to make object of a class by Reflection API.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-get-all-constructors-declared-in-class-using-reflection-api.html" target="_blank"&gt;How to get all the constructors declared within a given class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-get-all-methods-available-in-class-using-reflection-api.html" target="_blank"&gt;How to get all the methods available in a class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-get-all-declared-fields-in-class.html" target="_blank"&gt;How to get all the fields declared in a class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/01/how-to-find-all-packages-in-project-with-prefix-in-java.html" target="_blank"&gt;How to get all packages in the project class path.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/java-how-to-check-if-field-of-class-is-final-by-reflection.html" target="_blank"&gt;How to check if field of class is final.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/10/java-how-to-check-if-field-of-class-is-static-by-reflection.html" target="_blank"&gt;How to check if field of class is static.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2290125805446332236'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2290125805446332236'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-reflection-api.html' title='Java Reflection API'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-4874991360196360238</id><published>2015-07-28T21:57:00.000+05:30</published><updated>2015-07-28T21:57:26.951+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Spring</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Spring&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/maven-spring-mvc-hibernate-sitemesh-hello-world-project.html" target="_blank"&gt;Setup Maven Spring MVC Hibernate Project with Sitemesh.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/custom-error-404-error-page-in-spring-mvc.html" target="_blank"&gt;Custom Error Pages in Spring MVC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/07/spring-mvc-handle-exceptions-in-controllers.html" target="_blank"&gt;Exception handling in Spring MVC Controllers.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/03/pagination-in-spring-hibernate-mvc-application-using-criteria-query.html" target="_blank"&gt;Pagination using Bootstrap theme&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Spring Roo&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/introduction-and-getting-started-with-spring-roo.html" target="_blank"&gt;Introduction to Spring Roo.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/4874991360196360238'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/4874991360196360238'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/spring.html' title='Spring'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-7883456262200062046</id><published>2015-07-28T21:55:00.000+05:30</published><updated>2015-07-28T21:55:36.467+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Grails</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Grails Concepts&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/12/how-to-apply-domain-constraints-in-command-objects-in-grails.html" target="_blank"&gt;How to add Domain constraints to Command Objects and other classes.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/how-to-do-versioning-in-controllers-in-grails.html" target="_blank"&gt;How to do Versioning of controllers in Grails.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/07/how-to-get-current-environment-in-grails.html" target="_blank"&gt;Grails setup custom environments and get current environments in Controllers and Views.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;Difference between&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/08/difference-between-grails-respond-and.html" target="_blank"&gt;Difference between Respond and Render&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7883456262200062046'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7883456262200062046'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/grails.html' title='Grails'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-592158177533399250</id><published>2015-07-28T21:54:00.000+05:30</published><updated>2015-07-28T21:54:06.349+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>AngularJs</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;AngularJs Tutorials&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/05/introduction-to-angularjs.html"&gt;Setting up AngularJs.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/05/how-to-use-angularjs-expressions.html"&gt;AngularJs Expressions and ng-init example.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/07/angularjs-routeparams-with-ngroute.html" target="_blank"&gt;AngularJs route params example.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/592158177533399250'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/592158177533399250'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/angularjs.html' title='AngularJs'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-5963684964725208510</id><published>2015-05-22T02:45:00.000+05:30</published><updated>2015-05-22T02:45:23.142+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java Threads</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-make-threads-using-runnable-interface.html" target="_blank"&gt;How to make a Thread by implementing Runnable Interface.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-make-thread-by-extending-thread-class.html" target="_blank"&gt;How to make a Thread by extending Thread class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/05/how-to-create-schedule-job-or-thread-to-run-at-fixed-intervals-in-java.html"&gt;How to run a Thread after a fixed interval of time.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5963684964725208510'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/5963684964725208510'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-threads.html' title='Java Threads'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-2299542711859170478</id><published>2015-04-22T19:41:00.000+05:30</published><updated>2015-04-22T19:41:54.608+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Tests : Java </title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div role="tabpanel"&gt;   &lt;!-- Nav tabs --&gt;  &lt;ul class="nav nav-tabs" role="tablist"&gt;    &lt;li role="presentation" class="active"&gt;&lt;a href="#random" aria-controls="random" role="tab" data-toggle="tab"&gt;Random Tests&lt;/a&gt;&lt;/li&gt;    &lt;li role="presentation"&gt;&lt;a href="#topic" aria-controls="topic" role="tab" data-toggle="tab"&gt;Topic Wise Tests&lt;/a&gt;&lt;/li&gt;  &lt;/ul&gt;   &lt;!-- Tab panes --&gt;  &lt;div class="tab-content"&gt;    &lt;div role="tabpanel" class="tab-pane fade in active" id="random"&gt;       &lt;ol&gt;         &lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-random-java-test-1.html" target="_blank"&gt;Test 1&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-1.html"&gt;Java_1&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-2.html"&gt;Java_2&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-3.html"&gt;Java_3&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-4.html"&gt;Java_4&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-5.html"&gt;Java_5&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-6.html"&gt;Java_6&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-7.html"&gt;Java_7&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-8.html"&gt;Java_8&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-9.html"&gt;Java_9&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-10.html"&gt;Java_10&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-11.html"&gt;Java_11&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-12.html"&gt;Java_12&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-13.html"&gt;Java_13&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-14.html"&gt;Java_14&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-15.html"&gt;Java_15&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-16.html"&gt;Java_16&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-17.html"&gt;Java_17&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-18.html"&gt;Java_18&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-19.html"&gt;Java_19&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-20.html"&gt;Java_20&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-21.html"&gt;Java_21&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-22.html"&gt;Java_22&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-23.html"&gt;Java_23&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-24.html"&gt;Java_24&lt;/a&gt;&lt;/li&gt;         &lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/test-java-25.html"&gt;Java_25&lt;/a&gt;&lt;/li&gt;      &lt;/ol&gt;    &lt;/div&gt;    &lt;div role="tabpanel" class="tab-pane fade " id="topic"&gt;&lt;ol&gt;&lt;li&gt;Fundamentals Of Java&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-fundamentals-of-java.html" target="_blank"&gt;Test 1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-fundamentals-of-java-test2.html"&gt;Test 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-java-test-1.html" target="_blank"&gt;Access Specifiers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-constructors-in-java.html" target="_blank"&gt;Constructors&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/mcqs-on-static-keyword-in-java.html" target="_blank"&gt;Static Keyword&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-method-overloading.html" target="_blank"&gt;Method Overloading&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-method-overriding.html" target="_blank"&gt;Method Overriding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/mcqs-on-internal-working-of-hashmap-in-java.html" target="_blank"&gt;Internal Working Of HashMaps&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;     &lt;/div&gt;  &lt;/div&gt; &lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2299542711859170478'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2299542711859170478'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/tests-java.html' title='Tests : Java '/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-88743349281006025</id><published>2015-04-22T01:42:00.000+05:30</published><updated>2015-04-22T01:42:01.971+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>test</title><content type='html'>&lt;div id='test-controller'&gt;	&lt;div class='info'&gt;		This test contains 10 questions based on &lt;b&gt;Java&lt;/b&gt;.		&lt;br /&gt;		Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&lt;/div&gt;		&lt;h3&gt;Select Test Type&lt;/h3&gt;		&lt;button class='timed-test' onclick='startTest('timed');'&gt;Timed Test&lt;/button&gt;		&lt;button class='untimed-test' onclick='startTest('untimed');'&gt;UnTimed Test&lt;/button&gt;	&lt;/div&gt;	&lt;div class='hidden' id='test-container'&gt;		&lt;div id='instructions'&gt;&lt;div&gt;		&lt;b&gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&lt;/b&gt;	&lt;/div&gt;	&lt;div class='test-timer-container'&gt;		&lt;div class='hidden' id='test-timer'&gt;Time Left - minutes :seconds&lt;/div&gt;	&lt;/div&gt;	&lt;div id='test-score'&gt;&lt;/div&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 1 &lt;/b&gt; Which of the following methods belong to the String class? 1. length()  2. compareTo()  3. equals()  4. substring()  	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;Length(), &amp; compareTo()&lt;/td&gt;				&lt;td class='optionB'&gt;Equals()&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;All of these&lt;/td&gt;				&lt;td class='optionD'&gt;None of these&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;C&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 2 &lt;/b&gt; What is the length of the application box made by this program? &lt;pre class='brush:java'&gt; import java.awt.*;&lt;br /&gt;    import java.applet.*;&lt;br /&gt;    public class myapplet extends Applet {&lt;br /&gt;        Graphic g;&lt;br /&gt;        g.drawString("A Simple Applet", 20, 20);    &lt;br /&gt;    }&lt;/pre&gt;	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;20&lt;/td&gt;				&lt;td class='optionB'&gt;Default value &lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;Compilation Error&lt;/td&gt;				&lt;td class='optionD'&gt;Runtime Error&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;C&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 3 &lt;/b&gt; What is the output of this program? &lt;pre class='brush:java'&gt; class string_class {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            String obj = "I LIKE JAVA";   &lt;br /&gt;            System.out.println(obj.charAt(3));&lt;br /&gt;        } &lt;br /&gt;    }&lt;/pre&gt;	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;I&lt;/td&gt;				&lt;td class='optionB'&gt;L&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;K&lt;/td&gt;				&lt;td class='optionD'&gt;E&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;A&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 4 &lt;/b&gt; Objects of a super class cannot always be assigned to a subclass reference. This can only happen if they are in	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;Interference&lt;/td&gt;				&lt;td class='optionB'&gt;Abstract Class&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;Inheritance&lt;/td&gt;				&lt;td class='optionD'&gt;None of the above&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;B&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 5 &lt;/b&gt; What is the name of the thread in output of this program? &lt;pre class='brush:java'&gt; class multithreaded_programing {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            Thread t = Thread.currentThread();&lt;br /&gt;            System.out.println(t.getPriority());        &lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;0&lt;/td&gt;				&lt;td class='optionB'&gt;1&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;4&lt;/td&gt;				&lt;td class='optionD'&gt;5&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;D&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 6 &lt;/b&gt; What is the output of this program? &lt;pre class='brush:java'&gt; class exception_handling {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            try {&lt;br /&gt;                int i, sum;&lt;br /&gt;                sum = 10;&lt;br /&gt;                for (i = -1; i &lt; 3 ;++i) {&lt;br /&gt;                    sum = (sum / i);&lt;br /&gt;                System.out.print(i);&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;            catch(ArithmeticException e) {     	&lt;br /&gt;                System.out.print("0");&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;-1&lt;/td&gt;				&lt;td class='optionB'&gt;-101&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;-10&lt;/td&gt;				&lt;td class='optionD'&gt;0&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;C&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 7 &lt;/b&gt; When we implement the Runnable interface, we must define the method 	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;start()&lt;/td&gt;				&lt;td class='optionB'&gt;run()&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;main()&lt;/td&gt;				&lt;td class='optionD'&gt;init() &lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;B&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 8 &lt;/b&gt; What is the output of this program? &lt;pre class='brush:java'&gt; class equality {&lt;br /&gt;        int x;&lt;br /&gt;        int y;&lt;br /&gt;        boolean isequal() {&lt;br /&gt;            return(x == y);  &lt;br /&gt;        } &lt;br /&gt;    }    &lt;br /&gt;    class Output {&lt;br /&gt;        public static void main(String args[])&lt;br /&gt;        {&lt;br /&gt;            equality obj = new equality();&lt;br /&gt;            obj.x = 5;&lt;br /&gt;            obj.y = 5;&lt;br /&gt;            System.out.println(obj.isequal);        } &lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;true&lt;/td&gt;				&lt;td class='optionB'&gt;false&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;0&lt;/td&gt;				&lt;td class='optionD'&gt;1&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;A&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 9 &lt;/b&gt; What is the output of this program? &lt;pre class='brush:java'&gt; import java.util.*;&lt;br /&gt;    class Maps {&lt;br /&gt;        public static void main(String args[]) {&lt;br /&gt;            TreeMap obj = new TreeMap();&lt;br /&gt;            obj.put("A", new Integer(1));&lt;br /&gt;            obj.put("B", new Integer(2));&lt;br /&gt;            obj.put("C", new Integer(3));&lt;br /&gt;            System.out.println(obj.entrySet());&lt;br /&gt;        }&lt;br /&gt;    }&lt;/pre&gt;	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;[A=1, B=2, C=3]&lt;/td&gt;				&lt;td class='optionB'&gt;[1, 2, 3]&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;[A, B, C]&lt;/td&gt;				&lt;td class='optionD'&gt;{A=1, B=2, C=3}&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;A&lt;/div&gt;			&lt;div class='explanation'&gt;&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class='container-question'&gt;	&lt;div class='question'&gt;		&lt;b&gt;Question 10 &lt;/b&gt; what will be the output int a=0x0055; System.out.println(a);	&lt;/div&gt;	&lt;input name='gvnAnswer' type='hidden' /&gt;	&lt;table cellspacing='1' style='width:100%;'&gt;		&lt;tbody&gt;			&lt;tr&gt;				&lt;td class='optionA'&gt;5&lt;/td&gt;				&lt;td class='optionB'&gt;55&lt;/td&gt;			&lt;/tr&gt;			&lt;tr&gt;				&lt;td class='optionC'&gt;85&lt;/td&gt;				&lt;td class='optionD'&gt;none of these&lt;/td&gt;			&lt;/tr&gt;		&lt;/tbody&gt;	&lt;/table&gt;	&lt;div class='handle'&gt;		&lt;div class='wrapper'&gt;			&lt;div class='view-solution'&gt;&lt;/div&gt;			&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;/div&gt;		&lt;div class='clearfix'&gt;&lt;/div&gt;		&lt;div class='solution collapse'&gt;			&lt;div class='answer'&gt;C&lt;/div&gt;			&lt;div class='explanation'&gt;0x represents a hexadecimal number, therefore 0x0055 =16&lt;sup&gt;1&lt;/sup&gt;x5 + 16&lt;sup&gt;0&lt;/sup&gt;x5                  =80+5                  =85&lt;/div&gt;		&lt;/div&gt;	&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/88743349281006025'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/88743349281006025'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/test.html' title='test'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-2600244524949860649</id><published>2015-04-14T11:51:00.000+05:30</published><updated>2015-04-14T11:51:04.275+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Database</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Database Concepts&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/how-to-view-table-schema-in-mysql.html" target="_blank"&gt;How to view Table Schema in Mysql.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/how-to-ignore-foreign-key-constraint-failure-in-database.html" target="_blank"&gt;How to ignore Foreign Key Constraints&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Database Questions &amp;amp; Queries &lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/how-to-select-second-largest-value-from-a-table-in-database.html" target="_blank"&gt;How to select second largest value from a table.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/how-to-insert-values-in-table-from-another-table-in-mysql.html" target="_blank"&gt;How to insert values in a table from another table.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/how-to-create-database-dump-in-mysql.html" target="_blank"&gt;How to create a database dump using mysqldump.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Utils&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/how-to-create-database-dump-in-mysql.html"&gt;How to take dump of a database in MYSQL.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/04/how-to-restore-dump-of-single-database-from-dump-in-mysql.html"&gt;How to restore single database from a dump file.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2600244524949860649'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2600244524949860649'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/databases.html' title='Database'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-8063621709923875046</id><published>2015-02-16T01:17:00.000+05:30</published><updated>2015-02-16T01:17:27.503+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java Exceptions Handling</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/how-to-create-custom-exception-in-java.html" target="_blank"&gt;How to create Custom Exceptions.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/how-to-create-nested-custom-exceptions-in-java.html" target="_blank"&gt;How to create Nested Exceptions.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Predefined Exceptions&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;FileNotFoundException&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.ekiras.com/2015/02/what-is-noclassdeffoundexception-in-java.html" target="_blank"&gt;NoClassDefFoundException&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8063621709923875046'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8063621709923875046'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-exceptions.html' title='Java Exceptions Handling'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-2786512120350213992</id><published>2015-02-12T21:20:00.001+05:30</published><updated>2015-02-12T21:20:55.231+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>About Me</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div&gt;&lt;div class="col-lg-3"&gt;&lt;img class="img-circle img-thumbnail img-responsive center-block" src="http://4.bp.blogspot.com/-cCNX8Kyj6Jg/VND_m73g-DI/AAAAAAAAAMc/XyZ2need8T8/s320/rsz_1wp_20141113_13_55_24_selfie.png" /&gt;  &lt;/div&gt;&lt;div class="col-lg-9"&gt;&lt;div class="well"&gt;&lt;h1&gt;     Hello, I am &lt;b&gt;EKANSH RASTOGI&lt;/b&gt;    &lt;/h1&gt;&lt;div class="divider-h"&gt;&lt;/div&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do     eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim     ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut     aliquip ex ea commodo consequat. Duis aute irure dolor in     reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla     pariatur. Excepteur sint occaecat cupidatat non proident, sunt in     culpa qui officia deserunt mollit anim id est laborum.    &lt;/div&gt;&lt;/div&gt;&lt;div class="clearfix"&gt;&lt;/div&gt;&lt;/div&gt; &lt;div class="panel panel-info flat"&gt;  &lt;div class="panel-heading  flat"&gt;    &lt;h3 class="panel-title"&gt;Contact Details&lt;/h3&gt;  &lt;/div&gt;  &lt;div class="panel-body  flat"&gt;     &lt;div class="row"&gt;      &lt;div class="col-lg-6 col-md-6"&gt;         &lt;div class="panel panel-default  flat"&gt;            &lt;div class="panel-heading  flat"&gt;              &lt;h3 class="panel-title"&gt;Contact Email&lt;/h3&gt;            &lt;/div&gt;           &lt;div class="panel-body"&gt;              &lt;ul&gt;               &lt;li&gt;ekanshrastogi@outlook.com&lt;/li&gt;               &lt;li&gt;eki.ekjam@gmail.com&lt;/li&gt;              &lt;/ul&gt;           &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;      &lt;div class="col-lg-6 col-md-6"&gt;         &lt;div class="panel panel-default  flat"&gt;            &lt;div class="panel-heading flat"&gt;              &lt;h3 class="panel-title"&gt;Phone Number&lt;/h3&gt;            &lt;/div&gt;           &lt;div class="panel-body flat"&gt;                              &lt;ul&gt;               &lt;li&gt;+91-9899694740&lt;/li&gt;               &lt;li&gt;+91-9899409796&lt;/li&gt;              &lt;/ul&gt;           &lt;/div&gt;        &lt;/div&gt;      &lt;/div&gt;     &lt;/div&gt;   &lt;/div&gt;&lt;/div&gt;  &lt;div class="well flat"&gt;&lt;h3&gt;Contact Form&lt;/h3&gt;&lt;div class="divider-h"&gt;&lt;/div&gt;&lt;div class="gutter"&gt;&lt;/div&gt;&lt;form name="contact-form"&gt;&lt;div class="input-group"&gt;&lt;span class="input-group-addon" id="contact-name"&gt;Your Name &lt;/span&gt;    &lt;input class="form-control" id="ContactForm1_contact-form-name" name="name" placeholder="Your Name" size="30" type="text" value="" /&gt;   &lt;/div&gt;&lt;div class="gutter"&gt;&lt;/div&gt;&lt;div class="input-group"&gt;&lt;span class="input-group-addon" id="contact-email"&gt;Your      Email&amp;nbsp;&lt;/span&gt; &lt;input class="form-control" id="ContactForm1_contact-form-email" name="email" placeholder="Email Id" type="text" value="" /&gt;   &lt;/div&gt;&lt;div class="gutter"&gt;&lt;/div&gt;&lt;div class="input-group"&gt;&lt;span class="input-group-addon" id="basic-addon1"&gt;Message&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;    &lt;textarea class="form-control" cols="25" id="ContactForm1_contact-form-email-message" name="email-message" placeholder="Enter your message here" rows="5"&gt;&lt;/textarea&gt;   &lt;/div&gt;&lt;div class="gutter"&gt;&lt;/div&gt;&lt;input class="btn btn-primary btn-lg flat" id="ContactForm1_contact-form-submit" type="button" value="Send Message" /&gt;    &lt;br /&gt;&lt;div class="gutter"&gt;&lt;/div&gt;&lt;div style="text-align: center; width: 100%;"&gt;&lt;div class="contact-form-error-message" id="ContactForm1_contact-form-error-message"&gt;&lt;/div&gt;&lt;div class="contact-form-success-message" id="ContactForm1_contact-form-success-message"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/form&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2786512120350213992'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2786512120350213992'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/about-me.html' title='About Me'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://4.bp.blogspot.com/-cCNX8Kyj6Jg/VND_m73g-DI/AAAAAAAAAMc/XyZ2need8T8/s72-c/rsz_1wp_20141113_13_55_24_selfie.png' height='72' width='72'/></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-7975435080901798543</id><published>2015-02-05T03:37:00.000+05:30</published><updated>2015-02-05T03:37:17.672+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>J2EE</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;J2EE Concepts&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-jsp-in-java-j2ee.html" target="_blank"&gt;What is a JSP in  Java J2EE ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;What is a Servlet ?&lt;/li&gt;&lt;li&gt;How to make a class behave like a servlet ?&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/01/what-is-servletconfig-and-how-to-get-servletconfig-in-servlet.html" target="_blank"&gt;What is servlet config and how to get servlet config object.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-servlet-is-initialized-by-servlet-container.html" target="_blank"&gt;How a Servlet is Initialized by Servlet Container.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/can-servlet-have-constructor.html" target="_blank"&gt;Can a Servlet have a Constructor ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-are-filters-in-java-j2ee.html" target="_blank"&gt;What are filters and how to use them.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;What is an Interceptor ?&lt;/li&gt;&lt;li&gt;What is a Listner ?&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/02/how-to-create-custom-404-error-page-in-web-xml.html" target="_blank"&gt;How to define Custom Error Pages.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7975435080901798543'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/7975435080901798543'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-j2ee.html' title='J2EE'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-3361134491437752299</id><published>2015-02-03T01:19:00.001+05:30</published><updated>2015-02-03T01:19:40.637+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java Interview Questions</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/difference-between-method-overloading-and-method-overriding.html" target="_blank"&gt;Difference between Method Overloading and Method Overriding.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-difference-between-enumeration-and-iterator-in-java.html" target="_blank"&gt;Difference between Enumeration and Iterator.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-the-difference-between-interface-and-abstract-class-in-java.html" target="_blank"&gt;Difference between Interface and Abstract Class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-the-difference-between-comparator-and-comparable-interfaces.html" target="_blank"&gt;Difference between Comparable and Comparator Interfaces.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/difference-between-hashmap-and-hashtable.html" target="_blank"&gt;Difference between HashMap and HashTable.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Difference between String, String Builder and StringBuffer&lt;/li&gt;&lt;li&gt;Difference between final and finally.&lt;/li&gt;&lt;li&gt;Difference between JDK and JRE&lt;/li&gt;&lt;li&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3361134491437752299'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3361134491437752299'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-interview-questions.html' title='Java Interview Questions'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-1938590168106131876</id><published>2015-02-02T16:35:00.000+05:30</published><updated>2015-02-02T16:35:44.132+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java Collection API</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ol&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/how-does-hashmap-works-internally-in-java.html" target="_blank"&gt;Internal working of HashMap.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-add-objects-in-hashmap.html" target="_blank"&gt;Adding Objects to a HashMap.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/how-to-iterate-over-hashmap-collection.html" target="_blank"&gt;Iterating through a HashMap.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/how-set-works-internally-in-java.html" target="_blank"&gt;Internal Working of HashSet.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-treeset-in-java-and-why-treeset-is-used.html" target="_blank"&gt;How does a TreeSet Works in Java.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/how-to-sort-objects-using-comparable-interface.html" target="_blank"&gt;Sorting collection of objects by implementing Comparable Interface.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/how-to-sort-objects-using-comparator-interface-in-java.html" target="_blank"&gt;Sorting collection of objects by implementing Comparator Interface.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/1938590168106131876'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/1938590168106131876'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-collection-api.html' title='Java Collection API'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-6504913834431715937</id><published>2015-02-02T16:31:00.000+05:30</published><updated>2015-02-02T16:31:37.587+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Java Concepts</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-are-classes-in-java.html" target="_blank"&gt;What are Classes.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/08/what-are-objects-in-java.html" target="_blank"&gt;What are Objects.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-are-different-ways-of-creating-objects-in-java.html" target="_blank"&gt;Different ways of creating an Object.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/can-we-have-private-constructor-in-class-in-java.html" target="_blank"&gt;Can we have a Private Constructor in a Java class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/why-main-method-in-java-is-public.html" target="_blank"&gt;Why main() method in  java is public static void.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/multiple-main-methods-in-java.html" target="_blank"&gt;Multiple main() methods in a java class.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/what-are-marker-interfaces-in-java.html" target="_blank"&gt;What are Marker Interfaces and how are they different from normal Interfaces ?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/overriding-equals-method-of-object.html" target="_blank"&gt;Overriding equals() method.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/how-does-equals-method-work-in-java.html" target="_blank"&gt;What is the purpose of equals() method and when to use it.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/contract-between-equals-and-hashcode-methods-in-java.html" target="_blank"&gt;Contract between equals() and hashCode() methods.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-method-overriding-in-java.html" target="_blank"&gt;What is Method Overriding.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-method-overloading-in-java.html" target="_blank"&gt;What is Method Overloading.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-is-final-keyword-in-java.html" target="_blank"&gt;Purpose of Final keyword.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/what-are-static-variables-in-java.html" target="_blank"&gt;What are static variables.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/09/what-is-static-block-in-java.html" target="_blank"&gt;What are static blocks.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/can-we-override-static-method-in-java.html" target="_blank"&gt;Can we override a static method.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Why strings are mutable.&lt;/li&gt;&lt;li&gt;Ways to iterate a Collection object.&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/difference-between-classnotfoundexception-and-noclassdeffounderror.html" target="_blank"&gt;What are ClassNotFoundException and NoClassDefFoundError.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6504913834431715937'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6504913834431715937'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/java-concepts.html' title='Java Concepts'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-2122107898573815371</id><published>2015-01-26T18:57:00.000+05:30</published><updated>2015-01-26T18:57:36.083+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Quantitative Aptitude</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Numbers&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/finding-highest-power-of-number.html" target="_blank"&gt;Finding highest power of a number in a given number.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/finding-number-of-zeros-in-number.html" target="_blank"&gt;Finding number of zeros in a number or factorial.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/finding-remainders.html" target="_blank"&gt;Finding Remainders.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/finding-last-digit-of-number.html" target="_blank"&gt;Find the last digit of a number.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/finding-last-two-digits.html" target="_blank"&gt;Finding last two digits.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/11/lcm-with-remainders.html" target="_blank"&gt;LCM with Remainders.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/12/finding-number-of-factors-of-number.html" target="_blank"&gt;Finding number of factors of a number.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Finding sum of factors of a number&lt;/li&gt;&lt;li&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Averages&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/11/simple-averages.html" target="_blank"&gt;Simple Averages.&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2015/01/weighted-averages.html" target="_blank"&gt;Weighted Averages.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Allegations&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-random-java-test-1.html" target="_blank"&gt;C&lt;/a&gt;oming Soon&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2122107898573815371'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/2122107898573815371'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/quantitative-aptitude.html' title='Quantitative Aptitude'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-8272867862924052982</id><published>2014-12-17T01:16:00.000+05:30</published><updated>2014-12-17T01:16:46.431+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>JASIG Central Authentication Service</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;JASIG CAS Server&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a class="GCUXF0KCPB" href="http://ekiras.blogspot.in/2014/12/how-to-setup-and-configure-cas-central-authentication-service.html" target="_blank"&gt;How to setup and configure CAS - Central Authentication Service&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="GCUXF0KCPB" href="http://ekiras.blogspot.in/2014/12/how-to-setup-and-configure-cas-with-database.html"  target="_blank"&gt;How to setup &amp;amp; configure CAS with Database&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="GCUXF0KCPB" href="http://ekiras.blogspot.in/2014/12/how-to-configure-cas-rest-api-and-test-reponse.html"  target="_blank"&gt;CAS Rest API Integration and Testing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="GCUXF0KCPB" href="http://ekiras.blogspot.in/2014/12/test-cas-rest-api-from-java-code.html" target="_blank"&gt;Test CAS Rest API from Java Code&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8272867862924052982'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8272867862924052982'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/central-authentication-service.html' title='JASIG Central Authentication Service'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-6310706089594927924</id><published>2014-12-03T18:12:00.000+05:30</published><updated>2014-12-03T18:12:56.438+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Home</title><content type='html'>&lt;div class="cell-container"&gt;                                   &lt;div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 pull-left"&gt;                                        &lt;div class="cell"&gt;        &lt;div class="head"&gt;Java&lt;/div&gt;      &lt;div class="body"&gt;         &lt;ul&gt;             &lt;li&gt;&lt;a href='http://ekiras.blogspot.in/p/java.html'&gt;Concepts&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href='http://ekiras.blogspot.in/p/mcq-tests-on-java.html'&gt;Tests&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href='http://ekiras.blogspot.in/p/java-interview-questions.html'&gt;Interview Questions&lt;/a&gt;&lt;/li&gt;                                                   &lt;/ul&gt;       &lt;/div&gt;     &lt;/div&gt;                                   &lt;/div&gt;                                   &lt;div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 pull-left"&gt;                                        &lt;div class="cell"&gt;        &lt;div class="head"&gt;Database&lt;/div&gt;      &lt;div class="body"&gt;         &lt;ul&gt;             &lt;li&gt;&lt;a&gt;Concepts&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a&gt;Tests&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a&gt;Interview Questions&lt;/a&gt;&lt;/li&gt;                                                   &lt;/ul&gt;       &lt;/div&gt;     &lt;/div&gt;                                   &lt;/div&gt;                                   &lt;div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 pull-left"&gt;                                        &lt;div class="cell"&gt;        &lt;div class="head"&gt;J2EE&lt;/div&gt;      &lt;div class="body"&gt;         &lt;ul&gt;             &lt;li&gt;&lt;a href='http://ekiras.blogspot.in/p/java-j2ee.html'&gt;Concepts&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href='http://ekiras.blogspot.in/p/mcq-tests-on-j2ee.html'&gt;Tests&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a&gt;Interview Questions&lt;/a&gt;&lt;/li&gt;                                                   &lt;/ul&gt;       &lt;/div&gt;     &lt;/div&gt;                                   &lt;/div&gt;                                   &lt;div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 pull-left"&gt;                                        &lt;div class="cell"&gt;        &lt;div class="head"&gt;Quantitative Aptitude&lt;/div&gt;      &lt;div class="body"&gt;         &lt;ul&gt;             &lt;li&gt;&lt;a href='http://ekiras.blogspot.in/p/quantitative-aptitude.html'&gt;Concepts&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a href='http://ekiras.blogspot.in/p/mcq-tests-on-j2ee.html'&gt;Tests&lt;/a&gt;&lt;/li&gt;           &lt;li&gt;&lt;a&gt;Interview Questions&lt;/a&gt;&lt;/li&gt;                                                   &lt;/ul&gt;       &lt;/div&gt;     &lt;/div&gt;                                   &lt;/div&gt;                                   &lt;div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 pull-left"&gt;                                        &lt;div class="cell"&gt;        &lt;div class="head"&gt;Logical Reasoning&lt;/div&gt;     &lt;/div&gt;                                   &lt;/div&gt;                                   &lt;div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 pull-left"&gt;                                        &lt;div class="cell"&gt;        &lt;div class="head"&gt;Data Interpretation&lt;/div&gt;     &lt;/div&gt;                                   &lt;/div&gt;    &lt;/div&gt; </content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6310706089594927924'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6310706089594927924'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/home.html' title='Home'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-9089784583843981855</id><published>2014-11-24T14:22:00.000+05:30</published><updated>2014-11-24T14:22:40.590+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Groovy &amp; Grails</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Grails&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/11/render-html-string-in-gsp-in-grails.html" target="_blank"&gt;Render Strings as HTML in Gsp's, Controllers.&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Difference Between&lt;/div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/08/difference-between-grails-respond-and.html" target="_blank"&gt;Difference between grails Render and Repond&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/9089784583843981855'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/9089784583843981855'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/groovy-grails.html' title='Groovy &amp; Grails'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-6106470883253343077</id><published>2014-11-14T00:14:00.000+05:30</published><updated>2014-11-14T00:14:50.611+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>MCQ Tests on J2EE</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6106470883253343077'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/6106470883253343077'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/mcq-tests-on-j2ee.html' title='MCQ Tests on J2EE'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-8774309253030174376</id><published>2014-11-13T22:43:00.003+05:30</published><updated>2014-11-13T22:43:59.476+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>MCQ Tests on Java</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Random Tests&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-random-java-test-1.html" target="_blank"&gt;Test 1&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Topic Wise Tests&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Fundamentals Of Java&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-fundamentals-of-java.html" target="_blank"&gt;Test 1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-fundamentals-of-java-test2.html"&gt;Test 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-java-test-1.html" target="_blank"&gt;Access Specifiers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-constructors-in-java.html" target="_blank"&gt;Constructors&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/mcqs-on-static-keyword-in-java.html" target="_blank"&gt;Static Keyword&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-method-overloading.html" target="_blank"&gt;Method Overloading&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-method-overriding.html" target="_blank"&gt;Method Overriding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/mcqs-on-internal-working-of-hashmap-in-java.html" target="_blank"&gt;Internal Working Of HashMaps&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8774309253030174376'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/8774309253030174376'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/mcq-tests-on-java.html' title='MCQ Tests on Java'/><author><name>Ekansh Rastogi</name><uri>https://www.blogger.com/profile/06610091344702517254</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//2.bp.blogspot.com/-gfGKIItQVQU/V3F6P6fnfmI/AAAAAAAAIxM/opABdh8L_l0g1-QGWkvnvQpDAwrrDRxsQCK4B/s32/9967270%253Fv%253D3%2526s%253D460'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-239643566815803838</id><published>2014-10-30T02:45:00.000+05:30</published><updated>2014-10-30T02:45:33.183+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Test Template</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;pre class="brush : html"&gt;&amp;lt;div id="test-controller"&amp;gt;&lt;br /&gt;&amp;lt;div class="info"&amp;gt;This test contains 10 questions based on &amp;lt;b&amp;gt;Topic Of Test&amp;lt;/b&amp;gt;. &lt;br /&gt; &amp;lt;br /&amp;gt;Each question answered correctly awards you 1 point and each incorrect answer has a penalty of -0.25 points, no points are deducted for unattempted answers.&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;h3&amp;gt;Select Test Type&amp;lt;/h3&amp;gt;&lt;br /&gt; &amp;lt;button class="timed-test" onclick="startTest('timed');"&amp;gt;Timed Test&amp;lt;/button&amp;gt;&lt;br /&gt; &amp;lt;button class="untimed-test" onclick="startTest('untimed');"&amp;gt;UnTimed Test&amp;lt;/button&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;div id="test-container" class="hidden"&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;div id="instructions"&amp;gt;&lt;br /&gt; &amp;lt;div&amp;gt;&amp;lt;b&amp;gt;You Get +1 for each correct answer and -0.25 for each incorrect answer&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;div class="test-timer-container"&amp;gt;&lt;br /&gt;   &amp;lt;div id="test-timer" class="hidden"&amp;gt;&lt;br /&gt;    &amp;lt;span&amp;gt;Time Left - &amp;lt;/span&amp;gt;&lt;br /&gt;    &amp;lt;span&amp;gt;minutes&amp;lt;/span&amp;gt;&lt;br /&gt;    &amp;lt;span&amp;gt;:&amp;lt;/span&amp;gt;&lt;br /&gt;    &amp;lt;span&amp;gt;seconds&amp;lt;/span&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;div id="test-score"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question1&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;C&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question2&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;B&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question3&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;C&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question4&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;C&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question5&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt;  &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;C&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question6&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;D&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question7&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;Der&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question8&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;D&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question9&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;A&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;div class="container-question"&amp;gt;&lt;br /&gt; &amp;lt;div class="question"&amp;gt;question10&amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;input type="hidden" name="gvnAnswer"&amp;gt;&lt;br /&gt; &amp;lt;table width="100%" cellspacing='1'&amp;gt;&lt;br /&gt;    &amp;lt;tbody&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt; &lt;br /&gt;        &amp;lt;td class="optionA"&amp;gt;optionA&amp;lt;/td&amp;gt;&lt;br /&gt;        &amp;lt;td class="optionB"&amp;gt;optionB&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;     &amp;lt;tr&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionC"&amp;gt;optionC&amp;lt;/td&amp;gt;&lt;br /&gt;       &amp;lt;td class="optionD"&amp;gt;optionD&amp;lt;/td&amp;gt;&lt;br /&gt;     &amp;lt;/tr&amp;gt;&lt;br /&gt;    &amp;lt;/tbody&amp;gt;&lt;br /&gt; &amp;lt;/table&amp;gt; &lt;br /&gt; &amp;lt;div class="handle hidden"&amp;gt;&lt;br /&gt;   &amp;lt;div class="view-solution"&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;div class="solution hidden"&amp;gt;&lt;br /&gt;      &amp;lt;div class="answer"&amp;gt;B&amp;lt;/div&amp;gt;&lt;br /&gt;      &amp;lt;div class="explanation"&amp;gt;Explanation&amp;lt;/div&amp;gt;&lt;br /&gt;   &amp;lt;/div&amp;gt;&lt;br /&gt; &amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;br /&amp;gt;&lt;br /&gt;&amp;lt;div class="test-finish"&amp;gt;Finish Test&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/239643566815803838'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/239643566815803838'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/test-template.html' title='Test Template'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-5485242750509374114.page-3078268324091824083</id><published>2014-10-30T02:26:00.000+05:30</published><updated>2014-10-30T02:26:50.274+05:30</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Tests</title><content type='html'>&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Quantitative Aptitude&lt;/div&gt;&lt;div class="body"&gt;&lt;br /&gt;Coming Soon&lt;/div&gt;&lt;/div&gt;&lt;div class="accordion"&gt;&lt;div class="title"&gt;Java&lt;/div&gt;&lt;div class="body"&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Random&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-random-java-test-1.html" target="_blank"&gt;Test 1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Fundamentals Of Java&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-fundamentals-of-java.html" target="_blank"&gt;Test 1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-fundamentals-of-java-test2.html"&gt;Test 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-java-test-1.html" target="_blank"&gt;Access Specifiers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-constructors-in-java.html" target="_blank"&gt;Constructors&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/09/mcqs-on-static-keyword-in-java.html" target="_blank"&gt;Static Keyword&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/java-mcqs-on-method-overloading.html" target="_blank"&gt;Method Overloading&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.com/2014/10/java-mcqs-on-method-overriding.html" target="_blank"&gt;Method Overriding&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://ekiras.blogspot.in/2014/10/mcqs-on-internal-working-of-hashmap-in-java.html" target="_blank"&gt;Internal Working Of HashMaps&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3078268324091824083'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/5485242750509374114/pages/default/3078268324091824083'/><link rel='alternate' type='text/html' href='http://ekiras.blogspot.com/p/tests.html' title='Tests'/><author><name>Ekansh Rastogi</name><uri>https://plus.google.com/114600164626961919365</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-MQ5nZ1L89ms/AAAAAAAAAAI/AAAAAAAAAEs/m9fsNhww8Ss/s32-c/photo.jpg'/></author></entry></feed>